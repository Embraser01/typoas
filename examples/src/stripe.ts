import * as r from '@typoas/runtime';
/**
 * Account
 * This is an object representing a Stripe account. You can retrieve it to see
 * properties on the account like its current requirements or if the account is
 * enabled to make live charges or receive payouts.
 *
 * For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
 * is `application`, which includes Custom accounts, the properties below are always
 * returned.
 *
 * For accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection)
 * is `stripe`, which includes Standard and Express accounts, some properties are only returned
 * until you create an [Account Link](/api/account_links) or [Account Session](/api/account_sessions)
 * to start Connect Onboarding. Learn about the [differences between accounts](/connect/accounts).
 */
export type Account = {
  /**
   * Business information about the account.
   */
  business_profile?: AccountBusinessProfile | null;
  /**
   * The business type.
   */
  business_type?:
    | ('company' | 'government_entity' | 'individual' | 'non_profit')
    | null;
  capabilities?: AccountCapabilities;
  /**
   * Whether the account can process charges.
   */
  charges_enabled?: boolean;
  company?: LegalEntityCompany;
  controller?: AccountUnificationAccountController;
  /**
   * The account's country.
   */
  country?: string;
  /**
   * Time at which the account was connected. Measured in seconds since the Unix epoch.
   */
  created?: number;
  /**
   * Three-letter ISO currency code representing the default currency for the account. This must be a currency that [Stripe supports in the account's country](https://stripe.com/docs/payouts).
   */
  default_currency?: string;
  /**
   * Whether account details have been submitted. Accounts with Stripe Dashboard access, which includes Standard accounts, cannot receive payouts before this is true. Accounts where this is false should be directed to [an onboarding flow](/connect/onboarding) to finish submitting account details.
   */
  details_submitted?: boolean;
  /**
   * An email address associated with the account. It's not used for authentication and Stripe doesn't market to this field without explicit approval from the platform.
   */
  email?: string | null;
  /**
   * ExternalAccountList
   * External accounts (bank accounts and debit cards) currently attached to this account. External accounts are only returned for requests where `controller[is_controller]` is true.
   */
  external_accounts?: {
    /**
     * The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
     */
    data: (BankAccount | Card)[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  future_requirements?: AccountFutureRequirements;
  /**
   * The groups associated with the account.
   */
  groups?: AccountGroupMembership | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  individual?: Person;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'account';
  /**
   * Whether the funds in this account can be paid out.
   */
  payouts_enabled?: boolean;
  requirements?: AccountRequirements;
  /**
   * Options for customizing how the account functions within Stripe.
   */
  settings?: AccountSettings | null;
  tos_acceptance?: AccountTosAcceptance;
  /**
   * The Stripe account type. Can be `standard`, `express`, `custom`, or `none`.
   */
  type?: 'custom' | 'express' | 'none' | 'standard';
};
/**
 * AccountAnnualRevenue
 */
export type AccountAnnualRevenue = {
  /**
   * A non-negative integer representing the amount in the [smallest currency unit](/currencies#zero-decimal).
   */
  amount?: number | null;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency?: string | null;
  /**
   * The close-out date of the preceding fiscal year in ISO 8601 format. E.g. 2023-12-31 for the 31st of December, 2023.
   */
  fiscal_year_end?: string | null;
};
/**
 * AccountBacsDebitPaymentsSettings
 */
export type AccountBacsDebitPaymentsSettings = {
  /**
   * The Bacs Direct Debit display name for this account. For payments made with Bacs Direct Debit, this name appears on the mandate as the statement descriptor. Mobile banking apps display it as the name of the business. To use custom branding, set the Bacs Direct Debit Display Name during or right after creation. Custom branding incurs an additional monthly fee for the platform. The fee appears 5 business days after requesting Bacs. If you don't set the display name before requesting Bacs capability, it's automatically set as "Stripe" and the account is onboarded to Stripe branding, which is free.
   */
  display_name?: string | null;
  /**
   * The Bacs Direct Debit Service user number for this account. For payments made with Bacs Direct Debit, this number is a unique identifier of the account with our banking partners.
   */
  service_user_number?: string | null;
};
/**
 * AccountBrandingSettings
 */
export type AccountBrandingSettings = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) An icon for the account. Must be square and at least 128px x 128px.
   */
  icon?: (string | File) | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A logo for the account that will be used in Checkout instead of the icon and without the account's name next to it if provided. Must be at least 128px x 128px.
   */
  logo?: (string | File) | null;
  /**
   * A CSS hex color value representing the primary branding color for this account
   */
  primary_color?: string | null;
  /**
   * A CSS hex color value representing the secondary branding color for this account
   */
  secondary_color?: string | null;
};
/**
 * AccountBusinessProfile
 */
export type AccountBusinessProfile = {
  /**
   * The applicant's gross annual revenue for its preceding fiscal year.
   */
  annual_revenue?: AccountAnnualRevenue | null;
  /**
   * An estimated upper bound of employees, contractors, vendors, etc. currently working for the business.
   */
  estimated_worker_count?: number | null;
  /**
   * [The merchant category code for the account](/connect/setting-mcc). MCCs are used to classify businesses based on the goods or services they provide.
   */
  mcc?: string | null;
  /**
   * Whether the business is a minority-owned, women-owned, and/or LGBTQI+-owned business.
   */
  minority_owned_business_designation?:
    | (
        | 'lgbtqi_owned_business'
        | 'minority_owned_business'
        | 'none_of_these_apply'
        | 'prefer_not_to_answer'
        | 'women_owned_business'
      )[]
    | null;
  monthly_estimated_revenue?: AccountMonthlyEstimatedRevenue;
  /**
   * The customer-facing business name.
   */
  name?: string | null;
  /**
   * Internal-only description of the product sold or service provided by the business. It's used by Stripe for risk and underwriting purposes.
   */
  product_description?: string | null;
  /**
   * A publicly available mailing address for sending support issues to.
   */
  support_address?: Address | null;
  /**
   * A publicly available email address for sending support issues to.
   */
  support_email?: string | null;
  /**
   * A publicly available phone number to call with support issues.
   */
  support_phone?: string | null;
  /**
   * A publicly available website for handling support issues.
   */
  support_url?: string | null;
  /**
   * The business's publicly available website.
   */
  url?: string | null;
};
/**
 * AccountCapabilities
 */
export type AccountCapabilities = {
  /**
   * The status of the Canadian pre-authorized debits payments capability of the account, or whether the account can directly process Canadian pre-authorized debits charges.
   */
  acss_debit_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Affirm capability of the account, or whether the account can directly process Affirm charges.
   */
  affirm_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Afterpay Clearpay capability of the account, or whether the account can directly process Afterpay Clearpay charges.
   */
  afterpay_clearpay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Alma capability of the account, or whether the account can directly process Alma payments.
   */
  alma_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the AmazonPay capability of the account, or whether the account can directly process AmazonPay payments.
   */
  amazon_pay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the BECS Direct Debit (AU) payments capability of the account, or whether the account can directly process BECS Direct Debit (AU) charges.
   */
  au_becs_debit_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Bacs Direct Debits payments capability of the account, or whether the account can directly process Bacs Direct Debits charges.
   */
  bacs_debit_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Bancontact payments capability of the account, or whether the account can directly process Bancontact charges.
   */
  bancontact_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the customer_balance payments capability of the account, or whether the account can directly process customer_balance charges.
   */
  bank_transfer_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Billie capability of the account, or whether the account can directly process Billie payments.
   */
  billie_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the blik payments capability of the account, or whether the account can directly process blik charges.
   */
  blik_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the boleto payments capability of the account, or whether the account can directly process boleto charges.
   */
  boleto_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the card issuing capability of the account, or whether you can use Issuing to distribute funds on cards
   */
  card_issuing?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the card payments capability of the account, or whether the account can directly process credit and debit card charges.
   */
  card_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Cartes Bancaires payments capability of the account, or whether the account can directly process Cartes Bancaires card charges in EUR currency.
   */
  cartes_bancaires_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Cash App Pay capability of the account, or whether the account can directly process Cash App Pay payments.
   */
  cashapp_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the EPS payments capability of the account, or whether the account can directly process EPS charges.
   */
  eps_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the FPX payments capability of the account, or whether the account can directly process FPX charges.
   */
  fpx_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the GB customer_balance payments (GBP currency) capability of the account, or whether the account can directly process GB customer_balance charges.
   */
  gb_bank_transfer_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the giropay payments capability of the account, or whether the account can directly process giropay charges.
   */
  giropay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the GrabPay payments capability of the account, or whether the account can directly process GrabPay charges.
   */
  grabpay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the iDEAL payments capability of the account, or whether the account can directly process iDEAL charges.
   */
  ideal_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the india_international_payments capability of the account, or whether the account can process international charges (non INR) in India.
   */
  india_international_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the JCB payments capability of the account, or whether the account (Japan only) can directly process JCB credit card charges in JPY currency.
   */
  jcb_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Japanese customer_balance payments (JPY currency) capability of the account, or whether the account can directly process Japanese customer_balance charges.
   */
  jp_bank_transfer_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the KakaoPay capability of the account, or whether the account can directly process KakaoPay payments.
   */
  kakao_pay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Klarna payments capability of the account, or whether the account can directly process Klarna charges.
   */
  klarna_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the konbini payments capability of the account, or whether the account can directly process konbini charges.
   */
  konbini_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the KrCard capability of the account, or whether the account can directly process KrCard payments.
   */
  kr_card_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the legacy payments capability of the account.
   */
  legacy_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the link_payments capability of the account, or whether the account can directly process Link charges.
   */
  link_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the MobilePay capability of the account, or whether the account can directly process MobilePay charges.
   */
  mobilepay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Multibanco payments capability of the account, or whether the account can directly process Multibanco charges.
   */
  multibanco_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Mexican customer_balance payments (MXN currency) capability of the account, or whether the account can directly process Mexican customer_balance charges.
   */
  mx_bank_transfer_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the NaverPay capability of the account, or whether the account can directly process NaverPay payments.
   */
  naver_pay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the New Zealand BECS Direct Debit payments capability of the account, or whether the account can directly process New Zealand BECS Direct Debit charges.
   */
  nz_bank_account_becs_debit_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the OXXO payments capability of the account, or whether the account can directly process OXXO charges.
   */
  oxxo_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the P24 payments capability of the account, or whether the account can directly process P24 charges.
   */
  p24_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the pay_by_bank payments capability of the account, or whether the account can directly process pay_by_bank charges.
   */
  pay_by_bank_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Payco capability of the account, or whether the account can directly process Payco payments.
   */
  payco_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the paynow payments capability of the account, or whether the account can directly process paynow charges.
   */
  paynow_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the pix payments capability of the account, or whether the account can directly process pix charges.
   */
  pix_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the promptpay payments capability of the account, or whether the account can directly process promptpay charges.
   */
  promptpay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the RevolutPay capability of the account, or whether the account can directly process RevolutPay payments.
   */
  revolut_pay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the SamsungPay capability of the account, or whether the account can directly process SamsungPay payments.
   */
  samsung_pay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Satispay capability of the account, or whether the account can directly process Satispay payments.
   */
  satispay_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the SEPA customer_balance payments (EUR currency) capability of the account, or whether the account can directly process SEPA customer_balance charges.
   */
  sepa_bank_transfer_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the SEPA Direct Debits payments capability of the account, or whether the account can directly process SEPA Direct Debits charges.
   */
  sepa_debit_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Sofort payments capability of the account, or whether the account can directly process Sofort charges.
   */
  sofort_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Swish capability of the account, or whether the account can directly process Swish payments.
   */
  swish_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the tax reporting 1099-K (US) capability of the account.
   */
  tax_reporting_us_1099_k?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the tax reporting 1099-MISC (US) capability of the account.
   */
  tax_reporting_us_1099_misc?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the transfers capability of the account, or whether your platform can transfer funds to the account.
   */
  transfers?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the banking capability, or whether the account can have bank accounts.
   */
  treasury?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the TWINT capability of the account, or whether the account can directly process TWINT charges.
   */
  twint_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the US bank account ACH payments capability of the account, or whether the account can directly process US bank account charges.
   */
  us_bank_account_ach_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the US customer_balance payments (USD currency) capability of the account, or whether the account can directly process US customer_balance charges.
   */
  us_bank_transfer_payments?: 'active' | 'inactive' | 'pending';
  /**
   * The status of the Zip capability of the account, or whether the account can directly process Zip charges.
   */
  zip_payments?: 'active' | 'inactive' | 'pending';
};
/**
 * AccountCapabilityFutureRequirements
 */
export type AccountCapabilityFutureRequirements = {
  /**
   * Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
   */
  alternatives?: AccountRequirementsAlternative[] | null;
  /**
   * Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on the capability's enablement state prior to transitioning.
   */
  current_deadline?: number | null;
  /**
   * Fields that need to be collected to keep the capability enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
   */
  currently_due: string[];
  /**
   * This is typed as an enum for consistency with `requirements.disabled_reason`, but it safe to assume `future_requirements.disabled_reason` is null because fields in `future_requirements` will never disable the account.
   */
  disabled_reason?:
    | (
        | 'other'
        | 'paused.inactivity'
        | 'pending.onboarding'
        | 'pending.review'
        | 'platform_disabled'
        | 'platform_paused'
        | 'rejected.inactivity'
        | 'rejected.other'
        | 'rejected.unsupported_business'
        | 'requirements.fields_needed'
      )
    | null;
  /**
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors: AccountRequirementsError[];
  /**
   * Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well.
   */
  eventually_due: string[];
  /**
   * Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
   */
  past_due: string[];
  /**
   * Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending.
   */
  pending_verification: string[];
};
/**
 * AccountCapabilityRequirements
 */
export type AccountCapabilityRequirements = {
  /**
   * Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
   */
  alternatives?: AccountRequirementsAlternative[] | null;
  /**
   * The date by which all required account information must be both submitted and verified. This includes fields listed in `currently_due` as well as those in `pending_verification`. If any required information is missing or unverified by this date, the account may be disabled. Note that `current_deadline` may change if additional `currently_due` requirements are requested.
   */
  current_deadline?: number | null;
  /**
   * Fields that need to be collected to keep the capability enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the capability is disabled.
   */
  currently_due: string[];
  /**
   * Description of why the capability is disabled. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).
   */
  disabled_reason?:
    | (
        | 'other'
        | 'paused.inactivity'
        | 'pending.onboarding'
        | 'pending.review'
        | 'platform_disabled'
        | 'platform_paused'
        | 'rejected.inactivity'
        | 'rejected.other'
        | 'rejected.unsupported_business'
        | 'requirements.fields_needed'
      )
    | null;
  /**
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors: AccountRequirementsError[];
  /**
   * Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
   */
  eventually_due: string[];
  /**
   * Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the capability on the account.
   */
  past_due: string[];
  /**
   * Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
   */
  pending_verification: string[];
};
/**
 * AccountCardIssuingSettings
 */
export type AccountCardIssuingSettings = {
  tos_acceptance?: CardIssuingAccountTermsOfService;
};
/**
 * AccountCardPaymentsSettings
 */
export type AccountCardPaymentsSettings = {
  decline_on?: AccountDeclineChargeOn;
  /**
   * The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge. `statement_descriptor_prefix` is useful for maximizing descriptor space for the dynamic portion.
   */
  statement_descriptor_prefix?: string | null;
  /**
   * The Kana variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kana` specified on the charge. `statement_descriptor_prefix_kana` is useful for maximizing descriptor space for the dynamic portion.
   */
  statement_descriptor_prefix_kana?: string | null;
  /**
   * The Kanji variation of the default text that appears on credit card statements when a charge is made (Japan only). This field prefixes any dynamic `statement_descriptor_suffix_kanji` specified on the charge. `statement_descriptor_prefix_kanji` is useful for maximizing descriptor space for the dynamic portion.
   */
  statement_descriptor_prefix_kanji?: string | null;
};
/**
 * AccountDashboardSettings
 */
export type AccountDashboardSettings = {
  /**
   * The display name for this account. This is used on the Stripe Dashboard to differentiate between accounts.
   */
  display_name?: string | null;
  /**
   * The timezone used in the Stripe Dashboard for this account. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones).
   */
  timezone?: string | null;
};
/**
 * AccountDeclineChargeOn
 */
export type AccountDeclineChargeOn = {
  /**
   * Whether Stripe automatically declines charges with an incorrect ZIP or postal code. This setting only applies when a ZIP or postal code is provided and they fail bank verification.
   */
  avs_failure: boolean;
  /**
   * Whether Stripe automatically declines charges with an incorrect CVC. This setting only applies when a CVC is provided and it fails bank verification.
   */
  cvc_failure: boolean;
};
/**
 * AccountFutureRequirements
 */
export type AccountFutureRequirements = {
  /**
   * Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
   */
  alternatives?: AccountRequirementsAlternative[] | null;
  /**
   * Date on which `future_requirements` becomes the main `requirements` hash and `future_requirements` becomes empty. After the transition, `currently_due` requirements may immediately become `past_due`, but the account may also be given a grace period depending on its enablement state prior to transitioning.
   */
  current_deadline?: number | null;
  /**
   * Fields that need to be collected to keep the account enabled. If not collected by `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash.
   */
  currently_due?: string[] | null;
  /**
   * This is typed as an enum for consistency with `requirements.disabled_reason`.
   */
  disabled_reason?:
    | (
        | 'action_required.requested_capabilities'
        | 'listed'
        | 'other'
        | 'platform_paused'
        | 'rejected.fraud'
        | 'rejected.incomplete_verification'
        | 'rejected.listed'
        | 'rejected.other'
        | 'rejected.platform_fraud'
        | 'rejected.platform_other'
        | 'rejected.platform_terms_of_service'
        | 'rejected.terms_of_service'
        | 'requirements.past_due'
        | 'requirements.pending_verification'
        | 'under_review'
      )
    | null;
  /**
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors?: AccountRequirementsError[] | null;
  /**
   * Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well.
   */
  eventually_due?: string[] | null;
  /**
   * Fields that weren't collected by `requirements.current_deadline`. These fields need to be collected to enable the capability on the account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
   */
  past_due?: string[] | null;
  /**
   * Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending.
   */
  pending_verification?: string[] | null;
};
/**
 * AccountGroupMembership
 */
export type AccountGroupMembership = {
  /**
   * The group the account is in to determine their payments pricing, and null if the account is on customized pricing. [See the Platform pricing tool documentation](https://stripe.com/docs/connect/platform-pricing-tools) for details.
   */
  payments_pricing?: string | null;
};
/**
 * AccountInvoicesSettings
 */
export type AccountInvoicesSettings = {
  /**
   * The list of default Account Tax IDs to automatically include on invoices. Account Tax IDs get added when an invoice is finalized.
   */
  default_account_tax_ids?: (string | TaxId)[] | null;
  /**
   * Whether payment methods should be saved when a payment is completed for a one-time invoices on a hosted invoice page.
   */
  hosted_payment_method_save?: ('always' | 'never' | 'offer') | null;
};
/**
 * AccountLink
 * Account Links are the means by which a Connect platform grants a connected account permission to access
 * Stripe-hosted applications, such as Connect Onboarding.
 *
 * Related guide: [Connect Onboarding](https://stripe.com/docs/connect/custom/hosted-onboarding)
 */
export type AccountLink = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The timestamp at which this account link will expire.
   */
  expires_at: number;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'account_link';
  /**
   * The URL for the account link.
   */
  url: string;
};
/**
 * AccountMonthlyEstimatedRevenue
 */
export type AccountMonthlyEstimatedRevenue = {
  /**
   * A non-negative integer representing how much to charge in the [smallest currency unit](/currencies#zero-decimal).
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
};
/**
 * AccountPaymentsSettings
 */
export type AccountPaymentsSettings = {
  /**
   * The default text that appears on credit card statements when a charge is made. This field prefixes any dynamic `statement_descriptor` specified on the charge.
   */
  statement_descriptor?: string | null;
  /**
   * The Kana variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors).
   */
  statement_descriptor_kana?: string | null;
  /**
   * The Kanji variation of `statement_descriptor` used for charges in Japan. Japanese statement descriptors have [special requirements](https://docs.stripe.com/get-started/account/statement-descriptors#set-japanese-statement-descriptors).
   */
  statement_descriptor_kanji?: string | null;
};
/**
 * AccountPayoutSettings
 */
export type AccountPayoutSettings = {
  /**
   * A Boolean indicating if Stripe should try to reclaim negative balances from an attached bank account. See [Understanding Connect account balances](/connect/account-balances) for details. The default value is `false` when [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts, otherwise `true`.
   */
  debit_negative_balances: boolean;
  schedule: TransferSchedule;
  /**
   * The text that appears on the bank account statement for payouts. If not set, this defaults to the platform's bank descriptor as set in the Dashboard.
   */
  statement_descriptor?: string | null;
};
/**
 * AccountRequirements
 */
export type AccountRequirements = {
  /**
   * Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
   */
  alternatives?: AccountRequirementsAlternative[] | null;
  /**
   * Date by which the fields in `currently_due` must be collected to keep the account enabled. These fields may disable the account sooner if the next threshold is reached before they are collected.
   */
  current_deadline?: number | null;
  /**
   * Fields that need to be collected to keep the account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
   */
  currently_due?: string[] | null;
  /**
   * If the account is disabled, this enum describes why. [Learn more about handling verification issues](https://stripe.com/docs/connect/handling-api-verification).
   */
  disabled_reason?:
    | (
        | 'action_required.requested_capabilities'
        | 'listed'
        | 'other'
        | 'platform_paused'
        | 'rejected.fraud'
        | 'rejected.incomplete_verification'
        | 'rejected.listed'
        | 'rejected.other'
        | 'rejected.platform_fraud'
        | 'rejected.platform_other'
        | 'rejected.platform_terms_of_service'
        | 'rejected.terms_of_service'
        | 'requirements.past_due'
        | 'requirements.pending_verification'
        | 'under_review'
      )
    | null;
  /**
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors?: AccountRequirementsError[] | null;
  /**
   * Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and `current_deadline` becomes set.
   */
  eventually_due?: string[] | null;
  /**
   * Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the account.
   */
  past_due?: string[] | null;
  /**
   * Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
   */
  pending_verification?: string[] | null;
};
/**
 * AccountRequirementsAlternative
 */
export type AccountRequirementsAlternative = {
  /**
   * Fields that can be provided to satisfy all fields in `original_fields_due`.
   */
  alternative_fields_due: string[];
  /**
   * Fields that are due and can be satisfied by providing all fields in `alternative_fields_due`.
   */
  original_fields_due: string[];
};
/**
 * AccountRequirementsError
 */
export type AccountRequirementsError = {
  /**
   * The code for the type of error.
   */
  code:
    | 'information_missing'
    | 'invalid_address_city_state_postal_code'
    | 'invalid_address_highway_contract_box'
    | 'invalid_address_private_mailbox'
    | 'invalid_business_profile_name'
    | 'invalid_business_profile_name_denylisted'
    | 'invalid_company_name_denylisted'
    | 'invalid_dob_age_over_maximum'
    | 'invalid_dob_age_under_18'
    | 'invalid_dob_age_under_minimum'
    | 'invalid_product_description_length'
    | 'invalid_product_description_url_match'
    | 'invalid_representative_country'
    | 'invalid_signator'
    | 'invalid_statement_descriptor_business_mismatch'
    | 'invalid_statement_descriptor_denylisted'
    | 'invalid_statement_descriptor_length'
    | 'invalid_statement_descriptor_prefix_denylisted'
    | 'invalid_statement_descriptor_prefix_mismatch'
    | 'invalid_street_address'
    | 'invalid_tax_id'
    | 'invalid_tax_id_format'
    | 'invalid_tos_acceptance'
    | 'invalid_url_denylisted'
    | 'invalid_url_format'
    | 'invalid_url_web_presence_detected'
    | 'invalid_url_website_business_information_mismatch'
    | 'invalid_url_website_empty'
    | 'invalid_url_website_inaccessible'
    | 'invalid_url_website_inaccessible_geoblocked'
    | 'invalid_url_website_inaccessible_password_protected'
    | 'invalid_url_website_incomplete'
    | 'invalid_url_website_incomplete_cancellation_policy'
    | 'invalid_url_website_incomplete_customer_service_details'
    | 'invalid_url_website_incomplete_legal_restrictions'
    | 'invalid_url_website_incomplete_refund_policy'
    | 'invalid_url_website_incomplete_return_policy'
    | 'invalid_url_website_incomplete_terms_and_conditions'
    | 'invalid_url_website_incomplete_under_construction'
    | 'invalid_url_website_other'
    | 'invalid_value_other'
    | 'verification_directors_mismatch'
    | 'verification_document_address_mismatch'
    | 'verification_document_address_missing'
    | 'verification_document_corrupt'
    | 'verification_document_country_not_supported'
    | 'verification_document_directors_mismatch'
    | 'verification_document_dob_mismatch'
    | 'verification_document_duplicate_type'
    | 'verification_document_expired'
    | 'verification_document_failed_copy'
    | 'verification_document_failed_greyscale'
    | 'verification_document_failed_other'
    | 'verification_document_failed_test_mode'
    | 'verification_document_fraudulent'
    | 'verification_document_id_number_mismatch'
    | 'verification_document_id_number_missing'
    | 'verification_document_incomplete'
    | 'verification_document_invalid'
    | 'verification_document_issue_or_expiry_date_missing'
    | 'verification_document_manipulated'
    | 'verification_document_missing_back'
    | 'verification_document_missing_front'
    | 'verification_document_name_mismatch'
    | 'verification_document_name_missing'
    | 'verification_document_nationality_mismatch'
    | 'verification_document_not_readable'
    | 'verification_document_not_signed'
    | 'verification_document_not_uploaded'
    | 'verification_document_photo_mismatch'
    | 'verification_document_too_large'
    | 'verification_document_type_not_supported'
    | 'verification_extraneous_directors'
    | 'verification_failed_address_match'
    | 'verification_failed_authorizer_authority'
    | 'verification_failed_business_iec_number'
    | 'verification_failed_document_match'
    | 'verification_failed_id_number_match'
    | 'verification_failed_keyed_identity'
    | 'verification_failed_keyed_match'
    | 'verification_failed_name_match'
    | 'verification_failed_other'
    | 'verification_failed_representative_authority'
    | 'verification_failed_residential_address'
    | 'verification_failed_tax_id_match'
    | 'verification_failed_tax_id_not_issued'
    | 'verification_legal_entity_structure_mismatch'
    | 'verification_missing_directors'
    | 'verification_missing_executives'
    | 'verification_missing_owners'
    | 'verification_rejected_ownership_exemption_reason'
    | 'verification_requires_additional_memorandum_of_associations'
    | 'verification_requires_additional_proof_of_registration'
    | 'verification_supportability';
  /**
   * An informative message that indicates the error type and provides additional details about the error.
   */
  reason: string;
  /**
   * The specific user onboarding requirement field (in the requirements hash) that needs to be resolved.
   */
  requirement: string;
};
/**
 * AccountSepaDebitPaymentsSettings
 */
export type AccountSepaDebitPaymentsSettings = {
  /**
   * SEPA creditor identifier that identifies the company making the payment.
   */
  creditor_id?: string;
};
/**
 * ConnectEmbeddedMethodAccountSessionCreateMethodAccountSession
 * An AccountSession allows a Connect platform to grant access to a connected account in Connect embedded components.
 *
 * We recommend that you create an AccountSession each time you need to display an embedded component
 * to your user. Do not save AccountSessions to your database as they expire relatively
 * quickly, and cannot be used more than once.
 *
 * Related guide: [Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components)
 */
export type AccountSession = {
  /**
   * The ID of the account the AccountSession was created for
   */
  account: string;
  /**
   * The client secret of this AccountSession. Used on the client to set up secure access to the given `account`.
   *
   * The client secret can be used to provide access to `account` from your frontend. It should not be stored, logged, or exposed to anyone other than the connected account. Make sure that you have TLS enabled on any page that includes the client secret.
   *
   * Refer to our docs to [setup Connect embedded components](https://stripe.com/docs/connect/get-started-connect-embedded-components) and learn about how `client_secret` should be handled.
   */
  client_secret: string;
  components: ConnectEmbeddedAccountSessionCreateComponents;
  /**
   * The timestamp at which this AccountSession will expire.
   */
  expires_at: number;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'account_session';
};
/**
 * AccountSettings
 */
export type AccountSettings = {
  bacs_debit_payments?: AccountBacsDebitPaymentsSettings;
  branding: AccountBrandingSettings;
  card_issuing?: AccountCardIssuingSettings;
  card_payments: AccountCardPaymentsSettings;
  dashboard: AccountDashboardSettings;
  invoices?: AccountInvoicesSettings;
  payments: AccountPaymentsSettings;
  payouts?: AccountPayoutSettings;
  sepa_debit_payments?: AccountSepaDebitPaymentsSettings;
  treasury?: AccountTreasurySettings;
};
/**
 * AccountTermsOfService
 */
export type AccountTermsOfService = {
  /**
   * The Unix timestamp marking when the account representative accepted the service agreement.
   */
  date?: number | null;
  /**
   * The IP address from which the account representative accepted the service agreement.
   */
  ip?: string | null;
  /**
   * The user agent of the browser from which the account representative accepted the service agreement.
   */
  user_agent?: string;
};
/**
 * AccountTOSAcceptance
 */
export type AccountTosAcceptance = {
  /**
   * The Unix timestamp marking when the account representative accepted their service agreement
   */
  date?: number | null;
  /**
   * The IP address from which the account representative accepted their service agreement
   */
  ip?: string | null;
  /**
   * The user's service agreement type
   */
  service_agreement?: string;
  /**
   * The user agent of the browser from which the account representative accepted their service agreement
   */
  user_agent?: string | null;
};
/**
 * AccountTreasurySettings
 */
export type AccountTreasurySettings = {
  tos_acceptance?: AccountTermsOfService;
};
/**
 * AccountUnificationAccountController
 */
export type AccountUnificationAccountController = {
  fees?: AccountUnificationAccountControllerFees;
  /**
   * `true` if the Connect application retrieving the resource controls the account and can therefore exercise [platform controls](https://stripe.com/docs/connect/platform-controls-for-standard-accounts). Otherwise, this field is null.
   */
  is_controller?: boolean;
  losses?: AccountUnificationAccountControllerLosses;
  /**
   * A value indicating responsibility for collecting requirements on this account. Only returned when the Connect application retrieving the resource controls the account.
   */
  requirement_collection?: 'application' | 'stripe';
  stripe_dashboard?: AccountUnificationAccountControllerStripeDashboard;
  /**
   * The controller type. Can be `application`, if a Connect application controls the account, or `account`, if the account controls itself.
   */
  type: 'account' | 'application';
};
/**
 * AccountUnificationAccountControllerFees
 */
export type AccountUnificationAccountControllerFees = {
  /**
   * A value indicating the responsible payer of a bundle of Stripe fees for pricing-control eligible products on this account. Learn more about [fee behavior on connected accounts](https://docs.stripe.com/connect/direct-charges-fee-payer-behavior).
   */
  payer:
    | 'account'
    | 'application'
    | 'application_custom'
    | 'application_express';
};
/**
 * AccountUnificationAccountControllerLosses
 */
export type AccountUnificationAccountControllerLosses = {
  /**
   * A value indicating who is liable when this account can't pay back negative balances from payments.
   */
  payments: 'application' | 'stripe';
};
/**
 * AccountUnificationAccountControllerStripeDashboard
 */
export type AccountUnificationAccountControllerStripeDashboard = {
  /**
   * A value indicating the Stripe dashboard this account has access to independent of the Connect application.
   */
  type: 'express' | 'full' | 'none';
};
/**
 * Address
 */
export type Address = {
  /**
   * City, district, suburb, town, or village.
   */
  city?: string | null;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country?: string | null;
  /**
   * Address line 1 (e.g., street, PO Box, or company name).
   */
  line1?: string | null;
  /**
   * Address line 2 (e.g., apartment, suite, unit, or building).
   */
  line2?: string | null;
  /**
   * ZIP or postal code.
   */
  postal_code?: string | null;
  /**
   * State, county, province, or region.
   */
  state?: string | null;
};
/**
 * amazon_pay_underlying_payment_method_funding_details
 */
export type AmazonPayUnderlyingPaymentMethodFundingDetails = {
  card?: PaymentMethodDetailsPassthroughCard;
  /**
   * funding type of the underlying payment method.
   */
  type?: 'card' | null;
};
/**
 * APIErrors
 */
export type ApiErrors = {
  /**
   * For card errors resulting from a card issuer decline, a short string indicating [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines) if they provide one.
   */
  advice_code?: string;
  /**
   * For card errors, the ID of the failed charge.
   */
  charge?: string;
  /**
   * For some errors that could be handled programmatically, a short string indicating the [error code](https://stripe.com/docs/error-codes) reported.
   */
  code?: string;
  /**
   * For card errors resulting from a card issuer decline, a short string indicating the [card issuer's reason for the decline](https://stripe.com/docs/declines#issuer-declines) if they provide one.
   */
  decline_code?: string;
  /**
   * A URL to more information about the [error code](https://stripe.com/docs/error-codes) reported.
   */
  doc_url?: string;
  /**
   * A human-readable message providing more details about the error. For card errors, these messages can be shown to your users.
   */
  message?: string;
  /**
   * For card errors resulting from a card issuer decline, a 2 digit code which indicates the advice given to merchant by the card network on how to proceed with an error.
   */
  network_advice_code?: string;
  /**
   * For card errors resulting from a card issuer decline, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed.
   */
  network_decline_code?: string;
  /**
   * If the error is parameter-specific, the parameter related to the error. For example, you can use this to display a message near the correct form field.
   */
  param?: string;
  payment_intent?: PaymentIntent;
  payment_method?: PaymentMethod;
  /**
   * If the error is specific to the type of payment method, the payment method type that had a problem. This field is only populated for invoice-related errors.
   */
  payment_method_type?: string;
  /**
   * A URL to the request log entry in your dashboard.
   */
  request_log_url?: string;
  setup_intent?: SetupIntent;
  /**
   * The [source object](https://stripe.com/docs/api/sources/object) for errors returned on a request involving a source.
   */
  source?: BankAccount | Card | Source;
  /**
   * The type of error returned. One of `api_error`, `card_error`, `idempotency_error`, or `invalid_request_error`
   */
  type:
    | 'api_error'
    | 'card_error'
    | 'idempotency_error'
    | 'invalid_request_error';
};
/**
 * ApplePayDomain
 */
export type ApplePayDomain = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  domain_name: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'apple_pay_domain';
};
/**
 * Application
 */
export type Application = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The name of the application.
   */
  name?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'application';
};
/**
 * PlatformFee
 */
export type ApplicationFee = {
  /**
   * ID of the Stripe account this fee was taken from.
   */
  account: string | Account;
  /**
   * Amount earned, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the fee if a partial refund was issued)
   */
  amount_refunded: number;
  /**
   * ID of the Connect application that earned the fee.
   */
  application: string | Application;
  /**
   * Balance transaction that describes the impact of this collected application fee on your account balance (not including refunds).
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * ID of the charge that the application fee was taken from.
   */
  charge: string | Charge;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Polymorphic source of the application fee. Includes the ID of the object the application fee was created from.
   */
  fee_source?: PlatformEarningFeeSource | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'application_fee';
  /**
   * ID of the corresponding charge on the platform account, if this fee was the result of a charge using the `destination` parameter.
   */
  originating_transaction?: (string | Charge) | null;
  /**
   * Whether the fee has been fully refunded. If the fee is only partially refunded, this attribute will still be false.
   */
  refunded: boolean;
  /**
   * FeeRefundList
   * A list of refunds that have been applied to the fee.
   */
  refunds: {
    /**
     * Details about each object.
     */
    data: FeeRefund[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
};
/**
 * SecretServiceResourceSecret
 * Secret Store is an API that allows Stripe Apps developers to securely persist secrets for use by UI Extensions and app backends.
 *
 * The primary resource in Secret Store is a `secret`. Other apps can't view secrets created by an app. Additionally, secrets are scoped to provide further permission control.
 *
 * All Dashboard users and the app backend share `account` scoped secrets. Use the `account` scope for secrets that don't change per-user, like a third-party API key.
 *
 * A `user` scoped secret is accessible by the app backend and one specific Dashboard user. Use the `user` scope for per-user secrets like per-user OAuth tokens, where different users might have different permissions.
 *
 * Related guide: [Store data between page reloads](https://stripe.com/docs/stripe-apps/store-auth-data-custom-objects)
 */
export type AppsSecret = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * If true, indicates that this secret has been deleted
   */
  deleted?: boolean;
  /**
   * The Unix timestamp for the expiry time of the secret, after which the secret deletes.
   */
  expires_at?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * A name for the secret that's unique within the scope.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'apps.secret';
  /**
   * The plaintext secret value to be stored.
   */
  payload?: string | null;
  scope: SecretServiceResourceScope;
};
/**
 * AutomaticTax
 */
export type AutomaticTax = {
  /**
   * If Stripe disabled automatic tax, this enum describes why.
   */
  disabled_reason?:
    | ('finalization_requires_location_inputs' | 'finalization_system_error')
    | null;
  /**
   * Whether Stripe automatically computes tax on this invoice. Note that incompatible invoice items (invoice items with manually specified [tax rates](https://stripe.com/docs/api/tax_rates), negative amounts, or `tax_behavior=unspecified`) cannot be added to automatic tax invoices.
   */
  enabled: boolean;
  /**
   * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
   */
  liability?: ConnectAccountReference | null;
  /**
   * The tax provider powering automatic tax.
   */
  provider?: string | null;
  /**
   * The status of the most recent automated tax calculation for this invoice.
   */
  status?: ('complete' | 'failed' | 'requires_location_inputs') | null;
};
/**
 * Balance
 * This is an object representing your Stripe balance. You can retrieve it to see
 * the balance currently on your Stripe account.
 *
 * You can also retrieve the balance history, which contains a list of
 * [transactions](https://stripe.com/docs/reporting/balance-transaction-types) that contributed to the balance
 * (charges, payouts, and so forth).
 *
 * The available and pending amounts for each currency are broken down further by
 * payment source types.
 *
 * Related guide: [Understanding Connect account balances](https://stripe.com/docs/connect/account-balances)
 */
export type Balance = {
  /**
   * Available funds that you can transfer or pay out automatically by Stripe or explicitly through the [Transfers API](https://stripe.com/docs/api#transfers) or [Payouts API](https://stripe.com/docs/api#payouts). You can find the available balance for each currency and payment type in the `source_types` property.
   */
  available: BalanceAmount[];
  /**
   * Funds held due to negative balances on connected accounts where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts. You can find the connect reserve balance for each currency and payment type in the `source_types` property.
   */
  connect_reserved?: BalanceAmount[];
  /**
   * Funds that you can pay out using Instant Payouts.
   */
  instant_available?: BalanceAmountNet[];
  issuing?: BalanceDetail;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'balance';
  /**
   * Funds that aren't available in the balance yet. You can find the pending balance for each currency and each payment type in the `source_types` property.
   */
  pending: BalanceAmount[];
  refund_and_dispute_prefunding?: BalanceDetailUngated;
};
/**
 * BalanceAmount
 */
export type BalanceAmount = {
  /**
   * Balance amount.
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  source_types?: BalanceAmountBySourceType;
};
/**
 * BalanceAmountBySourceType
 */
export type BalanceAmountBySourceType = {
  /**
   * Amount coming from [legacy US ACH payments](https://docs.stripe.com/ach-deprecated).
   */
  bank_account?: number;
  /**
   * Amount coming from most payment methods, including cards as well as [non-legacy bank debits](https://docs.stripe.com/payments/bank-debits).
   */
  card?: number;
  /**
   * Amount coming from [FPX](https://docs.stripe.com/payments/fpx), a Malaysian payment method.
   */
  fpx?: number;
};
/**
 * BalanceAmountNet
 */
export type BalanceAmountNet = {
  /**
   * Balance amount.
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Breakdown of balance by destination.
   */
  net_available?: BalanceNetAvailable[];
  source_types?: BalanceAmountBySourceType;
};
/**
 * BalanceDetail
 */
export type BalanceDetail = {
  /**
   * Funds that are available for use.
   */
  available: BalanceAmount[];
};
/**
 * BalanceDetailUngated
 */
export type BalanceDetailUngated = {
  /**
   * Funds that are available for use.
   */
  available: BalanceAmount[];
  /**
   * Funds that are pending
   */
  pending: BalanceAmount[];
};
/**
 * BalanceNetAvailable
 */
export type BalanceNetAvailable = {
  /**
   * Net balance amount, subtracting fees from platform-set pricing.
   */
  amount: number;
  /**
   * ID of the external account for this net balance (not expandable).
   */
  destination: string;
  source_types?: BalanceAmountBySourceType;
};
/**
 * BalanceTransaction
 * Balance transactions represent funds moving through your Stripe account.
 * Stripe creates them for every type of transaction that enters or leaves your Stripe account balance.
 *
 * Related guide: [Balance transaction types](https://stripe.com/docs/reports/balance-transaction-types)
 */
export type BalanceTransaction = {
  /**
   * Gross amount of this transaction (in cents (or local equivalent)). A positive value represents funds charged to another party, and a negative value represents funds sent to another party.
   */
  amount: number;
  /**
   * The date that the transaction's net funds become available in the Stripe balance.
   */
  available_on: number;
  /**
   * The balance that this transaction impacts.
   */
  balance_type?: 'issuing' | 'payments' | 'refund_and_dispute_prefunding';
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * If applicable, this transaction uses an exchange rate. If money converts from currency A to currency B, then the `amount` in currency A, multipled by the `exchange_rate`, equals the `amount` in currency B. For example, if you charge a customer 10.00 EUR, the PaymentIntent's `amount` is `1000` and `currency` is `eur`. If this converts to 12.34 USD in your Stripe account, the BalanceTransaction's `amount` is `1234`, its `currency` is `usd`, and the `exchange_rate` is `1.234`.
   */
  exchange_rate?: number | null;
  /**
   * Fees (in cents (or local equivalent)) paid for this transaction. Represented as a positive integer when assessed.
   */
  fee: number;
  /**
   * Detailed breakdown of fees (in cents (or local equivalent)) paid for this transaction.
   */
  fee_details: Fee[];
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Net impact to a Stripe balance (in cents (or local equivalent)). A positive value represents incrementing a Stripe balance, and a negative value decrementing a Stripe balance. You can calculate the net impact of a transaction on a balance by `amount` - `fee`
   */
  net: number;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'balance_transaction';
  /**
   * Learn more about how [reporting categories](https://stripe.com/docs/reports/reporting-categories) can help you understand balance transactions from an accounting perspective.
   */
  reporting_category: string;
  /**
   * This transaction relates to the Stripe object.
   */
  source?:
    | (
        | string
        | ApplicationFee
        | Charge
        | ConnectCollectionTransfer
        | CustomerCashBalanceTransaction
        | Dispute
        | FeeRefund
        | IssuingAuthorization
        | IssuingDispute
        | IssuingTransaction
        | Payout
        | Refund
        | ReserveTransaction
        | TaxDeductedAtSource
        | Topup
        | Transfer
        | TransferReversal
      )
    | null;
  /**
   * The transaction's net funds status in the Stripe balance, which are either `available` or `pending`.
   */
  status: string;
  /**
   * Transaction type: `adjustment`, `advance`, `advance_funding`, `anticipation_repayment`, `application_fee`, `application_fee_refund`, `charge`, `climate_order_purchase`, `climate_order_refund`, `connect_collection_transfer`, `contribution`, `issuing_authorization_hold`, `issuing_authorization_release`, `issuing_dispute`, `issuing_transaction`, `obligation_outbound`, `obligation_reversal_inbound`, `payment`, `payment_failure_refund`, `payment_network_reserve_hold`, `payment_network_reserve_release`, `payment_refund`, `payment_reversal`, `payment_unreconciled`, `payout`, `payout_cancel`, `payout_failure`, `payout_minimum_balance_hold`, `payout_minimum_balance_release`, `refund`, `refund_failure`, `reserve_transaction`, `reserved_funds`, `stripe_fee`, `stripe_fx_fee`, `stripe_balance_payment_debit`, `stripe_balance_payment_debit_reversal`, `tax_fee`, `topup`, `topup_reversal`, `transfer`, `transfer_cancel`, `transfer_failure`, or `transfer_refund`. Learn more about [balance transaction types and what they represent](https://stripe.com/docs/reports/balance-transaction-types). To classify transactions for accounting purposes, consider `reporting_category` instead.
   */
  type:
    | 'adjustment'
    | 'advance'
    | 'advance_funding'
    | 'anticipation_repayment'
    | 'application_fee'
    | 'application_fee_refund'
    | 'charge'
    | 'climate_order_purchase'
    | 'climate_order_refund'
    | 'connect_collection_transfer'
    | 'contribution'
    | 'issuing_authorization_hold'
    | 'issuing_authorization_release'
    | 'issuing_dispute'
    | 'issuing_transaction'
    | 'obligation_outbound'
    | 'obligation_reversal_inbound'
    | 'payment'
    | 'payment_failure_refund'
    | 'payment_network_reserve_hold'
    | 'payment_network_reserve_release'
    | 'payment_refund'
    | 'payment_reversal'
    | 'payment_unreconciled'
    | 'payout'
    | 'payout_cancel'
    | 'payout_failure'
    | 'payout_minimum_balance_hold'
    | 'payout_minimum_balance_release'
    | 'refund'
    | 'refund_failure'
    | 'reserve_transaction'
    | 'reserved_funds'
    | 'stripe_balance_payment_debit'
    | 'stripe_balance_payment_debit_reversal'
    | 'stripe_fee'
    | 'stripe_fx_fee'
    | 'tax_fee'
    | 'topup'
    | 'topup_reversal'
    | 'transfer'
    | 'transfer_cancel'
    | 'transfer_failure'
    | 'transfer_refund';
};
/**
 * BankAccount
 * These bank accounts are payment methods on `Customer` objects.
 *
 * On the other hand [External Accounts](/api#external_accounts) are transfer
 * destinations on `Account` objects for connected accounts.
 * They can be bank accounts or debit cards as well, and are documented in the links above.
 *
 * Related guide: [Bank debits and transfers](/payments/bank-debits-transfers)
 */
export type BankAccount = {
  /**
   * The account this bank account belongs to. Only applicable on Accounts (not customers or recipients) This property is only available when returned as an [External Account](/api/external_account_bank_accounts/object) where [controller.is_controller](/api/accounts/object#account_object-controller-is_controller) is `true`.
   */
  account?: (string | Account) | null;
  /**
   * The name of the person or business that owns the bank account.
   */
  account_holder_name?: string | null;
  /**
   * The type of entity that holds the account. This can be either `individual` or `company`.
   */
  account_holder_type?: string | null;
  /**
   * The bank account type. This can only be `checking` or `savings` in most countries. In Japan, this can only be `futsu` or `toza`.
   */
  account_type?: string | null;
  /**
   * A set of available payout methods for this bank account. Only values from this set should be passed as the `method` when creating a payout.
   */
  available_payout_methods?: ('instant' | 'standard')[] | null;
  /**
   * Name of the bank associated with the routing number (e.g., `WELLS FARGO`).
   */
  bank_name?: string | null;
  /**
   * Two-letter ISO code representing the country the bank account is located in.
   */
  country: string;
  /**
   * Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
   */
  currency: string;
  /**
   * The ID of the customer that the bank account is associated with.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * Whether this bank account is the default external account for its currency.
   */
  default_for_currency?: boolean | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Information about the [upcoming new requirements for the bank account](https://stripe.com/docs/connect/custom-accounts/future-requirements), including what information needs to be collected, and by when.
   */
  future_requirements?: ExternalAccountRequirements | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The last four digits of the bank account number.
   */
  last4: string;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'bank_account';
  /**
   * Information about the requirements for the bank account, including what information needs to be collected.
   */
  requirements?: ExternalAccountRequirements | null;
  /**
   * The routing transit number for the bank account.
   */
  routing_number?: string | null;
  /**
   * For bank accounts, possible values are `new`, `validated`, `verified`, `verification_failed`, or `errored`. A bank account that hasn't had any activity or validation performed is `new`. If Stripe can determine that the bank account exists, its status will be `validated`. Note that there often isn’t enough information to know (e.g., for smaller credit unions), and the validation is not always run. If customer bank account verification has succeeded, the bank account status will be `verified`. If the verification failed for any reason, such as microdeposit failure, the status will be `verification_failed`. If a payout sent to this bank account fails, we'll set the status to `errored` and will not continue to send [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) until the bank details are updated.
   *
   * For external accounts, possible values are `new`, `errored` and `verification_failed`. If a payout fails, the status is set to `errored` and scheduled payouts are stopped until account details are updated. In the US and India, if we can't [verify the owner of the bank account](https://support.stripe.com/questions/bank-account-ownership-verification), we'll set the status to `verification_failed`. Other validations aren't run against external accounts because they're only used for payouts. This means the other statuses don't apply.
   */
  status: string;
};
/**
 * BankConnectionsResourceAccountholder
 */
export type BankConnectionsResourceAccountholder = {
  /**
   * The ID of the Stripe account this account belongs to. Should only be present if `account_holder.type` is `account`.
   */
  account?: string | Account;
  /**
   * ID of the Stripe customer this account belongs to. Present if and only if `account_holder.type` is `customer`.
   */
  customer?: string | Customer;
  /**
   * Type of account holder that this account belongs to.
   */
  type: 'account' | 'customer';
};
/**
 * BankConnectionsResourceBalance
 */
export type BankConnectionsResourceBalance = {
  /**
   * The time that the external institution calculated this balance. Measured in seconds since the Unix epoch.
   */
  as_of: number;
  cash?: BankConnectionsResourceBalanceApiResourceCashBalance;
  credit?: BankConnectionsResourceBalanceApiResourceCreditBalance;
  /**
   * The balances owed to (or by) the account holder, before subtracting any outbound pending transactions or adding any inbound pending transactions.
   *
   * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
   *
   * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
   */
  current: {
    [key: string]: number;
  };
  /**
   * The `type` of the balance. An additional hash is included on the balance with a name matching this value.
   */
  type: 'cash' | 'credit';
};
/**
 * BankConnectionsResourceBalanceAPIResourceCashBalance
 */
export type BankConnectionsResourceBalanceApiResourceCashBalance = {
  /**
   * The funds available to the account holder. Typically this is the current balance after subtracting any outbound pending transactions and adding any inbound pending transactions.
   *
   * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
   *
   * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
   */
  available?: {
    [key: string]: number;
  } | null;
};
/**
 * BankConnectionsResourceBalanceAPIResourceCreditBalance
 */
export type BankConnectionsResourceBalanceApiResourceCreditBalance = {
  /**
   * The credit that has been used by the account holder.
   *
   * Each key is a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
   *
   * Each value is a integer amount. A positive amount indicates money owed to the account holder. A negative amount indicates money owed by the account holder.
   */
  used?: {
    [key: string]: number;
  } | null;
};
/**
 * BankConnectionsResourceBalanceRefresh
 */
export type BankConnectionsResourceBalanceRefresh = {
  /**
   * The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
   */
  last_attempted_at: number;
  /**
   * Time at which the next balance refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
   */
  next_refresh_available_at?: number | null;
  /**
   * The status of the last refresh attempt.
   */
  status: 'failed' | 'pending' | 'succeeded';
};
/**
 * BankConnectionsResourceLinkAccountSessionFilters
 */
export type BankConnectionsResourceLinkAccountSessionFilters = {
  /**
   * Restricts the Session to subcategories of accounts that can be linked. Valid subcategories are: `checking`, `savings`, `mortgage`, `line_of_credit`, `credit_card`.
   */
  account_subcategories?:
    | ('checking' | 'credit_card' | 'line_of_credit' | 'mortgage' | 'savings')[]
    | null;
  /**
   * List of countries from which to filter accounts.
   */
  countries?: string[] | null;
};
/**
 * BankConnectionsResourceOwnershipRefresh
 */
export type BankConnectionsResourceOwnershipRefresh = {
  /**
   * The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
   */
  last_attempted_at: number;
  /**
   * Time at which the next ownership refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
   */
  next_refresh_available_at?: number | null;
  /**
   * The status of the last refresh attempt.
   */
  status: 'failed' | 'pending' | 'succeeded';
};
/**
 * BankConnectionsResourceTransactionRefresh
 */
export type BankConnectionsResourceTransactionRefresh = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The time at which the last refresh attempt was initiated. Measured in seconds since the Unix epoch.
   */
  last_attempted_at: number;
  /**
   * Time at which the next transaction refresh can be initiated. This value will be `null` when `status` is `pending`. Measured in seconds since the Unix epoch.
   */
  next_refresh_available_at?: number | null;
  /**
   * The status of the last refresh attempt.
   */
  status: 'failed' | 'pending' | 'succeeded';
};
/**
 * BankConnectionsResourceTransactionResourceStatusTransitions
 */
export type BankConnectionsResourceTransactionResourceStatusTransitions = {
  /**
   * Time at which this transaction posted. Measured in seconds since the Unix epoch.
   */
  posted_at?: number | null;
  /**
   * Time at which this transaction was voided. Measured in seconds since the Unix epoch.
   */
  void_at?: number | null;
};
/**
 * ThresholdsResourceAlert
 * A billing alert is a resource that notifies you when a certain usage threshold on a meter is crossed. For example, you might create a billing alert to notify you when a certain user made 100 API requests.
 */
export type BillingAlert = {
  /**
   * Defines the type of the alert.
   */
  alert_type: 'usage_threshold';
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.alert';
  /**
   * Status of the alert. This can be active, inactive or archived.
   */
  status?: ('active' | 'archived' | 'inactive') | null;
  /**
   * Title of the alert.
   */
  title: string;
  /**
   * Encapsulates configuration of the alert to monitor usage on a specific [Billing Meter](https://stripe.com/docs/api/billing/meter).
   */
  usage_threshold?: ThresholdsResourceUsageThresholdConfig | null;
};
/**
 * CreditBalanceSummary
 * Indicates the billing credit balance for billing credits granted to a customer.
 */
export type BillingCreditBalanceSummary = {
  /**
   * The billing credit balances. One entry per credit grant currency. If a customer only has credit grants in a single currency, then this will have a single balance entry.
   */
  balances: CreditBalance[];
  /**
   * The customer the balance is for.
   */
  customer: string | Customer | DeletedCustomer;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.credit_balance_summary';
};
/**
 * CreditBalanceTransaction
 * A credit balance transaction is a resource representing a transaction (either a credit or a debit) against an existing credit grant.
 */
export type BillingCreditBalanceTransaction = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Credit details for this credit balance transaction. Only present if type is `credit`.
   */
  credit?: BillingCreditGrantsResourceBalanceCredit | null;
  /**
   * The credit grant associated with this credit balance transaction.
   */
  credit_grant: string | BillingCreditGrant;
  /**
   * Debit details for this credit balance transaction. Only present if type is `debit`.
   */
  debit?: BillingCreditGrantsResourceBalanceDebit | null;
  /**
   * The effective time of this credit balance transaction.
   */
  effective_at: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.credit_balance_transaction';
  /**
   * ID of the test clock this credit balance transaction belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
  /**
   * The type of credit balance transaction (credit or debit).
   */
  type?: ('credit' | 'debit') | null;
};
/**
 * CreditGrant
 * A credit grant is an API resource that documents the allocation of some billing credits to a customer.
 *
 * Related guide: [Billing credits](https://docs.stripe.com/billing/subscriptions/usage-based/billing-credits)
 */
export type BillingCreditGrant = {
  amount: BillingCreditGrantsResourceAmount;
  applicability_config: BillingCreditGrantsResourceApplicabilityConfig;
  /**
   * The category of this credit grant. This is for tracking purposes and isn't displayed to the customer.
   */
  category: 'paid' | 'promotional';
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * ID of the customer receiving the billing credits.
   */
  customer: string | Customer | DeletedCustomer;
  /**
   * The time when the billing credits become effective-when they're eligible for use.
   */
  effective_at?: number | null;
  /**
   * The time when the billing credits expire. If not present, the billing credits don't expire.
   */
  expires_at?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * A descriptive name shown in dashboard.
   */
  name?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.credit_grant';
  /**
   * The priority for applying this credit grant. The highest priority is 0 and the lowest is 100.
   */
  priority?: number | null;
  /**
   * ID of the test clock this credit grant belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   */
  updated: number;
  /**
   * The time when this credit grant was voided. If not present, the credit grant hasn't been voided.
   */
  voided_at?: number | null;
};
/**
 * BillingMeter
 * Meters specify how to aggregate meter events over a billing period. Meter events represent the actions that customers take in your system. Meters attach to prices and form the basis of the bill.
 *
 * Related guide: [Usage based billing](https://docs.stripe.com/billing/subscriptions/usage-based)
 */
export type BillingMeter = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  customer_mapping: BillingMeterResourceCustomerMappingSettings;
  default_aggregation: BillingMeterResourceAggregationSettings;
  /**
   * The meter's name.
   */
  display_name: string;
  /**
   * The name of the meter event to record usage for. Corresponds with the `event_name` field on meter events.
   */
  event_name: string;
  /**
   * The time window to pre-aggregate meter events for, if any.
   */
  event_time_window?: ('day' | 'hour') | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.meter';
  /**
   * The meter's status.
   */
  status: 'active' | 'inactive';
  status_transitions: BillingMeterResourceBillingMeterStatusTransitions;
  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   */
  updated: number;
  value_settings: BillingMeterResourceBillingMeterValue;
};
/**
 * BillingMeterEvent
 * Meter events represent actions that customers take in your system. You can use meter events to bill a customer based on their usage. Meter events are associated with billing meters, which define both the contents of the event’s payload and how to aggregate those events.
 */
export type BillingMeterEvent = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The name of the meter event. Corresponds with the `event_name` field on a meter.
   */
  event_name: string;
  /**
   * A unique identifier for the event.
   */
  identifier: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.meter_event';
  /**
   * The payload of the event. This contains the fields corresponding to a meter's `customer_mapping.event_payload_key` (default is `stripe_customer_id`) and `value_settings.event_payload_key` (default is `value`). Read more about the [payload](https://stripe.com/docs/billing/subscriptions/usage-based/recording-usage#payload-key-overrides).
   */
  payload: {
    [key: string]: string;
  };
  /**
   * The timestamp passed in when creating the event. Measured in seconds since the Unix epoch.
   */
  timestamp: number;
};
/**
 * BillingMeterEventAdjustment
 * A billing meter event adjustment is a resource that allows you to cancel a meter event. For example, you might create a billing meter event adjustment to cancel a meter event that was created in error or attached to the wrong customer.
 */
export type BillingMeterEventAdjustment = {
  /**
   * Specifies which event to cancel.
   */
  cancel?: BillingMeterResourceBillingMeterEventAdjustmentCancel | null;
  /**
   * The name of the meter event. Corresponds with the `event_name` field on a meter.
   */
  event_name: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.meter_event_adjustment';
  /**
   * The meter event adjustment's status.
   */
  status: 'complete' | 'pending';
  /**
   * Specifies whether to cancel a single event or a range of events for a time period. Time period cancellation is not supported yet.
   */
  type: 'cancel';
};
/**
 * BillingMeterEventSummary
 * A billing meter event summary represents an aggregated view of a customer's billing meter events within a specified timeframe. It indicates how much
 * usage was accrued by a customer for that period.
 *
 * Note: Meters events are aggregated asynchronously so the meter event summaries provide an eventually consistent view of the reported usage.
 */
export type BillingMeterEventSummary = {
  /**
   * Aggregated value of all the events within `start_time` (inclusive) and `end_time` (inclusive). The aggregation strategy is defined on meter via `default_aggregation`.
   */
  aggregated_value: number;
  /**
   * End timestamp for this event summary (exclusive). Must be aligned with minute boundaries.
   */
  end_time: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The meter associated with this event summary.
   */
  meter: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing.meter_event_summary';
  /**
   * Start timestamp for this event summary (inclusive). Must be aligned with minute boundaries.
   */
  start_time: number;
};
/**
 * BillingBillResourceInvoiceItemParentsInvoiceItemParent
 */
export type BillingBillResourceInvoiceItemParentsInvoiceItemParent = {
  /**
   * Details about the subscription that generated this invoice item
   */
  subscription_details?: BillingBillResourceInvoiceItemParentsInvoiceItemSubscriptionParent | null;
  /**
   * The type of parent that generated this invoice item
   */
  type: 'subscription_details';
};
/**
 * BillingBillResourceInvoiceItemParentsInvoiceItemSubscriptionParent
 */
export type BillingBillResourceInvoiceItemParentsInvoiceItemSubscriptionParent =
  {
    /**
     * The subscription that generated this invoice item
     */
    subscription: string;
    /**
     * The subscription item that generated this invoice item
     */
    subscription_item?: string;
  };
/**
 * BillingBillResourceInvoicingLinesCommonCreditedItems
 */
export type BillingBillResourceInvoicingLinesCommonCreditedItems = {
  /**
   * Invoice containing the credited invoice line items
   */
  invoice: string;
  /**
   * Credited invoice line items
   */
  invoice_line_items: string[];
};
/**
 * BillingBillResourceInvoicingLinesCommonProrationDetails
 */
export type BillingBillResourceInvoicingLinesCommonProrationDetails = {
  /**
   * For a credit proration `line_item`, the original debit line_items to which the credit proration applies.
   */
  credited_items?: BillingBillResourceInvoicingLinesCommonCreditedItems | null;
};
/**
 * BillingBillResourceInvoicingLinesParentsInvoiceLineItemInvoiceItemParent
 */
export type BillingBillResourceInvoicingLinesParentsInvoiceLineItemInvoiceItemParent =
  {
    /**
     * The invoice item that generated this line item
     */
    invoice_item: string;
    /**
     * Whether this is a proration
     */
    proration: boolean;
    /**
     * Additional details for proration line items
     */
    proration_details?: BillingBillResourceInvoicingLinesCommonProrationDetails | null;
    /**
     * The subscription that the invoice item belongs to
     */
    subscription?: string | null;
  };
/**
 * BillingBillResourceInvoicingLinesParentsInvoiceLineItemParent
 */
export type BillingBillResourceInvoicingLinesParentsInvoiceLineItemParent = {
  /**
   * Details about the invoice item that generated this line item
   */
  invoice_item_details?: BillingBillResourceInvoicingLinesParentsInvoiceLineItemInvoiceItemParent | null;
  /**
   * Details about the subscription item that generated this line item
   */
  subscription_item_details?: BillingBillResourceInvoicingLinesParentsInvoiceLineItemSubscriptionItemParent | null;
  /**
   * The type of parent that generated this line item
   */
  type: 'invoice_item_details' | 'subscription_item_details';
};
/**
 * BillingBillResourceInvoicingLinesParentsInvoiceLineItemSubscriptionItemParent
 */
export type BillingBillResourceInvoicingLinesParentsInvoiceLineItemSubscriptionItemParent =
  {
    /**
     * The invoice item that generated this line item
     */
    invoice_item?: string | null;
    /**
     * Whether this is a proration
     */
    proration: boolean;
    /**
     * Additional details for proration line items
     */
    proration_details?: BillingBillResourceInvoicingLinesCommonProrationDetails | null;
    /**
     * The subscription that the subscription item belongs to
     */
    subscription?: string | null;
    /**
     * The subscription item that generated this line item
     */
    subscription_item: string;
  };
/**
 * BillingBillResourceInvoicingParentsInvoiceParent
 */
export type BillingBillResourceInvoicingParentsInvoiceParent = {
  /**
   * Details about the quote that generated this invoice
   */
  quote_details?: BillingBillResourceInvoicingParentsInvoiceQuoteParent | null;
  /**
   * Details about the subscription that generated this invoice
   */
  subscription_details?: BillingBillResourceInvoicingParentsInvoiceSubscriptionParent | null;
  /**
   * The type of parent that generated this invoice
   */
  type: 'quote_details' | 'subscription_details';
};
/**
 * BillingBillResourceInvoicingParentsInvoiceQuoteParent
 */
export type BillingBillResourceInvoicingParentsInvoiceQuoteParent = {
  /**
   * The quote that generated this invoice
   */
  quote: string;
};
/**
 * BillingBillResourceInvoicingParentsInvoiceSubscriptionParent
 */
export type BillingBillResourceInvoicingParentsInvoiceSubscriptionParent = {
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) defined as subscription metadata when an invoice is created. Becomes an immutable snapshot of the subscription metadata at the time of invoice finalization.
   *  *Note: This attribute is populated only for invoices created on or after June 29, 2023.*
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * The subscription that generated this invoice
   */
  subscription: string | Subscription;
  /**
   * Only set for upcoming invoices that preview prorations. The time used to calculate prorations.
   */
  subscription_proration_date?: number;
};
/**
 * BillingBillResourceInvoicingPricingPricing
 */
export type BillingBillResourceInvoicingPricingPricing = {
  price_details?: BillingBillResourceInvoicingPricingPricingPriceDetails;
  /**
   * The type of the pricing details.
   */
  type: 'price_details';
  /**
   * The unit amount (in the `currency` specified) of the item which contains a decimal value with at most 12 decimal places.
   */
  unit_amount_decimal?: string | null;
};
/**
 * BillingBillResourceInvoicingPricingPricingPriceDetails
 */
export type BillingBillResourceInvoicingPricingPricingPriceDetails = {
  /**
   * The ID of the price this item is associated with.
   */
  price: string;
  /**
   * The ID of the product this item is associated with.
   */
  product: string;
};
/**
 * BillingBillResourceInvoicingTaxesTax
 */
export type BillingBillResourceInvoicingTaxesTax = {
  /**
   * The amount of the tax, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Whether this tax is inclusive or exclusive.
   */
  tax_behavior: 'exclusive' | 'inclusive';
  /**
   * Additional details about the tax rate. Only present when `type` is `tax_rate_details`.
   */
  tax_rate_details?: BillingBillResourceInvoicingTaxesTaxRateDetails | null;
  /**
   * The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
   */
  taxability_reason:
    | 'customer_exempt'
    | 'not_available'
    | 'not_collecting'
    | 'not_subject_to_tax'
    | 'not_supported'
    | 'portion_product_exempt'
    | 'portion_reduced_rated'
    | 'portion_standard_rated'
    | 'product_exempt'
    | 'product_exempt_holiday'
    | 'proportionally_rated'
    | 'reduced_rated'
    | 'reverse_charge'
    | 'standard_rated'
    | 'taxable_basis_reduced'
    | 'zero_rated';
  /**
   * The amount on which tax is calculated, in cents (or local equivalent).
   */
  taxable_amount?: number | null;
  /**
   * The type of tax information.
   */
  type: 'tax_rate_details';
};
/**
 * BillingBillResourceInvoicingTaxesTaxRateDetails
 */
export type BillingBillResourceInvoicingTaxesTaxRateDetails = {
  tax_rate: string;
};
/**
 * BillingClocksResourceStatusDetailsAdvancingStatusDetails
 */
export type BillingClocksResourceStatusDetailsAdvancingStatusDetails = {
  /**
   * The `frozen_time` that the Test Clock is advancing towards.
   */
  target_frozen_time: number;
};
/**
 * BillingClocksResourceStatusDetailsStatusDetails
 */
export type BillingClocksResourceStatusDetailsStatusDetails = {
  advancing?: BillingClocksResourceStatusDetailsAdvancingStatusDetails;
};
/**
 * BillingCreditGrantsResourceAmount
 */
export type BillingCreditGrantsResourceAmount = {
  /**
   * The monetary amount.
   */
  monetary?: BillingCreditGrantsResourceMonetaryAmount | null;
  /**
   * The type of this amount. We currently only support `monetary` billing credits.
   */
  type: 'monetary';
};
/**
 * BillingCreditGrantsResourceApplicabilityConfig
 */
export type BillingCreditGrantsResourceApplicabilityConfig = {
  scope: BillingCreditGrantsResourceScope;
};
/**
 * BillingCreditGrantsResourceApplicablePrice
 */
export type BillingCreditGrantsResourceApplicablePrice = {
  /**
   * Unique identifier for the object.
   */
  id?: string | null;
};
/**
 * BillingCreditGrantsResourceBalanceCredit
 */
export type BillingCreditGrantsResourceBalanceCredit = {
  amount: BillingCreditGrantsResourceAmount;
  /**
   * Details of the invoice to which the reinstated credits were originally applied. Only present if `type` is `credits_application_invoice_voided`.
   */
  credits_application_invoice_voided?: BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoided | null;
  /**
   * The type of credit transaction.
   */
  type: 'credits_application_invoice_voided' | 'credits_granted';
};
/**
 * BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoided
 */
export type BillingCreditGrantsResourceBalanceCreditsApplicationInvoiceVoided =
  {
    /**
     * The invoice to which the reinstated billing credits were originally applied.
     */
    invoice: string | Invoice;
    /**
     * The invoice line item to which the reinstated billing credits were originally applied.
     */
    invoice_line_item: string;
  };
/**
 * BillingCreditGrantsResourceBalanceCreditsApplied
 */
export type BillingCreditGrantsResourceBalanceCreditsApplied = {
  /**
   * The invoice to which the billing credits were applied.
   */
  invoice: string | Invoice;
  /**
   * The invoice line item to which the billing credits were applied.
   */
  invoice_line_item: string;
};
/**
 * BillingCreditGrantsResourceBalanceDebit
 */
export type BillingCreditGrantsResourceBalanceDebit = {
  amount: BillingCreditGrantsResourceAmount;
  /**
   * Details of how the billing credits were applied to an invoice. Only present if `type` is `credits_applied`.
   */
  credits_applied?: BillingCreditGrantsResourceBalanceCreditsApplied | null;
  /**
   * The type of debit transaction.
   */
  type: 'credits_applied' | 'credits_expired' | 'credits_voided';
};
/**
 * BillingCreditGrantsResourceMonetaryAmount
 */
export type BillingCreditGrantsResourceMonetaryAmount = {
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * A positive integer representing the amount.
   */
  value: number;
};
/**
 * BillingCreditGrantsResourceScope
 */
export type BillingCreditGrantsResourceScope = {
  /**
   * The price type that credit grants can apply to. We currently only support the `metered` price type. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them. Cannot be used in combination with `prices`.
   */
  price_type?: 'metered';
  /**
   * The prices that credit grants can apply to. We currently only support `metered` prices. This refers to prices that have a [Billing Meter](https://docs.stripe.com/api/billing/meter) attached to them. Cannot be used in combination with `price_type`.
   */
  prices?: BillingCreditGrantsResourceApplicablePrice[];
};
/**
 * billing_details
 */
export type BillingDetails = {
  /**
   * Billing address.
   */
  address?: Address | null;
  /**
   * Email address.
   */
  email?: string | null;
  /**
   * Full name.
   */
  name?: string | null;
  /**
   * Billing phone number (including extension).
   */
  phone?: string | null;
  /**
   * Taxpayer identification number. Used only for transactions between LATAM buyers and non-LATAM sellers.
   */
  tax_id?: string | null;
};
/**
 * BillingMeterResourceAggregationSettings
 */
export type BillingMeterResourceAggregationSettings = {
  /**
   * Specifies how events are aggregated.
   */
  formula: 'count' | 'last' | 'sum';
};
/**
 * BillingMeterResourceBillingMeterEventAdjustmentCancel
 */
export type BillingMeterResourceBillingMeterEventAdjustmentCancel = {
  /**
   * Unique identifier for the event.
   */
  identifier?: string | null;
};
/**
 * BillingMeterResourceBillingMeterStatusTransitions
 */
export type BillingMeterResourceBillingMeterStatusTransitions = {
  /**
   * The time the meter was deactivated, if any. Measured in seconds since Unix epoch.
   */
  deactivated_at?: number | null;
};
/**
 * BillingMeterResourceBillingMeterValue
 */
export type BillingMeterResourceBillingMeterValue = {
  /**
   * The key in the meter event payload to use as the value for this meter.
   */
  event_payload_key: string;
};
/**
 * BillingMeterResourceCustomerMappingSettings
 */
export type BillingMeterResourceCustomerMappingSettings = {
  /**
   * The key in the meter event payload to use for mapping the event to a customer.
   */
  event_payload_key: string;
  /**
   * The method for mapping a meter event to a customer.
   */
  type: 'by_id';
};
/**
 * PortalConfiguration
 * A portal configuration describes the functionality and behavior of a portal session.
 */
export type BillingPortalConfiguration = {
  /**
   * Whether the configuration is active and can be used to create portal sessions.
   */
  active: boolean;
  /**
   * ID of the Connect Application that created the configuration.
   */
  application?: (string | Application | DeletedApplication) | null;
  business_profile: PortalBusinessProfile;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The default URL to redirect customers to when they click on the portal's link to return to your website. This can be [overriden](https://stripe.com/docs/api/customer_portal/sessions/create#create_portal_session-return_url) when creating the session.
   */
  default_return_url?: string | null;
  features: PortalFeatures;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Whether the configuration is the default. If `true`, this configuration can be managed in the Dashboard and portal sessions will use this configuration unless it is overriden when creating the session.
   */
  is_default: boolean;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  login_page: PortalLoginPage;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing_portal.configuration';
  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   */
  updated: number;
};
/**
 * PortalSession
 * The Billing customer portal is a Stripe-hosted UI for subscription and
 * billing management.
 *
 * A portal configuration describes the functionality and features that you
 * want to provide to your customers through the portal.
 *
 * A portal session describes the instantiation of the customer portal for
 * a particular customer. By visiting the session's URL, the customer
 * can manage their subscriptions and billing details. For security reasons,
 * sessions are short-lived and will expire if the customer does not visit the URL.
 * Create sessions on-demand when customers intend to manage their subscriptions
 * and billing details.
 *
 * Related guide: [Customer management](/customer-management)
 */
export type BillingPortalSession = {
  /**
   * The configuration used by this session, describing the features available.
   */
  configuration: string | BillingPortalConfiguration;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The ID of the customer for this session.
   */
  customer: string;
  /**
   * Information about a specific flow for the customer to go through. See the [docs](https://stripe.com/docs/customer-management/portal-deep-links) to learn more about using customer portal deep links and flows.
   */
  flow?: PortalFlowsFlow | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The IETF language tag of the locale Customer Portal is displayed in. If blank or auto, the customer’s `preferred_locales` or browser’s locale is used.
   */
  locale?:
    | (
        | 'auto'
        | 'bg'
        | 'cs'
        | 'da'
        | 'de'
        | 'el'
        | 'en'
        | 'en-AU'
        | 'en-CA'
        | 'en-GB'
        | 'en-IE'
        | 'en-IN'
        | 'en-NZ'
        | 'en-SG'
        | 'es'
        | 'es-419'
        | 'et'
        | 'fi'
        | 'fil'
        | 'fr'
        | 'fr-CA'
        | 'hr'
        | 'hu'
        | 'id'
        | 'it'
        | 'ja'
        | 'ko'
        | 'lt'
        | 'lv'
        | 'ms'
        | 'mt'
        | 'nb'
        | 'nl'
        | 'pl'
        | 'pt'
        | 'pt-BR'
        | 'ro'
        | 'ru'
        | 'sk'
        | 'sl'
        | 'sv'
        | 'th'
        | 'tr'
        | 'vi'
        | 'zh'
        | 'zh-HK'
        | 'zh-TW'
      )
    | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'billing_portal.session';
  /**
   * The account for which the session was created on behalf of. When specified, only subscriptions and invoices with this `on_behalf_of` account appear in the portal. For more information, see the [docs](https://stripe.com/docs/connect/separate-charges-and-transfers#settlement-merchant). Use the [Accounts API](https://stripe.com/docs/api/accounts/object#account_object-settings-branding) to modify the `on_behalf_of` account's branding settings, which the portal displays.
   */
  on_behalf_of?: string | null;
  /**
   * The URL to redirect customers to when they click on the portal's link to return to your website.
   */
  return_url?: string | null;
  /**
   * The short-lived URL of the session that gives customers access to the customer portal.
   */
  url: string;
};
/**
 * CancellationDetails
 */
export type CancellationDetails = {
  /**
   * Additional comments about why the user canceled the subscription, if the subscription was canceled explicitly by the user.
   */
  comment?: string | null;
  /**
   * The customer submitted reason for why they canceled, if the subscription was canceled explicitly by the user.
   */
  feedback?:
    | (
        | 'customer_service'
        | 'low_quality'
        | 'missing_features'
        | 'other'
        | 'switched_service'
        | 'too_complex'
        | 'too_expensive'
        | 'unused'
      )
    | null;
  /**
   * Why this subscription was canceled.
   */
  reason?:
    | ('cancellation_requested' | 'payment_disputed' | 'payment_failed')
    | null;
};
/**
 * AccountCapability
 * This is an object representing a capability for a Stripe account.
 *
 * Related guide: [Account capabilities](https://stripe.com/docs/connect/account-capabilities)
 */
export type Capability = {
  /**
   * The account for which the capability enables functionality.
   */
  account: string | Account;
  future_requirements?: AccountCapabilityFutureRequirements;
  /**
   * The identifier for the capability.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'capability';
  /**
   * Whether the capability has been requested.
   */
  requested: boolean;
  /**
   * Time at which the capability was requested. Measured in seconds since the Unix epoch.
   */
  requested_at?: number | null;
  requirements?: AccountCapabilityRequirements;
  /**
   * The status of the capability.
   */
  status: 'active' | 'disabled' | 'inactive' | 'pending' | 'unrequested';
};
/**
 * Card
 * You can store multiple cards on a customer in order to charge the customer
 * later. You can also store multiple debit cards on a recipient in order to
 * transfer to those cards later.
 *
 * Related guide: [Card payments with Sources](https://stripe.com/docs/sources/cards)
 */
export type Card = {
  account?: (string | Account) | null;
  /**
   * City/District/Suburb/Town/Village.
   */
  address_city?: string | null;
  /**
   * Billing address country, if provided when creating card.
   */
  address_country?: string | null;
  /**
   * Address line 1 (Street address/PO Box/Company name).
   */
  address_line1?: string | null;
  /**
   * If `address_line1` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_line1_check?: string | null;
  /**
   * Address line 2 (Apartment/Suite/Unit/Building).
   */
  address_line2?: string | null;
  /**
   * State/County/Province/Region.
   */
  address_state?: string | null;
  /**
   * ZIP or postal code.
   */
  address_zip?: string | null;
  /**
   * If `address_zip` was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_zip_check?: string | null;
  /**
   * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
   */
  allow_redisplay?: ('always' | 'limited' | 'unspecified') | null;
  /**
   * A set of available payout methods for this card. Only values from this set should be passed as the `method` when creating a payout.
   */
  available_payout_methods?: ('instant' | 'standard')[] | null;
  /**
   * Card brand. Can be `American Express`, `Diners Club`, `Discover`, `Eftpos Australia`, `Girocard`, `JCB`, `MasterCard`, `UnionPay`, `Visa`, or `Unknown`.
   */
  brand: string;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * Three-letter [ISO code for currency](https://www.iso.org/iso-4217-currency-codes.html) in lowercase. Must be a [supported currency](https://docs.stripe.com/currencies). Only applicable on accounts (not customers or recipients). The card can be used as a transfer destination for funds in this currency. This property is only available when returned as an [External Account](/api/external_account_cards/object) where [controller.is_controller](/api/accounts/object#account_object-controller-is_controller) is `true`.
   */
  currency?: string | null;
  /**
   * The customer that this card belongs to. This attribute will not be in the card object if the card belongs to an account or recipient instead.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * If a CVC was provided, results of the check: `pass`, `fail`, `unavailable`, or `unchecked`. A result of unchecked indicates that CVC was provided but hasn't been checked yet. Checks are typically performed when attaching a card to a Customer object, or when creating a charge. For more details, see [Check if a card is valid without a charge](https://support.stripe.com/questions/check-if-a-card-is-valid-without-a-charge).
   */
  cvc_check?: string | null;
  /**
   * Whether this card is the default external account for its currency. This property is only available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `application`, which includes Custom accounts.
   */
  default_for_currency?: boolean | null;
  /**
   * (For tokenized numbers only.) The last four digits of the device account number.
   */
  dynamic_last4?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Issuer identification number of the card.
   */
  iin?: string;
  /**
   * The last four digits of the card.
   */
  last4: string;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * Cardholder name.
   */
  name?: string | null;
  networks?: TokenCardNetworks;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'card';
  /**
   * Status of a card based on the card issuer.
   */
  regulated_status?: ('regulated' | 'unregulated') | null;
  /**
   * For external accounts that are cards, possible values are `new` and `errored`. If a payout fails, the status is set to `errored` and [scheduled payouts](https://stripe.com/docs/payouts#payout-schedule) are stopped until account details are updated.
   */
  status?: string | null;
  /**
   * If the card number is tokenized, this is the method that was used. Can be `android_pay` (includes Google Pay), `apple_pay`, `masterpass`, `visa_checkout`, or null.
   */
  tokenization_method?: string | null;
};
/**
 * card_generated_from_payment_method_details
 */
export type CardGeneratedFromPaymentMethodDetails = {
  card_present?: PaymentMethodDetailsCardPresent;
  /**
   * The type of payment method transaction-specific details from the transaction that generated this `card` payment method. Always `card_present`.
   */
  type: string;
};
/**
 * CardIssuingAccountTermsOfService
 */
export type CardIssuingAccountTermsOfService = {
  /**
   * The Unix timestamp marking when the account representative accepted the service agreement.
   */
  date?: number | null;
  /**
   * The IP address from which the account representative accepted the service agreement.
   */
  ip?: string | null;
  /**
   * The user agent of the browser from which the account representative accepted the service agreement.
   */
  user_agent?: string;
};
/**
 * card_mandate_payment_method_details
 */
export type CardMandatePaymentMethodDetails = unknown;
/**
 * cash_balance
 * A customer's `Cash balance` represents real funds. Customers can add funds to their cash balance by sending a bank transfer. These funds can be used for payment and can eventually be paid out to your bank account.
 */
export type CashBalance = {
  /**
   * A hash of all cash balances available to this customer. You cannot delete a customer with any cash balances, even if the balance is 0. Amounts are represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  available?: {
    [key: string]: number;
  } | null;
  /**
   * The ID of the customer whose cash balance this object represents.
   */
  customer: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'cash_balance';
  settings: CustomerBalanceCustomerBalanceSettings;
};
/**
 * Charge
 * The `Charge` object represents a single attempt to move money into your Stripe account.
 * PaymentIntent confirmation is the most common way to create Charges, but transferring
 * money to a different Stripe account through Connect also creates Charges.
 * Some legacy payment flows create Charges directly, which is not recommended for new integrations.
 */
export type Charge = {
  /**
   * Amount intended to be collected by this payment. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
   */
  amount: number;
  /**
   * Amount in cents (or local equivalent) captured (can be less than the amount attribute on the charge if a partial capture was made).
   */
  amount_captured: number;
  /**
   * Amount in cents (or local equivalent) refunded (can be less than the amount attribute on the charge if a partial refund was issued).
   */
  amount_refunded: number;
  /**
   * ID of the Connect application that created the charge.
   */
  application?: (string | Application) | null;
  /**
   * The application fee (if any) for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.
   */
  application_fee?: (string | ApplicationFee) | null;
  /**
   * The amount of the application fee (if any) requested for the charge. [See the Connect documentation](https://stripe.com/docs/connect/direct-charges#collect-fees) for details.
   */
  application_fee_amount?: number | null;
  /**
   * ID of the balance transaction that describes the impact of this charge on your account balance (not including refunds or disputes).
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  billing_details: BillingDetails;
  /**
   * The full statement descriptor that is passed to card networks, and that is displayed on your customers' credit card and bank statements. Allows you to see what the statement descriptor looks like after the static and dynamic portions are combined. This value only exists for card payments.
   */
  calculated_statement_descriptor?: string | null;
  /**
   * If the charge was created without capturing, this Boolean represents whether it is still uncaptured or has since been captured.
   */
  captured: boolean;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the customer this charge is for if one exists.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Whether the charge has been disputed.
   */
  disputed: boolean;
  /**
   * ID of the balance transaction that describes the reversal of the balance on your account due to payment failure.
   */
  failure_balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * Error code explaining reason for charge failure if available (see [the errors section](https://stripe.com/docs/error-codes) for a list of codes).
   */
  failure_code?: string | null;
  /**
   * Message to user further explaining reason for charge failure if available.
   */
  failure_message?: string | null;
  /**
   * Information on fraud assessments for the charge.
   */
  fraud_details?: ChargeFraudDetails | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'charge';
  /**
   * The account (if any) the charge was made on behalf of without triggering an automatic transfer. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * Details about whether the payment was accepted, and why. See [understanding declines](https://stripe.com/docs/declines) for details.
   */
  outcome?: ChargeOutcome | null;
  /**
   * `true` if the charge succeeded, or was successfully authorized for later capture.
   */
  paid: boolean;
  /**
   * ID of the PaymentIntent associated with this charge, if one exists.
   */
  payment_intent?: (string | PaymentIntent) | null;
  /**
   * ID of the payment method used in this charge.
   */
  payment_method?: string | null;
  /**
   * Details about the payment method at the time of the transaction.
   */
  payment_method_details?: PaymentMethodDetails | null;
  presentment_details?: PaymentFlowsPaymentIntentPresentmentDetails;
  radar_options?: RadarRadarOptions;
  /**
   * This is the email address that the receipt for this charge was sent to.
   */
  receipt_email?: string | null;
  /**
   * This is the transaction number that appears on email receipts sent for this charge. This attribute will be `null` until a receipt has been sent.
   */
  receipt_number?: string | null;
  /**
   * This is the URL to view the receipt for this charge. The receipt is kept up-to-date to the latest state of the charge, including any refunds. If the charge is for an Invoice, the receipt will be stylized as an Invoice receipt.
   */
  receipt_url?: string | null;
  /**
   * Whether the charge has been fully refunded. If the charge is only partially refunded, this attribute will still be false.
   */
  refunded: boolean;
  /**
   * RefundList
   * A list of refunds that have been applied to the charge.
   */
  refunds?: {
    /**
     * Details about each object.
     */
    data: Refund[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  } | null;
  /**
   * ID of the review associated with this charge if one exists.
   */
  review?: (string | Review) | null;
  /**
   * Shipping information for the charge.
   */
  shipping?: Shipping | null;
  /**
   * The transfer ID which created this charge. Only present if the charge came from another Stripe account. [See the Connect documentation](https://docs.stripe.com/connect/destination-charges) for details.
   */
  source_transfer?: (string | Transfer) | null;
  /**
   * For a non-card charge, text that appears on the customer's statement as the statement descriptor. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
   *
   * For a card charge, this value is ignored unless you don't specify a `statement_descriptor_suffix`, in which case this value is used as the suffix.
   */
  statement_descriptor?: string | null;
  /**
   * Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement. If the account has no prefix value, the suffix is concatenated to the account's statement descriptor.
   */
  statement_descriptor_suffix?: string | null;
  /**
   * The status of the payment is either `succeeded`, `pending`, or `failed`.
   */
  status: 'failed' | 'pending' | 'succeeded';
  /**
   * ID of the transfer to the `destination` account (only applicable if the charge was created using the `destination` parameter).
   */
  transfer?: string | Transfer;
  /**
   * An optional dictionary including the account to automatically transfer to as part of a destination charge. [See the Connect documentation](https://stripe.com/docs/connect/destination-charges) for details.
   */
  transfer_data?: ChargeTransferData | null;
  /**
   * A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
   */
  transfer_group?: string | null;
};
/**
 * ChargeFraudDetails
 */
export type ChargeFraudDetails = {
  /**
   * Assessments from Stripe. If set, the value is `fraudulent`.
   */
  stripe_report?: string;
  /**
   * Assessments reported by you. If set, possible values of are `safe` and `fraudulent`.
   */
  user_report?: string;
};
/**
 * ChargeOutcome
 */
export type ChargeOutcome = {
  /**
   * An enumerated value providing a more detailed explanation on [how to proceed with an error](https://stripe.com/docs/declines#retrying-issuer-declines).
   */
  advice_code?:
    | ('confirm_card_data' | 'do_not_try_again' | 'try_again_later')
    | null;
  /**
   * For charges declined by the network, a 2 digit code which indicates the advice returned by the network on how to proceed with an error.
   */
  network_advice_code?: string | null;
  /**
   * For charges declined by the network, a brand specific 2, 3, or 4 digit code which indicates the reason the authorization failed.
   */
  network_decline_code?: string | null;
  /**
   * Possible values are `approved_by_network`, `declined_by_network`, `not_sent_to_network`, and `reversed_after_approval`. The value `reversed_after_approval` indicates the payment was [blocked by Stripe](https://stripe.com/docs/declines#blocked-payments) after bank authorization, and may temporarily appear as "pending" on a cardholder's statement.
   */
  network_status?: string | null;
  /**
   * An enumerated value providing a more detailed explanation of the outcome's `type`. Charges blocked by Radar's default block rule have the value `highest_risk_level`. Charges placed in review by Radar's default review rule have the value `elevated_risk_level`. Charges authorized, blocked, or placed in review by custom rules have the value `rule`. See [understanding declines](https://stripe.com/docs/declines) for more details.
   */
  reason?: string | null;
  /**
   * Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are `normal`, `elevated`, `highest`. For non-card payments, and card-based payments predating the public assignment of risk levels, this field will have the value `not_assessed`. In the event of an error in the evaluation, this field will have the value `unknown`. This field is only available with Radar.
   */
  risk_level?: string;
  /**
   * Stripe Radar's evaluation of the riskiness of the payment. Possible values for evaluated payments are between 0 and 100. For non-card payments, card-based payments predating the public assignment of risk scores, or in the event of an error during evaluation, this field will not be present. This field is only available with Radar for Fraud Teams.
   */
  risk_score?: number;
  /**
   * The ID of the Radar rule that matched the payment, if applicable.
   */
  rule?: string | Rule;
  /**
   * A human-readable description of the outcome type and reason, designed for you (the recipient of the payment), not your customer.
   */
  seller_message?: string | null;
  /**
   * Possible values are `authorized`, `manual_review`, `issuer_declined`, `blocked`, and `invalid`. See [understanding declines](https://stripe.com/docs/declines) and [Radar reviews](https://stripe.com/docs/radar/reviews) for details.
   */
  type: string;
};
/**
 * ChargeTransferData
 */
export type ChargeTransferData = {
  /**
   * The amount transferred to the destination account, if specified. By default, the entire charge amount is transferred to the destination account.
   */
  amount?: number | null;
  /**
   * ID of an existing, connected Stripe account to transfer funds to if `transfer_data` was specified in the charge request.
   */
  destination: string | Account;
};
/**
 * Session
 * A Checkout Session represents your customer's session as they pay for
 * one-time purchases or subscriptions through [Checkout](https://stripe.com/docs/payments/checkout)
 * or [Payment Links](https://stripe.com/docs/payments/payment-links). We recommend creating a
 * new Session each time your customer attempts to pay.
 *
 * Once payment is successful, the Checkout Session will contain a reference
 * to the [Customer](https://stripe.com/docs/api/customers), and either the successful
 * [PaymentIntent](https://stripe.com/docs/api/payment_intents) or an active
 * [Subscription](https://stripe.com/docs/api/subscriptions).
 *
 * You can create a Checkout Session on your server and redirect to its URL
 * to begin Checkout.
 *
 * Related guide: [Checkout quickstart](https://stripe.com/docs/checkout/quickstart)
 */
export type CheckoutSession = {
  /**
   * Settings for price localization with [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing).
   */
  adaptive_pricing?: PaymentPagesCheckoutSessionAdaptivePricing | null;
  /**
   * When set, provides configuration for actions to take if this Checkout Session expires.
   */
  after_expiration?: PaymentPagesCheckoutSessionAfterExpiration | null;
  /**
   * Enables user redeemable promotion codes.
   */
  allow_promotion_codes?: boolean | null;
  /**
   * Total of all items before discounts or taxes are applied.
   */
  amount_subtotal?: number | null;
  /**
   * Total of all items after discounts and taxes are applied.
   */
  amount_total?: number | null;
  automatic_tax: PaymentPagesCheckoutSessionAutomaticTax;
  /**
   * Describes whether Checkout should collect the customer's billing address. Defaults to `auto`.
   */
  billing_address_collection?: ('auto' | 'required') | null;
  /**
   * If set, Checkout displays a back button and customers will be directed to this URL if they decide to cancel payment and return to your website.
   */
  cancel_url?: string | null;
  /**
   * A unique string to reference the Checkout Session. This can be a
   * customer ID, a cart ID, or similar, and can be used to reconcile the
   * Session with your internal systems.
   */
  client_reference_id?: string | null;
  /**
   * The client secret of your Checkout Session. Applies to Checkout Sessions with `ui_mode: embedded` or `ui_mode: custom`. For `ui_mode: embedded`, the client secret is to be used when initializing Stripe.js embedded checkout.
   *  For `ui_mode: custom`, use the client secret with [initCheckout](https://stripe.com/docs/js/custom_checkout/init) on your front end.
   */
  client_secret?: string | null;
  /**
   * Information about the customer collected within the Checkout Session.
   */
  collected_information?: PaymentPagesCheckoutSessionCollectedInformation | null;
  /**
   * Results of `consent_collection` for this session.
   */
  consent?: PaymentPagesCheckoutSessionConsent | null;
  /**
   * When set, provides configuration for the Checkout Session to gather active consent from customers.
   */
  consent_collection?: PaymentPagesCheckoutSessionConsentCollection | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency?: string | null;
  /**
   * Currency conversion details for [Adaptive Pricing](https://docs.stripe.com/payments/checkout/adaptive-pricing) sessions created before 2025-03-31.
   */
  currency_conversion?: PaymentPagesCheckoutSessionCurrencyConversion | null;
  /**
   * Collect additional information from your customer using custom fields. Up to 3 fields are supported.
   */
  custom_fields: PaymentPagesCheckoutSessionCustomFields[];
  custom_text: PaymentPagesCheckoutSessionCustomText;
  /**
   * The ID of the customer for this Session.
   * For Checkout Sessions in `subscription` mode or Checkout Sessions with `customer_creation` set as `always` in `payment` mode, Checkout
   * will create a new customer object based on information provided
   * during the payment flow unless an existing customer was provided when
   * the Session was created.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * Configure whether a Checkout Session creates a Customer when the Checkout Session completes.
   */
  customer_creation?: ('always' | 'if_required') | null;
  /**
   * The customer details including the customer's tax exempt status and the customer's tax IDs. Customer's address details are not present on Sessions in `setup` mode.
   */
  customer_details?: PaymentPagesCheckoutSessionCustomerDetails | null;
  /**
   * If provided, this value will be used when the Customer object is created.
   * If not provided, customers will be asked to enter their email address.
   * Use this parameter to prefill customer data if you already have an email
   * on file. To access information about the customer once the payment flow is
   * complete, use the `customer` attribute.
   */
  customer_email?: string | null;
  /**
   * List of coupons and promotion codes attached to the Checkout Session.
   */
  discounts?: PaymentPagesCheckoutSessionDiscount[] | null;
  /**
   * The timestamp at which the Checkout Session will expire.
   */
  expires_at: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * ID of the invoice created by the Checkout Session, if it exists.
   */
  invoice?: (string | Invoice) | null;
  /**
   * Details on the state of invoice creation for the Checkout Session.
   */
  invoice_creation?: PaymentPagesCheckoutSessionInvoiceCreation | null;
  /**
   * PaymentPagesCheckoutSessionListLineItems
   * The line items purchased by the customer.
   */
  line_items?: {
    /**
     * Details about each object.
     */
    data: Item[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The IETF language tag of the locale Checkout is displayed in. If blank or `auto`, the browser's locale is used.
   */
  locale?:
    | (
        | 'auto'
        | 'bg'
        | 'cs'
        | 'da'
        | 'de'
        | 'el'
        | 'en'
        | 'en-GB'
        | 'es'
        | 'es-419'
        | 'et'
        | 'fi'
        | 'fil'
        | 'fr'
        | 'fr-CA'
        | 'hr'
        | 'hu'
        | 'id'
        | 'it'
        | 'ja'
        | 'ko'
        | 'lt'
        | 'lv'
        | 'ms'
        | 'mt'
        | 'nb'
        | 'nl'
        | 'pl'
        | 'pt'
        | 'pt-BR'
        | 'ro'
        | 'ru'
        | 'sk'
        | 'sl'
        | 'sv'
        | 'th'
        | 'tr'
        | 'vi'
        | 'zh'
        | 'zh-HK'
        | 'zh-TW'
      )
    | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * The mode of the Checkout Session.
   */
  mode: 'payment' | 'setup' | 'subscription';
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'checkout.session';
  /**
   * The optional items presented to the customer at checkout.
   */
  optional_items?: PaymentPagesCheckoutSessionOptionalItem[] | null;
  /**
   * The ID of the PaymentIntent for Checkout Sessions in `payment` mode. You can't confirm or cancel the PaymentIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
   */
  payment_intent?: (string | PaymentIntent) | null;
  /**
   * The ID of the Payment Link that created this Session.
   */
  payment_link?: (string | PaymentLink) | null;
  /**
   * Configure whether a Checkout Session should collect a payment method. Defaults to `always`.
   */
  payment_method_collection?: ('always' | 'if_required') | null;
  /**
   * Information about the payment method configuration used for this Checkout session if using dynamic payment methods.
   */
  payment_method_configuration_details?: PaymentMethodConfigBizPaymentMethodConfigurationDetails | null;
  /**
   * Payment-method-specific configuration for the PaymentIntent or SetupIntent of this CheckoutSession.
   */
  payment_method_options?: CheckoutSessionPaymentMethodOptions | null;
  /**
   * A list of the types of payment methods (e.g. card) this Checkout
   * Session is allowed to accept.
   */
  payment_method_types: string[];
  /**
   * The payment status of the Checkout Session, one of `paid`, `unpaid`, or `no_payment_required`.
   * You can use this value to decide when to fulfill your customer's order.
   */
  payment_status: 'no_payment_required' | 'paid' | 'unpaid';
  /**
   * This property is used to set up permissions for various actions (e.g., update) on the CheckoutSession object.
   *
   * For specific permissions, please refer to their dedicated subsections, such as `permissions.update_shipping_details`.
   */
  permissions?: PaymentPagesCheckoutSessionPermissions | null;
  phone_number_collection?: PaymentPagesCheckoutSessionPhoneNumberCollection;
  presentment_details?: PaymentFlowsPaymentIntentPresentmentDetails;
  /**
   * The ID of the original expired Checkout Session that triggered the recovery flow.
   */
  recovered_from?: string | null;
  /**
   * This parameter applies to `ui_mode: embedded`. Learn more about the [redirect behavior](https://stripe.com/docs/payments/checkout/custom-success-page?payment-ui=embedded-form) of embedded sessions. Defaults to `always`.
   */
  redirect_on_completion?: 'always' | 'if_required' | 'never';
  /**
   * Applies to Checkout Sessions with `ui_mode: embedded` or `ui_mode: custom`. The URL to redirect your customer back to after they authenticate or cancel their payment on the payment method's app or site.
   */
  return_url?: string;
  /**
   * Controls saved payment method settings for the session. Only available in `payment` and `subscription` mode.
   */
  saved_payment_method_options?: PaymentPagesCheckoutSessionSavedPaymentMethodOptions | null;
  /**
   * The ID of the SetupIntent for Checkout Sessions in `setup` mode. You can't confirm or cancel the SetupIntent for a Checkout Session. To cancel, [expire the Checkout Session](https://stripe.com/docs/api/checkout/sessions/expire) instead.
   */
  setup_intent?: (string | SetupIntent) | null;
  /**
   * When set, provides configuration for Checkout to collect a shipping address from a customer.
   */
  shipping_address_collection?: PaymentPagesCheckoutSessionShippingAddressCollection | null;
  /**
   * The details of the customer cost of shipping, including the customer chosen ShippingRate.
   */
  shipping_cost?: PaymentPagesCheckoutSessionShippingCost | null;
  /**
   * The shipping rate options applied to this Session.
   */
  shipping_options: PaymentPagesCheckoutSessionShippingOption[];
  /**
   * The status of the Checkout Session, one of `open`, `complete`, or `expired`.
   */
  status?: ('complete' | 'expired' | 'open') | null;
  /**
   * Describes the type of transaction being performed by Checkout in order to customize
   * relevant text on the page, such as the submit button. `submit_type` can only be
   * specified on Checkout Sessions in `payment` mode. If blank or `auto`, `pay` is used.
   */
  submit_type?: ('auto' | 'book' | 'donate' | 'pay' | 'subscribe') | null;
  /**
   * The ID of the [Subscription](https://stripe.com/docs/api/subscriptions) for Checkout Sessions in `subscription` mode.
   */
  subscription?: (string | Subscription) | null;
  /**
   * The URL the customer will be directed to after the payment or
   * subscription creation is successful.
   */
  success_url?: string | null;
  tax_id_collection?: PaymentPagesCheckoutSessionTaxIdCollection;
  /**
   * Tax and discount details for the computed total amount.
   */
  total_details?: PaymentPagesCheckoutSessionTotalDetails | null;
  /**
   * The UI mode of the Session. Defaults to `hosted`.
   */
  ui_mode?: ('custom' | 'embedded' | 'hosted') | null;
  /**
   * The URL to the Checkout Session. Applies to Checkout Sessions with `ui_mode: hosted`. Redirect customers to this URL to take them to Checkout. If you’re using [Custom Domains](https://stripe.com/docs/payments/checkout/custom-domains), the URL will use your subdomain. Otherwise, it’ll use `checkout.stripe.com.`
   * This value is only present when the session is active.
   */
  url?: string | null;
  /**
   * Wallet-specific configuration for this Checkout Session.
   */
  wallet_options?: CheckoutSessionWalletOptions | null;
};
/**
 * CheckoutAcssDebitMandateOptions
 */
export type CheckoutAcssDebitMandateOptions = {
  /**
   * A URL for custom mandate text
   */
  custom_mandate_url?: string;
  /**
   * List of Stripe products where this mandate can be selected automatically. Returned when the Session is in `setup` mode.
   */
  default_for?: ('invoice' | 'subscription')[];
  /**
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   */
  interval_description?: string | null;
  /**
   * Payment schedule for the mandate.
   */
  payment_schedule?: ('combined' | 'interval' | 'sporadic') | null;
  /**
   * Transaction type of the mandate.
   */
  transaction_type?: ('business' | 'personal') | null;
};
/**
 * CheckoutAcssDebitPaymentMethodOptions
 */
export type CheckoutAcssDebitPaymentMethodOptions = {
  /**
   * Currency supported by the bank account. Returned when the Session is in `setup` mode.
   */
  currency?: 'cad' | 'usd';
  mandate_options?: CheckoutAcssDebitMandateOptions;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * CheckoutAffirmPaymentMethodOptions
 */
export type CheckoutAffirmPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutAfterpayClearpayPaymentMethodOptions
 */
export type CheckoutAfterpayClearpayPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutAlipayPaymentMethodOptions
 */
export type CheckoutAlipayPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutAmazonPayPaymentMethodOptions
 */
export type CheckoutAmazonPayPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * CheckoutAuBecsDebitPaymentMethodOptions
 */
export type CheckoutAuBecsDebitPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
};
/**
 * CheckoutBacsDebitPaymentMethodOptions
 */
export type CheckoutBacsDebitPaymentMethodOptions = {
  mandate_options?: CheckoutPaymentMethodOptionsMandateOptionsBacsDebit;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
};
/**
 * CheckoutBancontactPaymentMethodOptions
 */
export type CheckoutBancontactPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutBoletoPaymentMethodOptions
 */
export type CheckoutBoletoPaymentMethodOptions = {
  /**
   * The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
   */
  expires_after_days: number;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
};
/**
 * CheckoutCardInstallmentsOptions
 */
export type CheckoutCardInstallmentsOptions = {
  /**
   * Indicates if installments are enabled
   */
  enabled?: boolean;
};
/**
 * CheckoutCardPaymentMethodOptions
 */
export type CheckoutCardPaymentMethodOptions = {
  installments?: CheckoutCardInstallmentsOptions;
  /**
   * Request ability to [capture beyond the standard authorization validity window](/payments/extended-authorization) for this CheckoutSession.
   */
  request_extended_authorization?: 'if_available' | 'never';
  /**
   * Request ability to [increment the authorization](/payments/incremental-authorization) for this CheckoutSession.
   */
  request_incremental_authorization?: 'if_available' | 'never';
  /**
   * Request ability to make [multiple captures](/payments/multicapture) for this CheckoutSession.
   */
  request_multicapture?: 'if_available' | 'never';
  /**
   * Request ability to [overcapture](/payments/overcapture) for this CheckoutSession.
   */
  request_overcapture?: 'if_available' | 'never';
  /**
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure: 'any' | 'automatic' | 'challenge';
  restrictions?: PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
   */
  statement_descriptor_suffix_kana?: string;
  /**
   * Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
   */
  statement_descriptor_suffix_kanji?: string;
};
/**
 * CheckoutCashappPaymentMethodOptions
 */
export type CheckoutCashappPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutCustomerBalanceBankTransferPaymentMethodOptions
 */
export type CheckoutCustomerBalanceBankTransferPaymentMethodOptions = {
  eu_bank_transfer?: PaymentMethodOptionsCustomerBalanceEuBankAccount;
  /**
   * List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
   *
   * Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
   */
  requested_address_types?: (
    | 'aba'
    | 'iban'
    | 'sepa'
    | 'sort_code'
    | 'spei'
    | 'swift'
    | 'zengin'
  )[];
  /**
   * The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
   */
  type?:
    | (
        | 'eu_bank_transfer'
        | 'gb_bank_transfer'
        | 'jp_bank_transfer'
        | 'mx_bank_transfer'
        | 'us_bank_transfer'
      )
    | null;
};
/**
 * CheckoutCustomerBalancePaymentMethodOptions
 */
export type CheckoutCustomerBalancePaymentMethodOptions = {
  bank_transfer?: CheckoutCustomerBalanceBankTransferPaymentMethodOptions;
  /**
   * The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
   */
  funding_type?: 'bank_transfer' | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutEpsPaymentMethodOptions
 */
export type CheckoutEpsPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutFpxPaymentMethodOptions
 */
export type CheckoutFpxPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutGiropayPaymentMethodOptions
 */
export type CheckoutGiropayPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutGrabPayPaymentMethodOptions
 */
export type CheckoutGrabPayPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutIdealPaymentMethodOptions
 */
export type CheckoutIdealPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutKakaoPayPaymentMethodOptions
 */
export type CheckoutKakaoPayPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * CheckoutKlarnaPaymentMethodOptions
 */
export type CheckoutKlarnaPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
};
/**
 * CheckoutKonbiniPaymentMethodOptions
 */
export type CheckoutKonbiniPaymentMethodOptions = {
  /**
   * The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
   */
  expires_after_days?: number | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutKrCardPaymentMethodOptions
 */
export type CheckoutKrCardPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * CheckoutLinkPaymentMethodOptions
 */
export type CheckoutLinkPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * CheckoutLinkWalletOptions
 */
export type CheckoutLinkWalletOptions = {
  /**
   * Describes whether Checkout should display Link. Defaults to `auto`.
   */
  display?: 'auto' | 'never';
};
/**
 * CheckoutMobilepayPaymentMethodOptions
 */
export type CheckoutMobilepayPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutMultibancoPaymentMethodOptions
 */
export type CheckoutMultibancoPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutNaverPayPaymentMethodOptions
 */
export type CheckoutNaverPayPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * CheckoutOxxoPaymentMethodOptions
 */
export type CheckoutOxxoPaymentMethodOptions = {
  /**
   * The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
   */
  expires_after_days: number;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutP24PaymentMethodOptions
 */
export type CheckoutP24PaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutPaycoPaymentMethodOptions
 */
export type CheckoutPaycoPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
};
/**
 * checkout_payment_method_options_mandate_options_bacs_debit
 */
export type CheckoutPaymentMethodOptionsMandateOptionsBacsDebit = {
  /**
   * Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'.
   */
  reference_prefix?: string;
};
/**
 * checkout_payment_method_options_mandate_options_sepa_debit
 */
export type CheckoutPaymentMethodOptionsMandateOptionsSepaDebit = {
  /**
   * Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'.
   */
  reference_prefix?: string;
};
/**
 * CheckoutPaynowPaymentMethodOptions
 */
export type CheckoutPaynowPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutPaypalPaymentMethodOptions
 */
export type CheckoutPaypalPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Preferred locale of the PayPal checkout page that the customer is redirected to.
   */
  preferred_locale?: string | null;
  /**
   * A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
   */
  reference?: string | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * CheckoutPixPaymentMethodOptions
 */
export type CheckoutPixPaymentMethodOptions = {
  /**
   * The number of seconds after which Pix payment will expire.
   */
  expires_after_seconds?: number | null;
};
/**
 * CheckoutRevolutPayPaymentMethodOptions
 */
export type CheckoutRevolutPayPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * CheckoutSamsungPayPaymentMethodOptions
 */
export type CheckoutSamsungPayPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
};
/**
 * CheckoutSepaDebitPaymentMethodOptions
 */
export type CheckoutSepaDebitPaymentMethodOptions = {
  mandate_options?: CheckoutPaymentMethodOptionsMandateOptionsSepaDebit;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
};
/**
 * CheckoutSessionPaymentMethodOptions
 */
export type CheckoutSessionPaymentMethodOptions = {
  acss_debit?: CheckoutAcssDebitPaymentMethodOptions;
  affirm?: CheckoutAffirmPaymentMethodOptions;
  afterpay_clearpay?: CheckoutAfterpayClearpayPaymentMethodOptions;
  alipay?: CheckoutAlipayPaymentMethodOptions;
  amazon_pay?: CheckoutAmazonPayPaymentMethodOptions;
  au_becs_debit?: CheckoutAuBecsDebitPaymentMethodOptions;
  bacs_debit?: CheckoutBacsDebitPaymentMethodOptions;
  bancontact?: CheckoutBancontactPaymentMethodOptions;
  boleto?: CheckoutBoletoPaymentMethodOptions;
  card?: CheckoutCardPaymentMethodOptions;
  cashapp?: CheckoutCashappPaymentMethodOptions;
  customer_balance?: CheckoutCustomerBalancePaymentMethodOptions;
  eps?: CheckoutEpsPaymentMethodOptions;
  fpx?: CheckoutFpxPaymentMethodOptions;
  giropay?: CheckoutGiropayPaymentMethodOptions;
  grabpay?: CheckoutGrabPayPaymentMethodOptions;
  ideal?: CheckoutIdealPaymentMethodOptions;
  kakao_pay?: CheckoutKakaoPayPaymentMethodOptions;
  klarna?: CheckoutKlarnaPaymentMethodOptions;
  konbini?: CheckoutKonbiniPaymentMethodOptions;
  kr_card?: CheckoutKrCardPaymentMethodOptions;
  link?: CheckoutLinkPaymentMethodOptions;
  mobilepay?: CheckoutMobilepayPaymentMethodOptions;
  multibanco?: CheckoutMultibancoPaymentMethodOptions;
  naver_pay?: CheckoutNaverPayPaymentMethodOptions;
  oxxo?: CheckoutOxxoPaymentMethodOptions;
  p24?: CheckoutP24PaymentMethodOptions;
  payco?: CheckoutPaycoPaymentMethodOptions;
  paynow?: CheckoutPaynowPaymentMethodOptions;
  paypal?: CheckoutPaypalPaymentMethodOptions;
  pix?: CheckoutPixPaymentMethodOptions;
  revolut_pay?: CheckoutRevolutPayPaymentMethodOptions;
  samsung_pay?: CheckoutSamsungPayPaymentMethodOptions;
  sepa_debit?: CheckoutSepaDebitPaymentMethodOptions;
  sofort?: CheckoutSofortPaymentMethodOptions;
  swish?: CheckoutSwishPaymentMethodOptions;
  us_bank_account?: CheckoutUsBankAccountPaymentMethodOptions;
};
/**
 * CheckoutSessionWalletOptions
 */
export type CheckoutSessionWalletOptions = {
  link?: CheckoutLinkWalletOptions;
};
/**
 * CheckoutSofortPaymentMethodOptions
 */
export type CheckoutSofortPaymentMethodOptions = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * CheckoutSwishPaymentMethodOptions
 */
export type CheckoutSwishPaymentMethodOptions = {
  /**
   * The order reference that will be displayed to customers in the Swish application. Defaults to the `id` of the Payment Intent.
   */
  reference?: string | null;
};
/**
 * CheckoutUsBankAccountPaymentMethodOptions
 */
export type CheckoutUsBankAccountPaymentMethodOptions = {
  financial_connections?: LinkedAccountOptionsCommon;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant';
};
/**
 * ClimateRemovalsOrders
 * Orders represent your intent to purchase a particular Climate product. When you create an order, the
 * payment is deducted from your merchant balance.
 */
export type ClimateOrder = {
  /**
   * Total amount of [Frontier](https://frontierclimate.com/)'s service fees in the currency's smallest unit.
   */
  amount_fees: number;
  /**
   * Total amount of the carbon removal in the currency's smallest unit.
   */
  amount_subtotal: number;
  /**
   * Total amount of the order including fees in the currency's smallest unit.
   */
  amount_total: number;
  beneficiary?: ClimateRemovalsBeneficiary;
  /**
   * Time at which the order was canceled. Measured in seconds since the Unix epoch.
   */
  canceled_at?: number | null;
  /**
   * Reason for the cancellation of this order.
   */
  cancellation_reason?:
    | ('expired' | 'product_unavailable' | 'requested')
    | null;
  /**
   * For delivered orders, a URL to a delivery certificate for the order.
   */
  certificate?: string | null;
  /**
   * Time at which the order was confirmed. Measured in seconds since the Unix epoch.
   */
  confirmed_at?: number | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase, representing the currency for this order.
   */
  currency: string;
  /**
   * Time at which the order's expected_delivery_year was delayed. Measured in seconds since the Unix epoch.
   */
  delayed_at?: number | null;
  /**
   * Time at which the order was delivered. Measured in seconds since the Unix epoch.
   */
  delivered_at?: number | null;
  /**
   * Details about the delivery of carbon removal for this order.
   */
  delivery_details: ClimateRemovalsOrderDeliveries[];
  /**
   * The year this order is expected to be delivered.
   */
  expected_delivery_year: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * Quantity of carbon removal that is included in this order.
   */
  metric_tons: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'climate.order';
  /**
   * Unique ID for the Climate `Product` this order is purchasing.
   */
  product: string | ClimateProduct;
  /**
   * Time at which the order's product was substituted for a different product. Measured in seconds since the Unix epoch.
   */
  product_substituted_at?: number | null;
  /**
   * The current status of this order.
   */
  status: 'awaiting_funds' | 'canceled' | 'confirmed' | 'delivered' | 'open';
};
/**
 * ClimateRemovalsProducts
 * A Climate product represents a type of carbon removal unit available for reservation.
 * You can retrieve it to see the current price and availability.
 */
export type ClimateProduct = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Current prices for a metric ton of carbon removal in a currency's smallest unit.
   */
  current_prices_per_metric_ton: {
    [key: string]: ClimateRemovalsProductsPrice;
  };
  /**
   * The year in which the carbon removal is expected to be delivered.
   */
  delivery_year?: number | null;
  /**
   * Unique identifier for the object. For convenience, Climate product IDs are human-readable strings
   * that start with `climsku_`. See [carbon removal inventory](https://stripe.com/docs/climate/orders/carbon-removal-inventory)
   * for a list of available carbon removal products.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The quantity of metric tons available for reservation.
   */
  metric_tons_available: string;
  /**
   * The Climate product's name.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'climate.product';
  /**
   * The carbon removal suppliers that fulfill orders for this Climate product.
   */
  suppliers: ClimateSupplier[];
};
/**
 * ClimateRemovalsSuppliers
 * A supplier of carbon removal.
 */
export type ClimateSupplier = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Link to a webpage to learn more about the supplier.
   */
  info_url: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The locations in which this supplier operates.
   */
  locations: ClimateRemovalsLocation[];
  /**
   * Name of this carbon removal supplier.
   */
  name: string;
  /**
   * String representing the object’s type. Objects of the same type share the same value.
   */
  object: 'climate.supplier';
  /**
   * The scientific pathway used for carbon removal.
   */
  removal_pathway:
    | 'biomass_carbon_removal_and_storage'
    | 'direct_air_capture'
    | 'enhanced_weathering';
};
/**
 * ClimateRemovalsBeneficiary
 */
export type ClimateRemovalsBeneficiary = {
  /**
   * Publicly displayable name for the end beneficiary of carbon removal.
   */
  public_name: string;
};
/**
 * ClimateRemovalsLocation
 */
export type ClimateRemovalsLocation = {
  /**
   * The city where the supplier is located.
   */
  city?: string | null;
  /**
   * Two-letter ISO code representing the country where the supplier is located.
   */
  country: string;
  /**
   * The geographic latitude where the supplier is located.
   */
  latitude?: number | null;
  /**
   * The geographic longitude where the supplier is located.
   */
  longitude?: number | null;
  /**
   * The state/county/province/region where the supplier is located.
   */
  region?: string | null;
};
/**
 * ClimateRemovalsOrderDeliveries
 * The delivery of a specified quantity of carbon for an order.
 */
export type ClimateRemovalsOrderDeliveries = {
  /**
   * Time at which the delivery occurred. Measured in seconds since the Unix epoch.
   */
  delivered_at: number;
  /**
   * Specific location of this delivery.
   */
  location?: ClimateRemovalsLocation | null;
  /**
   * Quantity of carbon removal supplied by this delivery.
   */
  metric_tons: string;
  /**
   * Once retired, a URL to the registry entry for the tons from this delivery.
   */
  registry_url?: string | null;
  supplier: ClimateSupplier;
};
/**
 * ClimateRemovalsProductsPrice
 */
export type ClimateRemovalsProductsPrice = {
  /**
   * Fees for one metric ton of carbon removal in the currency's smallest unit.
   */
  amount_fees: number;
  /**
   * Subtotal for one metric ton of carbon removal (excluding fees) in the currency's smallest unit.
   */
  amount_subtotal: number;
  /**
   * Total for one metric ton of carbon removal (including fees) in the currency's smallest unit.
   */
  amount_total: number;
};
/**
 * ConfirmationTokensResourceConfirmationToken
 * ConfirmationTokens help transport client side data collected by Stripe JS over
 * to your server for confirming a PaymentIntent or SetupIntent. If the confirmation
 * is successful, values present on the ConfirmationToken are written onto the Intent.
 *
 * To learn more about how to use ConfirmationToken, visit the related guides:
 * - [Finalize payments on the server](https://stripe.com/docs/payments/finalize-payments-on-the-server)
 * - [Build two-step confirmation](https://stripe.com/docs/payments/build-a-two-step-confirmation).
 */
export type ConfirmationToken = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Time at which this ConfirmationToken expires and can no longer be used to confirm a PaymentIntent or SetupIntent.
   */
  expires_at?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Data used for generating a Mandate.
   */
  mandate_data?: ConfirmationTokensResourceMandateData | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'confirmation_token';
  /**
   * ID of the PaymentIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
   */
  payment_intent?: string | null;
  /**
   * Payment-method-specific configuration for this ConfirmationToken.
   */
  payment_method_options?: ConfirmationTokensResourcePaymentMethodOptions | null;
  /**
   * Payment details collected by the Payment Element, used to create a PaymentMethod when a PaymentIntent or SetupIntent is confirmed with this ConfirmationToken.
   */
  payment_method_preview?: ConfirmationTokensResourcePaymentMethodPreview | null;
  /**
   * Return URL used to confirm the Intent.
   */
  return_url?: string | null;
  /**
   * Indicates that you intend to make future payments with this ConfirmationToken's payment method.
   *
   * The presence of this property will [attach the payment method](https://stripe.com/docs/payments/save-during-payment) to the PaymentIntent's Customer, if present, after the PaymentIntent is confirmed and any required actions from the user are complete.
   */
  setup_future_usage?: ('off_session' | 'on_session') | null;
  /**
   * ID of the SetupIntent that this ConfirmationToken was used to confirm, or null if this ConfirmationToken has not yet been used.
   */
  setup_intent?: string | null;
  /**
   * Shipping information collected on this ConfirmationToken.
   */
  shipping?: ConfirmationTokensResourceShipping | null;
  /**
   * Indicates whether the Stripe SDK is used to handle confirmation flow. Defaults to `true` on ConfirmationToken.
   */
  use_stripe_sdk: boolean;
};
/**
 * ConfirmationTokensResourceMandateData
 * Data used for generating a Mandate.
 */
export type ConfirmationTokensResourceMandateData = {
  customer_acceptance: ConfirmationTokensResourceMandateDataResourceCustomerAcceptance;
};
/**
 * ConfirmationTokensResourceMandateDataResourceCustomerAcceptance
 * This hash contains details about the customer acceptance of the Mandate.
 */
export type ConfirmationTokensResourceMandateDataResourceCustomerAcceptance = {
  /**
   * If this is a Mandate accepted online, this hash contains details about the online acceptance.
   */
  online?: ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline | null;
  /**
   * The type of customer acceptance information included with the Mandate.
   */
  type: string;
};
/**
 * ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline
 * This hash contains details about the online acceptance.
 */
export type ConfirmationTokensResourceMandateDataResourceCustomerAcceptanceResourceOnline =
  {
    /**
     * The IP address from which the Mandate was accepted by the customer.
     */
    ip_address?: string | null;
    /**
     * The user agent of the browser from which the Mandate was accepted by the customer.
     */
    user_agent?: string | null;
  };
/**
 * ConfirmationTokensResourcePaymentMethodOptions
 * Payment-method-specific configuration
 */
export type ConfirmationTokensResourcePaymentMethodOptions = {
  /**
   * This hash contains the card payment method options.
   */
  card?: ConfirmationTokensResourcePaymentMethodOptionsResourceCard | null;
};
/**
 * ConfirmationTokensResourcePaymentMethodOptionsResourceCard
 * This hash contains the card payment method options.
 */
export type ConfirmationTokensResourcePaymentMethodOptionsResourceCard = {
  /**
   * The `cvc_update` Token collected from the Payment Element.
   */
  cvc_token?: string | null;
  installments?: ConfirmationTokensResourcePaymentMethodOptionsResourceCardResourceInstallment;
};
/**
 * ConfirmationTokensResourcePaymentMethodOptionsResourceCardResourceInstallment
 * Installment configuration for payments.
 */
export type ConfirmationTokensResourcePaymentMethodOptionsResourceCardResourceInstallment =
  {
    plan?: PaymentMethodDetailsCardInstallmentsPlan;
  };
/**
 * ConfirmationTokensResourcePaymentMethodPreview
 * Details of the PaymentMethod collected by Payment Element
 */
export type ConfirmationTokensResourcePaymentMethodPreview = {
  acss_debit?: PaymentMethodAcssDebit;
  affirm?: PaymentMethodAffirm;
  afterpay_clearpay?: PaymentMethodAfterpayClearpay;
  alipay?: PaymentFlowsPrivatePaymentMethodsAlipay;
  /**
   * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
   */
  allow_redisplay?: 'always' | 'limited' | 'unspecified';
  alma?: PaymentMethodAlma;
  amazon_pay?: PaymentMethodAmazonPay;
  au_becs_debit?: PaymentMethodAuBecsDebit;
  bacs_debit?: PaymentMethodBacsDebit;
  bancontact?: PaymentMethodBancontact;
  billie?: PaymentMethodBillie;
  billing_details: BillingDetails;
  blik?: PaymentMethodBlik;
  boleto?: PaymentMethodBoleto;
  card?: PaymentMethodCard;
  card_present?: PaymentMethodCardPresent;
  cashapp?: PaymentMethodCashapp;
  /**
   * The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
   */
  customer?: (string | Customer) | null;
  customer_balance?: PaymentMethodCustomerBalance;
  eps?: PaymentMethodEps;
  fpx?: PaymentMethodFpx;
  giropay?: PaymentMethodGiropay;
  grabpay?: PaymentMethodGrabpay;
  ideal?: PaymentMethodIdeal;
  interac_present?: PaymentMethodInteracPresent;
  kakao_pay?: PaymentMethodKakaoPay;
  klarna?: PaymentMethodKlarna;
  konbini?: PaymentMethodKonbini;
  kr_card?: PaymentMethodKrCard;
  link?: PaymentMethodLink;
  mobilepay?: PaymentMethodMobilepay;
  multibanco?: PaymentMethodMultibanco;
  naver_pay?: PaymentMethodNaverPay;
  nz_bank_account?: PaymentMethodNzBankAccount;
  oxxo?: PaymentMethodOxxo;
  p24?: PaymentMethodP24;
  pay_by_bank?: PaymentMethodPayByBank;
  payco?: PaymentMethodPayco;
  paynow?: PaymentMethodPaynow;
  paypal?: PaymentMethodPaypal;
  pix?: PaymentMethodPix;
  promptpay?: PaymentMethodPromptpay;
  revolut_pay?: PaymentMethodRevolutPay;
  samsung_pay?: PaymentMethodSamsungPay;
  satispay?: PaymentMethodSatispay;
  sepa_debit?: PaymentMethodSepaDebit;
  sofort?: PaymentMethodSofort;
  swish?: PaymentMethodSwish;
  twint?: PaymentMethodTwint;
  /**
   * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
   */
  type:
    | 'acss_debit'
    | 'affirm'
    | 'afterpay_clearpay'
    | 'alipay'
    | 'alma'
    | 'amazon_pay'
    | 'au_becs_debit'
    | 'bacs_debit'
    | 'bancontact'
    | 'billie'
    | 'blik'
    | 'boleto'
    | 'card'
    | 'card_present'
    | 'cashapp'
    | 'customer_balance'
    | 'eps'
    | 'fpx'
    | 'giropay'
    | 'grabpay'
    | 'ideal'
    | 'interac_present'
    | 'kakao_pay'
    | 'klarna'
    | 'konbini'
    | 'kr_card'
    | 'link'
    | 'mobilepay'
    | 'multibanco'
    | 'naver_pay'
    | 'nz_bank_account'
    | 'oxxo'
    | 'p24'
    | 'pay_by_bank'
    | 'payco'
    | 'paynow'
    | 'paypal'
    | 'pix'
    | 'promptpay'
    | 'revolut_pay'
    | 'samsung_pay'
    | 'satispay'
    | 'sepa_debit'
    | 'sofort'
    | 'swish'
    | 'twint'
    | 'us_bank_account'
    | 'wechat_pay'
    | 'zip';
  us_bank_account?: PaymentMethodUsBankAccount;
  wechat_pay?: PaymentMethodWechatPay;
  zip?: PaymentMethodZip;
};
/**
 * ConfirmationTokensResourceShipping
 */
export type ConfirmationTokensResourceShipping = {
  address: Address;
  /**
   * Recipient name.
   */
  name: string;
  /**
   * Recipient phone (including extension).
   */
  phone?: string | null;
};
/**
 * ConnectAccountReference
 */
export type ConnectAccountReference = {
  /**
   * The connected account being referenced when `type` is `account`.
   */
  account?: string | Account;
  /**
   * Type of the account referenced.
   */
  type: 'account' | 'self';
};
/**
 * ConnectCollectionTransfer
 */
export type ConnectCollectionTransfer = {
  /**
   * Amount transferred, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the account that funds are being collected for.
   */
  destination: string | Account;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'connect_collection_transfer';
};
/**
 * ConnectEmbeddedAccountConfigClaim
 */
export type ConnectEmbeddedAccountConfigClaim = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedAccountFeaturesClaim;
};
/**
 * ConnectEmbeddedAccountFeaturesClaim
 */
export type ConnectEmbeddedAccountFeaturesClaim = {
  /**
   * Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false.
   */
  disable_stripe_user_authentication: boolean;
  /**
   * Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`.
   */
  external_account_collection: boolean;
};
/**
 * ConnectEmbeddedAccountSessionCreateComponents
 */
export type ConnectEmbeddedAccountSessionCreateComponents = {
  account_management: ConnectEmbeddedAccountConfigClaim;
  account_onboarding: ConnectEmbeddedAccountConfigClaim;
  balances: ConnectEmbeddedPayoutsConfig;
  disputes_list: ConnectEmbeddedDisputesListConfig;
  documents: ConnectEmbeddedBaseConfigClaim;
  financial_account: ConnectEmbeddedFinancialAccountConfigClaim;
  financial_account_transactions: ConnectEmbeddedFinancialAccountTransactionsConfigClaim;
  issuing_card: ConnectEmbeddedIssuingCardConfigClaim;
  issuing_cards_list: ConnectEmbeddedIssuingCardsListConfigClaim;
  notification_banner: ConnectEmbeddedAccountConfigClaim;
  payment_details: ConnectEmbeddedPaymentsConfigClaim;
  payment_disputes: ConnectEmbeddedPaymentDisputesConfig;
  payments: ConnectEmbeddedPaymentsConfigClaim;
  payouts: ConnectEmbeddedPayoutsConfig;
  payouts_list: ConnectEmbeddedBaseConfigClaim;
  tax_registrations: ConnectEmbeddedBaseConfigClaim;
  tax_settings: ConnectEmbeddedBaseConfigClaim;
};
/**
 * ConnectEmbeddedBaseConfigClaim
 */
export type ConnectEmbeddedBaseConfigClaim = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedBaseFeatures;
};
/**
 * ConnectEmbeddedBaseFeatures
 */
export type ConnectEmbeddedBaseFeatures = unknown;
/**
 * ConnectEmbeddedDisputesListConfig
 */
export type ConnectEmbeddedDisputesListConfig = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedDisputesListFeatures;
};
/**
 * ConnectEmbeddedDisputesListFeatures
 */
export type ConnectEmbeddedDisputesListFeatures = {
  /**
   * Whether to allow capturing and cancelling payment intents. This is `true` by default.
   */
  capture_payments: boolean;
  /**
   * Whether to allow connected accounts to manage destination charges that are created on behalf of them. This is `false` by default.
   */
  destination_on_behalf_of_charge_management: boolean;
  /**
   * Whether to allow responding to disputes, including submitting evidence and accepting disputes. This is `true` by default.
   */
  dispute_management: boolean;
  /**
   * Whether to allow sending refunds. This is `true` by default.
   */
  refund_management: boolean;
};
/**
 * ConnectEmbeddedFinancialAccountConfigClaim
 */
export type ConnectEmbeddedFinancialAccountConfigClaim = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedFinancialAccountFeatures;
};
/**
 * ConnectEmbeddedFinancialAccountFeatures
 */
export type ConnectEmbeddedFinancialAccountFeatures = {
  /**
   * Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false.
   */
  disable_stripe_user_authentication: boolean;
  /**
   * Whether to allow external accounts to be linked for money transfer.
   */
  external_account_collection: boolean;
  /**
   * Whether to allow sending money.
   */
  send_money: boolean;
  /**
   * Whether to allow transferring balance.
   */
  transfer_balance: boolean;
};
/**
 * ConnectEmbeddedFinancialAccountTransactionsConfigClaim
 */
export type ConnectEmbeddedFinancialAccountTransactionsConfigClaim = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedFinancialAccountTransactionsFeatures;
};
/**
 * ConnectEmbeddedFinancialAccountTransactionsFeatures
 */
export type ConnectEmbeddedFinancialAccountTransactionsFeatures = {
  /**
   * Whether to allow card spend dispute management features.
   */
  card_spend_dispute_management: boolean;
};
/**
 * ConnectEmbeddedIssuingCardConfigClaim
 */
export type ConnectEmbeddedIssuingCardConfigClaim = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedIssuingCardFeatures;
};
/**
 * ConnectEmbeddedIssuingCardFeatures
 */
export type ConnectEmbeddedIssuingCardFeatures = {
  /**
   * Whether to allow card management features.
   */
  card_management: boolean;
  /**
   * Whether to allow card spend dispute management features.
   */
  card_spend_dispute_management: boolean;
  /**
   * Whether to allow cardholder management features.
   */
  cardholder_management: boolean;
  /**
   * Whether to allow spend control management features.
   */
  spend_control_management: boolean;
};
/**
 * ConnectEmbeddedIssuingCardsListConfigClaim
 */
export type ConnectEmbeddedIssuingCardsListConfigClaim = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedIssuingCardsListFeatures;
};
/**
 * ConnectEmbeddedIssuingCardsListFeatures
 */
export type ConnectEmbeddedIssuingCardsListFeatures = {
  /**
   * Whether to allow card management features.
   */
  card_management: boolean;
  /**
   * Whether to allow card spend dispute management features.
   */
  card_spend_dispute_management: boolean;
  /**
   * Whether to allow cardholder management features.
   */
  cardholder_management: boolean;
  /**
   * Disables Stripe user authentication for this embedded component. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts.
   */
  disable_stripe_user_authentication: boolean;
  /**
   * Whether to allow spend control management features.
   */
  spend_control_management: boolean;
};
/**
 * ConnectEmbeddedPaymentDisputesConfig
 */
export type ConnectEmbeddedPaymentDisputesConfig = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedPaymentDisputesFeatures;
};
/**
 * ConnectEmbeddedPaymentDisputesFeatures
 */
export type ConnectEmbeddedPaymentDisputesFeatures = {
  /**
   * Whether to allow connected accounts to manage destination charges that are created on behalf of them. This is `false` by default.
   */
  destination_on_behalf_of_charge_management: boolean;
  /**
   * Whether to allow responding to disputes, including submitting evidence and accepting disputes. This is `true` by default.
   */
  dispute_management: boolean;
  /**
   * Whether to allow sending refunds. This is `true` by default.
   */
  refund_management: boolean;
};
/**
 * ConnectEmbeddedPaymentsConfigClaim
 */
export type ConnectEmbeddedPaymentsConfigClaim = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedPaymentsFeatures;
};
/**
 * ConnectEmbeddedPaymentsFeatures
 */
export type ConnectEmbeddedPaymentsFeatures = {
  /**
   * Whether to allow capturing and cancelling payment intents. This is `true` by default.
   */
  capture_payments: boolean;
  /**
   * Whether to allow connected accounts to manage destination charges that are created on behalf of them. This is `false` by default.
   */
  destination_on_behalf_of_charge_management: boolean;
  /**
   * Whether to allow responding to disputes, including submitting evidence and accepting disputes. This is `true` by default.
   */
  dispute_management: boolean;
  /**
   * Whether to allow sending refunds. This is `true` by default.
   */
  refund_management: boolean;
};
/**
 * ConnectEmbeddedPayoutsConfig
 */
export type ConnectEmbeddedPayoutsConfig = {
  /**
   * Whether the embedded component is enabled.
   */
  enabled: boolean;
  features: ConnectEmbeddedPayoutsFeatures;
};
/**
 * ConnectEmbeddedPayoutsFeatures
 */
export type ConnectEmbeddedPayoutsFeatures = {
  /**
   * Disables Stripe user authentication for this embedded component. This value can only be true for accounts where `controller.requirement_collection` is `application`. The default value is the opposite of the `external_account_collection` value. For example, if you don’t set `external_account_collection`, it defaults to true and `disable_stripe_user_authentication` defaults to false.
   */
  disable_stripe_user_authentication: boolean;
  /**
   * Whether to allow payout schedule to be changed. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
   */
  edit_payout_schedule: boolean;
  /**
   * Whether to allow platforms to control bank account collection for their connected accounts. This feature can only be false for accounts where you’re responsible for collecting updated information when requirements are due or change, like custom accounts. Otherwise, bank account collection is determined by compliance requirements. The default value for this feature is `true`.
   */
  external_account_collection: boolean;
  /**
   * Whether to allow creation of instant payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
   */
  instant_payouts: boolean;
  /**
   * Whether to allow creation of standard payouts. Default `true` when Stripe owns Loss Liability, default `false` otherwise.
   */
  standard_payouts: boolean;
};
/**
 * CountrySpec
 * Stripe needs to collect certain pieces of information about each account
 * created. These requirements can differ depending on the account's country. The
 * Country Specs API makes these rules available to your integration.
 *
 * You can also view the information from this API call as [an online
 * guide](/docs/connect/required-verification-information).
 */
export type CountrySpec = {
  /**
   * The default currency for this country. This applies to both payment methods and bank accounts.
   */
  default_currency: string;
  /**
   * Unique identifier for the object. Represented as the ISO country code for this country.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'country_spec';
  /**
   * Currencies that can be accepted in the specific country (for transfers).
   */
  supported_bank_account_currencies: {
    [key: string]: string[];
  };
  /**
   * Currencies that can be accepted in the specified country (for payments).
   */
  supported_payment_currencies: string[];
  /**
   * Payment methods available in the specified country. You may need to enable some payment methods (e.g., [ACH](https://stripe.com/docs/ach)) on your account before they appear in this list. The `stripe` payment method refers to [charging through your platform](https://stripe.com/docs/connect/destination-charges).
   */
  supported_payment_methods: string[];
  /**
   * Countries that can accept transfers from the specified country.
   */
  supported_transfer_countries: string[];
  verification_fields: CountrySpecVerificationFields;
};
/**
 * CountrySpecVerificationFieldDetails
 */
export type CountrySpecVerificationFieldDetails = {
  /**
   * Additional fields which are only required for some users.
   */
  additional: string[];
  /**
   * Fields which every account must eventually provide.
   */
  minimum: string[];
};
/**
 * CountrySpecVerificationFields
 */
export type CountrySpecVerificationFields = {
  company: CountrySpecVerificationFieldDetails;
  individual: CountrySpecVerificationFieldDetails;
};
/**
 * Coupon
 * A coupon contains information about a percent-off or amount-off discount you
 * might want to apply to a customer. Coupons may be applied to [subscriptions](https://stripe.com/docs/api#subscriptions), [invoices](https://stripe.com/docs/api#invoices),
 * [checkout sessions](https://stripe.com/docs/api/checkout/sessions), [quotes](https://stripe.com/docs/api#quotes), and more. Coupons do not work with conventional one-off [charges](https://stripe.com/docs/api#create_charge) or [payment intents](https://stripe.com/docs/api/payment_intents).
 */
export type Coupon = {
  /**
   * Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
   */
  amount_off?: number | null;
  applies_to?: CouponAppliesTo;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * If `amount_off` has been set, the three-letter [ISO code for the currency](https://stripe.com/docs/currencies) of the amount to take off.
   */
  currency?: string | null;
  /**
   * Coupons defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
   */
  currency_options?: {
    [key: string]: CouponCurrencyOption;
  };
  /**
   * One of `forever`, `once`, or `repeating`. Describes how long a customer who applies this coupon will get the discount.
   */
  duration: 'forever' | 'once' | 'repeating';
  /**
   * If `duration` is `repeating`, the number of months the coupon applies. Null if coupon `duration` is `forever` or `once`.
   */
  duration_in_months?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Maximum number of times this coupon can be redeemed, in total, across all customers, before it is no longer valid.
   */
  max_redemptions?: number | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * Name of the coupon displayed to customers on for instance invoices or receipts.
   */
  name?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'coupon';
  /**
   * Percent that will be taken off the subtotal of any invoices for this customer for the duration of the coupon. For example, a coupon with percent_off of 50 will make a $ (or local equivalent)100 invoice $ (or local equivalent)50 instead.
   */
  percent_off?: number | null;
  /**
   * Date after which the coupon can no longer be redeemed.
   */
  redeem_by?: number | null;
  /**
   * Number of times this coupon has been applied to a customer.
   */
  times_redeemed: number;
  /**
   * Taking account of the above properties, whether this coupon can still be applied to a customer.
   */
  valid: boolean;
};
/**
 * CouponAppliesTo
 */
export type CouponAppliesTo = {
  /**
   * A list of product IDs this coupon applies to
   */
  products: string[];
};
/**
 * CouponCurrencyOption
 */
export type CouponCurrencyOption = {
  /**
   * Amount (in the `currency` specified) that will be taken off the subtotal of any invoices for this customer.
   */
  amount_off: number;
};
/**
 * CreditBalance
 */
export type CreditBalance = {
  available_balance: BillingCreditGrantsResourceAmount;
  ledger_balance: BillingCreditGrantsResourceAmount;
};
/**
 * CreditNote
 * Issue a credit note to adjust an invoice's amount after the invoice is finalized.
 *
 * Related guide: [Credit notes](https://stripe.com/docs/billing/invoices/credit-notes)
 */
export type CreditNote = {
  /**
   * The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax.
   */
  amount: number;
  /**
   * This is the sum of all the shipping amounts.
   */
  amount_shipping: number;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the customer.
   */
  customer: string | Customer | DeletedCustomer;
  /**
   * Customer balance transaction related to this credit note.
   */
  customer_balance_transaction?: (string | CustomerBalanceTransaction) | null;
  /**
   * The integer amount in cents (or local equivalent) representing the total amount of discount that was credited.
   */
  discount_amount: number;
  /**
   * The aggregate amounts calculated per discount for all line items.
   */
  discount_amounts: DiscountsResourceDiscountAmount[];
  /**
   * The date when this credit note is in effect. Same as `created` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the credit note PDF.
   */
  effective_at?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * ID of the invoice.
   */
  invoice: string | Invoice;
  /**
   * CreditNoteLinesList
   * Line items that make up the credit note
   */
  lines: {
    /**
     * Details about each object.
     */
    data: CreditNoteLineItem[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Customer-facing text that appears on the credit note PDF.
   */
  memo?: string | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * A unique number that identifies this particular credit note and appears on the PDF of the credit note and its associated invoice.
   */
  number: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'credit_note';
  /**
   * Amount that was credited outside of Stripe.
   */
  out_of_band_amount?: number | null;
  /**
   * The link to download the PDF of the credit note.
   */
  pdf: string;
  /**
   * The amount of the credit note that was refunded to the customer, credited to the customer's balance, credited outside of Stripe, or any combination thereof.
   */
  post_payment_amount: number;
  /**
   * The amount of the credit note by which the invoice's `amount_remaining` and `amount_due` were reduced.
   */
  pre_payment_amount: number;
  /**
   * The pretax credit amounts (ex: discount, credit grants, etc) for all line items.
   */
  pretax_credit_amounts: CreditNotesPretaxCreditAmount[];
  /**
   * Reason for issuing this credit note, one of `duplicate`, `fraudulent`, `order_change`, or `product_unsatisfactory`
   */
  reason?:
    | ('duplicate' | 'fraudulent' | 'order_change' | 'product_unsatisfactory')
    | null;
  /**
   * Refunds related to this credit note.
   */
  refunds: CreditNoteRefund[];
  /**
   * The details of the cost of shipping, including the ShippingRate applied to the invoice.
   */
  shipping_cost?: InvoicesResourceShippingCost | null;
  /**
   * Status of this credit note, one of `issued` or `void`. Learn more about [voiding credit notes](https://stripe.com/docs/billing/invoices/credit-notes#voiding).
   */
  status: 'issued' | 'void';
  /**
   * The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding exclusive tax and invoice level discounts.
   */
  subtotal: number;
  /**
   * The integer amount in cents (or local equivalent) representing the amount of the credit note, excluding all tax and invoice level discounts.
   */
  subtotal_excluding_tax?: number | null;
  /**
   * The integer amount in cents (or local equivalent) representing the total amount of the credit note, including tax and all discount.
   */
  total: number;
  /**
   * The integer amount in cents (or local equivalent) representing the total amount of the credit note, excluding tax, but including discounts.
   */
  total_excluding_tax?: number | null;
  /**
   * The aggregate tax information for all line items.
   */
  total_taxes?: BillingBillResourceInvoicingTaxesTax[] | null;
  /**
   * Type of this credit note, one of `pre_payment` or `post_payment`. A `pre_payment` credit note means it was issued when the invoice was open. A `post_payment` credit note means it was issued when the invoice was paid.
   */
  type: 'mixed' | 'post_payment' | 'pre_payment';
  /**
   * The time that the credit note was voided.
   */
  voided_at?: number | null;
};
/**
 * CreditNoteLineItem
 * The credit note line item object
 */
export type CreditNoteLineItem = {
  /**
   * The integer amount in cents (or local equivalent) representing the gross amount being credited for this line item, excluding (exclusive) tax and discounts.
   */
  amount: number;
  /**
   * Description of the item being credited.
   */
  description?: string | null;
  /**
   * The integer amount in cents (or local equivalent) representing the discount being credited for this line item.
   */
  discount_amount: number;
  /**
   * The amount of discount calculated per discount for this line item
   */
  discount_amounts: DiscountsResourceDiscountAmount[];
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * ID of the invoice line item being credited
   */
  invoice_line_item?: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'credit_note_line_item';
  /**
   * The pretax credit amounts (ex: discount, credit grants, etc) for this line item.
   */
  pretax_credit_amounts: CreditNotesPretaxCreditAmount[];
  /**
   * The number of units of product being credited.
   */
  quantity?: number | null;
  /**
   * The tax rates which apply to the line item.
   */
  tax_rates: TaxRate[];
  /**
   * The tax information of the line item.
   */
  taxes?: BillingBillResourceInvoicingTaxesTax[] | null;
  /**
   * The type of the credit note line item, one of `invoice_line_item` or `custom_line_item`. When the type is `invoice_line_item` there is an additional `invoice_line_item` property on the resource the value of which is the id of the credited line item on the invoice.
   */
  type: 'custom_line_item' | 'invoice_line_item';
  /**
   * The cost of each unit of product being credited.
   */
  unit_amount?: number | null;
  /**
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   */
  unit_amount_decimal?: string | null;
};
/**
 * CreditNoteRefund
 */
export type CreditNoteRefund = {
  /**
   * Amount of the refund that applies to this credit note, in cents (or local equivalent).
   */
  amount_refunded: number;
  /**
   * ID of the refund.
   */
  refund: string | Refund;
};
/**
 * CreditNotesPretaxCreditAmount
 */
export type CreditNotesPretaxCreditAmount = {
  /**
   * The amount, in cents (or local equivalent), of the pretax credit amount.
   */
  amount: number;
  /**
   * The credit balance transaction that was applied to get this pretax credit amount.
   */
  credit_balance_transaction?: string | BillingCreditBalanceTransaction;
  /**
   * The discount that was applied to get this pretax credit amount.
   */
  discount?: string | Discount | DeletedDiscount;
  /**
   * Type of the pretax credit amount referenced.
   */
  type: 'credit_balance_transaction' | 'discount';
};
/**
 * CurrencyOption
 */
export type CurrencyOption = {
  /**
   * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
   */
  custom_unit_amount?: CustomUnitAmount | null;
  /**
   * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
   */
  tax_behavior?: ('exclusive' | 'inclusive' | 'unspecified') | null;
  /**
   * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
   */
  tiers?: PriceTier[];
  /**
   * The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
   */
  unit_amount?: number | null;
  /**
   * The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
   */
  unit_amount_decimal?: string | null;
};
/**
 * CustomUnitAmount
 */
export type CustomUnitAmount = {
  /**
   * The maximum unit amount the customer can specify for this item.
   */
  maximum?: number | null;
  /**
   * The minimum unit amount the customer can specify for this item. Must be at least the minimum charge amount.
   */
  minimum?: number | null;
  /**
   * The starting unit amount which can be updated by the customer.
   */
  preset?: number | null;
};
/**
 * Customer
 * This object represents a customer of your business. Use it to [create recurring charges](https://stripe.com/docs/invoicing/customer), [save payment](https://stripe.com/docs/payments/save-during-payment) and contact information,
 * and track payments that belong to the same customer.
 */
export type Customer = {
  /**
   * The customer's address.
   */
  address?: Address | null;
  /**
   * The current balance, if any, that's stored on the customer. If negative, the customer has credit to apply to their next invoice. If positive, the customer has an amount owed that's added to their next invoice. The balance only considers amounts that Stripe hasn't successfully applied to any invoice. It doesn't reflect unpaid invoices. This balance is only taken into account after invoices finalize.
   */
  balance?: number;
  /**
   * The current funds being held by Stripe on behalf of the customer. You can apply these funds towards payment intents when the source is "cash_balance". The `settings[reconciliation_mode]` field describes if these funds apply to these payment intents manually or automatically.
   */
  cash_balance?: CashBalance | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) the customer can be charged in for recurring billing purposes.
   */
  currency?: string | null;
  /**
   * ID of the default payment source for the customer.
   *
   * If you use payment methods created through the PaymentMethods API, see the [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) field instead.
   */
  default_source?: (string | BankAccount | Card | Source) | null;
  /**
   * Tracks the most recent state change on any invoice belonging to the customer. Paying an invoice or marking it uncollectible via the API will set this field to false. An automatic payment failure or passing the `invoice.due_date` will set this field to `true`.
   *
   * If an invoice becomes uncollectible by [dunning](https://stripe.com/docs/billing/automatic-collection), `delinquent` doesn't reset to `false`.
   *
   * If you care whether the customer has paid their most recent subscription invoice, use `subscription.status` instead. Paying or marking uncollectible any customer invoice regardless of whether it is the latest invoice for a subscription will always set this field to `false`.
   */
  delinquent?: boolean | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Describes the current discount active on the customer, if there is one.
   */
  discount?: Discount | null;
  /**
   * The customer's email address.
   */
  email?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The current multi-currency balances, if any, that's stored on the customer. If positive in a currency, the customer has a credit to apply to their next invoice denominated in that currency. If negative, the customer has an amount owed that's added to their next invoice denominated in that currency. These balances don't apply to unpaid invoices. They solely track amounts that Stripe hasn't successfully applied to any invoice. Stripe only applies a balance in a specific currency to an invoice after that invoice (which is in the same currency) finalizes.
   */
  invoice_credit_balance?: {
    [key: string]: number;
  };
  /**
   * The prefix for the customer used to generate unique invoice numbers.
   */
  invoice_prefix?: string | null;
  invoice_settings?: InvoiceSettingCustomerSetting;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /**
   * The customer's full name or business name.
   */
  name?: string | null;
  /**
   * The suffix of the customer's next invoice number (for example, 0001). When the account uses account level sequencing, this parameter is ignored in API requests and the field omitted in API responses.
   */
  next_invoice_sequence?: number;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'customer';
  /**
   * The customer's phone number.
   */
  phone?: string | null;
  /**
   * The customer's preferred locales (languages), ordered by preference.
   */
  preferred_locales?: string[] | null;
  /**
   * Mailing and shipping address for the customer. Appears on invoices emailed to this customer.
   */
  shipping?: Shipping | null;
  /**
   * ApmsSourcesSourceList
   * The customer's payment sources, if any.
   */
  sources?: {
    /**
     * Details about each object.
     */
    data: (BankAccount | Card | Source)[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * SubscriptionList
   * The customer's current subscriptions, if any.
   */
  subscriptions?: {
    /**
     * Details about each object.
     */
    data: Subscription[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  tax?: CustomerTax;
  /**
   * Describes the customer's tax exemption status, which is `none`, `exempt`, or `reverse`. When set to `reverse`, invoice and receipt PDFs include the following text: **"Reverse charge"**.
   */
  tax_exempt?: ('exempt' | 'none' | 'reverse') | null;
  /**
   * TaxIDsList
   * The customer's tax IDs.
   */
  tax_ids?: {
    /**
     * Details about each object.
     */
    data: TaxId[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * ID of the test clock that this customer belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
};
/**
 * customer_acceptance
 */
export type CustomerAcceptance = {
  /**
   * The time that the customer accepts the mandate.
   */
  accepted_at?: number | null;
  offline?: OfflineAcceptance;
  online?: OnlineAcceptance;
  /**
   * The mandate includes the type of customer acceptance information, such as: `online` or `offline`.
   */
  type: 'offline' | 'online';
};
/**
 * CustomerBalanceCustomerBalanceSettings
 */
export type CustomerBalanceCustomerBalanceSettings = {
  /**
   * The configuration for how funds that land in the customer cash balance are reconciled.
   */
  reconciliation_mode: 'automatic' | 'manual';
  /**
   * A flag to indicate if reconciliation mode returned is the user's default or is specific to this customer cash balance
   */
  using_merchant_default: boolean;
};
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft =
  {
    /**
     * The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds taken out of your Stripe balance.
     */
    balance_transaction: string | BalanceTransaction;
    /**
     * The [Cash Balance Transaction](https://stripe.com/docs/api/cash_balance_transactions/object) that brought the customer balance negative, triggering the clawback of funds.
     */
    linked_transaction: string | CustomerCashBalanceTransaction;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction =
  {
    /**
     * The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were applied to.
     */
    payment_intent: string | PaymentIntent;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction =
  {
    bank_transfer: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransfer =
  {
    eu_bank_transfer?: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer;
    gb_bank_transfer?: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer;
    jp_bank_transfer?: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer;
    /**
     * The user-supplied reference field on the bank transfer.
     */
    reference?: string | null;
    /**
     * The funding method type used to fund the customer balance. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
     */
    type:
      | 'eu_bank_transfer'
      | 'gb_bank_transfer'
      | 'jp_bank_transfer'
      | 'mx_bank_transfer'
      | 'us_bank_transfer';
    us_bank_transfer?: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceEuBankTransfer =
  {
    /**
     * The BIC of the bank of the sender of the funding.
     */
    bic?: string | null;
    /**
     * The last 4 digits of the IBAN of the sender of the funding.
     */
    iban_last4?: string | null;
    /**
     * The full name of the sender, as supplied by the sending bank.
     */
    sender_name?: string | null;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceGbBankTransfer =
  {
    /**
     * The last 4 digits of the account number of the sender of the funding.
     */
    account_number_last4?: string | null;
    /**
     * The full name of the sender, as supplied by the sending bank.
     */
    sender_name?: string | null;
    /**
     * The sort code of the bank of the sender of the funding
     */
    sort_code?: string | null;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceJpBankTransfer =
  {
    /**
     * The name of the bank of the sender of the funding.
     */
    sender_bank?: string | null;
    /**
     * The name of the bank branch of the sender of the funding.
     */
    sender_branch?: string | null;
    /**
     * The full name of the sender, as supplied by the sending bank.
     */
    sender_name?: string | null;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceFundedTransactionResourceBankTransferResourceUsBankTransfer =
  {
    /**
     * The banking network used for this funding.
     */
    network?: 'ach' | 'domestic_wire_us' | 'swift';
    /**
     * The full name of the sender, as supplied by the sending bank.
     */
    sender_name?: string | null;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction =
  {
    /**
     * The [Refund](https://stripe.com/docs/api/refunds/object) that moved these funds into the customer's cash balance.
     */
    refund: string | Refund;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance =
  {
    /**
     * The [Balance Transaction](https://stripe.com/docs/api/balance_transactions/object) that corresponds to funds transferred to your Stripe balance.
     */
    balance_transaction: string | BalanceTransaction;
  };
/**
 * CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction
 */
export type CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction =
  {
    /**
     * The [Payment Intent](https://stripe.com/docs/api/payment_intents/object) that funds were unapplied from.
     */
    payment_intent: string | PaymentIntent;
  };
/**
 * CustomerBalanceTransaction
 * Each customer has a [Balance](https://stripe.com/docs/api/customers/object#customer_object-balance) value,
 * which denotes a debit or credit that's automatically applied to their next invoice upon finalization.
 * You may modify the value directly by using the [update customer API](https://stripe.com/docs/api/customers/update),
 * or by creating a Customer Balance Transaction, which increments or decrements the customer's `balance` by the specified `amount`.
 *
 * Related guide: [Customer balance](https://stripe.com/docs/billing/customer/balance)
 */
export type CustomerBalanceTransaction = {
  /**
   * The amount of the transaction. A negative value is a credit for the customer's balance, and a positive value is a debit to the customer's `balance`.
   */
  amount: number;
  /**
   * The ID of the checkout session (if any) that created the transaction.
   */
  checkout_session?: (string | CheckoutSession) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The ID of the credit note (if any) related to the transaction.
   */
  credit_note?: (string | CreditNote) | null;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The ID of the customer the transaction belongs to.
   */
  customer: string | Customer;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * The customer's `balance` after the transaction was applied. A negative value decreases the amount due on the customer's next invoice. A positive value increases the amount due on the customer's next invoice.
   */
  ending_balance: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The ID of the invoice (if any) related to the transaction.
   */
  invoice?: (string | Invoice) | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'customer_balance_transaction';
  /**
   * Transaction type: `adjustment`, `applied_to_invoice`, `credit_note`, `initial`, `invoice_overpaid`, `invoice_too_large`, `invoice_too_small`, `unspent_receiver_credit`, `unapplied_from_invoice`, `checkout_session_subscription_payment`, or `checkout_session_subscription_payment_canceled`. See the [Customer Balance page](https://stripe.com/docs/billing/customer/balance#types) to learn more about transaction types.
   */
  type:
    | 'adjustment'
    | 'applied_to_invoice'
    | 'checkout_session_subscription_payment'
    | 'checkout_session_subscription_payment_canceled'
    | 'credit_note'
    | 'initial'
    | 'invoice_overpaid'
    | 'invoice_too_large'
    | 'invoice_too_small'
    | 'migration'
    | 'unapplied_from_invoice'
    | 'unspent_receiver_credit';
};
/**
 * CustomerCashBalanceTransaction
 * Customers with certain payments enabled have a cash balance, representing funds that were paid
 * by the customer to a merchant, but have not yet been allocated to a payment. Cash Balance Transactions
 * represent when funds are moved into or out of this balance. This includes funding by the customer, allocation
 * to payments, and refunds to the customer.
 */
export type CustomerCashBalanceTransaction = {
  adjusted_for_overdraft?: CustomerBalanceResourceCashBalanceTransactionResourceAdjustedForOverdraft;
  applied_to_payment?: CustomerBalanceResourceCashBalanceTransactionResourceAppliedToPaymentTransaction;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The customer whose available cash balance changed as a result of this transaction.
   */
  customer: string | Customer;
  /**
   * The total available cash balance for the specified currency after this transaction was applied. Represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  ending_balance: number;
  funded?: CustomerBalanceResourceCashBalanceTransactionResourceFundedTransaction;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The amount by which the cash balance changed, represented in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). A positive value represents funds being added to the cash balance, a negative value represents funds being removed from the cash balance.
   */
  net_amount: number;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'customer_cash_balance_transaction';
  refunded_from_payment?: CustomerBalanceResourceCashBalanceTransactionResourceRefundedFromPaymentTransaction;
  transferred_to_balance?: CustomerBalanceResourceCashBalanceTransactionResourceTransferredToBalance;
  /**
   * The type of the cash balance transaction. New types may be added in future. See [Customer Balance](https://stripe.com/docs/payments/customer-balance#types) to learn more about these types.
   */
  type:
    | 'adjusted_for_overdraft'
    | 'applied_to_payment'
    | 'funded'
    | 'funding_reversed'
    | 'refunded_from_payment'
    | 'return_canceled'
    | 'return_initiated'
    | 'transferred_to_balance'
    | 'unapplied_from_payment';
  unapplied_from_payment?: CustomerBalanceResourceCashBalanceTransactionResourceUnappliedFromPaymentTransaction;
};
/**
 * CustomerSessionResourceCustomerSession
 * A Customer Session allows you to grant Stripe's frontend SDKs (like Stripe.js) client-side access
 * control over a Customer.
 *
 * Related guides: [Customer Session with the Payment Element](/payments/accept-a-payment-deferred?platform=web&type=payment#save-payment-methods),
 * [Customer Session with the Pricing Table](/payments/checkout/pricing-table#customer-session),
 * [Customer Session with the Buy Button](/payment-links/buy-button#pass-an-existing-customer).
 */
export type CustomerSession = {
  /**
   * The client secret of this Customer Session. Used on the client to set up secure access to the given `customer`.
   *
   * The client secret can be used to provide access to `customer` from your frontend. It should not be stored, logged, or exposed to anyone other than the relevant customer. Make sure that you have TLS enabled on any page that includes the client secret.
   */
  client_secret: string;
  components?: CustomerSessionResourceComponents;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The Customer the Customer Session was created for.
   */
  customer: string | Customer;
  /**
   * The timestamp at which this Customer Session will expire.
   */
  expires_at: number;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'customer_session';
};
/**
 * CustomerSessionResourceComponents
 * Configuration for the components supported by this Customer Session.
 */
export type CustomerSessionResourceComponents = {
  buy_button: CustomerSessionResourceComponentsResourceBuyButton;
  payment_element: CustomerSessionResourceComponentsResourcePaymentElement;
  pricing_table: CustomerSessionResourceComponentsResourcePricingTable;
};
/**
 * CustomerSessionResourceComponentsResourceBuyButton
 * This hash contains whether the buy button is enabled.
 */
export type CustomerSessionResourceComponentsResourceBuyButton = {
  /**
   * Whether the buy button is enabled.
   */
  enabled: boolean;
};
/**
 * CustomerSessionResourceComponentsResourcePaymentElement
 * This hash contains whether the Payment Element is enabled and the features it supports.
 */
export type CustomerSessionResourceComponentsResourcePaymentElement = {
  /**
   * Whether the Payment Element is enabled.
   */
  enabled: boolean;
  /**
   * This hash defines whether the Payment Element supports certain features.
   */
  features?: CustomerSessionResourceComponentsResourcePaymentElementResourceFeatures | null;
};
/**
 * CustomerSessionResourceComponentsResourcePaymentElementResourceFeatures
 * This hash contains the features the Payment Element supports.
 */
export type CustomerSessionResourceComponentsResourcePaymentElementResourceFeatures =
  {
    /**
     * A list of [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) values that controls which saved payment methods the Payment Element displays by filtering to only show payment methods with an `allow_redisplay` value that is present in this list.
     *
     * If not specified, defaults to ["always"]. In order to display all saved payment methods, specify ["always", "limited", "unspecified"].
     */
    payment_method_allow_redisplay_filters: (
      | 'always'
      | 'limited'
      | 'unspecified'
    )[];
    /**
     * Controls whether or not the Payment Element shows saved payment methods. This parameter defaults to `disabled`.
     */
    payment_method_redisplay: 'disabled' | 'enabled';
    /**
     * Determines the max number of saved payment methods for the Payment Element to display. This parameter defaults to `3`.
     */
    payment_method_redisplay_limit?: number | null;
    /**
     * Controls whether the Payment Element displays the option to remove a saved payment method. This parameter defaults to `disabled`.
     *
     * Allowing buyers to remove their saved payment methods impacts subscriptions that depend on that payment method. Removing the payment method detaches the [`customer` object](https://docs.stripe.com/api/payment_methods/object#payment_method_object-customer) from that [PaymentMethod](https://docs.stripe.com/api/payment_methods).
     */
    payment_method_remove: 'disabled' | 'enabled';
    /**
     * Controls whether the Payment Element displays a checkbox offering to save a new payment method. This parameter defaults to `disabled`.
     *
     * If a customer checks the box, the [`allow_redisplay`](https://docs.stripe.com/api/payment_methods/object#payment_method_object-allow_redisplay) value on the PaymentMethod is set to `'always'` at confirmation time. For PaymentIntents, the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value is also set to the value defined in `payment_method_save_usage`.
     */
    payment_method_save: 'disabled' | 'enabled';
    /**
     * When using PaymentIntents and the customer checks the save checkbox, this field determines the [`setup_future_usage`](https://docs.stripe.com/api/payment_intents/object#payment_intent_object-setup_future_usage) value used to confirm the PaymentIntent.
     *
     * When using SetupIntents, directly configure the [`usage`](https://docs.stripe.com/api/setup_intents/object#setup_intent_object-usage) value on SetupIntent creation.
     */
    payment_method_save_usage?: ('off_session' | 'on_session') | null;
  };
/**
 * CustomerSessionResourceComponentsResourcePricingTable
 * This hash contains whether the pricing table is enabled.
 */
export type CustomerSessionResourceComponentsResourcePricingTable = {
  /**
   * Whether the pricing table is enabled.
   */
  enabled: boolean;
};
/**
 * CustomerTax
 */
export type CustomerTax = {
  /**
   * Surfaces if automatic tax computation is possible given the current customer location information.
   */
  automatic_tax:
    | 'failed'
    | 'not_collecting'
    | 'supported'
    | 'unrecognized_location';
  /**
   * A recent IP address of the customer used for tax reporting and tax location inference.
   */
  ip_address?: string | null;
  /**
   * The identified tax location of the customer.
   */
  location?: CustomerTaxLocation | null;
};
/**
 * CustomerTaxLocation
 */
export type CustomerTaxLocation = {
  /**
   * The identified tax country of the customer.
   */
  country: string;
  /**
   * The data source used to infer the customer's location.
   */
  source:
    | 'billing_address'
    | 'ip_address'
    | 'payment_method'
    | 'shipping_destination';
  /**
   * The identified tax state, county, province, or region of the customer.
   */
  state?: string | null;
};
/**
 * DeletedAccount
 */
export type DeletedAccount = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'account';
};
/**
 * DeletedApplePayDomain
 */
export type DeletedApplePayDomain = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'apple_pay_domain';
};
/**
 * DeletedApplication
 */
export type DeletedApplication = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The name of the application.
   */
  name?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'application';
};
/**
 * DeletedBankAccount
 */
export type DeletedBankAccount = {
  /**
   * Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
   */
  currency?: string | null;
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'bank_account';
};
/**
 * DeletedCard
 */
export type DeletedCard = {
  /**
   * Three-letter [ISO code for the currency](https://stripe.com/docs/payouts) paid out to the bank account.
   */
  currency?: string | null;
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'card';
};
/**
 * DeletedCoupon
 */
export type DeletedCoupon = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'coupon';
};
/**
 * DeletedCustomer
 */
export type DeletedCustomer = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'customer';
};
/**
 * DeletedDiscount
 */
export type DeletedDiscount = {
  /**
   * The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
   */
  checkout_session?: string | null;
  coupon: Coupon;
  /**
   * The ID of the customer associated with this discount.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
   */
  id: string;
  /**
   * The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
   */
  invoice?: string | null;
  /**
   * The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
   */
  invoice_item?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'discount';
  /**
   * The promotion code applied to create this discount.
   */
  promotion_code?: (string | PromotionCode) | null;
  /**
   * Date that the coupon was applied.
   */
  start: number;
  /**
   * The subscription that this coupon is applied to, if it is applied to a particular subscription.
   */
  subscription?: string | null;
  /**
   * The subscription item that this coupon is applied to, if it is applied to a particular subscription item.
   */
  subscription_item?: string | null;
};
/**
 * Polymorphic
 */
export type DeletedExternalAccount = DeletedBankAccount | DeletedCard;
/**
 * DeletedInvoice
 */
export type DeletedInvoice = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'invoice';
};
/**
 * DeletedInvoiceItem
 */
export type DeletedInvoiceitem = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'invoiceitem';
};
/**
 * Polymorphic
 */
export type DeletedPaymentSource = DeletedBankAccount | DeletedCard;
/**
 * DeletedPerson
 */
export type DeletedPerson = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'person';
};
/**
 * DeletedPlan
 */
export type DeletedPlan = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'plan';
};
/**
 * DeletedPrice
 */
export type DeletedPrice = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'price';
};
/**
 * DeletedProduct
 */
export type DeletedProduct = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'product';
};
/**
 * DeletedProductFeature
 */
export type DeletedProductFeature = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'product_feature';
};
/**
 * RadarListDeletedList
 */
export type DeletedRadarValueList = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'radar.value_list';
};
/**
 * RadarListDeletedListItem
 */
export type DeletedRadarValueListItem = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'radar.value_list_item';
};
/**
 * DeletedSubscriptionItem
 */
export type DeletedSubscriptionItem = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'subscription_item';
};
/**
 * deleted_tax_id
 */
export type DeletedTaxId = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax_id';
};
/**
 * TerminalConfigurationDeletedConfiguration
 */
export type DeletedTerminalConfiguration = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'terminal.configuration';
};
/**
 * TerminalLocationDeletedLocation
 */
export type DeletedTerminalLocation = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'terminal.location';
};
/**
 * TerminalReaderDeletedReader
 */
export type DeletedTerminalReader = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'terminal.reader';
};
/**
 * DeletedTestClock
 */
export type DeletedTestHelpersTestClock = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'test_helpers.test_clock';
};
/**
 * NotificationWebhookEndpointDeleted
 */
export type DeletedWebhookEndpoint = {
  /**
   * Always true for a deleted object
   */
  deleted: true;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'webhook_endpoint';
};
/**
 * destination_details_unimplemented
 */
export type DestinationDetailsUnimplemented = unknown;
/**
 * Discount
 * A discount represents the actual application of a [coupon](https://stripe.com/docs/api#coupons) or [promotion code](https://stripe.com/docs/api#promotion_codes).
 * It contains information about when the discount began, when it will end, and what it is applied to.
 *
 * Related guide: [Applying discounts to subscriptions](https://stripe.com/docs/billing/subscriptions/discounts)
 */
export type Discount = {
  /**
   * The Checkout session that this coupon is applied to, if it is applied to a particular session in payment mode. Will not be present for subscription mode.
   */
  checkout_session?: string | null;
  coupon: Coupon;
  /**
   * The ID of the customer associated with this discount.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * If the coupon has a duration of `repeating`, the date that this discount will end. If the coupon has a duration of `once` or `forever`, this attribute will be null.
   */
  end?: number | null;
  /**
   * The ID of the discount object. Discounts cannot be fetched by ID. Use `expand[]=discounts` in API calls to expand discount IDs in an array.
   */
  id: string;
  /**
   * The invoice that the discount's coupon was applied to, if it was applied directly to a particular invoice.
   */
  invoice?: string | null;
  /**
   * The invoice item `id` (or invoice line item `id` for invoice line items of type='subscription') that the discount's coupon was applied to, if it was applied directly to a particular invoice item or invoice line item.
   */
  invoice_item?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'discount';
  /**
   * The promotion code applied to create this discount.
   */
  promotion_code?: (string | PromotionCode) | null;
  /**
   * Date that the coupon was applied.
   */
  start: number;
  /**
   * The subscription that this coupon is applied to, if it is applied to a particular subscription.
   */
  subscription?: string | null;
  /**
   * The subscription item that this coupon is applied to, if it is applied to a particular subscription item.
   */
  subscription_item?: string | null;
};
/**
 * DiscountsResourceDiscountAmount
 */
export type DiscountsResourceDiscountAmount = {
  /**
   * The amount, in cents (or local equivalent), of the discount.
   */
  amount: number;
  /**
   * The discount that was applied to get this discount amount.
   */
  discount: string | Discount | DeletedDiscount;
};
/**
 * DiscountsResourceStackableDiscount
 */
export type DiscountsResourceStackableDiscount = {
  /**
   * ID of the coupon to create a new discount for.
   */
  coupon?: (string | Coupon) | null;
  /**
   * ID of an existing discount on the object (or one of its ancestors) to reuse.
   */
  discount?: (string | Discount) | null;
  /**
   * ID of the promotion code to create a new discount for.
   */
  promotion_code?: (string | PromotionCode) | null;
};
/**
 * Dispute
 * A dispute occurs when a customer questions your charge with their card issuer.
 * When this happens, you have the opportunity to respond to the dispute with
 * evidence that shows that the charge is legitimate.
 *
 * Related guide: [Disputes and fraud](https://stripe.com/docs/disputes)
 */
export type Dispute = {
  /**
   * Disputed amount. Usually the amount of the charge, but it can differ (usually because of currency fluctuation or because only part of the order is disputed).
   */
  amount: number;
  /**
   * List of zero, one, or two balance transactions that show funds withdrawn and reinstated to your Stripe account as a result of this dispute.
   */
  balance_transactions: BalanceTransaction[];
  /**
   * ID of the charge that's disputed.
   */
  charge: string | Charge;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * List of eligibility types that are included in `enhanced_evidence`.
   */
  enhanced_eligibility_types: 'visa_compelling_evidence_3'[];
  evidence: DisputeEvidence;
  evidence_details: DisputeEvidenceDetails;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * If true, it's still possible to refund the disputed payment. After the payment has been fully refunded, no further funds are withdrawn from your Stripe account as a result of this dispute.
   */
  is_charge_refundable: boolean;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'dispute';
  /**
   * ID of the PaymentIntent that's disputed.
   */
  payment_intent?: (string | PaymentIntent) | null;
  payment_method_details?: DisputePaymentMethodDetails;
  /**
   * Reason given by cardholder for dispute. Possible values are `bank_cannot_process`, `check_returned`, `credit_not_processed`, `customer_initiated`, `debit_not_authorized`, `duplicate`, `fraudulent`, `general`, `incorrect_account_details`, `insufficient_funds`, `noncompliant`, `product_not_received`, `product_unacceptable`, `subscription_canceled`, or `unrecognized`. Learn more about [dispute reasons](https://stripe.com/docs/disputes/categories).
   */
  reason: string;
  /**
   * Current status of dispute. Possible values are `warning_needs_response`, `warning_under_review`, `warning_closed`, `needs_response`, `under_review`, `won`, or `lost`.
   */
  status:
    | 'lost'
    | 'needs_response'
    | 'under_review'
    | 'warning_closed'
    | 'warning_needs_response'
    | 'warning_under_review'
    | 'won';
};
/**
 * DisputeEnhancedEligibility
 */
export type DisputeEnhancedEligibility = {
  visa_compelling_evidence_3?: DisputeEnhancedEligibilityVisaCompellingEvidence3;
  visa_compliance?: DisputeEnhancedEligibilityVisaCompliance;
};
/**
 * DisputeEnhancedEligibilityVisaCompellingEvidence3
 */
export type DisputeEnhancedEligibilityVisaCompellingEvidence3 = {
  /**
   * List of actions required to qualify dispute for Visa Compelling Evidence 3.0 evidence submission.
   */
  required_actions: (
    | 'missing_customer_identifiers'
    | 'missing_disputed_transaction_description'
    | 'missing_merchandise_or_services'
    | 'missing_prior_undisputed_transaction_description'
    | 'missing_prior_undisputed_transactions'
  )[];
  /**
   * Visa Compelling Evidence 3.0 eligibility status.
   */
  status: 'not_qualified' | 'qualified' | 'requires_action';
};
/**
 * DisputeEnhancedEligibilityVisaCompliance
 */
export type DisputeEnhancedEligibilityVisaCompliance = {
  /**
   * Visa compliance eligibility status.
   */
  status: 'fee_acknowledged' | 'requires_fee_acknowledgement';
};
/**
 * DisputeEnhancedEvidence
 */
export type DisputeEnhancedEvidence = {
  visa_compelling_evidence_3?: DisputeEnhancedEvidenceVisaCompellingEvidence3;
  visa_compliance?: DisputeEnhancedEvidenceVisaCompliance;
};
/**
 * DisputeEnhancedEvidenceVisaCompellingEvidence3
 */
export type DisputeEnhancedEvidenceVisaCompellingEvidence3 = {
  /**
   * Disputed transaction details for Visa Compelling Evidence 3.0 evidence submission.
   */
  disputed_transaction?: DisputeVisaCompellingEvidence3DisputedTransaction | null;
  /**
   * List of exactly two prior undisputed transaction objects for Visa Compelling Evidence 3.0 evidence submission.
   */
  prior_undisputed_transactions: DisputeVisaCompellingEvidence3PriorUndisputedTransaction[];
};
/**
 * DisputeEnhancedEvidenceVisaCompliance
 */
export type DisputeEnhancedEvidenceVisaCompliance = {
  /**
   * A field acknowledging the fee incurred when countering a Visa compliance dispute. If this field is set to true, evidence can be submitted for the compliance dispute. Stripe collects a 500 USD (or local equivalent) amount to cover the network costs associated with resolving compliance disputes. Stripe refunds the 500 USD network fee if you win the dispute.
   */
  fee_acknowledged: boolean;
};
/**
 * DisputeEvidence
 */
export type DisputeEvidence = {
  /**
   * Any server or activity logs showing proof that the customer accessed or downloaded the purchased digital product. This information should include IP addresses, corresponding timestamps, and any detailed recorded activity.
   */
  access_activity_log?: string | null;
  /**
   * The billing address provided by the customer.
   */
  billing_address?: string | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your subscription cancellation policy, as shown to the customer.
   */
  cancellation_policy?: (string | File) | null;
  /**
   * An explanation of how and when the customer was shown your refund policy prior to purchase.
   */
  cancellation_policy_disclosure?: string | null;
  /**
   * A justification for why the customer's subscription was not canceled.
   */
  cancellation_rebuttal?: string | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any communication with the customer that you feel is relevant to your case. Examples include emails proving that the customer received the product or service, or demonstrating their use of or satisfaction with the product or service.
   */
  customer_communication?: (string | File) | null;
  /**
   * The email address of the customer.
   */
  customer_email_address?: string | null;
  /**
   * The name of the customer.
   */
  customer_name?: string | null;
  /**
   * The IP address that the customer used when making the purchase.
   */
  customer_purchase_ip?: string | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) A relevant document or contract showing the customer's signature.
   */
  customer_signature?: (string | File) | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation for the prior charge that can uniquely identify the charge, such as a receipt, shipping label, work order, etc. This document should be paired with a similar document from the disputed payment that proves the two payments are separate.
   */
  duplicate_charge_documentation?: (string | File) | null;
  /**
   * An explanation of the difference between the disputed charge versus the prior charge that appears to be a duplicate.
   */
  duplicate_charge_explanation?: string | null;
  /**
   * The Stripe ID for the prior charge which appears to be a duplicate of the disputed charge.
   */
  duplicate_charge_id?: string | null;
  enhanced_evidence: DisputeEnhancedEvidence;
  /**
   * A description of the product or service that was sold.
   */
  product_description?: string | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any receipt or message sent to the customer notifying them of the charge.
   */
  receipt?: (string | File) | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Your refund policy, as shown to the customer.
   */
  refund_policy?: (string | File) | null;
  /**
   * Documentation demonstrating that the customer was shown your refund policy prior to purchase.
   */
  refund_policy_disclosure?: string | null;
  /**
   * A justification for why the customer is not entitled to a refund.
   */
  refund_refusal_explanation?: string | null;
  /**
   * The date on which the customer received or began receiving the purchased service, in a clear human-readable format.
   */
  service_date?: string | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a service was provided to the customer. This could include a copy of a signed contract, work order, or other form of written agreement.
   */
  service_documentation?: (string | File) | null;
  /**
   * The address to which a physical product was shipped. You should try to include as complete address information as possible.
   */
  shipping_address?: string | null;
  /**
   * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc. If multiple carriers were used for this purchase, please separate them with commas.
   */
  shipping_carrier?: string | null;
  /**
   * The date on which a physical product began its route to the shipping address, in a clear human-readable format.
   */
  shipping_date?: string | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Documentation showing proof that a product was shipped to the customer at the same address the customer provided to you. This could include a copy of the shipment receipt, shipping label, etc. It should show the customer's full shipping address, if possible.
   */
  shipping_documentation?: (string | File) | null;
  /**
   * The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
   */
  shipping_tracking_number?: string | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Any additional evidence or statements.
   */
  uncategorized_file?: (string | File) | null;
  /**
   * Any additional evidence or statements.
   */
  uncategorized_text?: string | null;
};
/**
 * DisputeEvidenceDetails
 */
export type DisputeEvidenceDetails = {
  /**
   * Date by which evidence must be submitted in order to successfully challenge dispute. Will be 0 if the customer's bank or credit card company doesn't allow a response for this particular dispute.
   */
  due_by?: number | null;
  enhanced_eligibility: DisputeEnhancedEligibility;
  /**
   * Whether evidence has been staged for this dispute.
   */
  has_evidence: boolean;
  /**
   * Whether the last evidence submission was submitted past the due date. Defaults to `false` if no evidence submissions have occurred. If `true`, then delivery of the latest evidence is *not* guaranteed.
   */
  past_due: boolean;
  /**
   * The number of times evidence has been submitted. Typically, you may only submit evidence once.
   */
  submission_count: number;
};
/**
 * DisputePaymentMethodDetails
 */
export type DisputePaymentMethodDetails = {
  amazon_pay?: DisputePaymentMethodDetailsAmazonPay;
  card?: DisputePaymentMethodDetailsCard;
  klarna?: DisputePaymentMethodDetailsKlarna;
  paypal?: DisputePaymentMethodDetailsPaypal;
  /**
   * Payment method type.
   */
  type: 'amazon_pay' | 'card' | 'klarna' | 'paypal';
};
/**
 * DisputePaymentMethodDetailsAmazonPay
 */
export type DisputePaymentMethodDetailsAmazonPay = {
  /**
   * The AmazonPay dispute type, chargeback or claim
   */
  dispute_type?: ('chargeback' | 'claim') | null;
};
/**
 * DisputePaymentMethodDetailsCard
 */
export type DisputePaymentMethodDetailsCard = {
  /**
   * Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  brand: string;
  /**
   * The type of dispute opened. Different case types may have varying fees and financial impact.
   */
  case_type: 'chargeback' | 'inquiry';
  /**
   * The card network's specific dispute reason code, which maps to one of Stripe's primary dispute categories to simplify response guidance. The [Network code map](https://stripe.com/docs/disputes/categories#network-code-map) lists all available dispute reason codes by network.
   */
  network_reason_code?: string | null;
};
/**
 * DisputePaymentMethodDetailsKlarna
 */
export type DisputePaymentMethodDetailsKlarna = {
  /**
   * The reason for the dispute as defined by Klarna
   */
  reason_code?: string | null;
};
/**
 * DisputePaymentMethodDetailsPaypal
 */
export type DisputePaymentMethodDetailsPaypal = {
  /**
   * The ID of the dispute in PayPal.
   */
  case_id?: string | null;
  /**
   * The reason for the dispute as defined by PayPal
   */
  reason_code?: string | null;
};
/**
 * DisputeTransactionShippingAddress
 */
export type DisputeTransactionShippingAddress = {
  /**
   * City, district, suburb, town, or village.
   */
  city?: string | null;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country?: string | null;
  /**
   * Address line 1 (e.g., street, PO Box, or company name).
   */
  line1?: string | null;
  /**
   * Address line 2 (e.g., apartment, suite, unit, or building).
   */
  line2?: string | null;
  /**
   * ZIP or postal code.
   */
  postal_code?: string | null;
  /**
   * State, county, province, or region.
   */
  state?: string | null;
};
/**
 * DisputeVisaCompellingEvidence3DisputedTransaction
 */
export type DisputeVisaCompellingEvidence3DisputedTransaction = {
  /**
   * User Account ID used to log into business platform. Must be recognizable by the user.
   */
  customer_account_id?: string | null;
  /**
   * Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.
   */
  customer_device_fingerprint?: string | null;
  /**
   * Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.
   */
  customer_device_id?: string | null;
  /**
   * The email address of the customer.
   */
  customer_email_address?: string | null;
  /**
   * The IP address that the customer used when making the purchase.
   */
  customer_purchase_ip?: string | null;
  /**
   * Categorization of disputed payment.
   */
  merchandise_or_services?: ('merchandise' | 'services') | null;
  /**
   * A description of the product or service that was sold.
   */
  product_description?: string | null;
  /**
   * The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
   */
  shipping_address?: DisputeTransactionShippingAddress | null;
};
/**
 * DisputeVisaCompellingEvidence3PriorUndisputedTransaction
 */
export type DisputeVisaCompellingEvidence3PriorUndisputedTransaction = {
  /**
   * Stripe charge ID for the Visa Compelling Evidence 3.0 eligible prior charge.
   */
  charge: string;
  /**
   * User Account ID used to log into business platform. Must be recognizable by the user.
   */
  customer_account_id?: string | null;
  /**
   * Unique identifier of the cardholder’s device derived from a combination of at least two hardware and software attributes. Must be at least 20 characters.
   */
  customer_device_fingerprint?: string | null;
  /**
   * Unique identifier of the cardholder’s device such as a device serial number (e.g., International Mobile Equipment Identity [IMEI]). Must be at least 15 characters.
   */
  customer_device_id?: string | null;
  /**
   * The email address of the customer.
   */
  customer_email_address?: string | null;
  /**
   * The IP address that the customer used when making the purchase.
   */
  customer_purchase_ip?: string | null;
  /**
   * A description of the product or service that was sold.
   */
  product_description?: string | null;
  /**
   * The address to which a physical product was shipped. All fields are required for Visa Compelling Evidence 3.0 evidence submission.
   */
  shipping_address?: DisputeTransactionShippingAddress | null;
};
/**
 * EmailSent
 */
export type EmailSent = {
  /**
   * The timestamp when the email was sent.
   */
  email_sent_at: number;
  /**
   * The recipient's email address.
   */
  email_sent_to: string;
};
/**
 * ActiveEntitlement
 * An active entitlement describes access to a feature for a customer.
 */
export type EntitlementsActiveEntitlement = {
  /**
   * The [Feature](https://stripe.com/docs/api/entitlements/feature) that the customer is entitled to.
   */
  feature: string | EntitlementsFeature;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * A unique key you provide as your own system identifier. This may be up to 80 characters.
   */
  lookup_key: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'entitlements.active_entitlement';
};
/**
 * Feature
 * A feature represents a monetizable ability or functionality in your system.
 * Features can be assigned to products, and when those products are purchased, Stripe will create an entitlement to the feature for the purchasing customer.
 */
export type EntitlementsFeature = {
  /**
   * Inactive features cannot be attached to new products and will not be returned from the features list endpoint.
   */
  active: boolean;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * A unique key you provide as your own system identifier. This may be up to 80 characters.
   */
  lookup_key: string;
  /**
   * Set of key-value pairs that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The feature's name, for your own purpose, not meant to be displayable to the customer.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'entitlements.feature';
};
/**
 * EphemeralKey
 */
export type EphemeralKey = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Time at which the key will expire. Measured in seconds since the Unix epoch.
   */
  expires: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'ephemeral_key';
  /**
   * The key's secret. You can use this value to make authorized requests to the Stripe API.
   */
  secret?: string;
};
/**
 * An error response from the Stripe API
 */
export type Error = {
  error: ApiErrors;
};
/**
 * NotificationEvent
 * Events are our way of letting you know when something interesting happens in
 * your account. When an interesting event occurs, we create a new `Event`
 * object. For example, when a charge succeeds, we create a `charge.succeeded`
 * event, and when an invoice payment attempt fails, we create an
 * `invoice.payment_failed` event. Certain API requests might create multiple
 * events. For example, if you create a new subscription for a
 * customer, you receive both a `customer.subscription.created` event and a
 * `charge.succeeded` event.
 *
 * Events occur when the state of another API resource changes. The event's data
 * field embeds the resource's state at the time of the change. For
 * example, a `charge.succeeded` event contains a charge, and an
 * `invoice.payment_failed` event contains an invoice.
 *
 * As with other API resources, you can use endpoints to retrieve an
 * [individual event](https://stripe.com/docs/api#retrieve_event) or a [list of events](https://stripe.com/docs/api#list_events)
 * from the API. We also have a separate
 * [webhooks](http://en.wikipedia.org/wiki/Webhook) system for sending the
 * `Event` objects directly to an endpoint on your server. You can manage
 * webhooks in your
 * [account settings](https://dashboard.stripe.com/account/webhooks). Learn how
 * to [listen for events](https://docs.stripe.com/webhooks)
 * so that your integration can automatically trigger reactions.
 *
 * When using [Connect](https://docs.stripe.com/connect), you can also receive event notifications
 * that occur in connected accounts. For these events, there's an
 * additional `account` attribute in the received `Event` object.
 *
 * We only guarantee access to events through the [Retrieve Event API](https://stripe.com/docs/api#retrieve_event)
 * for 30 days.
 */
export type Event = {
  /**
   * The connected account that originates the event.
   */
  account?: string;
  /**
   * The Stripe API version used to render `data`. This property is populated only for events on or after October 31, 2014.
   */
  api_version?: string | null;
  /**
   * Authentication context needed to fetch the event or related object.
   */
  context?: string;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  data: NotificationEventData;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'event';
  /**
   * Number of webhooks that haven't been successfully delivered (for example, to return a 20x response) to the URLs you specify.
   */
  pending_webhooks: number;
  /**
   * Information on the API request that triggers the event.
   */
  request?: NotificationEventRequest | null;
  /**
   * Description of the event (for example, `invoice.created` or `charge.refunded`).
   */
  type: string;
};
/**
 * ExchangeRate
 * `ExchangeRate` objects allow you to determine the rates that Stripe is currently
 * using to convert from one currency to another. Since this number is variable
 * throughout the day, there are various reasons why you might want to know the current
 * rate (for example, to dynamically price an item for a user with a default
 * payment in a foreign currency).
 *
 * Please refer to our [Exchange Rates API](https://stripe.com/docs/fx-rates) guide for more details.
 *
 * *[Note: this integration path is supported but no longer recommended]* Additionally,
 * you can guarantee that a charge is made with an exchange rate that you expect is
 * current. To do so, you must pass in the exchange_rate to charges endpoints. If the
 * value is no longer up to date, the charge won't go through. Please refer to our
 * [Using with charges](https://stripe.com/docs/exchange-rates) guide for more details.
 *
 * -----
 *
 * &nbsp;
 *
 * *This Exchange Rates API is a Beta Service and is subject to Stripe's terms of service. You may use the API solely for the purpose of transacting on Stripe. For example, the API may be queried in order to:*
 *
 * - *localize prices for processing payments on Stripe*
 * - *reconcile Stripe transactions*
 * - *determine how much money to send to a connected account*
 * - *determine app fees to charge a connected account*
 *
 * *Using this Exchange Rates API beta for any purpose other than to transact on Stripe is strictly prohibited and constitutes a violation of Stripe's terms of service.*
 */
export type ExchangeRate = {
  /**
   * Unique identifier for the object. Represented as the three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) in lowercase.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'exchange_rate';
  /**
   * Hash where the keys are supported currencies and the values are the exchange rate at which the base id currency converts to the key currency.
   */
  rates: {
    [key: string]: number;
  };
};
/**
 * Polymorphic
 */
export type ExternalAccount = BankAccount | Card;
/**
 * ExternalAccountRequirements
 */
export type ExternalAccountRequirements = {
  /**
   * Fields that need to be collected to keep the external account enabled. If not collected by `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
   */
  currently_due?: string[] | null;
  /**
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors?: AccountRequirementsError[] | null;
  /**
   * Fields that weren't collected by `current_deadline`. These fields need to be collected to enable the external account.
   */
  past_due?: string[] | null;
  /**
   * Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
   */
  pending_verification?: string[] | null;
};
/**
 * Fee
 */
export type Fee = {
  /**
   * Amount of the fee, in cents.
   */
  amount: number;
  /**
   * ID of the Connect application that earned the fee.
   */
  application?: string | null;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Type of the fee, one of: `application_fee`, `payment_method_passthrough_fee`, `stripe_fee` or `tax`.
   */
  type: string;
};
/**
 * FeeRefund
 * `Application Fee Refund` objects allow you to refund an application fee that
 * has previously been created but not yet refunded. Funds will be refunded to
 * the Stripe account from which the fee was originally collected.
 *
 * Related guide: [Refunding application fees](https://stripe.com/docs/connect/destination-charges#refunding-app-fee)
 */
export type FeeRefund = {
  /**
   * Amount, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Balance transaction that describes the impact on your account balance.
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the application fee that was refunded.
   */
  fee: string | ApplicationFee;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'fee_refund';
};
/**
 * File
 * This object represents files hosted on Stripe's servers. You can upload
 * files with the [create file](https://stripe.com/docs/api#create_file) request
 * (for example, when uploading dispute evidence). Stripe also
 * creates files independently (for example, the results of a [Sigma scheduled
 * query](#scheduled_queries)).
 *
 * Related guide: [File upload guide](https://stripe.com/docs/file-upload)
 */
export type File = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The file expires and isn't available at this time in epoch seconds.
   */
  expires_at?: number | null;
  /**
   * The suitable name for saving the file to a filesystem.
   */
  filename?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * FileResourceFileLinkList
   * A list of [file links](https://stripe.com/docs/api#file_links) that point at this file.
   */
  links?: {
    /**
     * Details about each object.
     */
    data: FileLink[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'file';
  /**
   * The [purpose](https://stripe.com/docs/file-upload#uploading-a-file) of the uploaded file.
   */
  purpose:
    | 'account_requirement'
    | 'additional_verification'
    | 'business_icon'
    | 'business_logo'
    | 'customer_signature'
    | 'dispute_evidence'
    | 'document_provider_identity_document'
    | 'finance_report_run'
    | 'financial_account_statement'
    | 'identity_document'
    | 'identity_document_downloadable'
    | 'issuing_regulatory_reporting'
    | 'pci_document'
    | 'selfie'
    | 'sigma_scheduled_query'
    | 'tax_document_user_upload'
    | 'terminal_reader_splashscreen';
  /**
   * The size of the file object in bytes.
   */
  size: number;
  /**
   * A suitable title for the document.
   */
  title?: string | null;
  /**
   * The returned file type (for example, `csv`, `pdf`, `jpg`, or `png`).
   */
  type?: string | null;
  /**
   * Use your live secret API key to download the file from this URL.
   */
  url?: string | null;
};
/**
 * FileLink
 * To share the contents of a `File` object with non-Stripe users, you can
 * create a `FileLink`. `FileLink`s contain a URL that you can use to
 * retrieve the contents of the file without authentication.
 */
export type FileLink = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Returns if the link is already expired.
   */
  expired: boolean;
  /**
   * Time that the link expires.
   */
  expires_at?: number | null;
  /**
   * The file object this link points to.
   */
  file: string | File;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'file_link';
  /**
   * The publicly accessible URL to download the file.
   */
  url?: string | null;
};
/**
 * BankConnectionsResourceLinkedAccount
 * A Financial Connections Account represents an account that exists outside of Stripe, to which you have been granted some degree of access.
 */
export type FinancialConnectionsAccount = {
  /**
   * The account holder that this account belongs to.
   */
  account_holder?: BankConnectionsResourceAccountholder | null;
  /**
   * The most recent information about the account's balance.
   */
  balance?: BankConnectionsResourceBalance | null;
  /**
   * The state of the most recent attempt to refresh the account balance.
   */
  balance_refresh?: BankConnectionsResourceBalanceRefresh | null;
  /**
   * The type of the account. Account category is further divided in `subcategory`.
   */
  category: 'cash' | 'credit' | 'investment' | 'other';
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * A human-readable name that has been assigned to this account, either by the account holder or by the institution.
   */
  display_name?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The name of the institution that holds this account.
   */
  institution_name: string;
  /**
   * The last 4 digits of the account number. If present, this will be 4 numeric characters.
   */
  last4?: string | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'financial_connections.account';
  /**
   * The most recent information about the account's owners.
   */
  ownership?: (string | FinancialConnectionsAccountOwnership) | null;
  /**
   * The state of the most recent attempt to refresh the account owners.
   */
  ownership_refresh?: BankConnectionsResourceOwnershipRefresh | null;
  /**
   * The list of permissions granted by this account.
   */
  permissions?:
    | ('balances' | 'ownership' | 'payment_method' | 'transactions')[]
    | null;
  /**
   * The status of the link to the account.
   */
  status: 'active' | 'disconnected' | 'inactive';
  /**
   * If `category` is `cash`, one of:
   *
   *  - `checking`
   *  - `savings`
   *  - `other`
   *
   * If `category` is `credit`, one of:
   *
   *  - `mortgage`
   *  - `line_of_credit`
   *  - `credit_card`
   *  - `other`
   *
   * If `category` is `investment` or `other`, this will be `other`.
   */
  subcategory:
    | 'checking'
    | 'credit_card'
    | 'line_of_credit'
    | 'mortgage'
    | 'other'
    | 'savings';
  /**
   * The list of data refresh subscriptions requested on this account.
   */
  subscriptions?: 'transactions'[] | null;
  /**
   * The [PaymentMethod type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type)(s) that can be created from this account.
   */
  supported_payment_method_types: ('link' | 'us_bank_account')[];
  /**
   * The state of the most recent attempt to refresh the account transactions.
   */
  transaction_refresh?: BankConnectionsResourceTransactionRefresh | null;
};
/**
 * BankConnectionsResourceOwner
 * Describes an owner of an account.
 */
export type FinancialConnectionsAccountOwner = {
  /**
   * The email address of the owner.
   */
  email?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The full name of the owner.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'financial_connections.account_owner';
  /**
   * The ownership object that this owner belongs to.
   */
  ownership: string;
  /**
   * The raw phone number of the owner.
   */
  phone?: string | null;
  /**
   * The raw physical address of the owner.
   */
  raw_address?: string | null;
  /**
   * The timestamp of the refresh that updated this owner.
   */
  refreshed_at?: number | null;
};
/**
 * BankConnectionsResourceOwnership
 * Describes a snapshot of the owners of an account at a particular point in time.
 */
export type FinancialConnectionsAccountOwnership = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'financial_connections.account_ownership';
  /**
   * BankConnectionsResourceOwnerList
   * A paginated list of owners for this account.
   */
  owners: {
    /**
     * Details about each object.
     */
    data: FinancialConnectionsAccountOwner[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
};
/**
 * BankConnectionsResourceLinkAccountSession
 * A Financial Connections Session is the secure way to programmatically launch the client-side Stripe.js modal that lets your users link their accounts.
 */
export type FinancialConnectionsSession = {
  /**
   * The account holder for whom accounts are collected in this session.
   */
  account_holder?: BankConnectionsResourceAccountholder | null;
  /**
   * BankConnectionsResourceLinkedAccountList
   * The accounts that were collected as part of this Session.
   */
  accounts: {
    /**
     * Details about each object.
     */
    data: FinancialConnectionsAccount[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * A value that will be passed to the client to launch the authentication flow.
   */
  client_secret: string;
  filters?: BankConnectionsResourceLinkAccountSessionFilters;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'financial_connections.session';
  /**
   * Permissions requested for accounts collected during this session.
   */
  permissions: ('balances' | 'ownership' | 'payment_method' | 'transactions')[];
  /**
   * Data features requested to be retrieved upon account creation.
   */
  prefetch?: ('balances' | 'ownership' | 'transactions')[] | null;
  /**
   * For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
   */
  return_url?: string;
};
/**
 * BankConnectionsResourceTransaction
 * A Transaction represents a real transaction that affects a Financial Connections Account balance.
 */
export type FinancialConnectionsTransaction = {
  /**
   * The ID of the Financial Connections Account this transaction belongs to.
   */
  account: string;
  /**
   * The amount of this transaction, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The description of this transaction.
   */
  description: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'financial_connections.transaction';
  /**
   * The status of the transaction.
   */
  status: 'pending' | 'posted' | 'void';
  status_transitions: BankConnectionsResourceTransactionResourceStatusTransitions;
  /**
   * Time at which the transaction was transacted. Measured in seconds since the Unix epoch.
   */
  transacted_at: number;
  /**
   * The token of the transaction refresh that last updated or created this transaction.
   */
  transaction_refresh: string;
  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   */
  updated: number;
};
/**
 * FinancialReportingFinanceReportRunRunParameters
 */
export type FinancialReportingFinanceReportRunRunParameters = {
  /**
   * The set of output columns requested for inclusion in the report run.
   */
  columns?: string[];
  /**
   * Connected account ID by which to filter the report run.
   */
  connected_account?: string;
  /**
   * Currency of objects to be included in the report run.
   */
  currency?: string;
  /**
   * Ending timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after the user specified `interval_start` and 1 second before this report's last `data_available_end` value.
   */
  interval_end?: number;
  /**
   * Starting timestamp of data to be included in the report run. Can be any UTC timestamp between 1 second after this report's `data_available_start` and 1 second before the user specified `interval_end` value.
   */
  interval_start?: number;
  /**
   * Payout ID by which to filter the report run.
   */
  payout?: string;
  /**
   * Category of balance transactions to be included in the report run.
   */
  reporting_category?: string;
  /**
   * Defaults to `Etc/UTC`. The output timezone for all timestamps in the report. A list of possible time zone values is maintained at the [IANA Time Zone Database](http://www.iana.org/time-zones). Has no effect on `interval_start` or `interval_end`.
   */
  timezone?: string;
};
/**
 * ForwardedRequestContext
 * Metadata about the forwarded request.
 */
export type ForwardedRequestContext = {
  /**
   * The time it took in milliseconds for the destination endpoint to respond.
   */
  destination_duration: number;
  /**
   * The IP address of the destination.
   */
  destination_ip_address: string;
};
/**
 * ForwardedRequestDetails
 * Details about the request forwarded to the destination endpoint.
 */
export type ForwardedRequestDetails = {
  /**
   * The body payload to send to the destination endpoint.
   */
  body: string;
  /**
   * The headers to include in the forwarded request. Can be omitted if no additional headers (excluding Stripe-generated ones such as the Content-Type header) should be included.
   */
  headers: ForwardedRequestHeader[];
  /**
   * The HTTP method used to call the destination endpoint.
   */
  http_method: 'POST';
};
/**
 * ForwardedRequestHeader
 * Header data.
 */
export type ForwardedRequestHeader = {
  /**
   * The header name.
   */
  name: string;
  /**
   * The header value.
   */
  value: string;
};
/**
 * ForwardedResponseDetails
 * Details about the response from the destination endpoint.
 */
export type ForwardedResponseDetails = {
  /**
   * The response body from the destination endpoint to Stripe.
   */
  body: string;
  /**
   * HTTP headers that the destination endpoint returned.
   */
  headers: ForwardedRequestHeader[];
  /**
   * The HTTP status code that the destination endpoint returned.
   */
  status: number;
};
/**
 * ForwardingRequest
 * Instructs Stripe to make a request on your behalf using the destination URL. The destination URL
 * is activated by Stripe at the time of onboarding. Stripe verifies requests with your credentials
 * provided during onboarding, and injects card details from the payment_method into the request.
 *
 * Stripe redacts all sensitive fields and headers, including authentication credentials and card numbers,
 * before storing the request and response data in the forwarding Request object, which are subject to a
 * 30-day retention period.
 *
 * You can provide a Stripe idempotency key to make sure that requests with the same key result in only one
 * outbound request. The Stripe idempotency key provided should be unique and different from any idempotency
 * keys provided on the underlying third-party request.
 *
 * Forwarding Requests are synchronous requests that return a response or time out according to
 * Stripe’s limits.
 *
 * Related guide: [Forward card details to third-party API endpoints](https://docs.stripe.com/payments/forwarding).
 */
export type ForwardingRequest = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'forwarding.request';
  /**
   * The PaymentMethod to insert into the forwarded request. Forwarding previously consumed PaymentMethods is allowed.
   */
  payment_method: string;
  /**
   * The field kinds to be replaced in the forwarded request.
   */
  replacements: (
    | 'card_cvc'
    | 'card_expiry'
    | 'card_number'
    | 'cardholder_name'
    | 'request_signature'
  )[];
  /**
   * Context about the request from Stripe's servers to the destination endpoint.
   */
  request_context?: ForwardedRequestContext | null;
  /**
   * The request that was sent to the destination endpoint. We redact any sensitive fields.
   */
  request_details?: ForwardedRequestDetails | null;
  /**
   * The response that the destination endpoint returned to us. We redact any sensitive fields.
   */
  response_details?: ForwardedResponseDetails | null;
  /**
   * The destination URL for the forwarded request. Must be supported by the config.
   */
  url?: string | null;
};
/**
 * CustomerBalanceFundingInstructionsCustomerBalanceFundingInstructions
 * Each customer has a [`balance`](https://stripe.com/docs/api/customers/object#customer_object-balance) that is
 * automatically applied to future invoices and payments using the `customer_balance` payment method.
 * Customers can fund this balance by initiating a bank transfer to any account in the
 * `financial_addresses` field.
 * Related guide: [Customer balance funding instructions](https://stripe.com/docs/payments/customer-balance/funding-instructions)
 */
export type FundingInstructions = {
  bank_transfer: FundingInstructionsBankTransfer;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The `funding_type` of the returned instructions
   */
  funding_type: 'bank_transfer';
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'funding_instructions';
};
/**
 * FundingInstructionsBankTransfer
 */
export type FundingInstructionsBankTransfer = {
  /**
   * The country of the bank account to fund
   */
  country: string;
  /**
   * A list of financial addresses that can be used to fund a particular balance
   */
  financial_addresses: FundingInstructionsBankTransferFinancialAddress[];
  /**
   * The bank_transfer type
   */
  type: 'eu_bank_transfer' | 'jp_bank_transfer';
};
/**
 * FundingInstructionsBankTransferABARecord
 * ABA Records contain U.S. bank account details per the ABA format.
 */
export type FundingInstructionsBankTransferAbaRecord = {
  account_holder_address: Address;
  /**
   * The account holder name
   */
  account_holder_name: string;
  /**
   * The ABA account number
   */
  account_number: string;
  /**
   * The account type
   */
  account_type: string;
  bank_address: Address;
  /**
   * The bank name
   */
  bank_name: string;
  /**
   * The ABA routing number
   */
  routing_number: string;
};
/**
 * FundingInstructionsBankTransferFinancialAddress
 * FinancialAddresses contain identifying information that resolves to a FinancialAccount.
 */
export type FundingInstructionsBankTransferFinancialAddress = {
  aba?: FundingInstructionsBankTransferAbaRecord;
  iban?: FundingInstructionsBankTransferIbanRecord;
  sort_code?: FundingInstructionsBankTransferSortCodeRecord;
  spei?: FundingInstructionsBankTransferSpeiRecord;
  /**
   * The payment networks supported by this FinancialAddress
   */
  supported_networks?: (
    | 'ach'
    | 'bacs'
    | 'domestic_wire_us'
    | 'fps'
    | 'sepa'
    | 'spei'
    | 'swift'
    | 'zengin'
  )[];
  swift?: FundingInstructionsBankTransferSwiftRecord;
  /**
   * The type of financial address
   */
  type: 'aba' | 'iban' | 'sort_code' | 'spei' | 'swift' | 'zengin';
  zengin?: FundingInstructionsBankTransferZenginRecord;
};
/**
 * FundingInstructionsBankTransferIbanRecord
 * Iban Records contain E.U. bank account details per the SEPA format.
 */
export type FundingInstructionsBankTransferIbanRecord = {
  account_holder_address: Address;
  /**
   * The name of the person or business that owns the bank account
   */
  account_holder_name: string;
  bank_address: Address;
  /**
   * The BIC/SWIFT code of the account.
   */
  bic: string;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country: string;
  /**
   * The IBAN of the account.
   */
  iban: string;
};
/**
 * FundingInstructionsBankTransferSortCodeRecord
 * Sort Code Records contain U.K. bank account details per the sort code format.
 */
export type FundingInstructionsBankTransferSortCodeRecord = {
  account_holder_address: Address;
  /**
   * The name of the person or business that owns the bank account
   */
  account_holder_name: string;
  /**
   * The account number
   */
  account_number: string;
  bank_address: Address;
  /**
   * The six-digit sort code
   */
  sort_code: string;
};
/**
 * FundingInstructionsBankTransferSpeiRecord
 * SPEI Records contain Mexico bank account details per the SPEI format.
 */
export type FundingInstructionsBankTransferSpeiRecord = {
  account_holder_address: Address;
  /**
   * The account holder name
   */
  account_holder_name: string;
  bank_address: Address;
  /**
   * The three-digit bank code
   */
  bank_code: string;
  /**
   * The short banking institution name
   */
  bank_name: string;
  /**
   * The CLABE number
   */
  clabe: string;
};
/**
 * FundingInstructionsBankTransferSwiftRecord
 * SWIFT Records contain U.S. bank account details per the SWIFT format.
 */
export type FundingInstructionsBankTransferSwiftRecord = {
  account_holder_address: Address;
  /**
   * The account holder name
   */
  account_holder_name: string;
  /**
   * The account number
   */
  account_number: string;
  /**
   * The account type
   */
  account_type: string;
  bank_address: Address;
  /**
   * The bank name
   */
  bank_name: string;
  /**
   * The SWIFT code
   */
  swift_code: string;
};
/**
 * FundingInstructionsBankTransferZenginRecord
 * Zengin Records contain Japan bank account details per the Zengin format.
 */
export type FundingInstructionsBankTransferZenginRecord = {
  account_holder_address: Address;
  /**
   * The account holder name
   */
  account_holder_name?: string | null;
  /**
   * The account number
   */
  account_number?: string | null;
  /**
   * The bank account type. In Japan, this can only be `futsu` or `toza`.
   */
  account_type?: string | null;
  bank_address: Address;
  /**
   * The bank code of the account
   */
  bank_code?: string | null;
  /**
   * The bank name of the account
   */
  bank_name?: string | null;
  /**
   * The branch code of the account
   */
  branch_code?: string | null;
  /**
   * The branch name of the account
   */
  branch_name?: string | null;
};
/**
 * GelatoDataDocumentReportDateOfBirth
 * Point in Time
 */
export type GelatoDataDocumentReportDateOfBirth = {
  /**
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /**
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year.
   */
  year?: number | null;
};
/**
 * GelatoDataDocumentReportExpirationDate
 * Point in Time
 */
export type GelatoDataDocumentReportExpirationDate = {
  /**
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /**
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year.
   */
  year?: number | null;
};
/**
 * GelatoDataDocumentReportIssuedDate
 * Point in Time
 */
export type GelatoDataDocumentReportIssuedDate = {
  /**
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /**
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year.
   */
  year?: number | null;
};
/**
 * GelatoDataIdNumberReportDate
 * Point in Time
 */
export type GelatoDataIdNumberReportDate = {
  /**
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /**
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year.
   */
  year?: number | null;
};
/**
 * GelatoDataVerifiedOutputsDate
 * Point in Time
 */
export type GelatoDataVerifiedOutputsDate = {
  /**
   * Numerical day between 1 and 31.
   */
  day?: number | null;
  /**
   * Numerical month between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year.
   */
  year?: number | null;
};
/**
 * GelatoDocumentReport
 * Result from a document check
 */
export type GelatoDocumentReport = {
  /**
   * Address as it appears in the document.
   */
  address?: Address | null;
  /**
   * Date of birth as it appears in the document.
   */
  dob?: GelatoDataDocumentReportDateOfBirth | null;
  /**
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoDocumentReportError | null;
  /**
   * Expiration date of the document.
   */
  expiration_date?: GelatoDataDocumentReportExpirationDate | null;
  /**
   * Array of [File](https://stripe.com/docs/api/files) ids containing images for this document.
   */
  files?: string[] | null;
  /**
   * First name as it appears in the document.
   */
  first_name?: string | null;
  /**
   * Issued date of the document.
   */
  issued_date?: GelatoDataDocumentReportIssuedDate | null;
  /**
   * Issuing country of the document.
   */
  issuing_country?: string | null;
  /**
   * Last name as it appears in the document.
   */
  last_name?: string | null;
  /**
   * Document ID number.
   */
  number?: string | null;
  /**
   * Sex of the person in the document.
   */
  sex?: ('[redacted]' | 'female' | 'male' | 'unknown') | null;
  /**
   * Status of this `document` check.
   */
  status: 'unverified' | 'verified';
  /**
   * Type of the document.
   */
  type?: ('driving_license' | 'id_card' | 'passport') | null;
  /**
   * Place of birth as it appears in the document.
   */
  unparsed_place_of_birth?: string | null;
  /**
   * Sex as it appears in the document.
   */
  unparsed_sex?: string | null;
};
/**
 * GelatoDocumentReportError
 */
export type GelatoDocumentReportError = {
  /**
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?:
    | (
        | 'document_expired'
        | 'document_type_not_supported'
        | 'document_unverified_other'
      )
    | null;
  /**
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   */
  reason?: string | null;
};
/**
 * GelatoEmailReport
 * Result from a email check
 */
export type GelatoEmailReport = {
  /**
   * Email to be verified.
   */
  email?: string | null;
  /**
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoEmailReportError | null;
  /**
   * Status of this `email` check.
   */
  status: 'unverified' | 'verified';
};
/**
 * GelatoEmailReportError
 */
export type GelatoEmailReportError = {
  /**
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?: ('email_unverified_other' | 'email_verification_declined') | null;
  /**
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   */
  reason?: string | null;
};
/**
 * GelatoIdNumberReport
 * Result from an id_number check
 */
export type GelatoIdNumberReport = {
  /**
   * Date of birth.
   */
  dob?: GelatoDataIdNumberReportDate | null;
  /**
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoIdNumberReportError | null;
  /**
   * First name.
   */
  first_name?: string | null;
  /**
   * ID number. When `id_number_type` is `us_ssn`, only the last 4 digits are present.
   */
  id_number?: string | null;
  /**
   * Type of ID number.
   */
  id_number_type?: ('br_cpf' | 'sg_nric' | 'us_ssn') | null;
  /**
   * Last name.
   */
  last_name?: string | null;
  /**
   * Status of this `id_number` check.
   */
  status: 'unverified' | 'verified';
};
/**
 * GelatoIdNumberReportError
 */
export type GelatoIdNumberReportError = {
  /**
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?:
    | (
        | 'id_number_insufficient_document_data'
        | 'id_number_mismatch'
        | 'id_number_unverified_other'
      )
    | null;
  /**
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   */
  reason?: string | null;
};
/**
 * GelatoPhoneReport
 * Result from a phone check
 */
export type GelatoPhoneReport = {
  /**
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoPhoneReportError | null;
  /**
   * Phone to be verified.
   */
  phone?: string | null;
  /**
   * Status of this `phone` check.
   */
  status: 'unverified' | 'verified';
};
/**
 * GelatoPhoneReportError
 */
export type GelatoPhoneReportError = {
  /**
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?: ('phone_unverified_other' | 'phone_verification_declined') | null;
  /**
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   */
  reason?: string | null;
};
/**
 * GelatoProvidedDetails
 */
export type GelatoProvidedDetails = {
  /**
   * Email of user being verified
   */
  email?: string;
  /**
   * Phone number of user being verified
   */
  phone?: string;
};
/**
 * GelatoReportDocumentOptions
 */
export type GelatoReportDocumentOptions = {
  /**
   * Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
   */
  allowed_types?: ('driving_license' | 'id_card' | 'passport')[];
  /**
   * Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
   */
  require_id_number?: boolean;
  /**
   * Disable image uploads, identity document images have to be captured using the device’s camera.
   */
  require_live_capture?: boolean;
  /**
   * Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
   */
  require_matching_selfie?: boolean;
};
/**
 * GelatoReportIdNumberOptions
 */
export type GelatoReportIdNumberOptions = unknown;
/**
 * GelatoSelfieReport
 * Result from a selfie check
 */
export type GelatoSelfieReport = {
  /**
   * ID of the [File](https://stripe.com/docs/api/files) holding the image of the identity document used in this check.
   */
  document?: string | null;
  /**
   * Details on the verification error. Present when status is `unverified`.
   */
  error?: GelatoSelfieReportError | null;
  /**
   * ID of the [File](https://stripe.com/docs/api/files) holding the image of the selfie used in this check.
   */
  selfie?: string | null;
  /**
   * Status of this `selfie` check.
   */
  status: 'unverified' | 'verified';
};
/**
 * GelatoSelfieReportError
 */
export type GelatoSelfieReportError = {
  /**
   * A short machine-readable string giving the reason for the verification failure.
   */
  code?:
    | (
        | 'selfie_document_missing_photo'
        | 'selfie_face_mismatch'
        | 'selfie_manipulated'
        | 'selfie_unverified_other'
      )
    | null;
  /**
   * A human-readable message giving the reason for the failure. These messages can be shown to your users.
   */
  reason?: string | null;
};
/**
 * GelatoSessionDocumentOptions
 */
export type GelatoSessionDocumentOptions = {
  /**
   * Array of strings of allowed identity document types. If the provided identity document isn’t one of the allowed types, the verification check will fail with a document_type_not_allowed error code.
   */
  allowed_types?: ('driving_license' | 'id_card' | 'passport')[];
  /**
   * Collect an ID number and perform an [ID number check](https://stripe.com/docs/identity/verification-checks?type=id-number) with the document’s extracted name and date of birth.
   */
  require_id_number?: boolean;
  /**
   * Disable image uploads, identity document images have to be captured using the device’s camera.
   */
  require_live_capture?: boolean;
  /**
   * Capture a face image and perform a [selfie check](https://stripe.com/docs/identity/verification-checks?type=selfie) comparing a photo ID and a picture of your user’s face. [Learn more](https://stripe.com/docs/identity/selfie).
   */
  require_matching_selfie?: boolean;
};
/**
 * GelatoSessionEmailOptions
 */
export type GelatoSessionEmailOptions = {
  /**
   * Request one time password verification of `provided_details.email`.
   */
  require_verification?: boolean;
};
/**
 * GelatoSessionIdNumberOptions
 */
export type GelatoSessionIdNumberOptions = unknown;
/**
 * GelatoSessionLastError
 * Shows last VerificationSession error
 */
export type GelatoSessionLastError = {
  /**
   * A short machine-readable string giving the reason for the verification or user-session failure.
   */
  code?:
    | (
        | 'abandoned'
        | 'consent_declined'
        | 'country_not_supported'
        | 'device_not_supported'
        | 'document_expired'
        | 'document_type_not_supported'
        | 'document_unverified_other'
        | 'email_unverified_other'
        | 'email_verification_declined'
        | 'id_number_insufficient_document_data'
        | 'id_number_mismatch'
        | 'id_number_unverified_other'
        | 'phone_unverified_other'
        | 'phone_verification_declined'
        | 'selfie_document_missing_photo'
        | 'selfie_face_mismatch'
        | 'selfie_manipulated'
        | 'selfie_unverified_other'
        | 'under_supported_age'
      )
    | null;
  /**
   * A message that explains the reason for verification or user-session failure.
   */
  reason?: string | null;
};
/**
 * GelatoSessionPhoneOptions
 */
export type GelatoSessionPhoneOptions = {
  /**
   * Request one time password verification of `provided_details.phone`.
   */
  require_verification?: boolean;
};
/**
 * GelatoVerificationReportOptions
 */
export type GelatoVerificationReportOptions = {
  document?: GelatoReportDocumentOptions;
  id_number?: GelatoReportIdNumberOptions;
};
/**
 * GelatoVerificationSessionOptions
 */
export type GelatoVerificationSessionOptions = {
  document?: GelatoSessionDocumentOptions;
  email?: GelatoSessionEmailOptions;
  id_number?: GelatoSessionIdNumberOptions;
  phone?: GelatoSessionPhoneOptions;
};
/**
 * GelatoVerifiedOutputs
 */
export type GelatoVerifiedOutputs = {
  /**
   * The user's verified address.
   */
  address?: Address | null;
  /**
   * The user’s verified date of birth.
   */
  dob?: GelatoDataVerifiedOutputsDate | null;
  /**
   * The user's verified email address
   */
  email?: string | null;
  /**
   * The user's verified first name.
   */
  first_name?: string | null;
  /**
   * The user's verified id number.
   */
  id_number?: string | null;
  /**
   * The user's verified id number type.
   */
  id_number_type?: ('br_cpf' | 'sg_nric' | 'us_ssn') | null;
  /**
   * The user's verified last name.
   */
  last_name?: string | null;
  /**
   * The user's verified phone number
   */
  phone?: string | null;
  /**
   * The user's verified sex.
   */
  sex?: ('[redacted]' | 'female' | 'male' | 'unknown') | null;
  /**
   * The user's verified place of birth as it appears in the document.
   */
  unparsed_place_of_birth?: string | null;
  /**
   * The user's verified sex as it appears in the document.
   */
  unparsed_sex?: string | null;
};
/**
 * GelatoVerificationReport
 * A VerificationReport is the result of an attempt to collect and verify data from a user.
 * The collection of verification checks performed is determined from the `type` and `options`
 * parameters used. You can find the result of each verification check performed in the
 * appropriate sub-resource: `document`, `id_number`, `selfie`.
 *
 * Each VerificationReport contains a copy of any data collected by the user as well as
 * reference IDs which can be used to access collected images through the [FileUpload](https://stripe.com/docs/api/files)
 * API. To configure and create VerificationReports, use the
 * [VerificationSession](https://stripe.com/docs/api/identity/verification_sessions) API.
 *
 * Related guide: [Accessing verification results](https://stripe.com/docs/identity/verification-sessions#results).
 */
export type IdentityVerificationReport = {
  /**
   * A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
   */
  client_reference_id?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  document?: GelatoDocumentReport;
  email?: GelatoEmailReport;
  /**
   * Unique identifier for the object.
   */
  id: string;
  id_number?: GelatoIdNumberReport;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'identity.verification_report';
  options?: GelatoVerificationReportOptions;
  phone?: GelatoPhoneReport;
  selfie?: GelatoSelfieReport;
  /**
   * Type of report.
   */
  type: 'document' | 'id_number' | 'verification_flow';
  /**
   * The configuration token of a verification flow from the dashboard.
   */
  verification_flow?: string;
  /**
   * ID of the VerificationSession that created this report.
   */
  verification_session?: string | null;
};
/**
 * GelatoVerificationSession
 * A VerificationSession guides you through the process of collecting and verifying the identities
 * of your users. It contains details about the type of verification, such as what [verification
 * check](/docs/identity/verification-checks) to perform. Only create one VerificationSession for
 * each verification in your system.
 *
 * A VerificationSession transitions through [multiple
 * statuses](/docs/identity/how-sessions-work) throughout its lifetime as it progresses through
 * the verification flow. The VerificationSession contains the user's verified data after
 * verification checks are complete.
 *
 * Related guide: [The Verification Sessions API](https://stripe.com/docs/identity/verification-sessions)
 */
export type IdentityVerificationSession = {
  /**
   * A string to reference this user. This can be a customer ID, a session ID, or similar, and can be used to reconcile this verification with your internal systems.
   */
  client_reference_id?: string | null;
  /**
   * The short-lived client secret used by Stripe.js to [show a verification modal](https://stripe.com/docs/js/identity/modal) inside your app. This client secret expires after 24 hours and can only be used once. Don’t store it, log it, embed it in a URL, or expose it to anyone other than the user. Make sure that you have TLS enabled on any page that includes the client secret. Refer to our docs on [passing the client secret to the frontend](https://stripe.com/docs/identity/verification-sessions#client-secret) to learn more.
   */
  client_secret?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * If present, this property tells you the last error encountered when processing the verification.
   */
  last_error?: GelatoSessionLastError | null;
  /**
   * ID of the most recent VerificationReport. [Learn more about accessing detailed verification results.](https://stripe.com/docs/identity/verification-sessions#results)
   */
  last_verification_report?: (string | IdentityVerificationReport) | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'identity.verification_session';
  /**
   * A set of options for the session’s verification checks.
   */
  options?: GelatoVerificationSessionOptions | null;
  /**
   * Details provided about the user being verified. These details may be shown to the user.
   */
  provided_details?: GelatoProvidedDetails | null;
  /**
   * Redaction status of this VerificationSession. If the VerificationSession is not redacted, this field will be null.
   */
  redaction?: VerificationSessionRedaction | null;
  /**
   * Customer ID
   */
  related_customer?: string | null;
  /**
   * Status of this VerificationSession. [Learn more about the lifecycle of sessions](https://stripe.com/docs/identity/how-sessions-work).
   */
  status: 'canceled' | 'processing' | 'requires_input' | 'verified';
  /**
   * The type of [verification check](https://stripe.com/docs/identity/verification-checks) to be performed.
   */
  type: 'document' | 'id_number' | 'verification_flow';
  /**
   * The short-lived URL that you use to redirect a user to Stripe to submit their identity information. This URL expires after 48 hours and can only be used once. Don’t store it, log it, send it in emails or expose it to anyone other than the user. Refer to our docs on [verifying identity documents](https://stripe.com/docs/identity/verify-identity-documents?platform=web&type=redirect) to learn how to redirect users to Stripe.
   */
  url?: string | null;
  /**
   * The configuration token of a verification flow from the dashboard.
   */
  verification_flow?: string;
  /**
   * The user’s verified data.
   */
  verified_outputs?: GelatoVerifiedOutputs | null;
};
/**
 * InboundTransfers
 */
export type InboundTransfers = {
  billing_details: TreasurySharedResourceBillingDetails;
  /**
   * The type of the payment method used in the InboundTransfer.
   */
  type: 'us_bank_account';
  us_bank_account?: InboundTransfersPaymentMethodDetailsUsBankAccount;
};
/**
 * inbound_transfers_payment_method_details_us_bank_account
 */
export type InboundTransfersPaymentMethodDetailsUsBankAccount = {
  /**
   * Account holder type: individual or company.
   */
  account_holder_type?: ('company' | 'individual') | null;
  /**
   * Account type: checkings or savings. Defaults to checking if omitted.
   */
  account_type?: ('checking' | 'savings') | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment.
   */
  mandate?: string | Mandate;
  /**
   * The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
   */
  network: 'ach';
  /**
   * Routing number of the bank account.
   */
  routing_number?: string | null;
};
/**
 * internal_card
 */
export type InternalCard = {
  /**
   * Brand of the card used in the transaction
   */
  brand?: string | null;
  /**
   * Two-letter ISO code representing the country of the card
   */
  country?: string | null;
  /**
   * Two digit number representing the card's expiration month
   */
  exp_month?: number | null;
  /**
   * Two digit number representing the card's expiration year
   */
  exp_year?: number | null;
  /**
   * The last 4 digits of the card
   */
  last4?: string | null;
};
/**
 * Invoice
 * Invoices are statements of amounts owed by a customer, and are either
 * generated one-off, or generated periodically from a subscription.
 *
 * They contain [invoice items](https://stripe.com/docs/api#invoiceitems), and proration adjustments
 * that may be caused by subscription upgrades/downgrades (if necessary).
 *
 * If your invoice is configured to be billed through automatic charges,
 * Stripe automatically finalizes your invoice and attempts payment. Note
 * that finalizing the invoice,
 * [when automatic](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection), does
 * not happen immediately as the invoice is created. Stripe waits
 * until one hour after the last webhook was successfully sent (or the last
 * webhook timed out after failing). If you (and the platforms you may have
 * connected to) have no webhooks configured, Stripe waits one hour after
 * creation to finalize the invoice.
 *
 * If your invoice is configured to be billed by sending an email, then based on your
 * [email settings](https://dashboard.stripe.com/account/billing/automatic),
 * Stripe will email the invoice to your customer and await payment. These
 * emails can contain a link to a hosted page to pay the invoice.
 *
 * Stripe applies any customer credit on the account before determining the
 * amount due for the invoice (i.e., the amount that will be actually
 * charged). If the amount due for the invoice is less than Stripe's [minimum allowed charge
 * per currency](/docs/currencies#minimum-and-maximum-charge-amounts), the
 * invoice is automatically marked paid, and we add the amount due to the
 * customer's credit balance which is applied to the next invoice.
 *
 * More details on the customer's credit balance are
 * [here](https://stripe.com/docs/billing/customer/balance).
 *
 * Related guide: [Send invoices to customers](https://stripe.com/docs/billing/invoices/sending)
 */
export type Invoice = {
  /**
   * The country of the business associated with this invoice, most often the business creating the invoice.
   */
  account_country?: string | null;
  /**
   * The public name of the business associated with this invoice, most often the business creating the invoice.
   */
  account_name?: string | null;
  /**
   * The account tax IDs associated with the invoice. Only editable when the invoice is a draft.
   */
  account_tax_ids?: (string | TaxId | DeletedTaxId)[] | null;
  /**
   * Final amount due at this time for this invoice. If the invoice's total is smaller than the minimum charge amount, for example, or if there is account credit that can be applied to the invoice, the `amount_due` may be 0. If there is a positive `starting_balance` for the invoice (the customer owes money), the `amount_due` will also take that into account. The charge that gets generated for the invoice will be for the amount specified in `amount_due`.
   */
  amount_due: number;
  /**
   * Amount that was overpaid on the invoice. The amount overpaid is credited to the customer's credit balance.
   */
  amount_overpaid: number;
  /**
   * The amount, in cents (or local equivalent), that was paid.
   */
  amount_paid: number;
  /**
   * The difference between amount_due and amount_paid, in cents (or local equivalent).
   */
  amount_remaining: number;
  /**
   * This is the sum of all the shipping amounts.
   */
  amount_shipping: number;
  /**
   * ID of the Connect Application that created the invoice.
   */
  application?: (string | Application | DeletedApplication) | null;
  /**
   * Number of payment attempts made for this invoice, from the perspective of the payment retry schedule. Any payment attempt counts as the first attempt, and subsequently only automatic retries increment the attempt count. In other words, manual payment attempts after the first attempt do not affect the retry schedule. If a failure is returned with a non-retryable return code, the invoice can no longer be retried unless a new payment method is obtained. Retries will continue to be scheduled, and attempt_count will continue to increment, but retries will only be executed if a new payment method is obtained.
   */
  attempt_count: number;
  /**
   * Whether an attempt has been made to pay the invoice. An invoice is not attempted until 1 hour after the `invoice.created` webhook, for example, so you might not want to display that invoice as unpaid to your users.
   */
  attempted: boolean;
  /**
   * Controls whether Stripe performs [automatic collection](https://stripe.com/docs/invoicing/integration/automatic-advancement-collection) of the invoice. If `false`, the invoice's state doesn't automatically advance without an explicit action.
   */
  auto_advance: boolean;
  automatic_tax: AutomaticTax;
  /**
   * The time when this invoice is currently scheduled to be automatically finalized. The field will be `null` if the invoice is not scheduled to finalize in the future. If the invoice is not in the draft state, this field will always be `null` - see `finalized_at` for the time when an already-finalized invoice was finalized.
   */
  automatically_finalizes_at?: number | null;
  /**
   * Indicates the reason why the invoice was created.
   *
   * * `manual`: Unrelated to a subscription, for example, created via the invoice editor.
   * * `subscription`: No longer in use. Applies to subscriptions from before May 2018 where no distinction was made between updates, cycles, and thresholds.
   * * `subscription_create`: A new subscription was created.
   * * `subscription_cycle`: A subscription advanced into a new period.
   * * `subscription_threshold`: A subscription reached a billing threshold.
   * * `subscription_update`: A subscription was updated.
   * * `upcoming`: Reserved for simulated invoices, per the upcoming invoice endpoint.
   */
  billing_reason?:
    | (
        | 'automatic_pending_invoice_item_invoice'
        | 'manual'
        | 'quote_accept'
        | 'subscription'
        | 'subscription_create'
        | 'subscription_cycle'
        | 'subscription_threshold'
        | 'subscription_update'
        | 'upcoming'
      )
    | null;
  /**
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this invoice using the default source attached to the customer. When sending an invoice, Stripe will email this invoice to the customer with payment instructions.
   */
  collection_method: 'charge_automatically' | 'send_invoice';
  /**
   * The confirmation secret associated with this invoice. Currently, this contains the client_secret of the PaymentIntent that Stripe creates during invoice finalization.
   */
  confirmation_secret?: InvoicesResourceConfirmationSecret | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Custom fields displayed on the invoice.
   */
  custom_fields?: InvoiceSettingCustomField[] | null;
  /**
   * The ID of the customer who will be billed.
   */
  customer: string | Customer | DeletedCustomer;
  /**
   * The customer's address. Until the invoice is finalized, this field will equal `customer.address`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_address?: Address | null;
  /**
   * The customer's email. Until the invoice is finalized, this field will equal `customer.email`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_email?: string | null;
  /**
   * The customer's name. Until the invoice is finalized, this field will equal `customer.name`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_name?: string | null;
  /**
   * The customer's phone number. Until the invoice is finalized, this field will equal `customer.phone`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_phone?: string | null;
  /**
   * The customer's shipping information. Until the invoice is finalized, this field will equal `customer.shipping`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_shipping?: Shipping | null;
  /**
   * The customer's tax exempt status. Until the invoice is finalized, this field will equal `customer.tax_exempt`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_tax_exempt?: ('exempt' | 'none' | 'reverse') | null;
  /**
   * The customer's tax IDs. Until the invoice is finalized, this field will contain the same tax IDs as `customer.tax_ids`. Once the invoice is finalized, this field will no longer be updated.
   */
  customer_tax_ids?: InvoicesResourceInvoiceTaxId[] | null;
  /**
   * ID of the default payment method for the invoice. It must belong to the customer associated with the invoice. If not set, defaults to the subscription's default payment method, if any, or to the default payment method in the customer's invoice settings.
   */
  default_payment_method?: (string | PaymentMethod) | null;
  /**
   * ID of the default payment source for the invoice. It must belong to the customer associated with the invoice and be in a chargeable state. If not set, defaults to the subscription's default source, if any, or to the customer's default source.
   */
  default_source?: (string | BankAccount | Card | Source) | null;
  /**
   * The tax rates applied to this invoice, if any.
   */
  default_tax_rates: TaxRate[];
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users. Referenced as 'memo' in the Dashboard.
   */
  description?: string | null;
  /**
   * The discounts applied to the invoice. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts: (string | Discount | DeletedDiscount)[];
  /**
   * The date on which payment for this invoice is due. This value will be `null` for invoices where `collection_method=charge_automatically`.
   */
  due_date?: number | null;
  /**
   * The date when this invoice is in effect. Same as `finalized_at` unless overwritten. When defined, this value replaces the system-generated 'Date of issue' printed on the invoice PDF and receipt.
   */
  effective_at?: number | null;
  /**
   * Ending customer balance after the invoice is finalized. Invoices are finalized approximately an hour after successful webhook delivery or when payment collection is attempted for the invoice. If the invoice has not been finalized yet, this will be null.
   */
  ending_balance?: number | null;
  /**
   * Footer displayed on the invoice.
   */
  footer?: string | null;
  /**
   * Details of the invoice that was cloned. See the [revision documentation](https://stripe.com/docs/invoicing/invoice-revisions) for more details.
   */
  from_invoice?: InvoicesResourceFromInvoice | null;
  /**
   * The URL for the hosted invoice page, which allows customers to view and pay an invoice. If the invoice has not been finalized yet, this will be null.
   */
  hosted_invoice_url?: string | null;
  /**
   * Unique identifier for the object. For preview invoices created using the [create preview](https://stripe.com/docs/api/invoices/create_preview) endpoint, this id will be prefixed with `upcoming_in`.
   */
  id: string;
  /**
   * The link to download the PDF for the invoice. If the invoice has not been finalized yet, this will be null.
   */
  invoice_pdf?: string | null;
  issuer: ConnectAccountReference;
  /**
   * The error encountered during the previous attempt to finalize the invoice. This field is cleared when the invoice is successfully finalized.
   */
  last_finalization_error?: ApiErrors | null;
  /**
   * The ID of the most recent non-draft revision of this invoice
   */
  latest_revision?: (string | Invoice) | null;
  /**
   * InvoiceLinesList
   * The individual line items that make up the invoice. `lines` is sorted as follows: (1) pending invoice items (including prorations) in reverse chronological order, (2) subscription items in reverse chronological order, and (3) invoice items added after invoice creation in chronological order.
   */
  lines: {
    /**
     * Details about each object.
     */
    data: LineItem[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * The time at which payment will next be attempted. This value will be `null` for invoices where `collection_method=send_invoice`.
   */
  next_payment_attempt?: number | null;
  /**
   * A unique, identifying string that appears on emails sent to the customer for this invoice. This starts with the customer's unique invoice_prefix if it is specified.
   */
  number?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'invoice';
  /**
   * The account (if any) for which the funds of the invoice payment are intended. If set, the invoice will be presented with the branding and support information of the specified account. See the [Invoices with Connect](https://stripe.com/docs/billing/invoices/connect) documentation for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * The parent that generated this invoice
   */
  parent?: BillingBillResourceInvoicingParentsInvoiceParent | null;
  payment_settings: InvoicesPaymentSettings;
  /**
   * InvoicesPaymentsListInvoicePayments
   * Payments for this invoice
   */
  payments?: {
    /**
     * Details about each object.
     */
    data: InvoicePayment[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * End of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
   */
  period_end: number;
  /**
   * Start of the usage period during which invoice items were added to this invoice. This looks back one period for a subscription invoice. Use the [line item period](/api/invoices/line_item#invoice_line_item_object-period) to get the service period for each price.
   */
  period_start: number;
  /**
   * Total amount of all post-payment credit notes issued for this invoice.
   */
  post_payment_credit_notes_amount: number;
  /**
   * Total amount of all pre-payment credit notes issued for this invoice.
   */
  pre_payment_credit_notes_amount: number;
  /**
   * This is the transaction number that appears on email receipts sent for this invoice.
   */
  receipt_number?: string | null;
  /**
   * The rendering-related settings that control how the invoice is displayed on customer-facing surfaces such as PDF and Hosted Invoice Page.
   */
  rendering?: InvoicesResourceInvoiceRendering | null;
  /**
   * The details of the cost of shipping, including the ShippingRate applied on the invoice.
   */
  shipping_cost?: InvoicesResourceShippingCost | null;
  /**
   * Shipping details for the invoice. The Invoice PDF will use the `shipping_details` value if it is set, otherwise the PDF will render the shipping address from the customer.
   */
  shipping_details?: Shipping | null;
  /**
   * Starting customer balance before the invoice is finalized. If the invoice has not been finalized yet, this will be the current customer balance. For revision invoices, this also includes any customer balance that was applied to the original invoice.
   */
  starting_balance: number;
  /**
   * Extra information about an invoice for the customer's credit card statement.
   */
  statement_descriptor?: string | null;
  /**
   * The status of the invoice, one of `draft`, `open`, `paid`, `uncollectible`, or `void`. [Learn more](https://stripe.com/docs/billing/invoices/workflow#workflow-overview)
   */
  status?: ('draft' | 'open' | 'paid' | 'uncollectible' | 'void') | null;
  status_transitions: InvoicesResourceStatusTransitions;
  /**
   * Total of all subscriptions, invoice items, and prorations on the invoice before any invoice level discount or exclusive tax is applied. Item discounts are already incorporated
   */
  subtotal: number;
  /**
   * The integer amount in cents (or local equivalent) representing the subtotal of the invoice before any invoice level discount or tax is applied. Item discounts are already incorporated
   */
  subtotal_excluding_tax?: number | null;
  /**
   * ID of the test clock this invoice belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
  threshold_reason?: InvoiceThresholdReason;
  /**
   * Total after discounts and taxes.
   */
  total: number;
  /**
   * The aggregate amounts calculated per discount across all line items.
   */
  total_discount_amounts?: DiscountsResourceDiscountAmount[] | null;
  /**
   * The integer amount in cents (or local equivalent) representing the total amount of the invoice including all discounts but excluding all tax.
   */
  total_excluding_tax?: number | null;
  /**
   * Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this invoice. This is a combined list of total_pretax_credit_amounts across all invoice line items.
   */
  total_pretax_credit_amounts?: InvoicesResourcePretaxCreditAmount[] | null;
  /**
   * The aggregate tax information of all line items.
   */
  total_taxes?: BillingBillResourceInvoicingTaxesTax[] | null;
  /**
   * Invoices are automatically paid or sent 1 hour after webhooks are delivered, or until all webhook delivery attempts have [been exhausted](https://stripe.com/docs/billing/webhooks#understand). This field tracks the time when webhooks for this invoice were successfully delivered. If the invoice had no webhooks to deliver, this will be set while the invoice is being created.
   */
  webhooks_delivered_at?: number | null;
};
/**
 * invoice_installments_card
 */
export type InvoiceInstallmentsCard = {
  /**
   * Whether Installments are enabled for this Invoice.
   */
  enabled?: boolean | null;
};
/**
 * InvoiceItemThresholdReason
 */
export type InvoiceItemThresholdReason = {
  /**
   * The IDs of the line items that triggered the threshold invoice.
   */
  line_item_ids: string[];
  /**
   * The quantity threshold boundary that applied to the given line item.
   */
  usage_gte: number;
};
/**
 * InvoiceLineItemPeriod
 */
export type InvoiceLineItemPeriod = {
  /**
   * The end of the period, which must be greater than or equal to the start. This value is inclusive.
   */
  end: number;
  /**
   * The start of the period. This value is inclusive.
   */
  start: number;
};
/**
 * invoice_mandate_options_card
 */
export type InvoiceMandateOptionsCard = {
  /**
   * Amount to be charged for future payments.
   */
  amount?: number | null;
  /**
   * One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
   */
  amount_type?: ('fixed' | 'maximum') | null;
  /**
   * A description of the mandate or subscription that is meant to be displayed to the customer.
   */
  description?: string | null;
};
/**
 * InvoicesInvoicePayment
 * Invoice Payments represent payments made against invoices. Invoice Payments can
 * be accessed in two ways:
 * 1. By expanding the `payments` field on the [Invoice](https://stripe.com/docs/api#invoice) resource.
 * 2. By using the Invoice Payment retrieve and list endpoints.
 *
 * Invoice Payments include the mapping between payment objects, such as Payment Intent, and Invoices.
 * This resource and its endpoints allows you to easily track if a payment is associated with a specific invoice and
 * monitor the allocation details of the payments.
 */
export type InvoicePayment = {
  /**
   * Amount that was actually paid for this invoice, in cents (or local equivalent). This field is null until the payment is `paid`. This amount can be less than the `amount_requested` if the PaymentIntent’s `amount_received` is not sufficient to pay all of the invoices that it is attached to.
   */
  amount_paid?: number | null;
  /**
   * Amount intended to be paid toward this invoice, in cents (or local equivalent)
   */
  amount_requested: number;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The invoice that was paid.
   */
  invoice: string | Invoice | DeletedInvoice;
  /**
   * Stripe automatically creates a default InvoicePayment when the invoice is finalized, and keeps it synchronized with the invoice’s `amount_remaining`. The PaymentIntent associated with the default payment can’t be edited or canceled directly.
   */
  is_default: boolean;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'invoice_payment';
  payment: InvoicesPaymentsInvoicePaymentAssociatedPayment;
  /**
   * The status of the payment, one of `open`, `paid`, or `canceled`.
   */
  status: string;
  status_transitions: InvoicesPaymentsInvoicePaymentStatusTransitions;
};
/**
 * invoice_payment_method_options_acss_debit
 */
export type InvoicePaymentMethodOptionsAcssDebit = {
  mandate_options?: InvoicePaymentMethodOptionsAcssDebitMandateOptions;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * invoice_payment_method_options_acss_debit_mandate_options
 */
export type InvoicePaymentMethodOptionsAcssDebitMandateOptions = {
  /**
   * Transaction type of the mandate.
   */
  transaction_type?: ('business' | 'personal') | null;
};
/**
 * invoice_payment_method_options_bancontact
 */
export type InvoicePaymentMethodOptionsBancontact = {
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   */
  preferred_language: 'de' | 'en' | 'fr' | 'nl';
};
/**
 * invoice_payment_method_options_card
 */
export type InvoicePaymentMethodOptionsCard = {
  installments?: InvoiceInstallmentsCard;
  /**
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null;
};
/**
 * invoice_payment_method_options_customer_balance
 */
export type InvoicePaymentMethodOptionsCustomerBalance = {
  bank_transfer?: InvoicePaymentMethodOptionsCustomerBalanceBankTransfer;
  /**
   * The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
   */
  funding_type?: 'bank_transfer' | null;
};
/**
 * invoice_payment_method_options_customer_balance_bank_transfer
 */
export type InvoicePaymentMethodOptionsCustomerBalanceBankTransfer = {
  eu_bank_transfer?: InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer;
  /**
   * The bank transfer type that can be used for funding. Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
   */
  type?: string | null;
};
/**
 * invoice_payment_method_options_customer_balance_bank_transfer_eu_bank_transfer
 */
export type InvoicePaymentMethodOptionsCustomerBalanceBankTransferEuBankTransfer =
  {
    /**
     * The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
     */
    country: 'BE' | 'DE' | 'ES' | 'FR' | 'IE' | 'NL';
  };
/**
 * invoice_payment_method_options_konbini
 */
export type InvoicePaymentMethodOptionsKonbini = unknown;
/**
 * invoice_payment_method_options_sepa_debit
 */
export type InvoicePaymentMethodOptionsSepaDebit = unknown;
/**
 * invoice_payment_method_options_us_bank_account
 */
export type InvoicePaymentMethodOptionsUsBankAccount = {
  financial_connections?: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * invoice_payment_method_options_us_bank_account_linked_account_options
 */
export type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptions = {
  filters?: InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsFilters;
  /**
   * The list of permissions to request. The `payment_method` permission must be included.
   */
  permissions?: (
    | 'balances'
    | 'ownership'
    | 'payment_method'
    | 'transactions'
  )[];
  /**
   * Data features requested to be retrieved upon account creation.
   */
  prefetch?: ('balances' | 'ownership' | 'transactions')[] | null;
};
/**
 * invoice_payment_method_options_us_bank_account_linked_account_options_filters
 */
export type InvoicePaymentMethodOptionsUsBankAccountLinkedAccountOptionsFilters =
  {
    /**
     * The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`.
     */
    account_subcategories?: ('checking' | 'savings')[];
  };
/**
 * InvoiceRenderingPdf
 */
export type InvoiceRenderingPdf = {
  /**
   * Page size of invoice pdf. Options include a4, letter, and auto. If set to auto, page size will be switched to a4 or letter based on customer locale.
   */
  page_size?: ('a4' | 'auto' | 'letter') | null;
};
/**
 * InvoiceRenderingTemplate
 * Invoice Rendering Templates are used to configure how invoices are rendered on surfaces like the PDF. Invoice Rendering Templates
 * can be created from within the Dashboard, and they can be used over the API when creating invoices.
 */
export type InvoiceRenderingTemplate = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * A brief description of the template, hidden from customers
   */
  nickname?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'invoice_rendering_template';
  /**
   * The status of the template, one of `active` or `archived`.
   */
  status: 'active' | 'archived';
  /**
   * Version of this template; version increases by one when an update on the template changes any field that controls invoice rendering
   */
  version: number;
};
/**
 * invoice_setting_checkout_rendering_options
 */
export type InvoiceSettingCheckoutRenderingOptions = {
  /**
   * How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
   */
  amount_tax_display?: string | null;
};
/**
 * InvoiceSettingCustomField
 */
export type InvoiceSettingCustomField = {
  /**
   * The name of the custom field.
   */
  name: string;
  /**
   * The value of the custom field.
   */
  value: string;
};
/**
 * InvoiceSettingCustomerRenderingOptions
 */
export type InvoiceSettingCustomerRenderingOptions = {
  /**
   * How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
   */
  amount_tax_display?: string | null;
  /**
   * ID of the invoice rendering template to be used for this customer's invoices. If set, the template will be used on all invoices for this customer unless a template is set directly on the invoice.
   */
  template?: string | null;
};
/**
 * InvoiceSettingCustomerSetting
 */
export type InvoiceSettingCustomerSetting = {
  /**
   * Default custom fields to be displayed on invoices for this customer.
   */
  custom_fields?: InvoiceSettingCustomField[] | null;
  /**
   * ID of a payment method that's attached to the customer, to be used as the customer's default payment method for subscriptions and invoices.
   */
  default_payment_method?: (string | PaymentMethod) | null;
  /**
   * Default footer to be displayed on invoices for this customer.
   */
  footer?: string | null;
  /**
   * Default options for invoice PDF rendering for this customer.
   */
  rendering_options?: InvoiceSettingCustomerRenderingOptions | null;
};
/**
 * InvoiceSettingQuoteSetting
 */
export type InvoiceSettingQuoteSetting = {
  /**
   * Number of days within which a customer must pay invoices generated by this quote. This value will be `null` for quotes where `collection_method=charge_automatically`.
   */
  days_until_due?: number | null;
  issuer: ConnectAccountReference;
};
/**
 * InvoiceSettingSubscriptionSchedulePhaseSetting
 */
export type InvoiceSettingSubscriptionSchedulePhaseSetting = {
  /**
   * The account tax IDs associated with this phase of the subscription schedule. Will be set on invoices generated by this phase of the subscription schedule.
   */
  account_tax_ids?: (string | TaxId | DeletedTaxId)[] | null;
  /**
   * Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
   */
  days_until_due?: number | null;
  /**
   * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
   */
  issuer?: ConnectAccountReference | null;
};
/**
 * InvoiceSettingSubscriptionScheduleSetting
 */
export type InvoiceSettingSubscriptionScheduleSetting = {
  /**
   * The account tax IDs associated with the subscription schedule. Will be set on invoices generated by the subscription schedule.
   */
  account_tax_ids?: (string | TaxId | DeletedTaxId)[] | null;
  /**
   * Number of days within which a customer must pay invoices generated by this subscription schedule. This value will be `null` for subscription schedules where `billing=charge_automatically`.
   */
  days_until_due?: number | null;
  issuer: ConnectAccountReference;
};
/**
 * InvoiceThresholdReason
 */
export type InvoiceThresholdReason = {
  /**
   * The total invoice amount threshold boundary if it triggered the threshold invoice.
   */
  amount_gte?: number | null;
  /**
   * Indicates which line items triggered a threshold invoice.
   */
  item_reasons: InvoiceItemThresholdReason[];
};
/**
 * InvoiceItem
 * Invoice Items represent the component lines of an [invoice](https://stripe.com/docs/api/invoices). An invoice item is added to an
 * invoice by creating or updating it with an `invoice` field, at which point it will be included as
 * [an invoice line item](https://stripe.com/docs/api/invoices/line_item) within
 * [invoice.lines](https://stripe.com/docs/api/invoices/object#invoice_object-lines).
 *
 * Invoice Items can be created before you are ready to actually send the invoice. This can be particularly useful when combined
 * with a [subscription](https://stripe.com/docs/api/subscriptions). Sometimes you want to add a charge or credit to a customer, but actually charge
 * or credit the customer’s card only at the end of a regular billing cycle. This is useful for combining several charges
 * (to minimize per-transaction fees), or for having Stripe tabulate your usage-based billing totals.
 *
 * Related guides: [Integrate with the Invoicing API](https://stripe.com/docs/invoicing/integration), [Subscription Invoices](https://stripe.com/docs/billing/invoices/subscription#adding-upcoming-invoice-items).
 */
export type Invoiceitem = {
  /**
   * Amount (in the `currency` specified) of the invoice item. This should always be equal to `unit_amount * quantity`.
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The ID of the customer who will be billed when this invoice item is billed.
   */
  customer: string | Customer | DeletedCustomer;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  date: number;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * If true, discounts will apply to this invoice item. Always false for prorations.
   */
  discountable: boolean;
  /**
   * The discounts which apply to the invoice item. Item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts?: (string | Discount)[] | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The ID of the invoice this invoice item belongs to.
   */
  invoice?: (string | Invoice) | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'invoiceitem';
  /**
   * The parent that generated this invoice item.
   */
  parent?: BillingBillResourceInvoiceItemParentsInvoiceItemParent | null;
  period: InvoiceLineItemPeriod;
  /**
   * The pricing information of the invoice item.
   */
  pricing?: BillingBillResourceInvoicingPricingPricing | null;
  /**
   * Whether the invoice item was created automatically as a proration adjustment when the customer switched plans.
   */
  proration: boolean;
  /**
   * Quantity of units for the invoice item. If the invoice item is a proration, the quantity of the subscription that the proration was computed for.
   */
  quantity: number;
  /**
   * The tax rates which apply to the invoice item. When set, the `default_tax_rates` on the invoice do not apply to this invoice item.
   */
  tax_rates?: TaxRate[] | null;
  /**
   * ID of the test clock this invoice item belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
};
/**
 * InvoicesPaymentMethodOptions
 */
export type InvoicesPaymentMethodOptions = {
  /**
   * If paying by `acss_debit`, this sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to the invoice’s PaymentIntent.
   */
  acss_debit?: InvoicePaymentMethodOptionsAcssDebit | null;
  /**
   * If paying by `bancontact`, this sub-hash contains details about the Bancontact payment method options to pass to the invoice’s PaymentIntent.
   */
  bancontact?: InvoicePaymentMethodOptionsBancontact | null;
  /**
   * If paying by `card`, this sub-hash contains details about the Card payment method options to pass to the invoice’s PaymentIntent.
   */
  card?: InvoicePaymentMethodOptionsCard | null;
  /**
   * If paying by `customer_balance`, this sub-hash contains details about the Bank transfer payment method options to pass to the invoice’s PaymentIntent.
   */
  customer_balance?: InvoicePaymentMethodOptionsCustomerBalance | null;
  /**
   * If paying by `konbini`, this sub-hash contains details about the Konbini payment method options to pass to the invoice’s PaymentIntent.
   */
  konbini?: InvoicePaymentMethodOptionsKonbini | null;
  /**
   * If paying by `sepa_debit`, this sub-hash contains details about the SEPA Direct Debit payment method options to pass to the invoice’s PaymentIntent.
   */
  sepa_debit?: InvoicePaymentMethodOptionsSepaDebit | null;
  /**
   * If paying by `us_bank_account`, this sub-hash contains details about the ACH direct debit payment method options to pass to the invoice’s PaymentIntent.
   */
  us_bank_account?: InvoicePaymentMethodOptionsUsBankAccount | null;
};
/**
 * InvoicesPaymentSettings
 */
export type InvoicesPaymentSettings = {
  /**
   * ID of the mandate to be used for this invoice. It must correspond to the payment method used to pay the invoice, including the invoice's default_payment_method or default_source, if set.
   */
  default_mandate?: string | null;
  /**
   * Payment-method-specific configuration to provide to the invoice’s PaymentIntent.
   */
  payment_method_options?: InvoicesPaymentMethodOptions | null;
  /**
   * The list of payment method types (e.g. card) to provide to the invoice’s PaymentIntent. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
   */
  payment_method_types?:
    | (
        | 'ach_credit_transfer'
        | 'ach_debit'
        | 'acss_debit'
        | 'affirm'
        | 'amazon_pay'
        | 'au_becs_debit'
        | 'bacs_debit'
        | 'bancontact'
        | 'boleto'
        | 'card'
        | 'cashapp'
        | 'customer_balance'
        | 'eps'
        | 'fpx'
        | 'giropay'
        | 'grabpay'
        | 'ideal'
        | 'jp_credit_transfer'
        | 'kakao_pay'
        | 'klarna'
        | 'konbini'
        | 'kr_card'
        | 'link'
        | 'multibanco'
        | 'naver_pay'
        | 'nz_bank_account'
        | 'p24'
        | 'payco'
        | 'paynow'
        | 'paypal'
        | 'promptpay'
        | 'revolut_pay'
        | 'sepa_credit_transfer'
        | 'sepa_debit'
        | 'sofort'
        | 'swish'
        | 'us_bank_account'
        | 'wechat_pay'
      )[]
    | null;
};
/**
 * InvoicesPaymentsInvoicePaymentAssociatedPayment
 */
export type InvoicesPaymentsInvoicePaymentAssociatedPayment = {
  /**
   * ID of the successful charge for this payment when `type` is `charge`.Note: charge is only surfaced if the charge object is not associated with a payment intent. If the charge object does have a payment intent, the Invoice Payment surfaces the payment intent instead.
   */
  charge?: string | Charge;
  /**
   * ID of the PaymentIntent associated with this payment when `type` is `payment_intent`. Note: This property is only populated for invoices finalized on or after March 15th, 2019.
   */
  payment_intent?: string | PaymentIntent;
  /**
   * Type of payment object associated with this invoice payment.
   */
  type: 'charge' | 'payment_intent';
};
/**
 * InvoicesPaymentsInvoicePaymentStatusTransitions
 */
export type InvoicesPaymentsInvoicePaymentStatusTransitions = {
  /**
   * The time that the payment was canceled.
   */
  canceled_at?: number | null;
  /**
   * The time that the payment succeeded.
   */
  paid_at?: number | null;
};
/**
 * InvoicesResourceConfirmationSecret
 */
export type InvoicesResourceConfirmationSecret = {
  /**
   * The client_secret of the payment that Stripe creates for the invoice after finalization.
   */
  client_secret: string;
  /**
   * The type of client_secret. Currently this is always payment_intent, referencing the default payment_intent that Stripe creates during invoice finalization
   */
  type: string;
};
/**
 * InvoicesResourceFromInvoice
 */
export type InvoicesResourceFromInvoice = {
  /**
   * The relation between this invoice and the cloned invoice
   */
  action: string;
  /**
   * The invoice that was cloned.
   */
  invoice: string | Invoice;
};
/**
 * InvoicesResourceInvoiceRendering
 */
export type InvoicesResourceInvoiceRendering = {
  /**
   * How line-item prices and amounts will be displayed with respect to tax on invoice PDFs.
   */
  amount_tax_display?: string | null;
  /**
   * Invoice pdf rendering options
   */
  pdf?: InvoiceRenderingPdf | null;
  /**
   * ID of the rendering template that the invoice is formatted by.
   */
  template?: string | null;
  /**
   * Version of the rendering template that the invoice is using.
   */
  template_version?: number | null;
};
/**
 * InvoicesResourceInvoiceTaxID
 */
export type InvoicesResourceInvoiceTaxId = {
  /**
   * The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, `aw_tin`, `az_tin`, `bd_bin`, `bj_ifu`, `et_tin`, `kg_tin`, `la_tin`, `cm_niu`, `cv_nif`, `bf_ifu`, or `unknown`
   */
  type:
    | 'ad_nrt'
    | 'ae_trn'
    | 'al_tin'
    | 'am_tin'
    | 'ao_tin'
    | 'ar_cuit'
    | 'au_abn'
    | 'au_arn'
    | 'aw_tin'
    | 'az_tin'
    | 'ba_tin'
    | 'bb_tin'
    | 'bd_bin'
    | 'bf_ifu'
    | 'bg_uic'
    | 'bh_vat'
    | 'bj_ifu'
    | 'bo_tin'
    | 'br_cnpj'
    | 'br_cpf'
    | 'bs_tin'
    | 'by_tin'
    | 'ca_bn'
    | 'ca_gst_hst'
    | 'ca_pst_bc'
    | 'ca_pst_mb'
    | 'ca_pst_sk'
    | 'ca_qst'
    | 'cd_nif'
    | 'ch_uid'
    | 'ch_vat'
    | 'cl_tin'
    | 'cm_niu'
    | 'cn_tin'
    | 'co_nit'
    | 'cr_tin'
    | 'cv_nif'
    | 'de_stn'
    | 'do_rcn'
    | 'ec_ruc'
    | 'eg_tin'
    | 'es_cif'
    | 'et_tin'
    | 'eu_oss_vat'
    | 'eu_vat'
    | 'gb_vat'
    | 'ge_vat'
    | 'gn_nif'
    | 'hk_br'
    | 'hr_oib'
    | 'hu_tin'
    | 'id_npwp'
    | 'il_vat'
    | 'in_gst'
    | 'is_vat'
    | 'jp_cn'
    | 'jp_rn'
    | 'jp_trn'
    | 'ke_pin'
    | 'kg_tin'
    | 'kh_tin'
    | 'kr_brn'
    | 'kz_bin'
    | 'la_tin'
    | 'li_uid'
    | 'li_vat'
    | 'ma_vat'
    | 'md_vat'
    | 'me_pib'
    | 'mk_vat'
    | 'mr_nif'
    | 'mx_rfc'
    | 'my_frp'
    | 'my_itn'
    | 'my_sst'
    | 'ng_tin'
    | 'no_vat'
    | 'no_voec'
    | 'np_pan'
    | 'nz_gst'
    | 'om_vat'
    | 'pe_ruc'
    | 'ph_tin'
    | 'ro_tin'
    | 'rs_pib'
    | 'ru_inn'
    | 'ru_kpp'
    | 'sa_vat'
    | 'sg_gst'
    | 'sg_uen'
    | 'si_tin'
    | 'sn_ninea'
    | 'sr_fin'
    | 'sv_nit'
    | 'th_vat'
    | 'tj_tin'
    | 'tr_tin'
    | 'tw_vat'
    | 'tz_vat'
    | 'ua_vat'
    | 'ug_tin'
    | 'unknown'
    | 'us_ein'
    | 'uy_ruc'
    | 'uz_tin'
    | 'uz_vat'
    | 've_rif'
    | 'vn_tin'
    | 'za_vat'
    | 'zm_tin'
    | 'zw_tin';
  /**
   * The value of the tax ID.
   */
  value?: string | null;
};
/**
 * InvoicesResourcePretaxCreditAmount
 */
export type InvoicesResourcePretaxCreditAmount = {
  /**
   * The amount, in cents (or local equivalent), of the pretax credit amount.
   */
  amount: number;
  /**
   * The credit balance transaction that was applied to get this pretax credit amount.
   */
  credit_balance_transaction?:
    | (string | BillingCreditBalanceTransaction)
    | null;
  /**
   * The discount that was applied to get this pretax credit amount.
   */
  discount?: string | Discount | DeletedDiscount;
  /**
   * Type of the pretax credit amount referenced.
   */
  type: 'credit_balance_transaction' | 'discount';
};
/**
 * InvoicesResourceShippingCost
 */
export type InvoicesResourceShippingCost = {
  /**
   * Total shipping cost before any taxes are applied.
   */
  amount_subtotal: number;
  /**
   * Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
   */
  amount_tax: number;
  /**
   * Total shipping cost after taxes are applied.
   */
  amount_total: number;
  /**
   * The ID of the ShippingRate for this invoice.
   */
  shipping_rate?: (string | ShippingRate) | null;
  /**
   * The taxes applied to the shipping rate.
   */
  taxes?: LineItemsTaxAmount[];
};
/**
 * InvoicesResourceStatusTransitions
 */
export type InvoicesResourceStatusTransitions = {
  /**
   * The time that the invoice draft was finalized.
   */
  finalized_at?: number | null;
  /**
   * The time that the invoice was marked uncollectible.
   */
  marked_uncollectible_at?: number | null;
  /**
   * The time that the invoice was paid.
   */
  paid_at?: number | null;
  /**
   * The time that the invoice was voided.
   */
  voided_at?: number | null;
};
/**
 * IssuingAuthorization
 * When an [issued card](https://stripe.com/docs/issuing) is used to make a purchase, an Issuing `Authorization`
 * object is created. [Authorizations](https://stripe.com/docs/issuing/purchases/authorizations) must be approved for the
 * purchase to be completed successfully.
 *
 * Related guide: [Issued card authorizations](https://stripe.com/docs/issuing/purchases/authorizations)
 */
export type IssuingAuthorization = {
  /**
   * The total amount that was authorized or rejected. This amount is in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `amount` should be the same as `merchant_amount`, unless `currency` and `merchant_currency` are different.
   */
  amount: number;
  /**
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingAuthorizationAmountDetails | null;
  /**
   * Whether the authorization has been approved.
   */
  approved: boolean;
  /**
   * How the card details were provided.
   */
  authorization_method:
    | 'chip'
    | 'contactless'
    | 'keyed_in'
    | 'online'
    | 'swipe';
  /**
   * List of balance transactions associated with this authorization.
   */
  balance_transactions: BalanceTransaction[];
  card: IssuingCard;
  /**
   * The cardholder to whom this authorization belongs.
   */
  cardholder?: (string | IssuingCardholder) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The currency of the cardholder. This currency can be different from the currency presented at authorization and the `merchant_currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Fleet-specific information for authorizations using Fleet cards.
   */
  fleet?: IssuingAuthorizationFleetData | null;
  /**
   * Fraud challenges sent to the cardholder, if this authorization was declined for fraud risk reasons.
   */
  fraud_challenges?: IssuingAuthorizationFraudChallenge[] | null;
  /**
   * Information about fuel that was purchased with this transaction. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed.
   */
  fuel?: IssuingAuthorizationFuelData | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The total amount that was authorized or rejected. This amount is in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). `merchant_amount` should be the same as `amount`, unless `merchant_currency` and `currency` are different.
   */
  merchant_amount: number;
  /**
   * The local currency that was presented to the cardholder for the authorization. This currency can be different from the cardholder currency and the `currency` field on this authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  merchant_currency: string;
  merchant_data: IssuingAuthorizationMerchantData;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * Details about the authorization, such as identifiers, set by the card network.
   */
  network_data?: IssuingAuthorizationNetworkData | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.authorization';
  /**
   * The pending authorization request. This field will only be non-null during an `issuing_authorization.request` webhook.
   */
  pending_request?: IssuingAuthorizationPendingRequest | null;
  /**
   * History of every time a `pending_request` authorization was approved/declined, either by you directly or by Stripe (e.g. based on your spending_controls). If the merchant changes the authorization by performing an incremental authorization, you can look at this field to see the previous requests for the authorization. This field can be helpful in determining why a given authorization was approved/declined.
   */
  request_history: IssuingAuthorizationRequest[];
  /**
   * The current status of the authorization in its lifecycle.
   */
  status: 'closed' | 'expired' | 'pending' | 'reversed';
  /**
   * [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this authorization. If a network token was not used for this authorization, this field will be null.
   */
  token?: (string | IssuingToken) | null;
  /**
   * List of [transactions](https://stripe.com/docs/api/issuing/transactions) associated with this authorization.
   */
  transactions: IssuingTransaction[];
  /**
   * [Treasury](https://stripe.com/docs/api/treasury) details related to this authorization if it was created on a [FinancialAccount](https://stripe.com/docs/api/treasury/financial_accounts).
   */
  treasury?: IssuingAuthorizationTreasury | null;
  verification_data: IssuingAuthorizationVerificationData;
  /**
   * Whether the authorization bypassed fraud risk checks because the cardholder has previously completed a fraud challenge on a similar high-risk authorization from the same merchant.
   */
  verified_by_fraud_challenge?: boolean | null;
  /**
   * The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`. Will populate as `null` when no digital wallet was utilized.
   */
  wallet?: string | null;
};
/**
 * IssuingCard
 * You can [create physical or virtual cards](https://stripe.com/docs/issuing) that are issued to cardholders.
 */
export type IssuingCard = {
  /**
   * The brand of the card.
   */
  brand: string;
  /**
   * The reason why the card was canceled.
   */
  cancellation_reason?: ('design_rejected' | 'lost' | 'stolen') | null;
  cardholder: IssuingCardholder;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Supported currencies are `usd` in the US, `eur` in the EU, and `gbp` in the UK.
   */
  currency: string;
  /**
   * The card's CVC. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
   */
  cvc?: string;
  /**
   * The expiration month of the card.
   */
  exp_month: number;
  /**
   * The expiration year of the card.
   */
  exp_year: number;
  /**
   * The financial account this card is attached to.
   */
  financial_account?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The last 4 digits of the card number.
   */
  last4: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The full unredacted card number. For security reasons, this is only available for virtual cards, and will be omitted unless you explicitly request it with [the `expand` parameter](https://stripe.com/docs/api/expanding_objects). Additionally, it's only available via the ["Retrieve a card" endpoint](https://stripe.com/docs/api/issuing/cards/retrieve), not via "List all cards" or any other endpoint.
   */
  number?: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.card';
  /**
   * The personalization design object belonging to this card.
   */
  personalization_design?: (string | IssuingPersonalizationDesign) | null;
  /**
   * The latest card that replaces this card, if any.
   */
  replaced_by?: (string | IssuingCard) | null;
  /**
   * The card this card replaces, if any.
   */
  replacement_for?: (string | IssuingCard) | null;
  /**
   * The reason why the previous card needed to be replaced.
   */
  replacement_reason?: ('damaged' | 'expired' | 'lost' | 'stolen') | null;
  /**
   * Where and how the card will be shipped.
   */
  shipping?: IssuingCardShipping | null;
  spending_controls: IssuingCardAuthorizationControls;
  /**
   * Whether authorizations can be approved on this card. May be blocked from activating cards depending on past-due Cardholder requirements. Defaults to `inactive`.
   */
  status: 'active' | 'canceled' | 'inactive';
  /**
   * The type of the card.
   */
  type: 'physical' | 'virtual';
  /**
   * Information relating to digital wallets (like Apple Pay and Google Pay).
   */
  wallets?: IssuingCardWallets | null;
};
/**
 * IssuingCardholder
 * An Issuing `Cardholder` object represents an individual or business entity who is [issued](https://stripe.com/docs/issuing) cards.
 *
 * Related guide: [How to create a cardholder](https://stripe.com/docs/issuing/cards/virtual/issue-cards#create-cardholder)
 */
export type IssuingCardholder = {
  billing: IssuingCardholderAddress;
  /**
   * Additional information about a `company` cardholder.
   */
  company?: IssuingCardholderCompany | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The cardholder's email address.
   */
  email?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Additional information about an `individual` cardholder.
   */
  individual?: IssuingCardholderIndividual | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The cardholder's name. This will be printed on cards issued to them.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.cardholder';
  /**
   * The cardholder's phone number. This is required for all cardholders who will be creating EU cards. See the [3D Secure documentation](https://stripe.com/docs/issuing/3d-secure#when-is-3d-secure-applied) for more details.
   */
  phone_number?: string | null;
  /**
   * The cardholder’s preferred locales (languages), ordered by preference. Locales can be `de`, `en`, `es`, `fr`, or `it`.
   *  This changes the language of the [3D Secure flow](https://stripe.com/docs/issuing/3d-secure) and one-time password messages sent to the cardholder.
   */
  preferred_locales?: ('de' | 'en' | 'es' | 'fr' | 'it')[] | null;
  requirements: IssuingCardholderRequirements;
  /**
   * Rules that control spending across this cardholder's cards. Refer to our [documentation](https://stripe.com/docs/issuing/controls/spending-controls) for more details.
   */
  spending_controls?: IssuingCardholderAuthorizationControls | null;
  /**
   * Specifies whether to permit authorizations on this cardholder's cards.
   */
  status: 'active' | 'blocked' | 'inactive';
  /**
   * One of `individual` or `company`. See [Choose a cardholder type](https://stripe.com/docs/issuing/other/choose-cardholder) for more details.
   */
  type: 'company' | 'individual';
};
/**
 * IssuingDispute
 * As a [card issuer](https://stripe.com/docs/issuing), you can dispute transactions that the cardholder does not recognize, suspects to be fraudulent, or has other issues with.
 *
 * Related guide: [Issuing disputes](https://stripe.com/docs/issuing/purchases/disputes)
 */
export type IssuingDispute = {
  /**
   * Disputed amount in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Usually the amount of the `transaction`, but can differ (usually because of currency fluctuation).
   */
  amount: number;
  /**
   * List of balance transactions associated with the dispute.
   */
  balance_transactions?: BalanceTransaction[] | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The currency the `transaction` was made in.
   */
  currency: string;
  evidence: IssuingDisputeEvidence;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The enum that describes the dispute loss outcome. If the dispute is not lost, this field will be absent. New enum values may be added in the future, so be sure to handle unknown values.
   */
  loss_reason?:
    | 'cardholder_authentication_issuer_liability'
    | 'eci5_token_transaction_with_tavv'
    | 'excess_disputes_in_timeframe'
    | 'has_not_met_the_minimum_dispute_amount_requirements'
    | 'invalid_duplicate_dispute'
    | 'invalid_incorrect_amount_dispute'
    | 'invalid_no_authorization'
    | 'invalid_use_of_disputes'
    | 'merchandise_delivered_or_shipped'
    | 'merchandise_or_service_as_described'
    | 'not_cancelled'
    | 'other'
    | 'refund_issued'
    | 'submitted_beyond_allowable_time_limit'
    | 'transaction_3ds_required'
    | 'transaction_approved_after_prior_fraud_dispute'
    | 'transaction_authorized'
    | 'transaction_electronically_read'
    | 'transaction_qualifies_for_visa_easy_payment_service'
    | 'transaction_unattended';
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.dispute';
  /**
   * Current status of the dispute.
   */
  status: 'expired' | 'lost' | 'submitted' | 'unsubmitted' | 'won';
  /**
   * The transaction being disputed.
   */
  transaction: string | IssuingTransaction;
  /**
   * [Treasury](https://stripe.com/docs/api/treasury) details related to this dispute if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
   */
  treasury?: IssuingDisputeTreasury | null;
};
/**
 * IssuingPersonalizationDesign
 * A Personalization Design is a logical grouping of a Physical Bundle, card logo, and carrier text that represents a product line.
 */
export type IssuingPersonalizationDesign = {
  /**
   * The file for the card logo to use with physical bundles that support card logos. Must have a `purpose` value of `issuing_logo`.
   */
  card_logo?: (string | File) | null;
  /**
   * Hash containing carrier text, for use with physical bundles that support carrier text.
   */
  carrier_text?: IssuingPersonalizationDesignCarrierText | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * A lookup key used to retrieve personalization designs dynamically from a static string. This may be up to 200 characters.
   */
  lookup_key?: string | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * Friendly display name.
   */
  name?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.personalization_design';
  /**
   * The physical bundle object belonging to this personalization design.
   */
  physical_bundle: string | IssuingPhysicalBundle;
  preferences: IssuingPersonalizationDesignPreferences;
  rejection_reasons: IssuingPersonalizationDesignRejectionReasons;
  /**
   * Whether this personalization design can be used to create cards.
   */
  status: 'active' | 'inactive' | 'rejected' | 'review';
};
/**
 * IssuingPhysicalBundle
 * A Physical Bundle represents the bundle of physical items - card stock, carrier letter, and envelope - that is shipped to a cardholder when you create a physical card.
 */
export type IssuingPhysicalBundle = {
  features: IssuingPhysicalBundleFeatures;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Friendly display name.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.physical_bundle';
  /**
   * Whether this physical bundle can be used to create cards.
   */
  status: 'active' | 'inactive' | 'review';
  /**
   * Whether this physical bundle is a standard Stripe offering or custom-made for you.
   */
  type: 'custom' | 'standard';
};
/**
 * IssuingSettlement
 * When a non-stripe BIN is used, any use of an [issued card](https://stripe.com/docs/issuing) must be settled directly with the card network. The net amount owed is represented by an Issuing `Settlement` object.
 */
export type IssuingSettlement = {
  /**
   * The Bank Identification Number reflecting this settlement record.
   */
  bin: string;
  /**
   * The date that the transactions are cleared and posted to user's accounts.
   */
  clearing_date: number;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The total interchange received as reimbursement for the transactions.
   */
  interchange_fees_amount: number;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The total net amount required to settle with the network.
   */
  net_total_amount: number;
  /**
   * The card network for this settlement report. One of ["visa", "maestro"]
   */
  network: 'maestro' | 'visa';
  /**
   * The total amount of fees owed to the network.
   */
  network_fees_amount: number;
  /**
   * The Settlement Identification Number assigned by the network.
   */
  network_settlement_identifier: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.settlement';
  /**
   * One of `international` or `uk_national_net`.
   */
  settlement_service: string;
  /**
   * The current processing status of this settlement.
   */
  status: 'complete' | 'pending';
  /**
   * The total transaction amount reflected in this settlement.
   */
  transaction_amount: number;
  /**
   * The total number of transactions reflected in this settlement.
   */
  transaction_count: number;
};
/**
 * IssuingNetworkToken
 * An issuing token object is created when an issued card is added to a digital wallet. As a [card issuer](https://stripe.com/docs/issuing), you can [view and manage these tokens](https://stripe.com/docs/issuing/controls/token-management) through Stripe.
 */
export type IssuingToken = {
  /**
   * Card associated with this token.
   */
  card: string | IssuingCard;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The hashed ID derived from the device ID from the card network associated with the token.
   */
  device_fingerprint?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The last four digits of the token.
   */
  last4?: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The token service provider / card network associated with the token.
   */
  network: 'mastercard' | 'visa';
  network_data?: IssuingNetworkTokenNetworkData;
  /**
   * Time at which the token was last updated by the card network. Measured in seconds since the Unix epoch.
   */
  network_updated_at: number;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.token';
  /**
   * The usage state of the token.
   */
  status: 'active' | 'deleted' | 'requested' | 'suspended';
  /**
   * The digital wallet for this token, if one was used.
   */
  wallet_provider?: 'apple_pay' | 'google_pay' | 'samsung_pay';
};
/**
 * IssuingTransaction
 * Any use of an [issued card](https://stripe.com/docs/issuing) that results in funds entering or leaving
 * your Stripe account, such as a completed purchase or refund, is represented by an Issuing
 * `Transaction` object.
 *
 * Related guide: [Issued card transactions](https://stripe.com/docs/issuing/purchases/transactions)
 */
export type IssuingTransaction = {
  /**
   * The transaction amount, which will be reflected in your balance. This amount is in your currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /**
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingTransactionAmountDetails | null;
  /**
   * The `Authorization` object that led to this transaction.
   */
  authorization?: (string | IssuingAuthorization) | null;
  /**
   * ID of the [balance transaction](https://stripe.com/docs/api/balance_transactions) associated with this transaction.
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * The card used to make this transaction.
   */
  card: string | IssuingCard;
  /**
   * The cardholder to whom this transaction belongs.
   */
  cardholder?: (string | IssuingCardholder) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * If you've disputed the transaction, the ID of the dispute.
   */
  dispute?: (string | IssuingDispute) | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The amount that the merchant will receive, denominated in `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). It will be different from `amount` if the merchant is taking payment in a different currency.
   */
  merchant_amount: number;
  /**
   * The currency with which the merchant is taking payment.
   */
  merchant_currency: string;
  merchant_data: IssuingAuthorizationMerchantData;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * Details about the transaction, such as processing dates, set by the card network.
   */
  network_data?: IssuingTransactionNetworkData | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'issuing.transaction';
  /**
   * Additional purchase information that is optionally provided by the merchant.
   */
  purchase_details?: IssuingTransactionPurchaseDetails | null;
  /**
   * [Token](https://stripe.com/docs/api/issuing/tokens/object) object used for this transaction. If a network token was not used for this transaction, this field will be null.
   */
  token?: (string | IssuingToken) | null;
  /**
   * [Treasury](https://stripe.com/docs/api/treasury) details related to this transaction if it was created on a [FinancialAccount](/docs/api/treasury/financial_accounts
   */
  treasury?: IssuingTransactionTreasury | null;
  /**
   * The nature of the transaction.
   */
  type: 'capture' | 'refund';
  /**
   * The digital wallet used for this transaction. One of `apple_pay`, `google_pay`, or `samsung_pay`.
   */
  wallet?: ('apple_pay' | 'google_pay' | 'samsung_pay') | null;
};
/**
 * IssuingAuthorizationAmountDetails
 */
export type IssuingAuthorizationAmountDetails = {
  /**
   * The fee charged by the ATM for the cash withdrawal.
   */
  atm_fee?: number | null;
  /**
   * The amount of cash requested by the cardholder.
   */
  cashback_amount?: number | null;
};
/**
 * IssuingAuthorizationAuthenticationExemption
 */
export type IssuingAuthorizationAuthenticationExemption = {
  /**
   * The entity that requested the exemption, either the acquiring merchant or the Issuing user.
   */
  claimed_by: 'acquirer' | 'issuer';
  /**
   * The specific exemption claimed for this authorization.
   */
  type: 'low_value_transaction' | 'transaction_risk_analysis' | 'unknown';
};
/**
 * IssuingAuthorizationFleetCardholderPromptData
 */
export type IssuingAuthorizationFleetCardholderPromptData = {
  /**
   * [Deprecated] An alphanumeric ID, though typical point of sales only support numeric entry. The card program can be configured to prompt for a vehicle ID, driver ID, or generic ID.
   */
  alphanumeric_id?: string | null;
  /**
   * Driver ID.
   */
  driver_id?: string | null;
  /**
   * Odometer reading.
   */
  odometer?: number | null;
  /**
   * An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type.
   */
  unspecified_id?: string | null;
  /**
   * User ID.
   */
  user_id?: string | null;
  /**
   * Vehicle number.
   */
  vehicle_number?: string | null;
};
/**
 * IssuingAuthorizationFleetData
 */
export type IssuingAuthorizationFleetData = {
  /**
   * Answers to prompts presented to the cardholder at the point of sale. Prompted fields vary depending on the configuration of your physical fleet cards. Typical points of sale support only numeric entry.
   */
  cardholder_prompt_data?: IssuingAuthorizationFleetCardholderPromptData | null;
  /**
   * The type of purchase.
   */
  purchase_type?:
    | ('fuel_and_non_fuel_purchase' | 'fuel_purchase' | 'non_fuel_purchase')
    | null;
  /**
   * More information about the total amount. Typically this information is received from the merchant after the authorization has been approved and the fuel dispensed. This information is not guaranteed to be accurate as some merchants may provide unreliable data.
   */
  reported_breakdown?: IssuingAuthorizationFleetReportedBreakdown | null;
  /**
   * The type of fuel service.
   */
  service_type?:
    | ('full_service' | 'non_fuel_transaction' | 'self_service')
    | null;
};
/**
 * IssuingAuthorizationFleetFuelPriceData
 */
export type IssuingAuthorizationFleetFuelPriceData = {
  /**
   * Gross fuel amount that should equal Fuel Quantity multiplied by Fuel Unit Cost, inclusive of taxes.
   */
  gross_amount_decimal?: string | null;
};
/**
 * IssuingAuthorizationFleetNonFuelPriceData
 */
export type IssuingAuthorizationFleetNonFuelPriceData = {
  /**
   * Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
   */
  gross_amount_decimal?: string | null;
};
/**
 * IssuingAuthorizationFleetReportedBreakdown
 */
export type IssuingAuthorizationFleetReportedBreakdown = {
  /**
   * Breakdown of fuel portion of the purchase.
   */
  fuel?: IssuingAuthorizationFleetFuelPriceData | null;
  /**
   * Breakdown of non-fuel portion of the purchase.
   */
  non_fuel?: IssuingAuthorizationFleetNonFuelPriceData | null;
  /**
   * Information about tax included in this transaction.
   */
  tax?: IssuingAuthorizationFleetTaxData | null;
};
/**
 * IssuingAuthorizationFleetTaxData
 */
export type IssuingAuthorizationFleetTaxData = {
  /**
   * Amount of state or provincial Sales Tax included in the transaction amount. `null` if not reported by merchant or not subject to tax.
   */
  local_amount_decimal?: string | null;
  /**
   * Amount of national Sales Tax or VAT included in the transaction amount. `null` if not reported by merchant or not subject to tax.
   */
  national_amount_decimal?: string | null;
};
/**
 * IssuingAuthorizationFraudChallenge
 */
export type IssuingAuthorizationFraudChallenge = {
  /**
   * The method by which the fraud challenge was delivered to the cardholder.
   */
  channel: 'sms';
  /**
   * The status of the fraud challenge.
   */
  status: 'expired' | 'pending' | 'rejected' | 'undeliverable' | 'verified';
  /**
   * If the challenge is not deliverable, the reason why.
   */
  undeliverable_reason?:
    | ('no_phone_number' | 'unsupported_phone_number')
    | null;
};
/**
 * IssuingAuthorizationFuelData
 */
export type IssuingAuthorizationFuelData = {
  /**
   * [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased.
   */
  industry_product_code?: string | null;
  /**
   * The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.
   */
  quantity_decimal?: string | null;
  /**
   * The type of fuel that was purchased.
   */
  type?:
    | (
        | 'diesel'
        | 'other'
        | 'unleaded_plus'
        | 'unleaded_regular'
        | 'unleaded_super'
      )
    | null;
  /**
   * The units for `quantity_decimal`.
   */
  unit?:
    | (
        | 'charging_minute'
        | 'imperial_gallon'
        | 'kilogram'
        | 'kilowatt_hour'
        | 'liter'
        | 'other'
        | 'pound'
        | 'us_gallon'
      )
    | null;
  /**
   * The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
   */
  unit_cost_decimal?: string | null;
};
/**
 * IssuingAuthorizationMerchantData
 */
export type IssuingAuthorizationMerchantData = {
  /**
   * A categorization of the seller's type of business. See our [merchant categories guide](https://stripe.com/docs/issuing/merchant-categories) for a list of possible values.
   */
  category: string;
  /**
   * The merchant category code for the seller’s business
   */
  category_code: string;
  /**
   * City where the seller is located
   */
  city?: string | null;
  /**
   * Country where the seller is located
   */
  country?: string | null;
  /**
   * Name of the seller
   */
  name?: string | null;
  /**
   * Identifier assigned to the seller by the card network. Different card networks may assign different network_id fields to the same merchant.
   */
  network_id: string;
  /**
   * Postal code where the seller is located
   */
  postal_code?: string | null;
  /**
   * State where the seller is located
   */
  state?: string | null;
  /**
   * The seller's tax identification number. Currently populated for French merchants only.
   */
  tax_id?: string | null;
  /**
   * An ID assigned by the seller to the location of the sale.
   */
  terminal_id?: string | null;
  /**
   * URL provided by the merchant on a 3DS request
   */
  url?: string | null;
};
/**
 * IssuingAuthorizationNetworkData
 */
export type IssuingAuthorizationNetworkData = {
  /**
   * Identifier assigned to the acquirer by the card network. Sometimes this value is not provided by the network; in this case, the value will be `null`.
   */
  acquiring_institution_id?: string | null;
  /**
   * The System Trace Audit Number (STAN) is a 6-digit identifier assigned by the acquirer. Prefer `network_data.transaction_id` if present, unless you have special requirements.
   */
  system_trace_audit_number?: string | null;
  /**
   * Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.
   */
  transaction_id?: string | null;
};
/**
 * IssuingAuthorizationPendingRequest
 */
export type IssuingAuthorizationPendingRequest = {
  /**
   * The additional amount Stripe will hold if the authorization is approved, in the card's [currency](https://stripe.com/docs/api#issuing_authorization_object-pending-request-currency) and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /**
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingAuthorizationAmountDetails | null;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * If set `true`, you may provide [amount](https://stripe.com/docs/api/issuing/authorizations/approve#approve_issuing_authorization-amount) to control how much to hold for the authorization.
   */
  is_amount_controllable: boolean;
  /**
   * The amount the merchant is requesting to be authorized in the `merchant_currency`. The amount is in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  merchant_amount: number;
  /**
   * The local currency the merchant is requesting to authorize.
   */
  merchant_currency: string;
  /**
   * The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
   */
  network_risk_score?: number | null;
};
/**
 * IssuingAuthorizationRequest
 */
export type IssuingAuthorizationRequest = {
  /**
   * The `pending_request.amount` at the time of the request, presented in your card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). Stripe held this amount from your account to fund the authorization if the request was approved.
   */
  amount: number;
  /**
   * Detailed breakdown of amount components. These amounts are denominated in `currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_details?: IssuingAuthorizationAmountDetails | null;
  /**
   * Whether this request was approved.
   */
  approved: boolean;
  /**
   * A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.
   */
  authorization_code?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The `pending_request.merchant_amount` at the time of the request, presented in the `merchant_currency` and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  merchant_amount: number;
  /**
   * The currency that was collected by the merchant and presented to the cardholder for the authorization. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  merchant_currency: string;
  /**
   * The card network's estimate of the likelihood that an authorization is fraudulent. Takes on values between 1 and 99.
   */
  network_risk_score?: number | null;
  /**
   * When an authorization is approved or declined by you or by Stripe, this field provides additional detail on the reason for the outcome.
   */
  reason:
    | 'account_disabled'
    | 'card_active'
    | 'card_canceled'
    | 'card_expired'
    | 'card_inactive'
    | 'cardholder_blocked'
    | 'cardholder_inactive'
    | 'cardholder_verification_required'
    | 'insecure_authorization_method'
    | 'insufficient_funds'
    | 'network_fallback'
    | 'not_allowed'
    | 'pin_blocked'
    | 'spending_controls'
    | 'suspected_fraud'
    | 'verification_failed'
    | 'webhook_approved'
    | 'webhook_declined'
    | 'webhook_error'
    | 'webhook_timeout';
  /**
   * If the `request_history.reason` is `webhook_error` because the direct webhook response is invalid (for example, parsing errors or missing parameters), we surface a more detailed error message via this field.
   */
  reason_message?: string | null;
  /**
   * Time when the card network received an authorization request from the acquirer in UTC. Referred to by networks as transmission time.
   */
  requested_at?: number | null;
};
/**
 * IssuingAuthorizationThreeDSecure
 */
export type IssuingAuthorizationThreeDSecure = {
  /**
   * The outcome of the 3D Secure authentication request.
   */
  result: 'attempt_acknowledged' | 'authenticated' | 'failed' | 'required';
};
/**
 * IssuingAuthorizationTreasury
 */
export type IssuingAuthorizationTreasury = {
  /**
   * The array of [ReceivedCredits](https://stripe.com/docs/api/treasury/received_credits) associated with this authorization
   */
  received_credits: string[];
  /**
   * The array of [ReceivedDebits](https://stripe.com/docs/api/treasury/received_debits) associated with this authorization
   */
  received_debits: string[];
  /**
   * The Treasury [Transaction](https://stripe.com/docs/api/treasury/transactions) associated with this authorization
   */
  transaction?: string | null;
};
/**
 * IssuingAuthorizationVerificationData
 */
export type IssuingAuthorizationVerificationData = {
  /**
   * Whether the cardholder provided an address first line and if it matched the cardholder’s `billing.address.line1`.
   */
  address_line1_check: 'match' | 'mismatch' | 'not_provided';
  /**
   * Whether the cardholder provided a postal code and if it matched the cardholder’s `billing.address.postal_code`.
   */
  address_postal_code_check: 'match' | 'mismatch' | 'not_provided';
  /**
   * The exemption applied to this authorization.
   */
  authentication_exemption?: IssuingAuthorizationAuthenticationExemption | null;
  /**
   * Whether the cardholder provided a CVC and if it matched Stripe’s record.
   */
  cvc_check: 'match' | 'mismatch' | 'not_provided';
  /**
   * Whether the cardholder provided an expiry date and if it matched Stripe’s record.
   */
  expiry_check: 'match' | 'mismatch' | 'not_provided';
  /**
   * The postal code submitted as part of the authorization used for postal code verification.
   */
  postal_code?: string | null;
  /**
   * 3D Secure details.
   */
  three_d_secure?: IssuingAuthorizationThreeDSecure | null;
};
/**
 * IssuingCardApplePay
 */
export type IssuingCardApplePay = {
  /**
   * Apple Pay Eligibility
   */
  eligible: boolean;
  /**
   * Reason the card is ineligible for Apple Pay
   */
  ineligible_reason?:
    | (
        | 'missing_agreement'
        | 'missing_cardholder_contact'
        | 'unsupported_region'
      )
    | null;
};
/**
 * IssuingCardAuthorizationControls
 */
export type IssuingCardAuthorizationControls = {
  /**
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
   */
  allowed_categories?:
    | (
        | 'ac_refrigeration_repair'
        | 'accounting_bookkeeping_services'
        | 'advertising_services'
        | 'agricultural_cooperative'
        | 'airlines_air_carriers'
        | 'airports_flying_fields'
        | 'ambulance_services'
        | 'amusement_parks_carnivals'
        | 'antique_reproductions'
        | 'antique_shops'
        | 'aquariums'
        | 'architectural_surveying_services'
        | 'art_dealers_and_galleries'
        | 'artists_supply_and_craft_shops'
        | 'auto_and_home_supply_stores'
        | 'auto_body_repair_shops'
        | 'auto_paint_shops'
        | 'auto_service_shops'
        | 'automated_cash_disburse'
        | 'automated_fuel_dispensers'
        | 'automobile_associations'
        | 'automotive_parts_and_accessories_stores'
        | 'automotive_tire_stores'
        | 'bail_and_bond_payments'
        | 'bakeries'
        | 'bands_orchestras'
        | 'barber_and_beauty_shops'
        | 'betting_casino_gambling'
        | 'bicycle_shops'
        | 'billiard_pool_establishments'
        | 'boat_dealers'
        | 'boat_rentals_and_leases'
        | 'book_stores'
        | 'books_periodicals_and_newspapers'
        | 'bowling_alleys'
        | 'bus_lines'
        | 'business_secretarial_schools'
        | 'buying_shopping_services'
        | 'cable_satellite_and_other_pay_television_and_radio'
        | 'camera_and_photographic_supply_stores'
        | 'candy_nut_and_confectionery_stores'
        | 'car_and_truck_dealers_new_used'
        | 'car_and_truck_dealers_used_only'
        | 'car_rental_agencies'
        | 'car_washes'
        | 'carpentry_services'
        | 'carpet_upholstery_cleaning'
        | 'caterers'
        | 'charitable_and_social_service_organizations_fundraising'
        | 'chemicals_and_allied_products'
        | 'child_care_services'
        | 'childrens_and_infants_wear_stores'
        | 'chiropodists_podiatrists'
        | 'chiropractors'
        | 'cigar_stores_and_stands'
        | 'civic_social_fraternal_associations'
        | 'cleaning_and_maintenance'
        | 'clothing_rental'
        | 'colleges_universities'
        | 'commercial_equipment'
        | 'commercial_footwear'
        | 'commercial_photography_art_and_graphics'
        | 'commuter_transport_and_ferries'
        | 'computer_network_services'
        | 'computer_programming'
        | 'computer_repair'
        | 'computer_software_stores'
        | 'computers_peripherals_and_software'
        | 'concrete_work_services'
        | 'construction_materials'
        | 'consulting_public_relations'
        | 'correspondence_schools'
        | 'cosmetic_stores'
        | 'counseling_services'
        | 'country_clubs'
        | 'courier_services'
        | 'court_costs'
        | 'credit_reporting_agencies'
        | 'cruise_lines'
        | 'dairy_products_stores'
        | 'dance_hall_studios_schools'
        | 'dating_escort_services'
        | 'dentists_orthodontists'
        | 'department_stores'
        | 'detective_agencies'
        | 'digital_goods_applications'
        | 'digital_goods_games'
        | 'digital_goods_large_volume'
        | 'digital_goods_media'
        | 'direct_marketing_catalog_merchant'
        | 'direct_marketing_combination_catalog_and_retail_merchant'
        | 'direct_marketing_inbound_telemarketing'
        | 'direct_marketing_insurance_services'
        | 'direct_marketing_other'
        | 'direct_marketing_outbound_telemarketing'
        | 'direct_marketing_subscription'
        | 'direct_marketing_travel'
        | 'discount_stores'
        | 'doctors'
        | 'door_to_door_sales'
        | 'drapery_window_covering_and_upholstery_stores'
        | 'drinking_places'
        | 'drug_stores_and_pharmacies'
        | 'drugs_drug_proprietaries_and_druggist_sundries'
        | 'dry_cleaners'
        | 'durable_goods'
        | 'duty_free_stores'
        | 'eating_places_restaurants'
        | 'educational_services'
        | 'electric_razor_stores'
        | 'electric_vehicle_charging'
        | 'electrical_parts_and_equipment'
        | 'electrical_services'
        | 'electronics_repair_shops'
        | 'electronics_stores'
        | 'elementary_secondary_schools'
        | 'emergency_services_gcas_visa_use_only'
        | 'employment_temp_agencies'
        | 'equipment_rental'
        | 'exterminating_services'
        | 'family_clothing_stores'
        | 'fast_food_restaurants'
        | 'financial_institutions'
        | 'fines_government_administrative_entities'
        | 'fireplace_fireplace_screens_and_accessories_stores'
        | 'floor_covering_stores'
        | 'florists'
        | 'florists_supplies_nursery_stock_and_flowers'
        | 'freezer_and_locker_meat_provisioners'
        | 'fuel_dealers_non_automotive'
        | 'funeral_services_crematories'
        | 'furniture_home_furnishings_and_equipment_stores_except_appliances'
        | 'furniture_repair_refinishing'
        | 'furriers_and_fur_shops'
        | 'general_services'
        | 'gift_card_novelty_and_souvenir_shops'
        | 'glass_paint_and_wallpaper_stores'
        | 'glassware_crystal_stores'
        | 'golf_courses_public'
        | 'government_licensed_horse_dog_racing_us_region_only'
        | 'government_licensed_online_casions_online_gambling_us_region_only'
        | 'government_owned_lotteries_non_us_region'
        | 'government_owned_lotteries_us_region_only'
        | 'government_services'
        | 'grocery_stores_supermarkets'
        | 'hardware_equipment_and_supplies'
        | 'hardware_stores'
        | 'health_and_beauty_spas'
        | 'hearing_aids_sales_and_supplies'
        | 'heating_plumbing_a_c'
        | 'hobby_toy_and_game_shops'
        | 'home_supply_warehouse_stores'
        | 'hospitals'
        | 'hotels_motels_and_resorts'
        | 'household_appliance_stores'
        | 'industrial_supplies'
        | 'information_retrieval_services'
        | 'insurance_default'
        | 'insurance_underwriting_premiums'
        | 'intra_company_purchases'
        | 'jewelry_stores_watches_clocks_and_silverware_stores'
        | 'landscaping_services'
        | 'laundries'
        | 'laundry_cleaning_services'
        | 'legal_services_attorneys'
        | 'luggage_and_leather_goods_stores'
        | 'lumber_building_materials_stores'
        | 'manual_cash_disburse'
        | 'marinas_service_and_supplies'
        | 'marketplaces'
        | 'masonry_stonework_and_plaster'
        | 'massage_parlors'
        | 'medical_and_dental_labs'
        | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies'
        | 'medical_services'
        | 'membership_organizations'
        | 'mens_and_boys_clothing_and_accessories_stores'
        | 'mens_womens_clothing_stores'
        | 'metal_service_centers'
        | 'miscellaneous'
        | 'miscellaneous_apparel_and_accessory_shops'
        | 'miscellaneous_auto_dealers'
        | 'miscellaneous_business_services'
        | 'miscellaneous_food_stores'
        | 'miscellaneous_general_merchandise'
        | 'miscellaneous_general_services'
        | 'miscellaneous_home_furnishing_specialty_stores'
        | 'miscellaneous_publishing_and_printing'
        | 'miscellaneous_recreation_services'
        | 'miscellaneous_repair_shops'
        | 'miscellaneous_specialty_retail'
        | 'mobile_home_dealers'
        | 'motion_picture_theaters'
        | 'motor_freight_carriers_and_trucking'
        | 'motor_homes_dealers'
        | 'motor_vehicle_supplies_and_new_parts'
        | 'motorcycle_shops_and_dealers'
        | 'motorcycle_shops_dealers'
        | 'music_stores_musical_instruments_pianos_and_sheet_music'
        | 'news_dealers_and_newsstands'
        | 'non_fi_money_orders'
        | 'non_fi_stored_value_card_purchase_load'
        | 'nondurable_goods'
        | 'nurseries_lawn_and_garden_supply_stores'
        | 'nursing_personal_care'
        | 'office_and_commercial_furniture'
        | 'opticians_eyeglasses'
        | 'optometrists_ophthalmologist'
        | 'orthopedic_goods_prosthetic_devices'
        | 'osteopaths'
        | 'package_stores_beer_wine_and_liquor'
        | 'paints_varnishes_and_supplies'
        | 'parking_lots_garages'
        | 'passenger_railways'
        | 'pawn_shops'
        | 'pet_shops_pet_food_and_supplies'
        | 'petroleum_and_petroleum_products'
        | 'photo_developing'
        | 'photographic_photocopy_microfilm_equipment_and_supplies'
        | 'photographic_studios'
        | 'picture_video_production'
        | 'piece_goods_notions_and_other_dry_goods'
        | 'plumbing_heating_equipment_and_supplies'
        | 'political_organizations'
        | 'postal_services_government_only'
        | 'precious_stones_and_metals_watches_and_jewelry'
        | 'professional_services'
        | 'public_warehousing_and_storage'
        | 'quick_copy_repro_and_blueprint'
        | 'railroads'
        | 'real_estate_agents_and_managers_rentals'
        | 'record_stores'
        | 'recreational_vehicle_rentals'
        | 'religious_goods_stores'
        | 'religious_organizations'
        | 'roofing_siding_sheet_metal'
        | 'secretarial_support_services'
        | 'security_brokers_dealers'
        | 'service_stations'
        | 'sewing_needlework_fabric_and_piece_goods_stores'
        | 'shoe_repair_hat_cleaning'
        | 'shoe_stores'
        | 'small_appliance_repair'
        | 'snowmobile_dealers'
        | 'special_trade_services'
        | 'specialty_cleaning'
        | 'sporting_goods_stores'
        | 'sporting_recreation_camps'
        | 'sports_and_riding_apparel_stores'
        | 'sports_clubs_fields'
        | 'stamp_and_coin_stores'
        | 'stationary_office_supplies_printing_and_writing_paper'
        | 'stationery_stores_office_and_school_supply_stores'
        | 'swimming_pools_sales'
        | 't_ui_travel_germany'
        | 'tailors_alterations'
        | 'tax_payments_government_agencies'
        | 'tax_preparation_services'
        | 'taxicabs_limousines'
        | 'telecommunication_equipment_and_telephone_sales'
        | 'telecommunication_services'
        | 'telegraph_services'
        | 'tent_and_awning_shops'
        | 'testing_laboratories'
        | 'theatrical_ticket_agencies'
        | 'timeshares'
        | 'tire_retreading_and_repair'
        | 'tolls_bridge_fees'
        | 'tourist_attractions_and_exhibits'
        | 'towing_services'
        | 'trailer_parks_campgrounds'
        | 'transportation_services'
        | 'travel_agencies_tour_operators'
        | 'truck_stop_iteration'
        | 'truck_utility_trailer_rentals'
        | 'typesetting_plate_making_and_related_services'
        | 'typewriter_stores'
        | 'u_s_federal_government_agencies_or_departments'
        | 'uniforms_commercial_clothing'
        | 'used_merchandise_and_secondhand_stores'
        | 'utilities'
        | 'variety_stores'
        | 'veterinary_services'
        | 'video_amusement_game_supplies'
        | 'video_game_arcades'
        | 'video_tape_rental_stores'
        | 'vocational_trade_schools'
        | 'watch_jewelry_repair'
        | 'welding_repair'
        | 'wholesale_clubs'
        | 'wig_and_toupee_stores'
        | 'wires_money_orders'
        | 'womens_accessory_and_specialty_shops'
        | 'womens_ready_to_wear_stores'
        | 'wrecking_and_salvage_yards'
      )[]
    | null;
  /**
   * Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control.
   */
  allowed_merchant_countries?: string[] | null;
  /**
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
   */
  blocked_categories?:
    | (
        | 'ac_refrigeration_repair'
        | 'accounting_bookkeeping_services'
        | 'advertising_services'
        | 'agricultural_cooperative'
        | 'airlines_air_carriers'
        | 'airports_flying_fields'
        | 'ambulance_services'
        | 'amusement_parks_carnivals'
        | 'antique_reproductions'
        | 'antique_shops'
        | 'aquariums'
        | 'architectural_surveying_services'
        | 'art_dealers_and_galleries'
        | 'artists_supply_and_craft_shops'
        | 'auto_and_home_supply_stores'
        | 'auto_body_repair_shops'
        | 'auto_paint_shops'
        | 'auto_service_shops'
        | 'automated_cash_disburse'
        | 'automated_fuel_dispensers'
        | 'automobile_associations'
        | 'automotive_parts_and_accessories_stores'
        | 'automotive_tire_stores'
        | 'bail_and_bond_payments'
        | 'bakeries'
        | 'bands_orchestras'
        | 'barber_and_beauty_shops'
        | 'betting_casino_gambling'
        | 'bicycle_shops'
        | 'billiard_pool_establishments'
        | 'boat_dealers'
        | 'boat_rentals_and_leases'
        | 'book_stores'
        | 'books_periodicals_and_newspapers'
        | 'bowling_alleys'
        | 'bus_lines'
        | 'business_secretarial_schools'
        | 'buying_shopping_services'
        | 'cable_satellite_and_other_pay_television_and_radio'
        | 'camera_and_photographic_supply_stores'
        | 'candy_nut_and_confectionery_stores'
        | 'car_and_truck_dealers_new_used'
        | 'car_and_truck_dealers_used_only'
        | 'car_rental_agencies'
        | 'car_washes'
        | 'carpentry_services'
        | 'carpet_upholstery_cleaning'
        | 'caterers'
        | 'charitable_and_social_service_organizations_fundraising'
        | 'chemicals_and_allied_products'
        | 'child_care_services'
        | 'childrens_and_infants_wear_stores'
        | 'chiropodists_podiatrists'
        | 'chiropractors'
        | 'cigar_stores_and_stands'
        | 'civic_social_fraternal_associations'
        | 'cleaning_and_maintenance'
        | 'clothing_rental'
        | 'colleges_universities'
        | 'commercial_equipment'
        | 'commercial_footwear'
        | 'commercial_photography_art_and_graphics'
        | 'commuter_transport_and_ferries'
        | 'computer_network_services'
        | 'computer_programming'
        | 'computer_repair'
        | 'computer_software_stores'
        | 'computers_peripherals_and_software'
        | 'concrete_work_services'
        | 'construction_materials'
        | 'consulting_public_relations'
        | 'correspondence_schools'
        | 'cosmetic_stores'
        | 'counseling_services'
        | 'country_clubs'
        | 'courier_services'
        | 'court_costs'
        | 'credit_reporting_agencies'
        | 'cruise_lines'
        | 'dairy_products_stores'
        | 'dance_hall_studios_schools'
        | 'dating_escort_services'
        | 'dentists_orthodontists'
        | 'department_stores'
        | 'detective_agencies'
        | 'digital_goods_applications'
        | 'digital_goods_games'
        | 'digital_goods_large_volume'
        | 'digital_goods_media'
        | 'direct_marketing_catalog_merchant'
        | 'direct_marketing_combination_catalog_and_retail_merchant'
        | 'direct_marketing_inbound_telemarketing'
        | 'direct_marketing_insurance_services'
        | 'direct_marketing_other'
        | 'direct_marketing_outbound_telemarketing'
        | 'direct_marketing_subscription'
        | 'direct_marketing_travel'
        | 'discount_stores'
        | 'doctors'
        | 'door_to_door_sales'
        | 'drapery_window_covering_and_upholstery_stores'
        | 'drinking_places'
        | 'drug_stores_and_pharmacies'
        | 'drugs_drug_proprietaries_and_druggist_sundries'
        | 'dry_cleaners'
        | 'durable_goods'
        | 'duty_free_stores'
        | 'eating_places_restaurants'
        | 'educational_services'
        | 'electric_razor_stores'
        | 'electric_vehicle_charging'
        | 'electrical_parts_and_equipment'
        | 'electrical_services'
        | 'electronics_repair_shops'
        | 'electronics_stores'
        | 'elementary_secondary_schools'
        | 'emergency_services_gcas_visa_use_only'
        | 'employment_temp_agencies'
        | 'equipment_rental'
        | 'exterminating_services'
        | 'family_clothing_stores'
        | 'fast_food_restaurants'
        | 'financial_institutions'
        | 'fines_government_administrative_entities'
        | 'fireplace_fireplace_screens_and_accessories_stores'
        | 'floor_covering_stores'
        | 'florists'
        | 'florists_supplies_nursery_stock_and_flowers'
        | 'freezer_and_locker_meat_provisioners'
        | 'fuel_dealers_non_automotive'
        | 'funeral_services_crematories'
        | 'furniture_home_furnishings_and_equipment_stores_except_appliances'
        | 'furniture_repair_refinishing'
        | 'furriers_and_fur_shops'
        | 'general_services'
        | 'gift_card_novelty_and_souvenir_shops'
        | 'glass_paint_and_wallpaper_stores'
        | 'glassware_crystal_stores'
        | 'golf_courses_public'
        | 'government_licensed_horse_dog_racing_us_region_only'
        | 'government_licensed_online_casions_online_gambling_us_region_only'
        | 'government_owned_lotteries_non_us_region'
        | 'government_owned_lotteries_us_region_only'
        | 'government_services'
        | 'grocery_stores_supermarkets'
        | 'hardware_equipment_and_supplies'
        | 'hardware_stores'
        | 'health_and_beauty_spas'
        | 'hearing_aids_sales_and_supplies'
        | 'heating_plumbing_a_c'
        | 'hobby_toy_and_game_shops'
        | 'home_supply_warehouse_stores'
        | 'hospitals'
        | 'hotels_motels_and_resorts'
        | 'household_appliance_stores'
        | 'industrial_supplies'
        | 'information_retrieval_services'
        | 'insurance_default'
        | 'insurance_underwriting_premiums'
        | 'intra_company_purchases'
        | 'jewelry_stores_watches_clocks_and_silverware_stores'
        | 'landscaping_services'
        | 'laundries'
        | 'laundry_cleaning_services'
        | 'legal_services_attorneys'
        | 'luggage_and_leather_goods_stores'
        | 'lumber_building_materials_stores'
        | 'manual_cash_disburse'
        | 'marinas_service_and_supplies'
        | 'marketplaces'
        | 'masonry_stonework_and_plaster'
        | 'massage_parlors'
        | 'medical_and_dental_labs'
        | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies'
        | 'medical_services'
        | 'membership_organizations'
        | 'mens_and_boys_clothing_and_accessories_stores'
        | 'mens_womens_clothing_stores'
        | 'metal_service_centers'
        | 'miscellaneous'
        | 'miscellaneous_apparel_and_accessory_shops'
        | 'miscellaneous_auto_dealers'
        | 'miscellaneous_business_services'
        | 'miscellaneous_food_stores'
        | 'miscellaneous_general_merchandise'
        | 'miscellaneous_general_services'
        | 'miscellaneous_home_furnishing_specialty_stores'
        | 'miscellaneous_publishing_and_printing'
        | 'miscellaneous_recreation_services'
        | 'miscellaneous_repair_shops'
        | 'miscellaneous_specialty_retail'
        | 'mobile_home_dealers'
        | 'motion_picture_theaters'
        | 'motor_freight_carriers_and_trucking'
        | 'motor_homes_dealers'
        | 'motor_vehicle_supplies_and_new_parts'
        | 'motorcycle_shops_and_dealers'
        | 'motorcycle_shops_dealers'
        | 'music_stores_musical_instruments_pianos_and_sheet_music'
        | 'news_dealers_and_newsstands'
        | 'non_fi_money_orders'
        | 'non_fi_stored_value_card_purchase_load'
        | 'nondurable_goods'
        | 'nurseries_lawn_and_garden_supply_stores'
        | 'nursing_personal_care'
        | 'office_and_commercial_furniture'
        | 'opticians_eyeglasses'
        | 'optometrists_ophthalmologist'
        | 'orthopedic_goods_prosthetic_devices'
        | 'osteopaths'
        | 'package_stores_beer_wine_and_liquor'
        | 'paints_varnishes_and_supplies'
        | 'parking_lots_garages'
        | 'passenger_railways'
        | 'pawn_shops'
        | 'pet_shops_pet_food_and_supplies'
        | 'petroleum_and_petroleum_products'
        | 'photo_developing'
        | 'photographic_photocopy_microfilm_equipment_and_supplies'
        | 'photographic_studios'
        | 'picture_video_production'
        | 'piece_goods_notions_and_other_dry_goods'
        | 'plumbing_heating_equipment_and_supplies'
        | 'political_organizations'
        | 'postal_services_government_only'
        | 'precious_stones_and_metals_watches_and_jewelry'
        | 'professional_services'
        | 'public_warehousing_and_storage'
        | 'quick_copy_repro_and_blueprint'
        | 'railroads'
        | 'real_estate_agents_and_managers_rentals'
        | 'record_stores'
        | 'recreational_vehicle_rentals'
        | 'religious_goods_stores'
        | 'religious_organizations'
        | 'roofing_siding_sheet_metal'
        | 'secretarial_support_services'
        | 'security_brokers_dealers'
        | 'service_stations'
        | 'sewing_needlework_fabric_and_piece_goods_stores'
        | 'shoe_repair_hat_cleaning'
        | 'shoe_stores'
        | 'small_appliance_repair'
        | 'snowmobile_dealers'
        | 'special_trade_services'
        | 'specialty_cleaning'
        | 'sporting_goods_stores'
        | 'sporting_recreation_camps'
        | 'sports_and_riding_apparel_stores'
        | 'sports_clubs_fields'
        | 'stamp_and_coin_stores'
        | 'stationary_office_supplies_printing_and_writing_paper'
        | 'stationery_stores_office_and_school_supply_stores'
        | 'swimming_pools_sales'
        | 't_ui_travel_germany'
        | 'tailors_alterations'
        | 'tax_payments_government_agencies'
        | 'tax_preparation_services'
        | 'taxicabs_limousines'
        | 'telecommunication_equipment_and_telephone_sales'
        | 'telecommunication_services'
        | 'telegraph_services'
        | 'tent_and_awning_shops'
        | 'testing_laboratories'
        | 'theatrical_ticket_agencies'
        | 'timeshares'
        | 'tire_retreading_and_repair'
        | 'tolls_bridge_fees'
        | 'tourist_attractions_and_exhibits'
        | 'towing_services'
        | 'trailer_parks_campgrounds'
        | 'transportation_services'
        | 'travel_agencies_tour_operators'
        | 'truck_stop_iteration'
        | 'truck_utility_trailer_rentals'
        | 'typesetting_plate_making_and_related_services'
        | 'typewriter_stores'
        | 'u_s_federal_government_agencies_or_departments'
        | 'uniforms_commercial_clothing'
        | 'used_merchandise_and_secondhand_stores'
        | 'utilities'
        | 'variety_stores'
        | 'veterinary_services'
        | 'video_amusement_game_supplies'
        | 'video_game_arcades'
        | 'video_tape_rental_stores'
        | 'vocational_trade_schools'
        | 'watch_jewelry_repair'
        | 'welding_repair'
        | 'wholesale_clubs'
        | 'wig_and_toupee_stores'
        | 'wires_money_orders'
        | 'womens_accessory_and_specialty_shops'
        | 'womens_ready_to_wear_stores'
        | 'wrecking_and_salvage_yards'
      )[]
    | null;
  /**
   * Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control.
   */
  blocked_merchant_countries?: string[] | null;
  /**
   * Limit spending with amount-based rules that apply across any cards this card replaced (i.e., its `replacement_for` card and _that_ card's `replacement_for` card, up the chain).
   */
  spending_limits?: IssuingCardSpendingLimit[] | null;
  /**
   * Currency of the amounts within `spending_limits`. Always the same as the currency of the card.
   */
  spending_limits_currency?: string | null;
};
/**
 * IssuingCardGooglePay
 */
export type IssuingCardGooglePay = {
  /**
   * Google Pay Eligibility
   */
  eligible: boolean;
  /**
   * Reason the card is ineligible for Google Pay
   */
  ineligible_reason?:
    | (
        | 'missing_agreement'
        | 'missing_cardholder_contact'
        | 'unsupported_region'
      )
    | null;
};
/**
 * IssuingCardShipping
 */
export type IssuingCardShipping = {
  address: Address;
  /**
   * Address validation details for the shipment.
   */
  address_validation?: IssuingCardShippingAddressValidation | null;
  /**
   * The delivery company that shipped a card.
   */
  carrier?: ('dhl' | 'fedex' | 'royal_mail' | 'usps') | null;
  /**
   * Additional information that may be required for clearing customs.
   */
  customs?: IssuingCardShippingCustoms | null;
  /**
   * A unix timestamp representing a best estimate of when the card will be delivered.
   */
  eta?: number | null;
  /**
   * Recipient name.
   */
  name: string;
  /**
   * The phone number of the receiver of the shipment. Our courier partners will use this number to contact you in the event of card delivery issues. For individual shipments to the EU/UK, if this field is empty, we will provide them with the phone number provided when the cardholder was initially created.
   */
  phone_number?: string | null;
  /**
   * Whether a signature is required for card delivery. This feature is only supported for US users. Standard shipping service does not support signature on delivery. The default value for standard shipping service is false and for express and priority services is true.
   */
  require_signature?: boolean | null;
  /**
   * Shipment service, such as `standard` or `express`.
   */
  service: 'express' | 'priority' | 'standard';
  /**
   * The delivery status of the card.
   */
  status?:
    | (
        | 'canceled'
        | 'delivered'
        | 'failure'
        | 'pending'
        | 'returned'
        | 'shipped'
        | 'submitted'
      )
    | null;
  /**
   * A tracking number for a card shipment.
   */
  tracking_number?: string | null;
  /**
   * A link to the shipping carrier's site where you can view detailed information about a card shipment.
   */
  tracking_url?: string | null;
  /**
   * Packaging options.
   */
  type: 'bulk' | 'individual';
};
/**
 * IssuingCardShippingAddressValidation
 */
export type IssuingCardShippingAddressValidation = {
  /**
   * The address validation capabilities to use.
   */
  mode: 'disabled' | 'normalization_only' | 'validation_and_normalization';
  /**
   * The normalized shipping address.
   */
  normalized_address?: Address | null;
  /**
   * The validation result for the shipping address.
   */
  result?:
    | ('indeterminate' | 'likely_deliverable' | 'likely_undeliverable')
    | null;
};
/**
 * IssuingCardShippingCustoms
 */
export type IssuingCardShippingCustoms = {
  /**
   * A registration number used for customs in Europe. See [https://www.gov.uk/eori](https://www.gov.uk/eori) for the UK and [https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en](https://ec.europa.eu/taxation_customs/business/customs-procedures-import-and-export/customs-procedures/economic-operators-registration-and-identification-number-eori_en) for the EU.
   */
  eori_number?: string | null;
};
/**
 * IssuingCardSpendingLimit
 */
export type IssuingCardSpendingLimit = {
  /**
   * Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /**
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
   */
  categories?:
    | (
        | 'ac_refrigeration_repair'
        | 'accounting_bookkeeping_services'
        | 'advertising_services'
        | 'agricultural_cooperative'
        | 'airlines_air_carriers'
        | 'airports_flying_fields'
        | 'ambulance_services'
        | 'amusement_parks_carnivals'
        | 'antique_reproductions'
        | 'antique_shops'
        | 'aquariums'
        | 'architectural_surveying_services'
        | 'art_dealers_and_galleries'
        | 'artists_supply_and_craft_shops'
        | 'auto_and_home_supply_stores'
        | 'auto_body_repair_shops'
        | 'auto_paint_shops'
        | 'auto_service_shops'
        | 'automated_cash_disburse'
        | 'automated_fuel_dispensers'
        | 'automobile_associations'
        | 'automotive_parts_and_accessories_stores'
        | 'automotive_tire_stores'
        | 'bail_and_bond_payments'
        | 'bakeries'
        | 'bands_orchestras'
        | 'barber_and_beauty_shops'
        | 'betting_casino_gambling'
        | 'bicycle_shops'
        | 'billiard_pool_establishments'
        | 'boat_dealers'
        | 'boat_rentals_and_leases'
        | 'book_stores'
        | 'books_periodicals_and_newspapers'
        | 'bowling_alleys'
        | 'bus_lines'
        | 'business_secretarial_schools'
        | 'buying_shopping_services'
        | 'cable_satellite_and_other_pay_television_and_radio'
        | 'camera_and_photographic_supply_stores'
        | 'candy_nut_and_confectionery_stores'
        | 'car_and_truck_dealers_new_used'
        | 'car_and_truck_dealers_used_only'
        | 'car_rental_agencies'
        | 'car_washes'
        | 'carpentry_services'
        | 'carpet_upholstery_cleaning'
        | 'caterers'
        | 'charitable_and_social_service_organizations_fundraising'
        | 'chemicals_and_allied_products'
        | 'child_care_services'
        | 'childrens_and_infants_wear_stores'
        | 'chiropodists_podiatrists'
        | 'chiropractors'
        | 'cigar_stores_and_stands'
        | 'civic_social_fraternal_associations'
        | 'cleaning_and_maintenance'
        | 'clothing_rental'
        | 'colleges_universities'
        | 'commercial_equipment'
        | 'commercial_footwear'
        | 'commercial_photography_art_and_graphics'
        | 'commuter_transport_and_ferries'
        | 'computer_network_services'
        | 'computer_programming'
        | 'computer_repair'
        | 'computer_software_stores'
        | 'computers_peripherals_and_software'
        | 'concrete_work_services'
        | 'construction_materials'
        | 'consulting_public_relations'
        | 'correspondence_schools'
        | 'cosmetic_stores'
        | 'counseling_services'
        | 'country_clubs'
        | 'courier_services'
        | 'court_costs'
        | 'credit_reporting_agencies'
        | 'cruise_lines'
        | 'dairy_products_stores'
        | 'dance_hall_studios_schools'
        | 'dating_escort_services'
        | 'dentists_orthodontists'
        | 'department_stores'
        | 'detective_agencies'
        | 'digital_goods_applications'
        | 'digital_goods_games'
        | 'digital_goods_large_volume'
        | 'digital_goods_media'
        | 'direct_marketing_catalog_merchant'
        | 'direct_marketing_combination_catalog_and_retail_merchant'
        | 'direct_marketing_inbound_telemarketing'
        | 'direct_marketing_insurance_services'
        | 'direct_marketing_other'
        | 'direct_marketing_outbound_telemarketing'
        | 'direct_marketing_subscription'
        | 'direct_marketing_travel'
        | 'discount_stores'
        | 'doctors'
        | 'door_to_door_sales'
        | 'drapery_window_covering_and_upholstery_stores'
        | 'drinking_places'
        | 'drug_stores_and_pharmacies'
        | 'drugs_drug_proprietaries_and_druggist_sundries'
        | 'dry_cleaners'
        | 'durable_goods'
        | 'duty_free_stores'
        | 'eating_places_restaurants'
        | 'educational_services'
        | 'electric_razor_stores'
        | 'electric_vehicle_charging'
        | 'electrical_parts_and_equipment'
        | 'electrical_services'
        | 'electronics_repair_shops'
        | 'electronics_stores'
        | 'elementary_secondary_schools'
        | 'emergency_services_gcas_visa_use_only'
        | 'employment_temp_agencies'
        | 'equipment_rental'
        | 'exterminating_services'
        | 'family_clothing_stores'
        | 'fast_food_restaurants'
        | 'financial_institutions'
        | 'fines_government_administrative_entities'
        | 'fireplace_fireplace_screens_and_accessories_stores'
        | 'floor_covering_stores'
        | 'florists'
        | 'florists_supplies_nursery_stock_and_flowers'
        | 'freezer_and_locker_meat_provisioners'
        | 'fuel_dealers_non_automotive'
        | 'funeral_services_crematories'
        | 'furniture_home_furnishings_and_equipment_stores_except_appliances'
        | 'furniture_repair_refinishing'
        | 'furriers_and_fur_shops'
        | 'general_services'
        | 'gift_card_novelty_and_souvenir_shops'
        | 'glass_paint_and_wallpaper_stores'
        | 'glassware_crystal_stores'
        | 'golf_courses_public'
        | 'government_licensed_horse_dog_racing_us_region_only'
        | 'government_licensed_online_casions_online_gambling_us_region_only'
        | 'government_owned_lotteries_non_us_region'
        | 'government_owned_lotteries_us_region_only'
        | 'government_services'
        | 'grocery_stores_supermarkets'
        | 'hardware_equipment_and_supplies'
        | 'hardware_stores'
        | 'health_and_beauty_spas'
        | 'hearing_aids_sales_and_supplies'
        | 'heating_plumbing_a_c'
        | 'hobby_toy_and_game_shops'
        | 'home_supply_warehouse_stores'
        | 'hospitals'
        | 'hotels_motels_and_resorts'
        | 'household_appliance_stores'
        | 'industrial_supplies'
        | 'information_retrieval_services'
        | 'insurance_default'
        | 'insurance_underwriting_premiums'
        | 'intra_company_purchases'
        | 'jewelry_stores_watches_clocks_and_silverware_stores'
        | 'landscaping_services'
        | 'laundries'
        | 'laundry_cleaning_services'
        | 'legal_services_attorneys'
        | 'luggage_and_leather_goods_stores'
        | 'lumber_building_materials_stores'
        | 'manual_cash_disburse'
        | 'marinas_service_and_supplies'
        | 'marketplaces'
        | 'masonry_stonework_and_plaster'
        | 'massage_parlors'
        | 'medical_and_dental_labs'
        | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies'
        | 'medical_services'
        | 'membership_organizations'
        | 'mens_and_boys_clothing_and_accessories_stores'
        | 'mens_womens_clothing_stores'
        | 'metal_service_centers'
        | 'miscellaneous'
        | 'miscellaneous_apparel_and_accessory_shops'
        | 'miscellaneous_auto_dealers'
        | 'miscellaneous_business_services'
        | 'miscellaneous_food_stores'
        | 'miscellaneous_general_merchandise'
        | 'miscellaneous_general_services'
        | 'miscellaneous_home_furnishing_specialty_stores'
        | 'miscellaneous_publishing_and_printing'
        | 'miscellaneous_recreation_services'
        | 'miscellaneous_repair_shops'
        | 'miscellaneous_specialty_retail'
        | 'mobile_home_dealers'
        | 'motion_picture_theaters'
        | 'motor_freight_carriers_and_trucking'
        | 'motor_homes_dealers'
        | 'motor_vehicle_supplies_and_new_parts'
        | 'motorcycle_shops_and_dealers'
        | 'motorcycle_shops_dealers'
        | 'music_stores_musical_instruments_pianos_and_sheet_music'
        | 'news_dealers_and_newsstands'
        | 'non_fi_money_orders'
        | 'non_fi_stored_value_card_purchase_load'
        | 'nondurable_goods'
        | 'nurseries_lawn_and_garden_supply_stores'
        | 'nursing_personal_care'
        | 'office_and_commercial_furniture'
        | 'opticians_eyeglasses'
        | 'optometrists_ophthalmologist'
        | 'orthopedic_goods_prosthetic_devices'
        | 'osteopaths'
        | 'package_stores_beer_wine_and_liquor'
        | 'paints_varnishes_and_supplies'
        | 'parking_lots_garages'
        | 'passenger_railways'
        | 'pawn_shops'
        | 'pet_shops_pet_food_and_supplies'
        | 'petroleum_and_petroleum_products'
        | 'photo_developing'
        | 'photographic_photocopy_microfilm_equipment_and_supplies'
        | 'photographic_studios'
        | 'picture_video_production'
        | 'piece_goods_notions_and_other_dry_goods'
        | 'plumbing_heating_equipment_and_supplies'
        | 'political_organizations'
        | 'postal_services_government_only'
        | 'precious_stones_and_metals_watches_and_jewelry'
        | 'professional_services'
        | 'public_warehousing_and_storage'
        | 'quick_copy_repro_and_blueprint'
        | 'railroads'
        | 'real_estate_agents_and_managers_rentals'
        | 'record_stores'
        | 'recreational_vehicle_rentals'
        | 'religious_goods_stores'
        | 'religious_organizations'
        | 'roofing_siding_sheet_metal'
        | 'secretarial_support_services'
        | 'security_brokers_dealers'
        | 'service_stations'
        | 'sewing_needlework_fabric_and_piece_goods_stores'
        | 'shoe_repair_hat_cleaning'
        | 'shoe_stores'
        | 'small_appliance_repair'
        | 'snowmobile_dealers'
        | 'special_trade_services'
        | 'specialty_cleaning'
        | 'sporting_goods_stores'
        | 'sporting_recreation_camps'
        | 'sports_and_riding_apparel_stores'
        | 'sports_clubs_fields'
        | 'stamp_and_coin_stores'
        | 'stationary_office_supplies_printing_and_writing_paper'
        | 'stationery_stores_office_and_school_supply_stores'
        | 'swimming_pools_sales'
        | 't_ui_travel_germany'
        | 'tailors_alterations'
        | 'tax_payments_government_agencies'
        | 'tax_preparation_services'
        | 'taxicabs_limousines'
        | 'telecommunication_equipment_and_telephone_sales'
        | 'telecommunication_services'
        | 'telegraph_services'
        | 'tent_and_awning_shops'
        | 'testing_laboratories'
        | 'theatrical_ticket_agencies'
        | 'timeshares'
        | 'tire_retreading_and_repair'
        | 'tolls_bridge_fees'
        | 'tourist_attractions_and_exhibits'
        | 'towing_services'
        | 'trailer_parks_campgrounds'
        | 'transportation_services'
        | 'travel_agencies_tour_operators'
        | 'truck_stop_iteration'
        | 'truck_utility_trailer_rentals'
        | 'typesetting_plate_making_and_related_services'
        | 'typewriter_stores'
        | 'u_s_federal_government_agencies_or_departments'
        | 'uniforms_commercial_clothing'
        | 'used_merchandise_and_secondhand_stores'
        | 'utilities'
        | 'variety_stores'
        | 'veterinary_services'
        | 'video_amusement_game_supplies'
        | 'video_game_arcades'
        | 'video_tape_rental_stores'
        | 'vocational_trade_schools'
        | 'watch_jewelry_repair'
        | 'welding_repair'
        | 'wholesale_clubs'
        | 'wig_and_toupee_stores'
        | 'wires_money_orders'
        | 'womens_accessory_and_specialty_shops'
        | 'womens_ready_to_wear_stores'
        | 'wrecking_and_salvage_yards'
      )[]
    | null;
  /**
   * Interval (or event) to which the amount applies.
   */
  interval:
    | 'all_time'
    | 'daily'
    | 'monthly'
    | 'per_authorization'
    | 'weekly'
    | 'yearly';
};
/**
 * IssuingCardWallets
 */
export type IssuingCardWallets = {
  apple_pay: IssuingCardApplePay;
  google_pay: IssuingCardGooglePay;
  /**
   * Unique identifier for a card used with digital wallets
   */
  primary_account_identifier?: string | null;
};
/**
 * IssuingCardholderAddress
 */
export type IssuingCardholderAddress = {
  address: Address;
};
/**
 * IssuingCardholderAuthorizationControls
 */
export type IssuingCardholderAuthorizationControls = {
  /**
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to allow. All other categories will be blocked. Cannot be set with `blocked_categories`.
   */
  allowed_categories?:
    | (
        | 'ac_refrigeration_repair'
        | 'accounting_bookkeeping_services'
        | 'advertising_services'
        | 'agricultural_cooperative'
        | 'airlines_air_carriers'
        | 'airports_flying_fields'
        | 'ambulance_services'
        | 'amusement_parks_carnivals'
        | 'antique_reproductions'
        | 'antique_shops'
        | 'aquariums'
        | 'architectural_surveying_services'
        | 'art_dealers_and_galleries'
        | 'artists_supply_and_craft_shops'
        | 'auto_and_home_supply_stores'
        | 'auto_body_repair_shops'
        | 'auto_paint_shops'
        | 'auto_service_shops'
        | 'automated_cash_disburse'
        | 'automated_fuel_dispensers'
        | 'automobile_associations'
        | 'automotive_parts_and_accessories_stores'
        | 'automotive_tire_stores'
        | 'bail_and_bond_payments'
        | 'bakeries'
        | 'bands_orchestras'
        | 'barber_and_beauty_shops'
        | 'betting_casino_gambling'
        | 'bicycle_shops'
        | 'billiard_pool_establishments'
        | 'boat_dealers'
        | 'boat_rentals_and_leases'
        | 'book_stores'
        | 'books_periodicals_and_newspapers'
        | 'bowling_alleys'
        | 'bus_lines'
        | 'business_secretarial_schools'
        | 'buying_shopping_services'
        | 'cable_satellite_and_other_pay_television_and_radio'
        | 'camera_and_photographic_supply_stores'
        | 'candy_nut_and_confectionery_stores'
        | 'car_and_truck_dealers_new_used'
        | 'car_and_truck_dealers_used_only'
        | 'car_rental_agencies'
        | 'car_washes'
        | 'carpentry_services'
        | 'carpet_upholstery_cleaning'
        | 'caterers'
        | 'charitable_and_social_service_organizations_fundraising'
        | 'chemicals_and_allied_products'
        | 'child_care_services'
        | 'childrens_and_infants_wear_stores'
        | 'chiropodists_podiatrists'
        | 'chiropractors'
        | 'cigar_stores_and_stands'
        | 'civic_social_fraternal_associations'
        | 'cleaning_and_maintenance'
        | 'clothing_rental'
        | 'colleges_universities'
        | 'commercial_equipment'
        | 'commercial_footwear'
        | 'commercial_photography_art_and_graphics'
        | 'commuter_transport_and_ferries'
        | 'computer_network_services'
        | 'computer_programming'
        | 'computer_repair'
        | 'computer_software_stores'
        | 'computers_peripherals_and_software'
        | 'concrete_work_services'
        | 'construction_materials'
        | 'consulting_public_relations'
        | 'correspondence_schools'
        | 'cosmetic_stores'
        | 'counseling_services'
        | 'country_clubs'
        | 'courier_services'
        | 'court_costs'
        | 'credit_reporting_agencies'
        | 'cruise_lines'
        | 'dairy_products_stores'
        | 'dance_hall_studios_schools'
        | 'dating_escort_services'
        | 'dentists_orthodontists'
        | 'department_stores'
        | 'detective_agencies'
        | 'digital_goods_applications'
        | 'digital_goods_games'
        | 'digital_goods_large_volume'
        | 'digital_goods_media'
        | 'direct_marketing_catalog_merchant'
        | 'direct_marketing_combination_catalog_and_retail_merchant'
        | 'direct_marketing_inbound_telemarketing'
        | 'direct_marketing_insurance_services'
        | 'direct_marketing_other'
        | 'direct_marketing_outbound_telemarketing'
        | 'direct_marketing_subscription'
        | 'direct_marketing_travel'
        | 'discount_stores'
        | 'doctors'
        | 'door_to_door_sales'
        | 'drapery_window_covering_and_upholstery_stores'
        | 'drinking_places'
        | 'drug_stores_and_pharmacies'
        | 'drugs_drug_proprietaries_and_druggist_sundries'
        | 'dry_cleaners'
        | 'durable_goods'
        | 'duty_free_stores'
        | 'eating_places_restaurants'
        | 'educational_services'
        | 'electric_razor_stores'
        | 'electric_vehicle_charging'
        | 'electrical_parts_and_equipment'
        | 'electrical_services'
        | 'electronics_repair_shops'
        | 'electronics_stores'
        | 'elementary_secondary_schools'
        | 'emergency_services_gcas_visa_use_only'
        | 'employment_temp_agencies'
        | 'equipment_rental'
        | 'exterminating_services'
        | 'family_clothing_stores'
        | 'fast_food_restaurants'
        | 'financial_institutions'
        | 'fines_government_administrative_entities'
        | 'fireplace_fireplace_screens_and_accessories_stores'
        | 'floor_covering_stores'
        | 'florists'
        | 'florists_supplies_nursery_stock_and_flowers'
        | 'freezer_and_locker_meat_provisioners'
        | 'fuel_dealers_non_automotive'
        | 'funeral_services_crematories'
        | 'furniture_home_furnishings_and_equipment_stores_except_appliances'
        | 'furniture_repair_refinishing'
        | 'furriers_and_fur_shops'
        | 'general_services'
        | 'gift_card_novelty_and_souvenir_shops'
        | 'glass_paint_and_wallpaper_stores'
        | 'glassware_crystal_stores'
        | 'golf_courses_public'
        | 'government_licensed_horse_dog_racing_us_region_only'
        | 'government_licensed_online_casions_online_gambling_us_region_only'
        | 'government_owned_lotteries_non_us_region'
        | 'government_owned_lotteries_us_region_only'
        | 'government_services'
        | 'grocery_stores_supermarkets'
        | 'hardware_equipment_and_supplies'
        | 'hardware_stores'
        | 'health_and_beauty_spas'
        | 'hearing_aids_sales_and_supplies'
        | 'heating_plumbing_a_c'
        | 'hobby_toy_and_game_shops'
        | 'home_supply_warehouse_stores'
        | 'hospitals'
        | 'hotels_motels_and_resorts'
        | 'household_appliance_stores'
        | 'industrial_supplies'
        | 'information_retrieval_services'
        | 'insurance_default'
        | 'insurance_underwriting_premiums'
        | 'intra_company_purchases'
        | 'jewelry_stores_watches_clocks_and_silverware_stores'
        | 'landscaping_services'
        | 'laundries'
        | 'laundry_cleaning_services'
        | 'legal_services_attorneys'
        | 'luggage_and_leather_goods_stores'
        | 'lumber_building_materials_stores'
        | 'manual_cash_disburse'
        | 'marinas_service_and_supplies'
        | 'marketplaces'
        | 'masonry_stonework_and_plaster'
        | 'massage_parlors'
        | 'medical_and_dental_labs'
        | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies'
        | 'medical_services'
        | 'membership_organizations'
        | 'mens_and_boys_clothing_and_accessories_stores'
        | 'mens_womens_clothing_stores'
        | 'metal_service_centers'
        | 'miscellaneous'
        | 'miscellaneous_apparel_and_accessory_shops'
        | 'miscellaneous_auto_dealers'
        | 'miscellaneous_business_services'
        | 'miscellaneous_food_stores'
        | 'miscellaneous_general_merchandise'
        | 'miscellaneous_general_services'
        | 'miscellaneous_home_furnishing_specialty_stores'
        | 'miscellaneous_publishing_and_printing'
        | 'miscellaneous_recreation_services'
        | 'miscellaneous_repair_shops'
        | 'miscellaneous_specialty_retail'
        | 'mobile_home_dealers'
        | 'motion_picture_theaters'
        | 'motor_freight_carriers_and_trucking'
        | 'motor_homes_dealers'
        | 'motor_vehicle_supplies_and_new_parts'
        | 'motorcycle_shops_and_dealers'
        | 'motorcycle_shops_dealers'
        | 'music_stores_musical_instruments_pianos_and_sheet_music'
        | 'news_dealers_and_newsstands'
        | 'non_fi_money_orders'
        | 'non_fi_stored_value_card_purchase_load'
        | 'nondurable_goods'
        | 'nurseries_lawn_and_garden_supply_stores'
        | 'nursing_personal_care'
        | 'office_and_commercial_furniture'
        | 'opticians_eyeglasses'
        | 'optometrists_ophthalmologist'
        | 'orthopedic_goods_prosthetic_devices'
        | 'osteopaths'
        | 'package_stores_beer_wine_and_liquor'
        | 'paints_varnishes_and_supplies'
        | 'parking_lots_garages'
        | 'passenger_railways'
        | 'pawn_shops'
        | 'pet_shops_pet_food_and_supplies'
        | 'petroleum_and_petroleum_products'
        | 'photo_developing'
        | 'photographic_photocopy_microfilm_equipment_and_supplies'
        | 'photographic_studios'
        | 'picture_video_production'
        | 'piece_goods_notions_and_other_dry_goods'
        | 'plumbing_heating_equipment_and_supplies'
        | 'political_organizations'
        | 'postal_services_government_only'
        | 'precious_stones_and_metals_watches_and_jewelry'
        | 'professional_services'
        | 'public_warehousing_and_storage'
        | 'quick_copy_repro_and_blueprint'
        | 'railroads'
        | 'real_estate_agents_and_managers_rentals'
        | 'record_stores'
        | 'recreational_vehicle_rentals'
        | 'religious_goods_stores'
        | 'religious_organizations'
        | 'roofing_siding_sheet_metal'
        | 'secretarial_support_services'
        | 'security_brokers_dealers'
        | 'service_stations'
        | 'sewing_needlework_fabric_and_piece_goods_stores'
        | 'shoe_repair_hat_cleaning'
        | 'shoe_stores'
        | 'small_appliance_repair'
        | 'snowmobile_dealers'
        | 'special_trade_services'
        | 'specialty_cleaning'
        | 'sporting_goods_stores'
        | 'sporting_recreation_camps'
        | 'sports_and_riding_apparel_stores'
        | 'sports_clubs_fields'
        | 'stamp_and_coin_stores'
        | 'stationary_office_supplies_printing_and_writing_paper'
        | 'stationery_stores_office_and_school_supply_stores'
        | 'swimming_pools_sales'
        | 't_ui_travel_germany'
        | 'tailors_alterations'
        | 'tax_payments_government_agencies'
        | 'tax_preparation_services'
        | 'taxicabs_limousines'
        | 'telecommunication_equipment_and_telephone_sales'
        | 'telecommunication_services'
        | 'telegraph_services'
        | 'tent_and_awning_shops'
        | 'testing_laboratories'
        | 'theatrical_ticket_agencies'
        | 'timeshares'
        | 'tire_retreading_and_repair'
        | 'tolls_bridge_fees'
        | 'tourist_attractions_and_exhibits'
        | 'towing_services'
        | 'trailer_parks_campgrounds'
        | 'transportation_services'
        | 'travel_agencies_tour_operators'
        | 'truck_stop_iteration'
        | 'truck_utility_trailer_rentals'
        | 'typesetting_plate_making_and_related_services'
        | 'typewriter_stores'
        | 'u_s_federal_government_agencies_or_departments'
        | 'uniforms_commercial_clothing'
        | 'used_merchandise_and_secondhand_stores'
        | 'utilities'
        | 'variety_stores'
        | 'veterinary_services'
        | 'video_amusement_game_supplies'
        | 'video_game_arcades'
        | 'video_tape_rental_stores'
        | 'vocational_trade_schools'
        | 'watch_jewelry_repair'
        | 'welding_repair'
        | 'wholesale_clubs'
        | 'wig_and_toupee_stores'
        | 'wires_money_orders'
        | 'womens_accessory_and_specialty_shops'
        | 'womens_ready_to_wear_stores'
        | 'wrecking_and_salvage_yards'
      )[]
    | null;
  /**
   * Array of strings containing representing countries from which authorizations will be allowed. Authorizations from merchants in all other countries will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `blocked_merchant_countries`. Provide an empty value to unset this control.
   */
  allowed_merchant_countries?: string[] | null;
  /**
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) of authorizations to decline. All other categories will be allowed. Cannot be set with `allowed_categories`.
   */
  blocked_categories?:
    | (
        | 'ac_refrigeration_repair'
        | 'accounting_bookkeeping_services'
        | 'advertising_services'
        | 'agricultural_cooperative'
        | 'airlines_air_carriers'
        | 'airports_flying_fields'
        | 'ambulance_services'
        | 'amusement_parks_carnivals'
        | 'antique_reproductions'
        | 'antique_shops'
        | 'aquariums'
        | 'architectural_surveying_services'
        | 'art_dealers_and_galleries'
        | 'artists_supply_and_craft_shops'
        | 'auto_and_home_supply_stores'
        | 'auto_body_repair_shops'
        | 'auto_paint_shops'
        | 'auto_service_shops'
        | 'automated_cash_disburse'
        | 'automated_fuel_dispensers'
        | 'automobile_associations'
        | 'automotive_parts_and_accessories_stores'
        | 'automotive_tire_stores'
        | 'bail_and_bond_payments'
        | 'bakeries'
        | 'bands_orchestras'
        | 'barber_and_beauty_shops'
        | 'betting_casino_gambling'
        | 'bicycle_shops'
        | 'billiard_pool_establishments'
        | 'boat_dealers'
        | 'boat_rentals_and_leases'
        | 'book_stores'
        | 'books_periodicals_and_newspapers'
        | 'bowling_alleys'
        | 'bus_lines'
        | 'business_secretarial_schools'
        | 'buying_shopping_services'
        | 'cable_satellite_and_other_pay_television_and_radio'
        | 'camera_and_photographic_supply_stores'
        | 'candy_nut_and_confectionery_stores'
        | 'car_and_truck_dealers_new_used'
        | 'car_and_truck_dealers_used_only'
        | 'car_rental_agencies'
        | 'car_washes'
        | 'carpentry_services'
        | 'carpet_upholstery_cleaning'
        | 'caterers'
        | 'charitable_and_social_service_organizations_fundraising'
        | 'chemicals_and_allied_products'
        | 'child_care_services'
        | 'childrens_and_infants_wear_stores'
        | 'chiropodists_podiatrists'
        | 'chiropractors'
        | 'cigar_stores_and_stands'
        | 'civic_social_fraternal_associations'
        | 'cleaning_and_maintenance'
        | 'clothing_rental'
        | 'colleges_universities'
        | 'commercial_equipment'
        | 'commercial_footwear'
        | 'commercial_photography_art_and_graphics'
        | 'commuter_transport_and_ferries'
        | 'computer_network_services'
        | 'computer_programming'
        | 'computer_repair'
        | 'computer_software_stores'
        | 'computers_peripherals_and_software'
        | 'concrete_work_services'
        | 'construction_materials'
        | 'consulting_public_relations'
        | 'correspondence_schools'
        | 'cosmetic_stores'
        | 'counseling_services'
        | 'country_clubs'
        | 'courier_services'
        | 'court_costs'
        | 'credit_reporting_agencies'
        | 'cruise_lines'
        | 'dairy_products_stores'
        | 'dance_hall_studios_schools'
        | 'dating_escort_services'
        | 'dentists_orthodontists'
        | 'department_stores'
        | 'detective_agencies'
        | 'digital_goods_applications'
        | 'digital_goods_games'
        | 'digital_goods_large_volume'
        | 'digital_goods_media'
        | 'direct_marketing_catalog_merchant'
        | 'direct_marketing_combination_catalog_and_retail_merchant'
        | 'direct_marketing_inbound_telemarketing'
        | 'direct_marketing_insurance_services'
        | 'direct_marketing_other'
        | 'direct_marketing_outbound_telemarketing'
        | 'direct_marketing_subscription'
        | 'direct_marketing_travel'
        | 'discount_stores'
        | 'doctors'
        | 'door_to_door_sales'
        | 'drapery_window_covering_and_upholstery_stores'
        | 'drinking_places'
        | 'drug_stores_and_pharmacies'
        | 'drugs_drug_proprietaries_and_druggist_sundries'
        | 'dry_cleaners'
        | 'durable_goods'
        | 'duty_free_stores'
        | 'eating_places_restaurants'
        | 'educational_services'
        | 'electric_razor_stores'
        | 'electric_vehicle_charging'
        | 'electrical_parts_and_equipment'
        | 'electrical_services'
        | 'electronics_repair_shops'
        | 'electronics_stores'
        | 'elementary_secondary_schools'
        | 'emergency_services_gcas_visa_use_only'
        | 'employment_temp_agencies'
        | 'equipment_rental'
        | 'exterminating_services'
        | 'family_clothing_stores'
        | 'fast_food_restaurants'
        | 'financial_institutions'
        | 'fines_government_administrative_entities'
        | 'fireplace_fireplace_screens_and_accessories_stores'
        | 'floor_covering_stores'
        | 'florists'
        | 'florists_supplies_nursery_stock_and_flowers'
        | 'freezer_and_locker_meat_provisioners'
        | 'fuel_dealers_non_automotive'
        | 'funeral_services_crematories'
        | 'furniture_home_furnishings_and_equipment_stores_except_appliances'
        | 'furniture_repair_refinishing'
        | 'furriers_and_fur_shops'
        | 'general_services'
        | 'gift_card_novelty_and_souvenir_shops'
        | 'glass_paint_and_wallpaper_stores'
        | 'glassware_crystal_stores'
        | 'golf_courses_public'
        | 'government_licensed_horse_dog_racing_us_region_only'
        | 'government_licensed_online_casions_online_gambling_us_region_only'
        | 'government_owned_lotteries_non_us_region'
        | 'government_owned_lotteries_us_region_only'
        | 'government_services'
        | 'grocery_stores_supermarkets'
        | 'hardware_equipment_and_supplies'
        | 'hardware_stores'
        | 'health_and_beauty_spas'
        | 'hearing_aids_sales_and_supplies'
        | 'heating_plumbing_a_c'
        | 'hobby_toy_and_game_shops'
        | 'home_supply_warehouse_stores'
        | 'hospitals'
        | 'hotels_motels_and_resorts'
        | 'household_appliance_stores'
        | 'industrial_supplies'
        | 'information_retrieval_services'
        | 'insurance_default'
        | 'insurance_underwriting_premiums'
        | 'intra_company_purchases'
        | 'jewelry_stores_watches_clocks_and_silverware_stores'
        | 'landscaping_services'
        | 'laundries'
        | 'laundry_cleaning_services'
        | 'legal_services_attorneys'
        | 'luggage_and_leather_goods_stores'
        | 'lumber_building_materials_stores'
        | 'manual_cash_disburse'
        | 'marinas_service_and_supplies'
        | 'marketplaces'
        | 'masonry_stonework_and_plaster'
        | 'massage_parlors'
        | 'medical_and_dental_labs'
        | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies'
        | 'medical_services'
        | 'membership_organizations'
        | 'mens_and_boys_clothing_and_accessories_stores'
        | 'mens_womens_clothing_stores'
        | 'metal_service_centers'
        | 'miscellaneous'
        | 'miscellaneous_apparel_and_accessory_shops'
        | 'miscellaneous_auto_dealers'
        | 'miscellaneous_business_services'
        | 'miscellaneous_food_stores'
        | 'miscellaneous_general_merchandise'
        | 'miscellaneous_general_services'
        | 'miscellaneous_home_furnishing_specialty_stores'
        | 'miscellaneous_publishing_and_printing'
        | 'miscellaneous_recreation_services'
        | 'miscellaneous_repair_shops'
        | 'miscellaneous_specialty_retail'
        | 'mobile_home_dealers'
        | 'motion_picture_theaters'
        | 'motor_freight_carriers_and_trucking'
        | 'motor_homes_dealers'
        | 'motor_vehicle_supplies_and_new_parts'
        | 'motorcycle_shops_and_dealers'
        | 'motorcycle_shops_dealers'
        | 'music_stores_musical_instruments_pianos_and_sheet_music'
        | 'news_dealers_and_newsstands'
        | 'non_fi_money_orders'
        | 'non_fi_stored_value_card_purchase_load'
        | 'nondurable_goods'
        | 'nurseries_lawn_and_garden_supply_stores'
        | 'nursing_personal_care'
        | 'office_and_commercial_furniture'
        | 'opticians_eyeglasses'
        | 'optometrists_ophthalmologist'
        | 'orthopedic_goods_prosthetic_devices'
        | 'osteopaths'
        | 'package_stores_beer_wine_and_liquor'
        | 'paints_varnishes_and_supplies'
        | 'parking_lots_garages'
        | 'passenger_railways'
        | 'pawn_shops'
        | 'pet_shops_pet_food_and_supplies'
        | 'petroleum_and_petroleum_products'
        | 'photo_developing'
        | 'photographic_photocopy_microfilm_equipment_and_supplies'
        | 'photographic_studios'
        | 'picture_video_production'
        | 'piece_goods_notions_and_other_dry_goods'
        | 'plumbing_heating_equipment_and_supplies'
        | 'political_organizations'
        | 'postal_services_government_only'
        | 'precious_stones_and_metals_watches_and_jewelry'
        | 'professional_services'
        | 'public_warehousing_and_storage'
        | 'quick_copy_repro_and_blueprint'
        | 'railroads'
        | 'real_estate_agents_and_managers_rentals'
        | 'record_stores'
        | 'recreational_vehicle_rentals'
        | 'religious_goods_stores'
        | 'religious_organizations'
        | 'roofing_siding_sheet_metal'
        | 'secretarial_support_services'
        | 'security_brokers_dealers'
        | 'service_stations'
        | 'sewing_needlework_fabric_and_piece_goods_stores'
        | 'shoe_repair_hat_cleaning'
        | 'shoe_stores'
        | 'small_appliance_repair'
        | 'snowmobile_dealers'
        | 'special_trade_services'
        | 'specialty_cleaning'
        | 'sporting_goods_stores'
        | 'sporting_recreation_camps'
        | 'sports_and_riding_apparel_stores'
        | 'sports_clubs_fields'
        | 'stamp_and_coin_stores'
        | 'stationary_office_supplies_printing_and_writing_paper'
        | 'stationery_stores_office_and_school_supply_stores'
        | 'swimming_pools_sales'
        | 't_ui_travel_germany'
        | 'tailors_alterations'
        | 'tax_payments_government_agencies'
        | 'tax_preparation_services'
        | 'taxicabs_limousines'
        | 'telecommunication_equipment_and_telephone_sales'
        | 'telecommunication_services'
        | 'telegraph_services'
        | 'tent_and_awning_shops'
        | 'testing_laboratories'
        | 'theatrical_ticket_agencies'
        | 'timeshares'
        | 'tire_retreading_and_repair'
        | 'tolls_bridge_fees'
        | 'tourist_attractions_and_exhibits'
        | 'towing_services'
        | 'trailer_parks_campgrounds'
        | 'transportation_services'
        | 'travel_agencies_tour_operators'
        | 'truck_stop_iteration'
        | 'truck_utility_trailer_rentals'
        | 'typesetting_plate_making_and_related_services'
        | 'typewriter_stores'
        | 'u_s_federal_government_agencies_or_departments'
        | 'uniforms_commercial_clothing'
        | 'used_merchandise_and_secondhand_stores'
        | 'utilities'
        | 'variety_stores'
        | 'veterinary_services'
        | 'video_amusement_game_supplies'
        | 'video_game_arcades'
        | 'video_tape_rental_stores'
        | 'vocational_trade_schools'
        | 'watch_jewelry_repair'
        | 'welding_repair'
        | 'wholesale_clubs'
        | 'wig_and_toupee_stores'
        | 'wires_money_orders'
        | 'womens_accessory_and_specialty_shops'
        | 'womens_ready_to_wear_stores'
        | 'wrecking_and_salvage_yards'
      )[]
    | null;
  /**
   * Array of strings containing representing countries from which authorizations will be declined. Country codes should be ISO 3166 alpha-2 country codes (e.g. `US`). Cannot be set with `allowed_merchant_countries`. Provide an empty value to unset this control.
   */
  blocked_merchant_countries?: string[] | null;
  /**
   * Limit spending with amount-based rules that apply across this cardholder's cards.
   */
  spending_limits?: IssuingCardholderSpendingLimit[] | null;
  /**
   * Currency of the amounts within `spending_limits`.
   */
  spending_limits_currency?: string | null;
};
/**
 * IssuingCardholderCardIssuing
 */
export type IssuingCardholderCardIssuing = {
  /**
   * Information about cardholder acceptance of Celtic [Authorized User Terms](https://stripe.com/docs/issuing/cards#accept-authorized-user-terms). Required for cards backed by a Celtic program.
   */
  user_terms_acceptance?: IssuingCardholderUserTermsAcceptance | null;
};
/**
 * IssuingCardholderCompany
 */
export type IssuingCardholderCompany = {
  /**
   * Whether the company's business ID number was provided.
   */
  tax_id_provided: boolean;
};
/**
 * IssuingCardholderIdDocument
 */
export type IssuingCardholderIdDocument = {
  /**
   * The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  back?: (string | File) | null;
  /**
   * The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  front?: (string | File) | null;
};
/**
 * IssuingCardholderIndividual
 */
export type IssuingCardholderIndividual = {
  /**
   * Information related to the card_issuing program for this cardholder.
   */
  card_issuing?: IssuingCardholderCardIssuing | null;
  /**
   * The date of birth of this cardholder.
   */
  dob?: IssuingCardholderIndividualDob | null;
  /**
   * The first name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
   */
  first_name?: string | null;
  /**
   * The last name of this cardholder. Required before activating Cards. This field cannot contain any numbers, special characters (except periods, commas, hyphens, spaces and apostrophes) or non-latin letters.
   */
  last_name?: string | null;
  /**
   * Government-issued ID document for this cardholder.
   */
  verification?: IssuingCardholderVerification | null;
};
/**
 * IssuingCardholderIndividualDOB
 */
export type IssuingCardholderIndividualDob = {
  /**
   * The day of birth, between 1 and 31.
   */
  day?: number | null;
  /**
   * The month of birth, between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year of birth.
   */
  year?: number | null;
};
/**
 * IssuingCardholderRequirements
 */
export type IssuingCardholderRequirements = {
  /**
   * If `disabled_reason` is present, all cards will decline authorizations with `cardholder_verification_required` reason.
   */
  disabled_reason?:
    | ('listed' | 'rejected.listed' | 'requirements.past_due' | 'under_review')
    | null;
  /**
   * Array of fields that need to be collected in order to verify and re-enable the cardholder.
   */
  past_due?:
    | (
        | 'company.tax_id'
        | 'individual.card_issuing.user_terms_acceptance.date'
        | 'individual.card_issuing.user_terms_acceptance.ip'
        | 'individual.dob.day'
        | 'individual.dob.month'
        | 'individual.dob.year'
        | 'individual.first_name'
        | 'individual.last_name'
        | 'individual.verification.document'
      )[]
    | null;
};
/**
 * IssuingCardholderSpendingLimit
 */
export type IssuingCardholderSpendingLimit = {
  /**
   * Maximum amount allowed to spend per interval. This amount is in the card's currency and in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /**
   * Array of strings containing [categories](https://stripe.com/docs/api#issuing_authorization_object-merchant_data-category) this limit applies to. Omitting this field will apply the limit to all categories.
   */
  categories?:
    | (
        | 'ac_refrigeration_repair'
        | 'accounting_bookkeeping_services'
        | 'advertising_services'
        | 'agricultural_cooperative'
        | 'airlines_air_carriers'
        | 'airports_flying_fields'
        | 'ambulance_services'
        | 'amusement_parks_carnivals'
        | 'antique_reproductions'
        | 'antique_shops'
        | 'aquariums'
        | 'architectural_surveying_services'
        | 'art_dealers_and_galleries'
        | 'artists_supply_and_craft_shops'
        | 'auto_and_home_supply_stores'
        | 'auto_body_repair_shops'
        | 'auto_paint_shops'
        | 'auto_service_shops'
        | 'automated_cash_disburse'
        | 'automated_fuel_dispensers'
        | 'automobile_associations'
        | 'automotive_parts_and_accessories_stores'
        | 'automotive_tire_stores'
        | 'bail_and_bond_payments'
        | 'bakeries'
        | 'bands_orchestras'
        | 'barber_and_beauty_shops'
        | 'betting_casino_gambling'
        | 'bicycle_shops'
        | 'billiard_pool_establishments'
        | 'boat_dealers'
        | 'boat_rentals_and_leases'
        | 'book_stores'
        | 'books_periodicals_and_newspapers'
        | 'bowling_alleys'
        | 'bus_lines'
        | 'business_secretarial_schools'
        | 'buying_shopping_services'
        | 'cable_satellite_and_other_pay_television_and_radio'
        | 'camera_and_photographic_supply_stores'
        | 'candy_nut_and_confectionery_stores'
        | 'car_and_truck_dealers_new_used'
        | 'car_and_truck_dealers_used_only'
        | 'car_rental_agencies'
        | 'car_washes'
        | 'carpentry_services'
        | 'carpet_upholstery_cleaning'
        | 'caterers'
        | 'charitable_and_social_service_organizations_fundraising'
        | 'chemicals_and_allied_products'
        | 'child_care_services'
        | 'childrens_and_infants_wear_stores'
        | 'chiropodists_podiatrists'
        | 'chiropractors'
        | 'cigar_stores_and_stands'
        | 'civic_social_fraternal_associations'
        | 'cleaning_and_maintenance'
        | 'clothing_rental'
        | 'colleges_universities'
        | 'commercial_equipment'
        | 'commercial_footwear'
        | 'commercial_photography_art_and_graphics'
        | 'commuter_transport_and_ferries'
        | 'computer_network_services'
        | 'computer_programming'
        | 'computer_repair'
        | 'computer_software_stores'
        | 'computers_peripherals_and_software'
        | 'concrete_work_services'
        | 'construction_materials'
        | 'consulting_public_relations'
        | 'correspondence_schools'
        | 'cosmetic_stores'
        | 'counseling_services'
        | 'country_clubs'
        | 'courier_services'
        | 'court_costs'
        | 'credit_reporting_agencies'
        | 'cruise_lines'
        | 'dairy_products_stores'
        | 'dance_hall_studios_schools'
        | 'dating_escort_services'
        | 'dentists_orthodontists'
        | 'department_stores'
        | 'detective_agencies'
        | 'digital_goods_applications'
        | 'digital_goods_games'
        | 'digital_goods_large_volume'
        | 'digital_goods_media'
        | 'direct_marketing_catalog_merchant'
        | 'direct_marketing_combination_catalog_and_retail_merchant'
        | 'direct_marketing_inbound_telemarketing'
        | 'direct_marketing_insurance_services'
        | 'direct_marketing_other'
        | 'direct_marketing_outbound_telemarketing'
        | 'direct_marketing_subscription'
        | 'direct_marketing_travel'
        | 'discount_stores'
        | 'doctors'
        | 'door_to_door_sales'
        | 'drapery_window_covering_and_upholstery_stores'
        | 'drinking_places'
        | 'drug_stores_and_pharmacies'
        | 'drugs_drug_proprietaries_and_druggist_sundries'
        | 'dry_cleaners'
        | 'durable_goods'
        | 'duty_free_stores'
        | 'eating_places_restaurants'
        | 'educational_services'
        | 'electric_razor_stores'
        | 'electric_vehicle_charging'
        | 'electrical_parts_and_equipment'
        | 'electrical_services'
        | 'electronics_repair_shops'
        | 'electronics_stores'
        | 'elementary_secondary_schools'
        | 'emergency_services_gcas_visa_use_only'
        | 'employment_temp_agencies'
        | 'equipment_rental'
        | 'exterminating_services'
        | 'family_clothing_stores'
        | 'fast_food_restaurants'
        | 'financial_institutions'
        | 'fines_government_administrative_entities'
        | 'fireplace_fireplace_screens_and_accessories_stores'
        | 'floor_covering_stores'
        | 'florists'
        | 'florists_supplies_nursery_stock_and_flowers'
        | 'freezer_and_locker_meat_provisioners'
        | 'fuel_dealers_non_automotive'
        | 'funeral_services_crematories'
        | 'furniture_home_furnishings_and_equipment_stores_except_appliances'
        | 'furniture_repair_refinishing'
        | 'furriers_and_fur_shops'
        | 'general_services'
        | 'gift_card_novelty_and_souvenir_shops'
        | 'glass_paint_and_wallpaper_stores'
        | 'glassware_crystal_stores'
        | 'golf_courses_public'
        | 'government_licensed_horse_dog_racing_us_region_only'
        | 'government_licensed_online_casions_online_gambling_us_region_only'
        | 'government_owned_lotteries_non_us_region'
        | 'government_owned_lotteries_us_region_only'
        | 'government_services'
        | 'grocery_stores_supermarkets'
        | 'hardware_equipment_and_supplies'
        | 'hardware_stores'
        | 'health_and_beauty_spas'
        | 'hearing_aids_sales_and_supplies'
        | 'heating_plumbing_a_c'
        | 'hobby_toy_and_game_shops'
        | 'home_supply_warehouse_stores'
        | 'hospitals'
        | 'hotels_motels_and_resorts'
        | 'household_appliance_stores'
        | 'industrial_supplies'
        | 'information_retrieval_services'
        | 'insurance_default'
        | 'insurance_underwriting_premiums'
        | 'intra_company_purchases'
        | 'jewelry_stores_watches_clocks_and_silverware_stores'
        | 'landscaping_services'
        | 'laundries'
        | 'laundry_cleaning_services'
        | 'legal_services_attorneys'
        | 'luggage_and_leather_goods_stores'
        | 'lumber_building_materials_stores'
        | 'manual_cash_disburse'
        | 'marinas_service_and_supplies'
        | 'marketplaces'
        | 'masonry_stonework_and_plaster'
        | 'massage_parlors'
        | 'medical_and_dental_labs'
        | 'medical_dental_ophthalmic_and_hospital_equipment_and_supplies'
        | 'medical_services'
        | 'membership_organizations'
        | 'mens_and_boys_clothing_and_accessories_stores'
        | 'mens_womens_clothing_stores'
        | 'metal_service_centers'
        | 'miscellaneous'
        | 'miscellaneous_apparel_and_accessory_shops'
        | 'miscellaneous_auto_dealers'
        | 'miscellaneous_business_services'
        | 'miscellaneous_food_stores'
        | 'miscellaneous_general_merchandise'
        | 'miscellaneous_general_services'
        | 'miscellaneous_home_furnishing_specialty_stores'
        | 'miscellaneous_publishing_and_printing'
        | 'miscellaneous_recreation_services'
        | 'miscellaneous_repair_shops'
        | 'miscellaneous_specialty_retail'
        | 'mobile_home_dealers'
        | 'motion_picture_theaters'
        | 'motor_freight_carriers_and_trucking'
        | 'motor_homes_dealers'
        | 'motor_vehicle_supplies_and_new_parts'
        | 'motorcycle_shops_and_dealers'
        | 'motorcycle_shops_dealers'
        | 'music_stores_musical_instruments_pianos_and_sheet_music'
        | 'news_dealers_and_newsstands'
        | 'non_fi_money_orders'
        | 'non_fi_stored_value_card_purchase_load'
        | 'nondurable_goods'
        | 'nurseries_lawn_and_garden_supply_stores'
        | 'nursing_personal_care'
        | 'office_and_commercial_furniture'
        | 'opticians_eyeglasses'
        | 'optometrists_ophthalmologist'
        | 'orthopedic_goods_prosthetic_devices'
        | 'osteopaths'
        | 'package_stores_beer_wine_and_liquor'
        | 'paints_varnishes_and_supplies'
        | 'parking_lots_garages'
        | 'passenger_railways'
        | 'pawn_shops'
        | 'pet_shops_pet_food_and_supplies'
        | 'petroleum_and_petroleum_products'
        | 'photo_developing'
        | 'photographic_photocopy_microfilm_equipment_and_supplies'
        | 'photographic_studios'
        | 'picture_video_production'
        | 'piece_goods_notions_and_other_dry_goods'
        | 'plumbing_heating_equipment_and_supplies'
        | 'political_organizations'
        | 'postal_services_government_only'
        | 'precious_stones_and_metals_watches_and_jewelry'
        | 'professional_services'
        | 'public_warehousing_and_storage'
        | 'quick_copy_repro_and_blueprint'
        | 'railroads'
        | 'real_estate_agents_and_managers_rentals'
        | 'record_stores'
        | 'recreational_vehicle_rentals'
        | 'religious_goods_stores'
        | 'religious_organizations'
        | 'roofing_siding_sheet_metal'
        | 'secretarial_support_services'
        | 'security_brokers_dealers'
        | 'service_stations'
        | 'sewing_needlework_fabric_and_piece_goods_stores'
        | 'shoe_repair_hat_cleaning'
        | 'shoe_stores'
        | 'small_appliance_repair'
        | 'snowmobile_dealers'
        | 'special_trade_services'
        | 'specialty_cleaning'
        | 'sporting_goods_stores'
        | 'sporting_recreation_camps'
        | 'sports_and_riding_apparel_stores'
        | 'sports_clubs_fields'
        | 'stamp_and_coin_stores'
        | 'stationary_office_supplies_printing_and_writing_paper'
        | 'stationery_stores_office_and_school_supply_stores'
        | 'swimming_pools_sales'
        | 't_ui_travel_germany'
        | 'tailors_alterations'
        | 'tax_payments_government_agencies'
        | 'tax_preparation_services'
        | 'taxicabs_limousines'
        | 'telecommunication_equipment_and_telephone_sales'
        | 'telecommunication_services'
        | 'telegraph_services'
        | 'tent_and_awning_shops'
        | 'testing_laboratories'
        | 'theatrical_ticket_agencies'
        | 'timeshares'
        | 'tire_retreading_and_repair'
        | 'tolls_bridge_fees'
        | 'tourist_attractions_and_exhibits'
        | 'towing_services'
        | 'trailer_parks_campgrounds'
        | 'transportation_services'
        | 'travel_agencies_tour_operators'
        | 'truck_stop_iteration'
        | 'truck_utility_trailer_rentals'
        | 'typesetting_plate_making_and_related_services'
        | 'typewriter_stores'
        | 'u_s_federal_government_agencies_or_departments'
        | 'uniforms_commercial_clothing'
        | 'used_merchandise_and_secondhand_stores'
        | 'utilities'
        | 'variety_stores'
        | 'veterinary_services'
        | 'video_amusement_game_supplies'
        | 'video_game_arcades'
        | 'video_tape_rental_stores'
        | 'vocational_trade_schools'
        | 'watch_jewelry_repair'
        | 'welding_repair'
        | 'wholesale_clubs'
        | 'wig_and_toupee_stores'
        | 'wires_money_orders'
        | 'womens_accessory_and_specialty_shops'
        | 'womens_ready_to_wear_stores'
        | 'wrecking_and_salvage_yards'
      )[]
    | null;
  /**
   * Interval (or event) to which the amount applies.
   */
  interval:
    | 'all_time'
    | 'daily'
    | 'monthly'
    | 'per_authorization'
    | 'weekly'
    | 'yearly';
};
/**
 * IssuingCardholderUserTermsAcceptance
 */
export type IssuingCardholderUserTermsAcceptance = {
  /**
   * The Unix timestamp marking when the cardholder accepted the Authorized User Terms.
   */
  date?: number | null;
  /**
   * The IP address from which the cardholder accepted the Authorized User Terms.
   */
  ip?: string | null;
  /**
   * The user agent of the browser from which the cardholder accepted the Authorized User Terms.
   */
  user_agent?: string | null;
};
/**
 * IssuingCardholderVerification
 */
export type IssuingCardholderVerification = {
  /**
   * An identifying document, either a passport or local ID card.
   */
  document?: IssuingCardholderIdDocument | null;
};
/**
 * IssuingDisputeCanceledEvidence
 */
export type IssuingDisputeCanceledEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * Date when order was canceled.
   */
  canceled_at?: number | null;
  /**
   * Whether the cardholder was provided with a cancellation policy.
   */
  cancellation_policy_provided?: boolean | null;
  /**
   * Reason for canceling the order.
   */
  cancellation_reason?: string | null;
  /**
   * Date when the cardholder expected to receive the product.
   */
  expected_at?: number | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
  /**
   * Description of the merchandise or service that was purchased.
   */
  product_description?: string | null;
  /**
   * Whether the product was a merchandise or service.
   */
  product_type?: ('merchandise' | 'service') | null;
  /**
   * Result of cardholder's attempt to return the product.
   */
  return_status?: ('merchant_rejected' | 'successful') | null;
  /**
   * Date when the product was returned or attempted to be returned.
   */
  returned_at?: number | null;
};
/**
 * IssuingDisputeDuplicateEvidence
 */
export type IssuingDisputeDuplicateEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the card statement showing that the product had already been paid for.
   */
  card_statement?: (string | File) | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Copy of the receipt showing that the product had been paid for in cash.
   */
  cash_receipt?: (string | File) | null;
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Image of the front and back of the check that was used to pay for the product.
   */
  check_image?: (string | File) | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
  /**
   * Transaction (e.g., ipi_...) that the disputed transaction is a duplicate of. Of the two or more transactions that are copies of each other, this is original undisputed one.
   */
  original_transaction?: string | null;
};
/**
 * IssuingDisputeEvidence
 */
export type IssuingDisputeEvidence = {
  canceled?: IssuingDisputeCanceledEvidence;
  duplicate?: IssuingDisputeDuplicateEvidence;
  fraudulent?: IssuingDisputeFraudulentEvidence;
  merchandise_not_as_described?: IssuingDisputeMerchandiseNotAsDescribedEvidence;
  no_valid_authorization?: IssuingDisputeNoValidAuthorizationEvidence;
  not_received?: IssuingDisputeNotReceivedEvidence;
  other?: IssuingDisputeOtherEvidence;
  /**
   * The reason for filing the dispute. Its value will match the field containing the evidence.
   */
  reason:
    | 'canceled'
    | 'duplicate'
    | 'fraudulent'
    | 'merchandise_not_as_described'
    | 'no_valid_authorization'
    | 'not_received'
    | 'other'
    | 'service_not_as_described';
  service_not_as_described?: IssuingDisputeServiceNotAsDescribedEvidence;
};
/**
 * IssuingDisputeFraudulentEvidence
 */
export type IssuingDisputeFraudulentEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
};
/**
 * IssuingDisputeMerchandiseNotAsDescribedEvidence
 */
export type IssuingDisputeMerchandiseNotAsDescribedEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
  /**
   * Date when the product was received.
   */
  received_at?: number | null;
  /**
   * Description of the cardholder's attempt to return the product.
   */
  return_description?: string | null;
  /**
   * Result of cardholder's attempt to return the product.
   */
  return_status?: ('merchant_rejected' | 'successful') | null;
  /**
   * Date when the product was returned or attempted to be returned.
   */
  returned_at?: number | null;
};
/**
 * IssuingDisputeNoValidAuthorizationEvidence
 */
export type IssuingDisputeNoValidAuthorizationEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
};
/**
 * IssuingDisputeNotReceivedEvidence
 */
export type IssuingDisputeNotReceivedEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * Date when the cardholder expected to receive the product.
   */
  expected_at?: number | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
  /**
   * Description of the merchandise or service that was purchased.
   */
  product_description?: string | null;
  /**
   * Whether the product was a merchandise or service.
   */
  product_type?: ('merchandise' | 'service') | null;
};
/**
 * IssuingDisputeOtherEvidence
 */
export type IssuingDisputeOtherEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
  /**
   * Description of the merchandise or service that was purchased.
   */
  product_description?: string | null;
  /**
   * Whether the product was a merchandise or service.
   */
  product_type?: ('merchandise' | 'service') | null;
};
/**
 * IssuingDisputeServiceNotAsDescribedEvidence
 */
export type IssuingDisputeServiceNotAsDescribedEvidence = {
  /**
   * (ID of a [file upload](https://stripe.com/docs/guides/file-upload)) Additional documentation supporting the dispute.
   */
  additional_documentation?: (string | File) | null;
  /**
   * Date when order was canceled.
   */
  canceled_at?: number | null;
  /**
   * Reason for canceling the order.
   */
  cancellation_reason?: string | null;
  /**
   * Explanation of why the cardholder is disputing this transaction.
   */
  explanation?: string | null;
  /**
   * Date when the product was received.
   */
  received_at?: number | null;
};
/**
 * IssuingDisputeTreasury
 */
export type IssuingDisputeTreasury = {
  /**
   * The Treasury [DebitReversal](https://stripe.com/docs/api/treasury/debit_reversals) representing this Issuing dispute
   */
  debit_reversal?: string | null;
  /**
   * The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) that is being disputed.
   */
  received_debit: string;
};
/**
 * IssuingNetworkTokenAddress
 */
export type IssuingNetworkTokenAddress = {
  /**
   * The street address of the cardholder tokenizing the card.
   */
  line1: string;
  /**
   * The postal code of the cardholder tokenizing the card.
   */
  postal_code: string;
};
/**
 * IssuingNetworkTokenDevice
 */
export type IssuingNetworkTokenDevice = {
  /**
   * An obfuscated ID derived from the device ID.
   */
  device_fingerprint?: string;
  /**
   * The IP address of the device at provisioning time.
   */
  ip_address?: string;
  /**
   * The geographic latitude/longitude coordinates of the device at provisioning time. The format is [+-]decimal/[+-]decimal.
   */
  location?: string;
  /**
   * The name of the device used for tokenization.
   */
  name?: string;
  /**
   * The phone number of the device used for tokenization.
   */
  phone_number?: string;
  /**
   * The type of device used for tokenization.
   */
  type?: 'other' | 'phone' | 'watch';
};
/**
 * IssuingNetworkTokenMastercard
 */
export type IssuingNetworkTokenMastercard = {
  /**
   * A unique reference ID from MasterCard to represent the card account number.
   */
  card_reference_id?: string;
  /**
   * The network-unique identifier for the token.
   */
  token_reference_id: string;
  /**
   * The ID of the entity requesting tokenization, specific to MasterCard.
   */
  token_requestor_id: string;
  /**
   * The name of the entity requesting tokenization, if known. This is directly provided from MasterCard.
   */
  token_requestor_name?: string;
};
/**
 * IssuingNetworkTokenNetworkData
 */
export type IssuingNetworkTokenNetworkData = {
  device?: IssuingNetworkTokenDevice;
  mastercard?: IssuingNetworkTokenMastercard;
  /**
   * The network that the token is associated with. An additional hash is included with a name matching this value, containing tokenization data specific to the card network.
   */
  type: 'mastercard' | 'visa';
  visa?: IssuingNetworkTokenVisa;
  wallet_provider?: IssuingNetworkTokenWalletProvider;
};
/**
 * IssuingNetworkTokenVisa
 */
export type IssuingNetworkTokenVisa = {
  /**
   * A unique reference ID from Visa to represent the card account number.
   */
  card_reference_id: string;
  /**
   * The network-unique identifier for the token.
   */
  token_reference_id: string;
  /**
   * The ID of the entity requesting tokenization, specific to Visa.
   */
  token_requestor_id: string;
  /**
   * Degree of risk associated with the token between `01` and `99`, with higher number indicating higher risk. A `00` value indicates the token was not scored by Visa.
   */
  token_risk_score?: string;
};
/**
 * IssuingNetworkTokenWalletProvider
 */
export type IssuingNetworkTokenWalletProvider = {
  /**
   * The wallet provider-given account ID of the digital wallet the token belongs to.
   */
  account_id?: string;
  /**
   * An evaluation on the trustworthiness of the wallet account between 1 and 5. A higher score indicates more trustworthy.
   */
  account_trust_score?: number;
  /**
   * The method used for tokenizing a card.
   */
  card_number_source?: 'app' | 'manual' | 'on_file' | 'other';
  cardholder_address?: IssuingNetworkTokenAddress;
  /**
   * The name of the cardholder tokenizing the card.
   */
  cardholder_name?: string;
  /**
   * An evaluation on the trustworthiness of the device. A higher score indicates more trustworthy.
   */
  device_trust_score?: number;
  /**
   * The hashed email address of the cardholder's account with the wallet provider.
   */
  hashed_account_email_address?: string;
  /**
   * The reasons for suggested tokenization given by the card network.
   */
  reason_codes?: (
    | 'account_card_too_new'
    | 'account_recently_changed'
    | 'account_too_new'
    | 'account_too_new_since_launch'
    | 'additional_device'
    | 'data_expired'
    | 'defer_id_v_decision'
    | 'device_recently_lost'
    | 'good_activity_history'
    | 'has_suspended_tokens'
    | 'high_risk'
    | 'inactive_account'
    | 'long_account_tenure'
    | 'low_account_score'
    | 'low_device_score'
    | 'low_phone_number_score'
    | 'network_service_error'
    | 'outside_home_territory'
    | 'provisioning_cardholder_mismatch'
    | 'provisioning_device_and_cardholder_mismatch'
    | 'provisioning_device_mismatch'
    | 'same_device_no_prior_authentication'
    | 'same_device_successful_prior_authentication'
    | 'software_update'
    | 'suspicious_activity'
    | 'too_many_different_cardholders'
    | 'too_many_recent_attempts'
    | 'too_many_recent_tokens'
  )[];
  /**
   * The recommendation on responding to the tokenization request.
   */
  suggested_decision?: 'approve' | 'decline' | 'require_auth';
  /**
   * The version of the standard for mapping reason codes followed by the wallet provider.
   */
  suggested_decision_version?: string;
};
/**
 * IssuingPersonalizationDesignCarrierText
 */
export type IssuingPersonalizationDesignCarrierText = {
  /**
   * The footer body text of the carrier letter.
   */
  footer_body?: string | null;
  /**
   * The footer title text of the carrier letter.
   */
  footer_title?: string | null;
  /**
   * The header body text of the carrier letter.
   */
  header_body?: string | null;
  /**
   * The header title text of the carrier letter.
   */
  header_title?: string | null;
};
/**
 * IssuingPersonalizationDesignPreferences
 */
export type IssuingPersonalizationDesignPreferences = {
  /**
   * Whether we use this personalization design to create cards when one isn't specified. A connected account uses the Connect platform's default design if no personalization design is set as the default design.
   */
  is_default: boolean;
  /**
   * Whether this personalization design is used to create cards when one is not specified and a default for this connected account does not exist.
   */
  is_platform_default?: boolean | null;
};
/**
 * IssuingPersonalizationDesignRejectionReasons
 */
export type IssuingPersonalizationDesignRejectionReasons = {
  /**
   * The reason(s) the card logo was rejected.
   */
  card_logo?:
    | (
        | 'geographic_location'
        | 'inappropriate'
        | 'network_name'
        | 'non_binary_image'
        | 'non_fiat_currency'
        | 'other'
        | 'other_entity'
        | 'promotional_material'
      )[]
    | null;
  /**
   * The reason(s) the carrier text was rejected.
   */
  carrier_text?:
    | (
        | 'geographic_location'
        | 'inappropriate'
        | 'network_name'
        | 'non_fiat_currency'
        | 'other'
        | 'other_entity'
        | 'promotional_material'
      )[]
    | null;
};
/**
 * IssuingPhysicalBundleFeatures
 */
export type IssuingPhysicalBundleFeatures = {
  /**
   * The policy for how to use card logo images in a card design with this physical bundle.
   */
  card_logo: 'optional' | 'required' | 'unsupported';
  /**
   * The policy for how to use carrier letter text in a card design with this physical bundle.
   */
  carrier_text: 'optional' | 'required' | 'unsupported';
  /**
   * The policy for how to use a second line on a card with this physical bundle.
   */
  second_line: 'optional' | 'required' | 'unsupported';
};
/**
 * IssuingTransactionAmountDetails
 */
export type IssuingTransactionAmountDetails = {
  /**
   * The fee charged by the ATM for the cash withdrawal.
   */
  atm_fee?: number | null;
  /**
   * The amount of cash requested by the cardholder.
   */
  cashback_amount?: number | null;
};
/**
 * IssuingTransactionFleetCardholderPromptData
 */
export type IssuingTransactionFleetCardholderPromptData = {
  /**
   * Driver ID.
   */
  driver_id?: string | null;
  /**
   * Odometer reading.
   */
  odometer?: number | null;
  /**
   * An alphanumeric ID. This field is used when a vehicle ID, driver ID, or generic ID is entered by the cardholder, but the merchant or card network did not specify the prompt type.
   */
  unspecified_id?: string | null;
  /**
   * User ID.
   */
  user_id?: string | null;
  /**
   * Vehicle number.
   */
  vehicle_number?: string | null;
};
/**
 * IssuingTransactionFleetData
 */
export type IssuingTransactionFleetData = {
  /**
   * Answers to prompts presented to cardholder at point of sale.
   */
  cardholder_prompt_data?: IssuingTransactionFleetCardholderPromptData | null;
  /**
   * The type of purchase. One of `fuel_purchase`, `non_fuel_purchase`, or `fuel_and_non_fuel_purchase`.
   */
  purchase_type?: string | null;
  /**
   * More information about the total amount. This information is not guaranteed to be accurate as some merchants may provide unreliable data.
   */
  reported_breakdown?: IssuingTransactionFleetReportedBreakdown | null;
  /**
   * The type of fuel service. One of `non_fuel_transaction`, `full_service`, or `self_service`.
   */
  service_type?: string | null;
};
/**
 * IssuingTransactionFleetFuelPriceData
 */
export type IssuingTransactionFleetFuelPriceData = {
  /**
   * Gross fuel amount that should equal Fuel Volume multipled by Fuel Unit Cost, inclusive of taxes.
   */
  gross_amount_decimal?: string | null;
};
/**
 * IssuingTransactionFleetNonFuelPriceData
 */
export type IssuingTransactionFleetNonFuelPriceData = {
  /**
   * Gross non-fuel amount that should equal the sum of the line items, inclusive of taxes.
   */
  gross_amount_decimal?: string | null;
};
/**
 * IssuingTransactionFleetReportedBreakdown
 */
export type IssuingTransactionFleetReportedBreakdown = {
  /**
   * Breakdown of fuel portion of the purchase.
   */
  fuel?: IssuingTransactionFleetFuelPriceData | null;
  /**
   * Breakdown of non-fuel portion of the purchase.
   */
  non_fuel?: IssuingTransactionFleetNonFuelPriceData | null;
  /**
   * Information about tax included in this transaction.
   */
  tax?: IssuingTransactionFleetTaxData | null;
};
/**
 * IssuingTransactionFleetTaxData
 */
export type IssuingTransactionFleetTaxData = {
  /**
   * Amount of state or provincial Sales Tax included in the transaction amount. Null if not reported by merchant or not subject to tax.
   */
  local_amount_decimal?: string | null;
  /**
   * Amount of national Sales Tax or VAT included in the transaction amount. Null if not reported by merchant or not subject to tax.
   */
  national_amount_decimal?: string | null;
};
/**
 * IssuingTransactionFlightData
 */
export type IssuingTransactionFlightData = {
  /**
   * The time that the flight departed.
   */
  departure_at?: number | null;
  /**
   * The name of the passenger.
   */
  passenger_name?: string | null;
  /**
   * Whether the ticket is refundable.
   */
  refundable?: boolean | null;
  /**
   * The legs of the trip.
   */
  segments?: IssuingTransactionFlightDataLeg[] | null;
  /**
   * The travel agency that issued the ticket.
   */
  travel_agency?: string | null;
};
/**
 * IssuingTransactionFlightDataLeg
 */
export type IssuingTransactionFlightDataLeg = {
  /**
   * The three-letter IATA airport code of the flight's destination.
   */
  arrival_airport_code?: string | null;
  /**
   * The airline carrier code.
   */
  carrier?: string | null;
  /**
   * The three-letter IATA airport code that the flight departed from.
   */
  departure_airport_code?: string | null;
  /**
   * The flight number.
   */
  flight_number?: string | null;
  /**
   * The flight's service class.
   */
  service_class?: string | null;
  /**
   * Whether a stopover is allowed on this flight.
   */
  stopover_allowed?: boolean | null;
};
/**
 * IssuingTransactionFuelData
 */
export type IssuingTransactionFuelData = {
  /**
   * [Conexxus Payment System Product Code](https://www.conexxus.org/conexxus-payment-system-product-codes) identifying the primary fuel product purchased.
   */
  industry_product_code?: string | null;
  /**
   * The quantity of `unit`s of fuel that was dispensed, represented as a decimal string with at most 12 decimal places.
   */
  quantity_decimal?: string | null;
  /**
   * The type of fuel that was purchased. One of `diesel`, `unleaded_plus`, `unleaded_regular`, `unleaded_super`, or `other`.
   */
  type: string;
  /**
   * The units for `quantity_decimal`. One of `charging_minute`, `imperial_gallon`, `kilogram`, `kilowatt_hour`, `liter`, `pound`, `us_gallon`, or `other`.
   */
  unit: string;
  /**
   * The cost in cents per each unit of fuel, represented as a decimal string with at most 12 decimal places.
   */
  unit_cost_decimal: string;
};
/**
 * IssuingTransactionLodgingData
 */
export type IssuingTransactionLodgingData = {
  /**
   * The time of checking into the lodging.
   */
  check_in_at?: number | null;
  /**
   * The number of nights stayed at the lodging.
   */
  nights?: number | null;
};
/**
 * IssuingTransactionNetworkData
 */
export type IssuingTransactionNetworkData = {
  /**
   * A code created by Stripe which is shared with the merchant to validate the authorization. This field will be populated if the authorization message was approved. The code typically starts with the letter "S", followed by a six-digit number. For example, "S498162". Please note that the code is not guaranteed to be unique across authorizations.
   */
  authorization_code?: string | null;
  /**
   * The date the transaction was processed by the card network. This can be different from the date the seller recorded the transaction depending on when the acquirer submits the transaction to the network.
   */
  processing_date?: string | null;
  /**
   * Unique identifier for the authorization assigned by the card network used to match subsequent messages, disputes, and transactions.
   */
  transaction_id?: string | null;
};
/**
 * IssuingTransactionPurchaseDetails
 */
export type IssuingTransactionPurchaseDetails = {
  /**
   * Fleet-specific information for transactions using Fleet cards.
   */
  fleet?: IssuingTransactionFleetData | null;
  /**
   * Information about the flight that was purchased with this transaction.
   */
  flight?: IssuingTransactionFlightData | null;
  /**
   * Information about fuel that was purchased with this transaction.
   */
  fuel?: IssuingTransactionFuelData | null;
  /**
   * Information about lodging that was purchased with this transaction.
   */
  lodging?: IssuingTransactionLodgingData | null;
  /**
   * The line items in the purchase.
   */
  receipt?: IssuingTransactionReceiptData[] | null;
  /**
   * A merchant-specific order number.
   */
  reference?: string | null;
};
/**
 * IssuingTransactionReceiptData
 */
export type IssuingTransactionReceiptData = {
  /**
   * The description of the item. The maximum length of this field is 26 characters.
   */
  description?: string | null;
  /**
   * The quantity of the item.
   */
  quantity?: number | null;
  /**
   * The total for this line item in cents.
   */
  total?: number | null;
  /**
   * The unit cost of the item in cents.
   */
  unit_cost?: number | null;
};
/**
 * IssuingTransactionTreasury
 */
export type IssuingTransactionTreasury = {
  /**
   * The Treasury [ReceivedCredit](https://stripe.com/docs/api/treasury/received_credits) representing this Issuing transaction if it is a refund
   */
  received_credit?: string | null;
  /**
   * The Treasury [ReceivedDebit](https://stripe.com/docs/api/treasury/received_debits) representing this Issuing transaction if it is a capture
   */
  received_debit?: string | null;
};
/**
 * LineItem
 * A line item.
 */
export type Item = {
  /**
   * Total discount amount applied. If no discounts were applied, defaults to 0.
   */
  amount_discount: number;
  /**
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /**
   * Total tax amount applied. If no tax was applied, defaults to 0.
   */
  amount_tax: number;
  /**
   * Total after discounts and taxes.
   */
  amount_total: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users. Defaults to product name.
   */
  description?: string | null;
  /**
   * The discounts applied to the line item.
   */
  discounts?: LineItemsDiscountAmount[];
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'item';
  /**
   * The price used to generate the line item.
   */
  price?: Price | null;
  /**
   * The quantity of products being purchased.
   */
  quantity?: number | null;
  /**
   * The taxes applied to the line item.
   */
  taxes?: LineItemsTaxAmount[];
};
/**
 * klarna_address
 */
export type KlarnaAddress = {
  /**
   * The payer address country
   */
  country?: string | null;
};
/**
 * klarna_payer_details
 */
export type KlarnaPayerDetails = {
  /**
   * The payer's address
   */
  address?: KlarnaAddress | null;
};
/**
 * LegalEntityCompany
 */
export type LegalEntityCompany = {
  address?: Address;
  /**
   * The Kana variation of the company's primary address (Japan only).
   */
  address_kana?: LegalEntityJapanAddress | null;
  /**
   * The Kanji variation of the company's primary address (Japan only).
   */
  address_kanji?: LegalEntityJapanAddress | null;
  /**
   * Whether the company's directors have been provided. This Boolean will be `true` if you've manually indicated that all directors are provided via [the `directors_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-directors_provided).
   */
  directors_provided?: boolean;
  /**
   * This hash is used to attest that the director information provided to Stripe is both current and correct.
   */
  directorship_declaration?: LegalEntityDirectorshipDeclaration | null;
  /**
   * Whether the company's executives have been provided. This Boolean will be `true` if you've manually indicated that all executives are provided via [the `executives_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-executives_provided), or if Stripe determined that sufficient executives were provided.
   */
  executives_provided?: boolean;
  /**
   * The export license ID number of the company, also referred as Import Export Code (India only).
   */
  export_license_id?: string;
  /**
   * The purpose code to use for export transactions (India only).
   */
  export_purpose_code?: string;
  /**
   * The company's legal name. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  name?: string | null;
  /**
   * The Kana variation of the company's legal name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  name_kana?: string | null;
  /**
   * The Kanji variation of the company's legal name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  name_kanji?: string | null;
  /**
   * Whether the company's owners have been provided. This Boolean will be `true` if you've manually indicated that all owners are provided via [the `owners_provided` parameter](https://stripe.com/docs/api/accounts/update#update_account-company-owners_provided), or if Stripe determined that sufficient owners were provided. Stripe determines ownership requirements using both the number of owners provided and their total percent ownership (calculated by adding the `percent_ownership` of each owner together).
   */
  owners_provided?: boolean;
  /**
   * This hash is used to attest that the beneficial owner information provided to Stripe is both current and correct.
   */
  ownership_declaration?: LegalEntityUboDeclaration | null;
  /**
   * This value is used to determine if a business is exempt from providing ultimate beneficial owners. See [this support article](https://support.stripe.com/questions/exemption-from-providing-ownership-details) and [changelog](https://docs.stripe.com/changelog/acacia/2025-01-27/ownership-exemption-reason-accounts-api) for more details.
   */
  ownership_exemption_reason?:
    | 'qualified_entity_exceeds_ownership_threshold'
    | 'qualifies_as_financial_institution';
  /**
   * The company's phone number (used for verification).
   */
  phone?: string | null;
  registration_date?: LegalEntityRegistrationDate;
  /**
   * The category identifying the legal structure of the company or legal entity. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`. See [Business structure](https://stripe.com/docs/connect/identity-verification#business-structure) for more details.
   */
  structure?:
    | 'free_zone_establishment'
    | 'free_zone_llc'
    | 'government_instrumentality'
    | 'governmental_unit'
    | 'incorporated_non_profit'
    | 'incorporated_partnership'
    | 'limited_liability_partnership'
    | 'llc'
    | 'multi_member_llc'
    | 'private_company'
    | 'private_corporation'
    | 'private_partnership'
    | 'public_company'
    | 'public_corporation'
    | 'public_partnership'
    | 'registered_charity'
    | 'single_member_llc'
    | 'sole_establishment'
    | 'sole_proprietorship'
    | 'tax_exempt_government_instrumentality'
    | 'unincorporated_association'
    | 'unincorporated_non_profit'
    | 'unincorporated_partnership';
  /**
   * Whether the company's business ID number was provided.
   */
  tax_id_provided?: boolean;
  /**
   * The jurisdiction in which the `tax_id` is registered (Germany-based companies only).
   */
  tax_id_registrar?: string;
  /**
   * Whether the company's business VAT number was provided.
   */
  vat_id_provided?: boolean;
  /**
   * Information on the verification state of the company.
   */
  verification?: LegalEntityCompanyVerification | null;
};
/**
 * LegalEntityCompanyVerification
 */
export type LegalEntityCompanyVerification = {
  document: LegalEntityCompanyVerificationDocument;
};
/**
 * LegalEntityCompanyVerificationDocument
 */
export type LegalEntityCompanyVerificationDocument = {
  /**
   * The back of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
   */
  back?: (string | File) | null;
  /**
   * A user-displayable string describing the verification state of this document.
   */
  details?: string | null;
  /**
   * One of `document_corrupt`, `document_expired`, `document_failed_copy`, `document_failed_greyscale`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_not_readable`, `document_not_uploaded`, `document_type_not_supported`, or `document_too_large`. A machine-readable code specifying the verification state for this document.
   */
  details_code?: string | null;
  /**
   * The front of a document returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `additional_verification`.
   */
  front?: (string | File) | null;
};
/**
 * LegalEntityDirectorshipDeclaration
 */
export type LegalEntityDirectorshipDeclaration = {
  /**
   * The Unix timestamp marking when the directorship declaration attestation was made.
   */
  date?: number | null;
  /**
   * The IP address from which the directorship declaration attestation was made.
   */
  ip?: string | null;
  /**
   * The user-agent string from the browser where the directorship declaration attestation was made.
   */
  user_agent?: string | null;
};
/**
 * LegalEntityDOB
 */
export type LegalEntityDob = {
  /**
   * The day of birth, between 1 and 31.
   */
  day?: number | null;
  /**
   * The month of birth, between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year of birth.
   */
  year?: number | null;
};
/**
 * LegalEntityJapanAddress
 */
export type LegalEntityJapanAddress = {
  /**
   * City/Ward.
   */
  city?: string | null;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country?: string | null;
  /**
   * Block/Building number.
   */
  line1?: string | null;
  /**
   * Building details.
   */
  line2?: string | null;
  /**
   * ZIP or postal code.
   */
  postal_code?: string | null;
  /**
   * Prefecture.
   */
  state?: string | null;
  /**
   * Town/cho-me.
   */
  town?: string | null;
};
/**
 * LegalEntityPersonVerification
 */
export type LegalEntityPersonVerification = {
  /**
   * A document showing address, either a passport, local ID card, or utility bill from a well-known utility company.
   */
  additional_document?: LegalEntityPersonVerificationDocument | null;
  /**
   * A user-displayable string describing the verification state for the person. For example, this may say "Provided identity information could not be verified".
   */
  details?: string | null;
  /**
   * One of `document_address_mismatch`, `document_dob_mismatch`, `document_duplicate_type`, `document_id_number_mismatch`, `document_name_mismatch`, `document_nationality_mismatch`, `failed_keyed_identity`, or `failed_other`. A machine-readable code specifying the verification state for the person.
   */
  details_code?: string | null;
  document?: LegalEntityPersonVerificationDocument;
  /**
   * The state of verification for the person. Possible values are `unverified`, `pending`, or `verified`. Please refer [guide](https://stripe.com/docs/connect/handling-api-verification) to handle verification updates.
   */
  status: string;
};
/**
 * LegalEntityPersonVerificationDocument
 */
export type LegalEntityPersonVerificationDocument = {
  /**
   * The back of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  back?: (string | File) | null;
  /**
   * A user-displayable string describing the verification state of this document. For example, if a document is uploaded and the picture is too fuzzy, this may say "Identity document is too unclear to read".
   */
  details?: string | null;
  /**
   * One of `document_corrupt`, `document_country_not_supported`, `document_expired`, `document_failed_copy`, `document_failed_other`, `document_failed_test_mode`, `document_fraudulent`, `document_failed_greyscale`, `document_incomplete`, `document_invalid`, `document_manipulated`, `document_missing_back`, `document_missing_front`, `document_not_readable`, `document_not_uploaded`, `document_photo_mismatch`, `document_too_large`, or `document_type_not_supported`. A machine-readable code specifying the verification state for this document.
   */
  details_code?: string | null;
  /**
   * The front of an ID returned by a [file upload](https://stripe.com/docs/api#create_file) with a `purpose` value of `identity_document`.
   */
  front?: (string | File) | null;
};
/**
 * LegalEntityRegistrationDate
 */
export type LegalEntityRegistrationDate = {
  /**
   * The day of registration, between 1 and 31.
   */
  day?: number | null;
  /**
   * The month of registration, between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year of registration.
   */
  year?: number | null;
};
/**
 * LegalEntityUBODeclaration
 */
export type LegalEntityUboDeclaration = {
  /**
   * The Unix timestamp marking when the beneficial owner attestation was made.
   */
  date?: number | null;
  /**
   * The IP address from which the beneficial owner attestation was made.
   */
  ip?: string | null;
  /**
   * The user-agent string from the browser where the beneficial owner attestation was made.
   */
  user_agent?: string | null;
};
/**
 * InvoiceLineItem
 * Invoice Line Items represent the individual lines within an [invoice](https://stripe.com/docs/api/invoices) and only exist within the context of an invoice.
 *
 * Each line item is backed by either an [invoice item](https://stripe.com/docs/api/invoiceitems) or a [subscription item](https://stripe.com/docs/api/subscription_items).
 */
export type LineItem = {
  /**
   * The amount, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * The amount of discount calculated per discount for this line item.
   */
  discount_amounts?: DiscountsResourceDiscountAmount[] | null;
  /**
   * If true, discounts will apply to this line item. Always false for prorations.
   */
  discountable: boolean;
  /**
   * The discounts applied to the invoice line item. Line item discounts are applied before invoice discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts: (string | Discount)[];
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The ID of the invoice that contains this line item.
   */
  invoice?: string | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Note that for line items with `type=subscription`, `metadata` reflects the current metadata from the subscription associated with the line item, unless the invoice line was directly updated with different metadata after creation.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'line_item';
  /**
   * The parent that generated this line item.
   */
  parent?: BillingBillResourceInvoicingLinesParentsInvoiceLineItemParent | null;
  period: InvoiceLineItemPeriod;
  /**
   * Contains pretax credit amounts (ex: discount, credit grants, etc) that apply to this line item.
   */
  pretax_credit_amounts?: InvoicesResourcePretaxCreditAmount[] | null;
  /**
   * The pricing information of the line item.
   */
  pricing?: BillingBillResourceInvoicingPricingPricing | null;
  /**
   * The quantity of the subscription, if the line item is a subscription or a proration.
   */
  quantity?: number | null;
  subscription?: (string | Subscription) | null;
  /**
   * The tax information of the line item.
   */
  taxes?: BillingBillResourceInvoicingTaxesTax[] | null;
};
/**
 * LineItemsDiscountAmount
 */
export type LineItemsDiscountAmount = {
  /**
   * The amount discounted.
   */
  amount: number;
  discount: Discount;
};
/**
 * LineItemsTaxAmount
 */
export type LineItemsTaxAmount = {
  /**
   * Amount of tax applied for this rate.
   */
  amount: number;
  rate: TaxRate;
  /**
   * The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
   */
  taxability_reason?:
    | (
        | 'customer_exempt'
        | 'not_collecting'
        | 'not_subject_to_tax'
        | 'not_supported'
        | 'portion_product_exempt'
        | 'portion_reduced_rated'
        | 'portion_standard_rated'
        | 'product_exempt'
        | 'product_exempt_holiday'
        | 'proportionally_rated'
        | 'reduced_rated'
        | 'reverse_charge'
        | 'standard_rated'
        | 'taxable_basis_reduced'
        | 'zero_rated'
      )
    | null;
  /**
   * The amount on which tax is calculated, in cents (or local equivalent).
   */
  taxable_amount?: number | null;
};
/**
 * linked_account_options_common
 */
export type LinkedAccountOptionsCommon = {
  filters?: PaymentFlowsPrivatePaymentMethodsFinancialConnectionsCommonLinkedAccountOptionsFilters;
  /**
   * The list of permissions to request. The `payment_method` permission must be included.
   */
  permissions?: (
    | 'balances'
    | 'ownership'
    | 'payment_method'
    | 'transactions'
  )[];
  /**
   * Data features requested to be retrieved upon account creation.
   */
  prefetch?: ('balances' | 'ownership' | 'transactions')[] | null;
  /**
   * For webview integrations only. Upon completing OAuth login in the native browser, the user will be redirected to this URL to return to your app.
   */
  return_url?: string;
};
/**
 * LoginLink
 * Login Links are single-use URLs that takes an Express account to the login page for their Stripe dashboard.
 * A Login Link differs from an [Account Link](https://stripe.com/docs/api/account_links) in that it takes the user directly to their [Express dashboard for the specified account](https://stripe.com/docs/connect/integrate-express-dashboard#create-login-link)
 */
export type LoginLink = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'login_link';
  /**
   * The URL for the login link.
   */
  url: string;
};
/**
 * Mandate
 * A Mandate is a record of the permission that your customer gives you to debit their payment method.
 */
export type Mandate = {
  customer_acceptance: CustomerAcceptance;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  multi_use?: MandateMultiUse;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'mandate';
  /**
   * The account (if any) that the mandate is intended for.
   */
  on_behalf_of?: string;
  /**
   * ID of the payment method associated with this mandate.
   */
  payment_method: string | PaymentMethod;
  payment_method_details: MandatePaymentMethodDetails;
  single_use?: MandateSingleUse;
  /**
   * The mandate status indicates whether or not you can use it to initiate a payment.
   */
  status: 'active' | 'inactive' | 'pending';
  /**
   * The type of the mandate.
   */
  type: 'multi_use' | 'single_use';
};
/**
 * mandate_acss_debit
 */
export type MandateAcssDebit = {
  /**
   * List of Stripe products where this mandate can be selected automatically.
   */
  default_for?: ('invoice' | 'subscription')[];
  /**
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   */
  interval_description?: string | null;
  /**
   * Payment schedule for the mandate.
   */
  payment_schedule: 'combined' | 'interval' | 'sporadic';
  /**
   * Transaction type of the mandate.
   */
  transaction_type: 'business' | 'personal';
};
/**
 * mandate_amazon_pay
 */
export type MandateAmazonPay = unknown;
/**
 * mandate_au_becs_debit
 */
export type MandateAuBecsDebit = {
  /**
   * The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
   */
  url: string;
};
/**
 * mandate_bacs_debit
 */
export type MandateBacsDebit = {
  /**
   * The status of the mandate on the Bacs network. Can be one of `pending`, `revoked`, `refused`, or `accepted`.
   */
  network_status: 'accepted' | 'pending' | 'refused' | 'revoked';
  /**
   * The unique reference identifying the mandate on the Bacs network.
   */
  reference: string;
  /**
   * When the mandate is revoked on the Bacs network this field displays the reason for the revocation.
   */
  revocation_reason?:
    | (
        | 'account_closed'
        | 'bank_account_restricted'
        | 'bank_ownership_changed'
        | 'could_not_process'
        | 'debit_not_authorized'
      )
    | null;
  /**
   * The URL that will contain the mandate that the customer has signed.
   */
  url: string;
};
/**
 * mandate_cashapp
 */
export type MandateCashapp = unknown;
/**
 * mandate_kakao_pay
 */
export type MandateKakaoPay = unknown;
/**
 * mandate_kr_card
 */
export type MandateKrCard = unknown;
/**
 * mandate_link
 */
export type MandateLink = unknown;
/**
 * mandate_multi_use
 */
export type MandateMultiUse = unknown;
/**
 * mandate_naver_pay
 */
export type MandateNaverPay = unknown;
/**
 * mandate_nz_bank_account
 */
export type MandateNzBankAccount = unknown;
/**
 * mandate_payment_method_details
 */
export type MandatePaymentMethodDetails = {
  acss_debit?: MandateAcssDebit;
  amazon_pay?: MandateAmazonPay;
  au_becs_debit?: MandateAuBecsDebit;
  bacs_debit?: MandateBacsDebit;
  card?: CardMandatePaymentMethodDetails;
  cashapp?: MandateCashapp;
  kakao_pay?: MandateKakaoPay;
  kr_card?: MandateKrCard;
  link?: MandateLink;
  naver_pay?: MandateNaverPay;
  nz_bank_account?: MandateNzBankAccount;
  paypal?: MandatePaypal;
  revolut_pay?: MandateRevolutPay;
  sepa_debit?: MandateSepaDebit;
  /**
   * This mandate corresponds with a specific payment method type. The `payment_method_details` includes an additional hash with the same name and contains mandate information that's specific to that payment method.
   */
  type: string;
  us_bank_account?: MandateUsBankAccount;
};
/**
 * mandate_paypal
 */
export type MandatePaypal = {
  /**
   * The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
   */
  billing_agreement_id?: string | null;
  /**
   * PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
   */
  payer_id?: string | null;
};
/**
 * mandate_revolut_pay
 */
export type MandateRevolutPay = unknown;
/**
 * mandate_sepa_debit
 */
export type MandateSepaDebit = {
  /**
   * The unique reference of the mandate.
   */
  reference: string;
  /**
   * The URL of the mandate. This URL generally contains sensitive information about the customer and should be shared with them exclusively.
   */
  url: string;
};
/**
 * mandate_single_use
 */
export type MandateSingleUse = {
  /**
   * The amount of the payment on a single use mandate.
   */
  amount: number;
  /**
   * The currency of the payment on a single use mandate.
   */
  currency: string;
};
/**
 * mandate_us_bank_account
 */
export type MandateUsBankAccount = {
  /**
   * Mandate collection method
   */
  collection_method?: 'paper';
};
/**
 * networks
 */
export type Networks = {
  /**
   * All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network).
   */
  available: string[];
  /**
   * The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.
   */
  preferred?: string | null;
};
/**
 * NotificationEventData
 */
export type NotificationEventData = {
  /**
   * Object containing the API resource relevant to the event. For example, an `invoice.created` event will have a full [invoice object](https://stripe.com/docs/api#invoice_object) as the value of the object key.
   */
  object: unknown;
  /**
   * Object containing the names of the updated attributes and their values prior to the event (only included in events of type `*.updated`). If an array attribute has any updated elements, this object contains the entire array. In Stripe API versions 2017-04-06 or earlier, an updated array attribute in this object includes only the updated array elements.
   */
  previous_attributes?: unknown;
};
/**
 * NotificationEventRequest
 */
export type NotificationEventRequest = {
  /**
   * ID of the API request that caused the event. If null, the event was automatic (e.g., Stripe's automatic subscription handling). Request logs are available in the [dashboard](https://dashboard.stripe.com/logs), but currently not in the API.
   */
  id?: string | null;
  /**
   * The idempotency key transmitted during the request, if any. *Note: This property is populated only for events on or after May 23, 2017*.
   */
  idempotency_key?: string | null;
};
/**
 * offline_acceptance
 */
export type OfflineAcceptance = unknown;
/**
 * online_acceptance
 */
export type OnlineAcceptance = {
  /**
   * The customer accepts the mandate from this IP address.
   */
  ip_address?: string | null;
  /**
   * The customer accepts the mandate using the user agent of the browser.
   */
  user_agent?: string | null;
};
/**
 * OutboundPaymentsPaymentMethodDetails
 */
export type OutboundPaymentsPaymentMethodDetails = {
  billing_details: TreasurySharedResourceBillingDetails;
  financial_account?: OutboundPaymentsPaymentMethodDetailsFinancialAccount;
  /**
   * The type of the payment method used in the OutboundPayment.
   */
  type: 'financial_account' | 'us_bank_account';
  us_bank_account?: OutboundPaymentsPaymentMethodDetailsUsBankAccount;
};
/**
 * outbound_payments_payment_method_details_financial_account
 */
export type OutboundPaymentsPaymentMethodDetailsFinancialAccount = {
  /**
   * Token of the FinancialAccount.
   */
  id: string;
  /**
   * The rails used to send funds.
   */
  network: 'stripe';
};
/**
 * outbound_payments_payment_method_details_us_bank_account
 */
export type OutboundPaymentsPaymentMethodDetailsUsBankAccount = {
  /**
   * Account holder type: individual or company.
   */
  account_holder_type?: ('company' | 'individual') | null;
  /**
   * Account type: checkings or savings. Defaults to checking if omitted.
   */
  account_type?: ('checking' | 'savings') | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment.
   */
  mandate?: string | Mandate;
  /**
   * The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
   */
  network: 'ach' | 'us_domestic_wire';
  /**
   * Routing number of the bank account.
   */
  routing_number?: string | null;
};
/**
 * OutboundTransfersPaymentMethodDetails
 */
export type OutboundTransfersPaymentMethodDetails = {
  billing_details: TreasurySharedResourceBillingDetails;
  financial_account?: OutboundTransfersPaymentMethodDetailsFinancialAccount;
  /**
   * The type of the payment method used in the OutboundTransfer.
   */
  type: 'financial_account' | 'us_bank_account';
  us_bank_account?: OutboundTransfersPaymentMethodDetailsUsBankAccount;
};
/**
 * outbound_transfers_payment_method_details_financial_account
 */
export type OutboundTransfersPaymentMethodDetailsFinancialAccount = {
  /**
   * Token of the FinancialAccount.
   */
  id: string;
  /**
   * The rails used to send funds.
   */
  network: 'stripe';
};
/**
 * outbound_transfers_payment_method_details_us_bank_account
 */
export type OutboundTransfersPaymentMethodDetailsUsBankAccount = {
  /**
   * Account holder type: individual or company.
   */
  account_holder_type?: ('company' | 'individual') | null;
  /**
   * Account type: checkings or savings. Defaults to checking if omitted.
   */
  account_type?: ('checking' | 'savings') | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment.
   */
  mandate?: string | Mandate;
  /**
   * The network rails used. See the [docs](https://stripe.com/docs/treasury/money-movement/timelines) to learn more about money movement timelines for each network type.
   */
  network: 'ach' | 'us_domestic_wire';
  /**
   * Routing number of the bank account.
   */
  routing_number?: string | null;
};
/**
 * PackageDimensions
 */
export type PackageDimensions = {
  /**
   * Height, in inches.
   */
  height: number;
  /**
   * Length, in inches.
   */
  length: number;
  /**
   * Weight, in ounces.
   */
  weight: number;
  /**
   * Width, in inches.
   */
  width: number;
};
/**
 * PaymentFlowsAmountDetails
 */
export type PaymentFlowsAmountDetails = {
  tip?: PaymentFlowsAmountDetailsClientResourceTip;
};
/**
 * PaymentFlowsAmountDetailsClient
 */
export type PaymentFlowsAmountDetailsClient = {
  tip?: PaymentFlowsAmountDetailsClientResourceTip;
};
/**
 * PaymentFlowsAmountDetailsClientResourceTip
 */
export type PaymentFlowsAmountDetailsClientResourceTip = {
  /**
   * Portion of the amount that corresponds to a tip.
   */
  amount?: number;
};
/**
 * PaymentFlowsAutomaticPaymentMethodsPaymentIntent
 */
export type PaymentFlowsAutomaticPaymentMethodsPaymentIntent = {
  /**
   * Controls whether this PaymentIntent will accept redirect-based payment methods.
   *
   * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/payment_intents/confirm) this PaymentIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the payment.
   */
  allow_redirects?: 'always' | 'never';
  /**
   * Automatically calculates compatible payment methods
   */
  enabled: boolean;
};
/**
 * PaymentFlowsAutomaticPaymentMethodsSetupIntent
 */
export type PaymentFlowsAutomaticPaymentMethodsSetupIntent = {
  /**
   * Controls whether this SetupIntent will accept redirect-based payment methods.
   *
   * Redirect-based payment methods may require your customer to be redirected to a payment method's app or site for authentication or additional steps. To [confirm](https://stripe.com/docs/api/setup_intents/confirm) this SetupIntent, you may be required to provide a `return_url` to redirect customers back to your site after they authenticate or complete the setup.
   */
  allow_redirects?: 'always' | 'never';
  /**
   * Automatically calculates compatible payment methods
   */
  enabled?: boolean | null;
};
/**
 * PaymentFlowsInstallmentOptions
 */
export type PaymentFlowsInstallmentOptions = {
  enabled: boolean;
  plan?: PaymentMethodDetailsCardInstallmentsPlan;
};
/**
 * PaymentFlowsPaymentIntentPresentmentDetails
 */
export type PaymentFlowsPaymentIntentPresentmentDetails = {
  /**
   * Amount intended to be collected by this payment, denominated in presentment_currency.
   */
  presentment_amount: number;
  /**
   * Currency presented to the customer during payment.
   */
  presentment_currency: string;
};
/**
 * PaymentFlowsPrivatePaymentMethodsAlipay
 */
export type PaymentFlowsPrivatePaymentMethodsAlipay = unknown;
/**
 * PaymentFlowsPrivatePaymentMethodsAlipayDetails
 */
export type PaymentFlowsPrivatePaymentMethodsAlipayDetails = {
  /**
   * Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
   */
  buyer_id?: string;
  /**
   * Uniquely identifies this particular Alipay account. You can use this attribute to check whether two Alipay accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Transaction ID of this particular Alipay transaction.
   */
  transaction_id?: string | null;
};
/**
 * PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization
 */
export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization =
  {
    /**
     * Indicates whether or not the capture window is extended beyond the standard authorization.
     */
    status: 'disabled' | 'enabled';
  };
/**
 * PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization
 */
export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization =
  {
    /**
     * Indicates whether or not the incremental authorization feature is supported.
     */
    status: 'available' | 'unavailable';
  };
/**
 * PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceEnterpriseFeaturesOvercaptureOvercapture
 */
export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercapture =
  {
    /**
     * The maximum amount that can be captured.
     */
    maximum_amount_capturable: number;
    /**
     * Indicates whether or not the authorized amount can be over-captured.
     */
    status: 'available' | 'unavailable';
  };
/**
 * PaymentFlowsPrivatePaymentMethodsCardDetailsAPIResourceMulticapture
 */
export type PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticapture =
  {
    /**
     * Indicates whether or not multiple captures are supported.
     */
    status: 'available' | 'unavailable';
  };
/**
 * PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet
 */
export type PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet = {
  /**
   * The type of mobile wallet, one of `apple_pay`, `google_pay`, `samsung_pay`, or `unknown`.
   */
  type: 'apple_pay' | 'google_pay' | 'samsung_pay' | 'unknown';
};
/**
 * PaymentFlowsPrivatePaymentMethodsFinancialConnectionsCommonLinkedAccountOptionsFilters
 */
export type PaymentFlowsPrivatePaymentMethodsFinancialConnectionsCommonLinkedAccountOptionsFilters =
  {
    /**
     * The account subcategories to use to filter for possible accounts to link. Valid subcategories are `checking` and `savings`.
     */
    account_subcategories?: ('checking' | 'savings')[];
  };
/**
 * PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions
 */
export type PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * PaymentFlowsPrivatePaymentMethodsKlarnaDOB
 */
export type PaymentFlowsPrivatePaymentMethodsKlarnaDob = {
  /**
   * The day of birth, between 1 and 31.
   */
  day?: number | null;
  /**
   * The month of birth, between 1 and 12.
   */
  month?: number | null;
  /**
   * The four-digit year of birth.
   */
  year?: number | null;
};
/**
 * PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions
 */
export type PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions
 */
export type PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
};
/**
 * PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions
 */
export type PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
};
/**
 * PaymentIntent
 * A PaymentIntent guides you through the process of collecting a payment from your customer.
 * We recommend that you create exactly one PaymentIntent for each order or
 * customer session in your system. You can reference the PaymentIntent later to
 * see the history of payment attempts for a particular session.
 *
 * A PaymentIntent transitions through
 * [multiple statuses](https://stripe.com/docs/payments/intents#intent-statuses)
 * throughout its lifetime as it interfaces with Stripe.js to perform
 * authentication flows and ultimately creates at most one successful charge.
 *
 * Related guide: [Payment Intents API](https://stripe.com/docs/payments/payment-intents)
 */
export type PaymentIntent = {
  /**
   * Amount intended to be collected by this PaymentIntent. A positive integer representing how much to charge in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal) (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The minimum amount is $0.50 US or [equivalent in charge currency](https://stripe.com/docs/currencies#minimum-and-maximum-charge-amounts). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
   */
  amount: number;
  /**
   * Amount that can be captured from this PaymentIntent.
   */
  amount_capturable?: number;
  amount_details?: PaymentFlowsAmountDetails | PaymentFlowsAmountDetailsClient;
  /**
   * Amount that this PaymentIntent collects.
   */
  amount_received?: number;
  /**
   * ID of the Connect application that created the PaymentIntent.
   */
  application?: (string | Application) | null;
  /**
   * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. The amount of the application fee collected will be capped at the total amount captured. For more information, see the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
   */
  application_fee_amount?: number | null;
  /**
   * Settings to configure compatible payment methods from the [Stripe Dashboard](https://dashboard.stripe.com/settings/payment_methods)
   */
  automatic_payment_methods?: PaymentFlowsAutomaticPaymentMethodsPaymentIntent | null;
  /**
   * Populated when `status` is `canceled`, this is the time at which the PaymentIntent was canceled. Measured in seconds since the Unix epoch.
   */
  canceled_at?: number | null;
  /**
   * Reason for cancellation of this PaymentIntent, either user-provided (`duplicate`, `fraudulent`, `requested_by_customer`, or `abandoned`) or generated by Stripe internally (`failed_invoice`, `void_invoice`, `automatic`, or `expired`).
   */
  cancellation_reason?:
    | (
        | 'abandoned'
        | 'automatic'
        | 'duplicate'
        | 'expired'
        | 'failed_invoice'
        | 'fraudulent'
        | 'requested_by_customer'
        | 'void_invoice'
      )
    | null;
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method: 'automatic' | 'automatic_async' | 'manual';
  /**
   * The client secret of this PaymentIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete a payment from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   *
   * Refer to our docs to [accept a payment](https://stripe.com/docs/payments/accept-a-payment?ui=elements) and learn about how `client_secret` should be handled.
   */
  client_secret?: string | null;
  /**
   * Describes whether we can confirm this PaymentIntent automatically, or if it requires customer action to confirm the payment.
   */
  confirmation_method: 'automatic' | 'manual';
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the Customer this PaymentIntent belongs to, if one exists.
   *
   * Payment methods attached to other Customers cannot be used with this PaymentIntent.
   *
   * If [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) is set and this PaymentIntent's payment method is not `card_present`, then the payment method attaches to the Customer after the PaymentIntent has been confirmed and any required actions from the user are complete. If the payment method is `card_present` and isn't a digital wallet, then a [generated_card](https://docs.stripe.com/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card is created and attached to the Customer instead.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The payment error encountered in the previous PaymentIntent confirmation. It will be cleared if the PaymentIntent is later updated for any reason.
   */
  last_payment_error?: ApiErrors | null;
  /**
   * ID of the latest [Charge object](https://stripe.com/docs/api/charges) created by this PaymentIntent. This property is `null` until PaymentIntent confirmation is attempted.
   */
  latest_charge?: (string | Charge) | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format. Learn more about [storing information in metadata](https://stripe.com/docs/payments/payment-intents/creating-payment-intents#storing-information-in-metadata).
   */
  metadata?: {
    [key: string]: string;
  };
  /**
   * If present, this property tells you what actions you need to take in order for your customer to fulfill a payment using the provided source.
   */
  next_action?: PaymentIntentNextAction | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'payment_intent';
  /**
   * The account (if any) for which the funds of the PaymentIntent are intended. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts) for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * ID of the payment method used in this PaymentIntent.
   */
  payment_method?: (string | PaymentMethod) | null;
  /**
   * Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this PaymentIntent.
   */
  payment_method_configuration_details?: PaymentMethodConfigBizPaymentMethodConfigurationDetails | null;
  /**
   * Payment-method-specific configuration for this PaymentIntent.
   */
  payment_method_options?: PaymentIntentPaymentMethodOptions | null;
  /**
   * The list of payment method types (e.g. card) that this PaymentIntent is allowed to use. A comprehensive list of valid payment method types can be found [here](https://docs.stripe.com/api/payment_methods/object#payment_method_object-type).
   */
  payment_method_types: string[];
  presentment_details?: PaymentFlowsPaymentIntentPresentmentDetails;
  /**
   * If present, this property tells you about the processing state of the payment.
   */
  processing?: PaymentIntentProcessing | null;
  /**
   * Email address that the receipt for the resulting payment will be sent to. If `receipt_email` is specified for a payment in live mode, a receipt will be sent regardless of your [email settings](https://dashboard.stripe.com/account/emails).
   */
  receipt_email?: string | null;
  /**
   * ID of the review associated with this PaymentIntent, if any.
   */
  review?: (string | Review) | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: ('off_session' | 'on_session') | null;
  /**
   * Shipping information for this PaymentIntent.
   */
  shipping?: Shipping | null;
  /**
   * Text that appears on the customer's statement as the statement descriptor for a non-card charge. This value overrides the account's default statement descriptor. For information about requirements, including the 22-character limit, see [the Statement Descriptor docs](https://docs.stripe.com/get-started/account/statement-descriptors).
   *
   * Setting this value for a card charge returns an error. For card charges, set the [statement_descriptor_suffix](https://docs.stripe.com/get-started/account/statement-descriptors#dynamic) instead.
   */
  statement_descriptor?: string | null;
  /**
   * Provides information about a card charge. Concatenated to the account's [statement descriptor prefix](https://docs.stripe.com/get-started/account/statement-descriptors#static) to form the complete statement descriptor that appears on the customer's statement.
   */
  statement_descriptor_suffix?: string | null;
  /**
   * Status of this PaymentIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `requires_capture`, `canceled`, or `succeeded`. Read more about each PaymentIntent [status](https://stripe.com/docs/payments/intents#intent-statuses).
   */
  status:
    | 'canceled'
    | 'processing'
    | 'requires_action'
    | 'requires_capture'
    | 'requires_confirmation'
    | 'requires_payment_method'
    | 'succeeded';
  /**
   * The data that automatically creates a Transfer after the payment finalizes. Learn more about the [use case for connected accounts](https://stripe.com/docs/payments/connected-accounts).
   */
  transfer_data?: TransferData | null;
  /**
   * A string that identifies the resulting payment as part of a group. Learn more about the [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers).
   */
  transfer_group?: string | null;
};
/**
 * PaymentIntentCardProcessing
 */
export type PaymentIntentCardProcessing = {
  customer_notification?: PaymentIntentProcessingCustomerNotification;
};
/**
 * PaymentIntentNextAction
 */
export type PaymentIntentNextAction = {
  alipay_handle_redirect?: PaymentIntentNextActionAlipayHandleRedirect;
  boleto_display_details?: PaymentIntentNextActionBoleto;
  card_await_notification?: PaymentIntentNextActionCardAwaitNotification;
  cashapp_handle_redirect_or_display_qr_code?: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode;
  display_bank_transfer_instructions?: PaymentIntentNextActionDisplayBankTransferInstructions;
  konbini_display_details?: PaymentIntentNextActionKonbini;
  multibanco_display_details?: PaymentIntentNextActionDisplayMultibancoDetails;
  oxxo_display_details?: PaymentIntentNextActionDisplayOxxoDetails;
  paynow_display_qr_code?: PaymentIntentNextActionPaynowDisplayQrCode;
  pix_display_qr_code?: PaymentIntentNextActionPixDisplayQrCode;
  promptpay_display_qr_code?: PaymentIntentNextActionPromptpayDisplayQrCode;
  redirect_to_url?: PaymentIntentNextActionRedirectToUrl;
  swish_handle_redirect_or_display_qr_code?: PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode;
  /**
   * Type of the next action to perform. Refer to the other child attributes under `next_action` for available values. Examples include: `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
   */
  type: string;
  /**
   * When confirming a PaymentIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
   */
  use_stripe_sdk?: unknown;
  verify_with_microdeposits?: PaymentIntentNextActionVerifyWithMicrodeposits;
  wechat_pay_display_qr_code?: PaymentIntentNextActionWechatPayDisplayQrCode;
  wechat_pay_redirect_to_android_app?: PaymentIntentNextActionWechatPayRedirectToAndroidApp;
  wechat_pay_redirect_to_ios_app?: PaymentIntentNextActionWechatPayRedirectToIosApp;
};
/**
 * PaymentIntentNextActionAlipayHandleRedirect
 */
export type PaymentIntentNextActionAlipayHandleRedirect = {
  /**
   * The native data to be used with Alipay SDK you must redirect your customer to in order to authenticate the payment in an Android App.
   */
  native_data?: string | null;
  /**
   * The native URL you must redirect your customer to in order to authenticate the payment in an iOS App.
   */
  native_url?: string | null;
  /**
   * If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
   */
  return_url?: string | null;
  /**
   * The URL you must redirect your customer to in order to authenticate the payment.
   */
  url?: string | null;
};
/**
 * payment_intent_next_action_boleto
 */
export type PaymentIntentNextActionBoleto = {
  /**
   * The timestamp after which the boleto expires.
   */
  expires_at?: number | null;
  /**
   * The URL to the hosted boleto voucher page, which allows customers to view the boleto voucher.
   */
  hosted_voucher_url?: string | null;
  /**
   * The boleto number.
   */
  number?: string | null;
  /**
   * The URL to the downloadable boleto voucher PDF.
   */
  pdf?: string | null;
};
/**
 * PaymentIntentNextActionCardAwaitNotification
 */
export type PaymentIntentNextActionCardAwaitNotification = {
  /**
   * The time that payment will be attempted. If customer approval is required, they need to provide approval before this time.
   */
  charge_attempt_at?: number | null;
  /**
   * For payments greater than INR 15000, the customer must provide explicit approval of the payment with their bank. For payments of lower amount, no customer action is required.
   */
  customer_approval_required?: boolean | null;
};
/**
 * PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode
 */
export type PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode = {
  /**
   * The URL to the hosted Cash App Pay instructions page, which allows customers to view the QR code, and supports QR code refreshing on expiration.
   */
  hosted_instructions_url: string;
  /**
   * The url for mobile redirect based auth
   */
  mobile_auth_url: string;
  qr_code: PaymentIntentNextActionCashappQrCode;
};
/**
 * PaymentIntentNextActionCashappQRCode
 */
export type PaymentIntentNextActionCashappQrCode = {
  /**
   * The date (unix timestamp) when the QR code expires.
   */
  expires_at: number;
  /**
   * The image_url_png string used to render QR code
   */
  image_url_png: string;
  /**
   * The image_url_svg string used to render QR code
   */
  image_url_svg: string;
};
/**
 * PaymentIntentNextActionDisplayBankTransferInstructions
 */
export type PaymentIntentNextActionDisplayBankTransferInstructions = {
  /**
   * The remaining amount that needs to be transferred to complete the payment.
   */
  amount_remaining?: number | null;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency?: string | null;
  /**
   * A list of financial addresses that can be used to fund the customer balance
   */
  financial_addresses?: FundingInstructionsBankTransferFinancialAddress[];
  /**
   * A link to a hosted page that guides your customer through completing the transfer.
   */
  hosted_instructions_url?: string | null;
  /**
   * A string identifying this payment. Instruct your customer to include this code in the reference or memo field of their bank transfer.
   */
  reference?: string | null;
  /**
   * Type of bank transfer
   */
  type:
    | 'eu_bank_transfer'
    | 'gb_bank_transfer'
    | 'jp_bank_transfer'
    | 'mx_bank_transfer'
    | 'us_bank_transfer';
};
/**
 * PaymentIntentNextActionDisplayMultibancoDetails
 */
export type PaymentIntentNextActionDisplayMultibancoDetails = {
  /**
   * Entity number associated with this Multibanco payment.
   */
  entity?: string | null;
  /**
   * The timestamp at which the Multibanco voucher expires.
   */
  expires_at?: number | null;
  /**
   * The URL for the hosted Multibanco voucher page, which allows customers to view a Multibanco voucher.
   */
  hosted_voucher_url?: string | null;
  /**
   * Reference number associated with this Multibanco payment.
   */
  reference?: string | null;
};
/**
 * PaymentIntentNextActionDisplayOxxoDetails
 */
export type PaymentIntentNextActionDisplayOxxoDetails = {
  /**
   * The timestamp after which the OXXO voucher expires.
   */
  expires_after?: number | null;
  /**
   * The URL for the hosted OXXO voucher page, which allows customers to view and print an OXXO voucher.
   */
  hosted_voucher_url?: string | null;
  /**
   * OXXO reference number.
   */
  number?: string | null;
};
/**
 * payment_intent_next_action_konbini
 */
export type PaymentIntentNextActionKonbini = {
  /**
   * The timestamp at which the pending Konbini payment expires.
   */
  expires_at: number;
  /**
   * The URL for the Konbini payment instructions page, which allows customers to view and print a Konbini voucher.
   */
  hosted_voucher_url?: string | null;
  stores: PaymentIntentNextActionKonbiniStores;
};
/**
 * payment_intent_next_action_konbini_familymart
 */
export type PaymentIntentNextActionKonbiniFamilymart = {
  /**
   * The confirmation number.
   */
  confirmation_number?: string;
  /**
   * The payment code.
   */
  payment_code: string;
};
/**
 * payment_intent_next_action_konbini_lawson
 */
export type PaymentIntentNextActionKonbiniLawson = {
  /**
   * The confirmation number.
   */
  confirmation_number?: string;
  /**
   * The payment code.
   */
  payment_code: string;
};
/**
 * payment_intent_next_action_konbini_ministop
 */
export type PaymentIntentNextActionKonbiniMinistop = {
  /**
   * The confirmation number.
   */
  confirmation_number?: string;
  /**
   * The payment code.
   */
  payment_code: string;
};
/**
 * payment_intent_next_action_konbini_seicomart
 */
export type PaymentIntentNextActionKonbiniSeicomart = {
  /**
   * The confirmation number.
   */
  confirmation_number?: string;
  /**
   * The payment code.
   */
  payment_code: string;
};
/**
 * payment_intent_next_action_konbini_stores
 */
export type PaymentIntentNextActionKonbiniStores = {
  /**
   * FamilyMart instruction details.
   */
  familymart?: PaymentIntentNextActionKonbiniFamilymart | null;
  /**
   * Lawson instruction details.
   */
  lawson?: PaymentIntentNextActionKonbiniLawson | null;
  /**
   * Ministop instruction details.
   */
  ministop?: PaymentIntentNextActionKonbiniMinistop | null;
  /**
   * Seicomart instruction details.
   */
  seicomart?: PaymentIntentNextActionKonbiniSeicomart | null;
};
/**
 * PaymentIntentNextActionPaynowDisplayQrCode
 */
export type PaymentIntentNextActionPaynowDisplayQrCode = {
  /**
   * The raw data string used to generate QR code, it should be used together with QR code library.
   */
  data: string;
  /**
   * The URL to the hosted PayNow instructions page, which allows customers to view the PayNow QR code.
   */
  hosted_instructions_url?: string | null;
  /**
   * The image_url_png string used to render QR code
   */
  image_url_png: string;
  /**
   * The image_url_svg string used to render QR code
   */
  image_url_svg: string;
};
/**
 * PaymentIntentNextActionPixDisplayQrCode
 */
export type PaymentIntentNextActionPixDisplayQrCode = {
  /**
   * The raw data string used to generate QR code, it should be used together with QR code library.
   */
  data?: string;
  /**
   * The date (unix timestamp) when the PIX expires.
   */
  expires_at?: number;
  /**
   * The URL to the hosted pix instructions page, which allows customers to view the pix QR code.
   */
  hosted_instructions_url?: string;
  /**
   * The image_url_png string used to render png QR code
   */
  image_url_png?: string;
  /**
   * The image_url_svg string used to render svg QR code
   */
  image_url_svg?: string;
};
/**
 * PaymentIntentNextActionPromptpayDisplayQrCode
 */
export type PaymentIntentNextActionPromptpayDisplayQrCode = {
  /**
   * The raw data string used to generate QR code, it should be used together with QR code library.
   */
  data: string;
  /**
   * The URL to the hosted PromptPay instructions page, which allows customers to view the PromptPay QR code.
   */
  hosted_instructions_url: string;
  /**
   * The PNG path used to render the QR code, can be used as the source in an HTML img tag
   */
  image_url_png: string;
  /**
   * The SVG path used to render the QR code, can be used as the source in an HTML img tag
   */
  image_url_svg: string;
};
/**
 * PaymentIntentNextActionRedirectToUrl
 */
export type PaymentIntentNextActionRedirectToUrl = {
  /**
   * If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
   */
  return_url?: string | null;
  /**
   * The URL you must redirect your customer to in order to authenticate the payment.
   */
  url?: string | null;
};
/**
 * PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode
 */
export type PaymentIntentNextActionSwishHandleRedirectOrDisplayQrCode = {
  /**
   * The URL to the hosted Swish instructions page, which allows customers to view the QR code.
   */
  hosted_instructions_url: string;
  qr_code: PaymentIntentNextActionSwishQrCode;
};
/**
 * PaymentIntentNextActionSwishQRCode
 */
export type PaymentIntentNextActionSwishQrCode = {
  /**
   * The raw data string used to generate QR code, it should be used together with QR code library.
   */
  data: string;
  /**
   * The image_url_png string used to render QR code
   */
  image_url_png: string;
  /**
   * The image_url_svg string used to render QR code
   */
  image_url_svg: string;
};
/**
 * PaymentIntentNextActionVerifyWithMicrodeposits
 */
export type PaymentIntentNextActionVerifyWithMicrodeposits = {
  /**
   * The timestamp when the microdeposits are expected to land.
   */
  arrival_date: number;
  /**
   * The URL for the hosted verification page, which allows customers to verify their bank account.
   */
  hosted_verification_url: string;
  /**
   * The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
   */
  microdeposit_type?: ('amounts' | 'descriptor_code') | null;
};
/**
 * PaymentIntentNextActionWechatPayDisplayQrCode
 */
export type PaymentIntentNextActionWechatPayDisplayQrCode = {
  /**
   * The data being used to generate QR code
   */
  data: string;
  /**
   * The URL to the hosted WeChat Pay instructions page, which allows customers to view the WeChat Pay QR code.
   */
  hosted_instructions_url: string;
  /**
   * The base64 image data for a pre-generated QR code
   */
  image_data_url: string;
  /**
   * The image_url_png string used to render QR code
   */
  image_url_png: string;
  /**
   * The image_url_svg string used to render QR code
   */
  image_url_svg: string;
};
/**
 * PaymentIntentNextActionWechatPayRedirectToAndroidApp
 */
export type PaymentIntentNextActionWechatPayRedirectToAndroidApp = {
  /**
   * app_id is the APP ID registered on WeChat open platform
   */
  app_id: string;
  /**
   * nonce_str is a random string
   */
  nonce_str: string;
  /**
   * package is static value
   */
  package: string;
  /**
   * an unique merchant ID assigned by WeChat Pay
   */
  partner_id: string;
  /**
   * an unique trading ID assigned by WeChat Pay
   */
  prepay_id: string;
  /**
   * A signature
   */
  sign: string;
  /**
   * Specifies the current time in epoch format
   */
  timestamp: string;
};
/**
 * PaymentIntentNextActionWechatPayRedirectToIOSApp
 */
export type PaymentIntentNextActionWechatPayRedirectToIosApp = {
  /**
   * An universal link that redirect to WeChat Pay app
   */
  native_url: string;
};
/**
 * PaymentIntentPaymentMethodOptions
 */
export type PaymentIntentPaymentMethodOptions = {
  acss_debit?:
    | PaymentIntentPaymentMethodOptionsAcssDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  affirm?:
    | PaymentMethodOptionsAffirm
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  afterpay_clearpay?:
    | PaymentMethodOptionsAfterpayClearpay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  alipay?:
    | PaymentMethodOptionsAlipay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  alma?:
    | PaymentMethodOptionsAlma
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  amazon_pay?:
    | PaymentMethodOptionsAmazonPay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  au_becs_debit?:
    | PaymentIntentPaymentMethodOptionsAuBecsDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  bacs_debit?:
    | PaymentIntentPaymentMethodOptionsBacsDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  bancontact?:
    | PaymentMethodOptionsBancontact
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  billie?:
    | PaymentMethodOptionsBillie
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  blik?:
    | PaymentIntentPaymentMethodOptionsBlik
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  boleto?:
    | PaymentMethodOptionsBoleto
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  card?:
    | PaymentIntentPaymentMethodOptionsCard
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  card_present?:
    | PaymentMethodOptionsCardPresent
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  cashapp?:
    | PaymentMethodOptionsCashapp
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  customer_balance?:
    | PaymentMethodOptionsCustomerBalance
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  eps?:
    | PaymentIntentPaymentMethodOptionsEps
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  fpx?:
    | PaymentMethodOptionsFpx
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  giropay?:
    | PaymentMethodOptionsGiropay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  grabpay?:
    | PaymentMethodOptionsGrabpay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  ideal?:
    | PaymentMethodOptionsIdeal
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  interac_present?:
    | PaymentMethodOptionsInteracPresent
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  kakao_pay?:
    | PaymentFlowsPrivatePaymentMethodsKakaoPayPaymentMethodOptions
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  klarna?:
    | PaymentMethodOptionsKlarna
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  konbini?:
    | PaymentMethodOptionsKonbini
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  kr_card?:
    | PaymentMethodOptionsKrCard
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  link?:
    | PaymentIntentPaymentMethodOptionsLink
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  mobilepay?:
    | PaymentIntentPaymentMethodOptionsMobilepay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  multibanco?:
    | PaymentMethodOptionsMultibanco
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  naver_pay?:
    | PaymentFlowsPrivatePaymentMethodsNaverPayPaymentMethodOptions
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  nz_bank_account?:
    | PaymentIntentPaymentMethodOptionsNzBankAccount
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  oxxo?:
    | PaymentMethodOptionsOxxo
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  p24?:
    | PaymentMethodOptionsP24
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  pay_by_bank?:
    | PaymentMethodOptionsPayByBank
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  payco?:
    | PaymentFlowsPrivatePaymentMethodsPaycoPaymentMethodOptions
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  paynow?:
    | PaymentMethodOptionsPaynow
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  paypal?:
    | PaymentMethodOptionsPaypal
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  pix?:
    | PaymentMethodOptionsPix
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  promptpay?:
    | PaymentMethodOptionsPromptpay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  revolut_pay?:
    | PaymentMethodOptionsRevolutPay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  samsung_pay?:
    | PaymentFlowsPrivatePaymentMethodsSamsungPayPaymentMethodOptions
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  satispay?:
    | PaymentMethodOptionsSatispay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  sepa_debit?:
    | PaymentIntentPaymentMethodOptionsSepaDebit
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  sofort?:
    | PaymentMethodOptionsSofort
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  swish?:
    | PaymentIntentPaymentMethodOptionsSwish
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  twint?:
    | PaymentMethodOptionsTwint
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  us_bank_account?:
    | PaymentIntentPaymentMethodOptionsUsBankAccount
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  wechat_pay?:
    | PaymentMethodOptionsWechatPay
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
  zip?:
    | PaymentMethodOptionsZip
    | PaymentIntentTypeSpecificPaymentMethodOptionsClient;
};
/**
 * payment_intent_payment_method_options_acss_debit
 */
export type PaymentIntentPaymentMethodOptionsAcssDebit = {
  mandate_options?: PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * payment_intent_payment_method_options_au_becs_debit
 */
export type PaymentIntentPaymentMethodOptionsAuBecsDebit = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
};
/**
 * payment_intent_payment_method_options_bacs_debit
 */
export type PaymentIntentPaymentMethodOptionsBacsDebit = {
  mandate_options?: PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
};
/**
 * payment_intent_payment_method_options_blik
 */
export type PaymentIntentPaymentMethodOptionsBlik = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_intent_payment_method_options_card
 */
export type PaymentIntentPaymentMethodOptionsCard = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: PaymentMethodOptionsCardInstallments | null;
  /**
   * Configuration options for setting up an eMandate for cards issued in India.
   */
  mandate_options?: PaymentMethodOptionsCardMandateOptions | null;
  /**
   * Selected network to process this payment intent on. Depends on the available networks of the card attached to the payment intent. Can be only set confirm-time.
   */
  network?:
    | (
        | 'amex'
        | 'cartes_bancaires'
        | 'diners'
        | 'discover'
        | 'eftpos_au'
        | 'girocard'
        | 'interac'
        | 'jcb'
        | 'link'
        | 'mastercard'
        | 'unionpay'
        | 'unknown'
        | 'visa'
      )
    | null;
  /**
   * Request ability to [capture beyond the standard authorization validity window](https://stripe.com/docs/payments/extended-authorization) for this PaymentIntent.
   */
  request_extended_authorization?: 'if_available' | 'never';
  /**
   * Request ability to [increment the authorization](https://stripe.com/docs/payments/incremental-authorization) for this PaymentIntent.
   */
  request_incremental_authorization?: 'if_available' | 'never';
  /**
   * Request ability to make [multiple captures](https://stripe.com/docs/payments/multicapture) for this PaymentIntent.
   */
  request_multicapture?: 'if_available' | 'never';
  /**
   * Request ability to [overcapture](https://stripe.com/docs/payments/overcapture) for this PaymentIntent.
   */
  request_overcapture?: 'if_available' | 'never';
  /**
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null;
  /**
   * When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
   */
  require_cvc_recollection?: boolean;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Provides information about a card payment that customers see on their statements. Concatenated with the Kana prefix (shortened Kana descriptor) or Kana statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 22 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 22 characters.
   */
  statement_descriptor_suffix_kana?: string;
  /**
   * Provides information about a card payment that customers see on their statements. Concatenated with the Kanji prefix (shortened Kanji descriptor) or Kanji statement descriptor that’s set on the account to form the complete statement descriptor. Maximum 17 characters. On card statements, the *concatenation* of both prefix and suffix (including separators) will appear truncated to 17 characters.
   */
  statement_descriptor_suffix_kanji?: string;
};
/**
 * payment_intent_payment_method_options_eps
 */
export type PaymentIntentPaymentMethodOptionsEps = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_intent_payment_method_options_link
 */
export type PaymentIntentPaymentMethodOptionsLink = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_intent_payment_method_options_mandate_options_acss_debit
 */
export type PaymentIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  /**
   * A URL for custom mandate text
   */
  custom_mandate_url?: string;
  /**
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   */
  interval_description?: string | null;
  /**
   * Payment schedule for the mandate.
   */
  payment_schedule?: ('combined' | 'interval' | 'sporadic') | null;
  /**
   * Transaction type of the mandate.
   */
  transaction_type?: ('business' | 'personal') | null;
};
/**
 * payment_intent_payment_method_options_mandate_options_bacs_debit
 */
export type PaymentIntentPaymentMethodOptionsMandateOptionsBacsDebit = {
  /**
   * Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'.
   */
  reference_prefix?: string;
};
/**
 * payment_intent_payment_method_options_mandate_options_sepa_debit
 */
export type PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit = {
  /**
   * Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'.
   */
  reference_prefix?: string;
};
/**
 * payment_intent_payment_method_options_mobilepay
 */
export type PaymentIntentPaymentMethodOptionsMobilepay = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_intent_payment_method_options_nz_bank_account
 */
export type PaymentIntentPaymentMethodOptionsNzBankAccount = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
};
/**
 * payment_intent_payment_method_options_sepa_debit
 */
export type PaymentIntentPaymentMethodOptionsSepaDebit = {
  mandate_options?: PaymentIntentPaymentMethodOptionsMandateOptionsSepaDebit;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
};
/**
 * payment_intent_payment_method_options_swish
 */
export type PaymentIntentPaymentMethodOptionsSwish = {
  /**
   * A reference for this payment to be displayed in the Swish app.
   */
  reference?: string | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_intent_payment_method_options_us_bank_account
 */
export type PaymentIntentPaymentMethodOptionsUsBankAccount = {
  financial_connections?: LinkedAccountOptionsCommon;
  mandate_options?: PaymentMethodOptionsUsBankAccountMandateOptions;
  /**
   * Preferred transaction settlement speed
   */
  preferred_settlement_speed?: 'fastest' | 'standard';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Controls when Stripe will attempt to debit the funds from the customer's account. The date must be a string in YYYY-MM-DD format. The date must be in the future and between 3 and 15 calendar days from now.
   */
  target_date?: string;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * PaymentIntentProcessing
 */
export type PaymentIntentProcessing = {
  card?: PaymentIntentCardProcessing;
  /**
   * Type of the payment method for which payment is in `processing` state, one of `card`.
   */
  type: 'card';
};
/**
 * PaymentIntentProcessingCustomerNotification
 */
export type PaymentIntentProcessingCustomerNotification = {
  /**
   * Whether customer approval has been requested for this payment. For payments greater than INR 15000 or mandate amount, the customer must provide explicit approval of the payment with their bank.
   */
  approval_requested?: boolean | null;
  /**
   * If customer approval is required, they need to provide approval before this time.
   */
  completes_at?: number | null;
};
/**
 * PaymentIntentTypeSpecificPaymentMethodOptionsClient
 */
export type PaymentIntentTypeSpecificPaymentMethodOptionsClient = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual' | 'manual_preferred';
  installments?: PaymentFlowsInstallmentOptions;
  /**
   * Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
   */
  request_incremental_authorization_support?: boolean;
  /**
   * When enabled, using a card that is attached to a customer will require the CVC to be provided again (i.e. using the cvc_token parameter).
   */
  require_cvc_recollection?: boolean;
  routing?: PaymentMethodOptionsCardPresentRouting;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * PaymentLink
 * A payment link is a shareable URL that will take your customers to a hosted payment page. A payment link can be shared and used multiple times.
 *
 * When a customer opens a payment link it will open a new [checkout session](https://stripe.com/docs/api/checkout/sessions) to render the payment page. You can use [checkout session events](https://stripe.com/docs/api/events/types#event_types-checkout.session.completed) to track payments through payment links.
 *
 * Related guide: [Payment Links API](https://stripe.com/docs/payment-links)
 */
export type PaymentLink = {
  /**
   * Whether the payment link's `url` is active. If `false`, customers visiting the URL will be shown a page saying that the link has been deactivated.
   */
  active: boolean;
  after_completion: PaymentLinksResourceAfterCompletion;
  /**
   * Whether user redeemable promotion codes are enabled.
   */
  allow_promotion_codes: boolean;
  /**
   * The ID of the Connect application that created the Payment Link.
   */
  application?: (string | Application | DeletedApplication) | null;
  /**
   * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account.
   */
  application_fee_amount?: number | null;
  /**
   * This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
   */
  application_fee_percent?: number | null;
  automatic_tax: PaymentLinksResourceAutomaticTax;
  /**
   * Configuration for collecting the customer's billing address. Defaults to `auto`.
   */
  billing_address_collection: 'auto' | 'required';
  /**
   * When set, provides configuration to gather active consent from customers.
   */
  consent_collection?: PaymentLinksResourceConsentCollection | null;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Collect additional information from your customer using custom fields. Up to 3 fields are supported.
   */
  custom_fields: PaymentLinksResourceCustomFields[];
  custom_text: PaymentLinksResourceCustomText;
  /**
   * Configuration for Customer creation during checkout.
   */
  customer_creation: 'always' | 'if_required';
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The custom message to be displayed to a customer when a payment link is no longer active.
   */
  inactive_message?: string | null;
  /**
   * Configuration for creating invoice for payment mode payment links.
   */
  invoice_creation?: PaymentLinksResourceInvoiceCreation | null;
  /**
   * PaymentLinksResourceListLineItems
   * The line items representing what is being sold.
   */
  line_items?: {
    /**
     * Details about each object.
     */
    data: Item[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'payment_link';
  /**
   * The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * The optional items presented to the customer at checkout.
   */
  optional_items?: PaymentLinksResourceOptionalItem[] | null;
  /**
   * Indicates the parameters to be passed to PaymentIntent creation during checkout.
   */
  payment_intent_data?: PaymentLinksResourcePaymentIntentData | null;
  /**
   * Configuration for collecting a payment method during checkout. Defaults to `always`.
   */
  payment_method_collection: 'always' | 'if_required';
  /**
   * The list of payment method types that customers can use. When `null`, Stripe will dynamically show relevant payment methods you've enabled in your [payment method settings](https://dashboard.stripe.com/settings/payment_methods).
   */
  payment_method_types?:
    | (
        | 'affirm'
        | 'afterpay_clearpay'
        | 'alipay'
        | 'alma'
        | 'au_becs_debit'
        | 'bacs_debit'
        | 'bancontact'
        | 'billie'
        | 'blik'
        | 'boleto'
        | 'card'
        | 'cashapp'
        | 'eps'
        | 'fpx'
        | 'giropay'
        | 'grabpay'
        | 'ideal'
        | 'klarna'
        | 'konbini'
        | 'link'
        | 'mobilepay'
        | 'multibanco'
        | 'oxxo'
        | 'p24'
        | 'pay_by_bank'
        | 'paynow'
        | 'paypal'
        | 'pix'
        | 'promptpay'
        | 'satispay'
        | 'sepa_debit'
        | 'sofort'
        | 'swish'
        | 'twint'
        | 'us_bank_account'
        | 'wechat_pay'
        | 'zip'
      )[]
    | null;
  phone_number_collection: PaymentLinksResourcePhoneNumberCollection;
  /**
   * Settings that restrict the usage of a payment link.
   */
  restrictions?: PaymentLinksResourceRestrictions | null;
  /**
   * Configuration for collecting the customer's shipping address.
   */
  shipping_address_collection?: PaymentLinksResourceShippingAddressCollection | null;
  /**
   * The shipping rate options applied to the session.
   */
  shipping_options: PaymentLinksResourceShippingOption[];
  /**
   * Indicates the type of transaction being performed which customizes relevant text on the page, such as the submit button.
   */
  submit_type: 'auto' | 'book' | 'donate' | 'pay' | 'subscribe';
  /**
   * When creating a subscription, the specified configuration data will be used. There must be at least one line item with a recurring price to use `subscription_data`.
   */
  subscription_data?: PaymentLinksResourceSubscriptionData | null;
  tax_id_collection: PaymentLinksResourceTaxIdCollection;
  /**
   * The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to.
   */
  transfer_data?: PaymentLinksResourceTransferData | null;
  /**
   * The public URL that can be shared with customers.
   */
  url: string;
};
/**
 * PaymentLinksResourceAfterCompletion
 */
export type PaymentLinksResourceAfterCompletion = {
  hosted_confirmation?: PaymentLinksResourceCompletionBehaviorConfirmationPage;
  redirect?: PaymentLinksResourceCompletionBehaviorRedirect;
  /**
   * The specified behavior after the purchase is complete.
   */
  type: 'hosted_confirmation' | 'redirect';
};
/**
 * PaymentLinksResourceAutomaticTax
 */
export type PaymentLinksResourceAutomaticTax = {
  /**
   * If `true`, tax will be calculated automatically using the customer's location.
   */
  enabled: boolean;
  /**
   * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
   */
  liability?: ConnectAccountReference | null;
};
/**
 * PaymentLinksResourceCompletedSessions
 */
export type PaymentLinksResourceCompletedSessions = {
  /**
   * The current number of checkout sessions that have been completed on the payment link which count towards the `completed_sessions` restriction to be met.
   */
  count: number;
  /**
   * The maximum number of checkout sessions that can be completed for the `completed_sessions` restriction to be met.
   */
  limit: number;
};
/**
 * PaymentLinksResourceCompletionBehaviorConfirmationPage
 */
export type PaymentLinksResourceCompletionBehaviorConfirmationPage = {
  /**
   * The custom message that is displayed to the customer after the purchase is complete.
   */
  custom_message?: string | null;
};
/**
 * PaymentLinksResourceCompletionBehaviorRedirect
 */
export type PaymentLinksResourceCompletionBehaviorRedirect = {
  /**
   * The URL the customer will be redirected to after the purchase is complete.
   */
  url: string;
};
/**
 * PaymentLinksResourceConsentCollection
 */
export type PaymentLinksResourceConsentCollection = {
  /**
   * Settings related to the payment method reuse text shown in the Checkout UI.
   */
  payment_method_reuse_agreement?: PaymentLinksResourcePaymentMethodReuseAgreement | null;
  /**
   * If set to `auto`, enables the collection of customer consent for promotional communications.
   */
  promotions?: ('auto' | 'none') | null;
  /**
   * If set to `required`, it requires cutomers to accept the terms of service before being able to pay. If set to `none`, customers won't be shown a checkbox to accept the terms of service.
   */
  terms_of_service?: ('none' | 'required') | null;
};
/**
 * PaymentLinksResourceCustomFields
 */
export type PaymentLinksResourceCustomFields = {
  dropdown?: PaymentLinksResourceCustomFieldsDropdown;
  /**
   * String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
   */
  key: string;
  label: PaymentLinksResourceCustomFieldsLabel;
  numeric?: PaymentLinksResourceCustomFieldsNumeric;
  /**
   * Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
   */
  optional: boolean;
  text?: PaymentLinksResourceCustomFieldsText;
  /**
   * The type of the field.
   */
  type: 'dropdown' | 'numeric' | 'text';
};
/**
 * PaymentLinksResourceCustomFieldsDropdown
 */
export type PaymentLinksResourceCustomFieldsDropdown = {
  /**
   * The value that will pre-fill on the payment page.
   */
  default_value?: string | null;
  /**
   * The options available for the customer to select. Up to 200 options allowed.
   */
  options: PaymentLinksResourceCustomFieldsDropdownOption[];
};
/**
 * PaymentLinksResourceCustomFieldsDropdownOption
 */
export type PaymentLinksResourceCustomFieldsDropdownOption = {
  /**
   * The label for the option, displayed to the customer. Up to 100 characters.
   */
  label: string;
  /**
   * The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
   */
  value: string;
};
/**
 * PaymentLinksResourceCustomFieldsLabel
 */
export type PaymentLinksResourceCustomFieldsLabel = {
  /**
   * Custom text for the label, displayed to the customer. Up to 50 characters.
   */
  custom?: string | null;
  /**
   * The type of the label.
   */
  type: 'custom';
};
/**
 * PaymentLinksResourceCustomFieldsNumeric
 */
export type PaymentLinksResourceCustomFieldsNumeric = {
  /**
   * The value that will pre-fill the field on the payment page.
   */
  default_value?: string | null;
  /**
   * The maximum character length constraint for the customer's input.
   */
  maximum_length?: number | null;
  /**
   * The minimum character length requirement for the customer's input.
   */
  minimum_length?: number | null;
};
/**
 * PaymentLinksResourceCustomFieldsText
 */
export type PaymentLinksResourceCustomFieldsText = {
  /**
   * The value that will pre-fill the field on the payment page.
   */
  default_value?: string | null;
  /**
   * The maximum character length constraint for the customer's input.
   */
  maximum_length?: number | null;
  /**
   * The minimum character length requirement for the customer's input.
   */
  minimum_length?: number | null;
};
/**
 * PaymentLinksResourceCustomText
 */
export type PaymentLinksResourceCustomText = {
  /**
   * Custom text that should be displayed after the payment confirmation button.
   */
  after_submit?: PaymentLinksResourceCustomTextPosition | null;
  /**
   * Custom text that should be displayed alongside shipping address collection.
   */
  shipping_address?: PaymentLinksResourceCustomTextPosition | null;
  /**
   * Custom text that should be displayed alongside the payment confirmation button.
   */
  submit?: PaymentLinksResourceCustomTextPosition | null;
  /**
   * Custom text that should be displayed in place of the default terms of service agreement text.
   */
  terms_of_service_acceptance?: PaymentLinksResourceCustomTextPosition | null;
};
/**
 * PaymentLinksResourceCustomTextPosition
 */
export type PaymentLinksResourceCustomTextPosition = {
  /**
   * Text may be up to 1200 characters in length.
   */
  message: string;
};
/**
 * PaymentLinksResourceInvoiceCreation
 */
export type PaymentLinksResourceInvoiceCreation = {
  /**
   * Enable creating an invoice on successful payment.
   */
  enabled: boolean;
  /**
   * Configuration for the invoice. Default invoice values will be used if unspecified.
   */
  invoice_data?: PaymentLinksResourceInvoiceSettings | null;
};
/**
 * PaymentLinksResourceInvoiceSettings
 */
export type PaymentLinksResourceInvoiceSettings = {
  /**
   * The account tax IDs associated with the invoice.
   */
  account_tax_ids?: (string | TaxId | DeletedTaxId)[] | null;
  /**
   * A list of up to 4 custom fields to be displayed on the invoice.
   */
  custom_fields?: InvoiceSettingCustomField[] | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Footer to be displayed on the invoice.
   */
  footer?: string | null;
  /**
   * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
   */
  issuer?: ConnectAccountReference | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * Options for invoice PDF rendering.
   */
  rendering_options?: InvoiceSettingCheckoutRenderingOptions | null;
};
/**
 * PaymentLinksResourceOptionalItem
 */
export type PaymentLinksResourceOptionalItem = {
  adjustable_quantity?: PaymentLinksResourceOptionalItemAdjustableQuantity | null;
  price: string;
  quantity: number;
};
/**
 * PaymentLinksResourceOptionalItemAdjustableQuantity
 */
export type PaymentLinksResourceOptionalItemAdjustableQuantity = {
  /**
   * Set to true if the quantity can be adjusted to any non-negative integer.
   */
  enabled: boolean;
  /**
   * The maximum quantity of this item the customer can purchase. By default this value is 99.
   */
  maximum?: number | null;
  /**
   * The minimum quantity of this item the customer must purchase, if they choose to purchase it. Because this item is optional, the customer will always be able to remove it from their order, even if the `minimum` configured here is greater than 0. By default this value is 0.
   */
  minimum?: number | null;
};
/**
 * PaymentLinksResourcePaymentIntentData
 */
export type PaymentLinksResourcePaymentIntentData = {
  /**
   * Indicates when the funds will be captured from the customer's account.
   */
  capture_method?: ('automatic' | 'automatic_async' | 'manual') | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Payment Intents](https://stripe.com/docs/api/payment_intents) generated from this payment link.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * Indicates that you intend to make future payments with the payment method collected during checkout.
   */
  setup_future_usage?: ('off_session' | 'on_session') | null;
  /**
   * For a non-card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge.
   */
  statement_descriptor?: string | null;
  /**
   * For a card payment, information about the charge that appears on the customer's statement when this payment succeeds in creating a charge. Concatenated with the account's statement descriptor prefix to form the complete statement descriptor.
   */
  statement_descriptor_suffix?: string | null;
  /**
   * A string that identifies the resulting payment as part of a group. See the PaymentIntents [use case for connected accounts](https://stripe.com/docs/connect/separate-charges-and-transfers) for details.
   */
  transfer_group?: string | null;
};
/**
 * PaymentLinksResourcePaymentMethodReuseAgreement
 */
export type PaymentLinksResourcePaymentMethodReuseAgreement = {
  /**
   * Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
   *
   * When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
   */
  position: 'auto' | 'hidden';
};
/**
 * PaymentLinksResourcePhoneNumberCollection
 */
export type PaymentLinksResourcePhoneNumberCollection = {
  /**
   * If `true`, a phone number will be collected during checkout.
   */
  enabled: boolean;
};
/**
 * PaymentLinksResourceRestrictions
 */
export type PaymentLinksResourceRestrictions = {
  completed_sessions: PaymentLinksResourceCompletedSessions;
};
/**
 * PaymentLinksResourceShippingAddressCollection
 */
export type PaymentLinksResourceShippingAddressCollection = {
  /**
   * An array of two-letter ISO country codes representing which countries Checkout should provide as options for shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SD, SY, UM, VI`.
   */
  allowed_countries: (
    | 'AC'
    | 'AD'
    | 'AE'
    | 'AF'
    | 'AG'
    | 'AI'
    | 'AL'
    | 'AM'
    | 'AO'
    | 'AQ'
    | 'AR'
    | 'AT'
    | 'AU'
    | 'AW'
    | 'AX'
    | 'AZ'
    | 'BA'
    | 'BB'
    | 'BD'
    | 'BE'
    | 'BF'
    | 'BG'
    | 'BH'
    | 'BI'
    | 'BJ'
    | 'BL'
    | 'BM'
    | 'BN'
    | 'BO'
    | 'BQ'
    | 'BR'
    | 'BS'
    | 'BT'
    | 'BV'
    | 'BW'
    | 'BY'
    | 'BZ'
    | 'CA'
    | 'CD'
    | 'CF'
    | 'CG'
    | 'CH'
    | 'CI'
    | 'CK'
    | 'CL'
    | 'CM'
    | 'CN'
    | 'CO'
    | 'CR'
    | 'CV'
    | 'CW'
    | 'CY'
    | 'CZ'
    | 'DE'
    | 'DJ'
    | 'DK'
    | 'DM'
    | 'DO'
    | 'DZ'
    | 'EC'
    | 'EE'
    | 'EG'
    | 'EH'
    | 'ER'
    | 'ES'
    | 'ET'
    | 'FI'
    | 'FJ'
    | 'FK'
    | 'FO'
    | 'FR'
    | 'GA'
    | 'GB'
    | 'GD'
    | 'GE'
    | 'GF'
    | 'GG'
    | 'GH'
    | 'GI'
    | 'GL'
    | 'GM'
    | 'GN'
    | 'GP'
    | 'GQ'
    | 'GR'
    | 'GS'
    | 'GT'
    | 'GU'
    | 'GW'
    | 'GY'
    | 'HK'
    | 'HN'
    | 'HR'
    | 'HT'
    | 'HU'
    | 'ID'
    | 'IE'
    | 'IL'
    | 'IM'
    | 'IN'
    | 'IO'
    | 'IQ'
    | 'IS'
    | 'IT'
    | 'JE'
    | 'JM'
    | 'JO'
    | 'JP'
    | 'KE'
    | 'KG'
    | 'KH'
    | 'KI'
    | 'KM'
    | 'KN'
    | 'KR'
    | 'KW'
    | 'KY'
    | 'KZ'
    | 'LA'
    | 'LB'
    | 'LC'
    | 'LI'
    | 'LK'
    | 'LR'
    | 'LS'
    | 'LT'
    | 'LU'
    | 'LV'
    | 'LY'
    | 'MA'
    | 'MC'
    | 'MD'
    | 'ME'
    | 'MF'
    | 'MG'
    | 'MK'
    | 'ML'
    | 'MM'
    | 'MN'
    | 'MO'
    | 'MQ'
    | 'MR'
    | 'MS'
    | 'MT'
    | 'MU'
    | 'MV'
    | 'MW'
    | 'MX'
    | 'MY'
    | 'MZ'
    | 'NA'
    | 'NC'
    | 'NE'
    | 'NG'
    | 'NI'
    | 'NL'
    | 'NO'
    | 'NP'
    | 'NR'
    | 'NU'
    | 'NZ'
    | 'OM'
    | 'PA'
    | 'PE'
    | 'PF'
    | 'PG'
    | 'PH'
    | 'PK'
    | 'PL'
    | 'PM'
    | 'PN'
    | 'PR'
    | 'PS'
    | 'PT'
    | 'PY'
    | 'QA'
    | 'RE'
    | 'RO'
    | 'RS'
    | 'RU'
    | 'RW'
    | 'SA'
    | 'SB'
    | 'SC'
    | 'SD'
    | 'SE'
    | 'SG'
    | 'SH'
    | 'SI'
    | 'SJ'
    | 'SK'
    | 'SL'
    | 'SM'
    | 'SN'
    | 'SO'
    | 'SR'
    | 'SS'
    | 'ST'
    | 'SV'
    | 'SX'
    | 'SZ'
    | 'TA'
    | 'TC'
    | 'TD'
    | 'TF'
    | 'TG'
    | 'TH'
    | 'TJ'
    | 'TK'
    | 'TL'
    | 'TM'
    | 'TN'
    | 'TO'
    | 'TR'
    | 'TT'
    | 'TV'
    | 'TW'
    | 'TZ'
    | 'UA'
    | 'UG'
    | 'US'
    | 'UY'
    | 'UZ'
    | 'VA'
    | 'VC'
    | 'VE'
    | 'VG'
    | 'VN'
    | 'VU'
    | 'WF'
    | 'WS'
    | 'XK'
    | 'YE'
    | 'YT'
    | 'ZA'
    | 'ZM'
    | 'ZW'
    | 'ZZ'
  )[];
};
/**
 * PaymentLinksResourceShippingOption
 */
export type PaymentLinksResourceShippingOption = {
  /**
   * A non-negative integer in cents representing how much to charge.
   */
  shipping_amount: number;
  /**
   * The ID of the Shipping Rate to use for this shipping option.
   */
  shipping_rate: string | ShippingRate;
};
/**
 * PaymentLinksResourceSubscriptionData
 */
export type PaymentLinksResourceSubscriptionData = {
  /**
   * The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
   */
  description?: string | null;
  invoice_settings: PaymentLinksResourceSubscriptionDataInvoiceSettings;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on [Subscriptions](https://stripe.com/docs/api/subscriptions) generated from this payment link.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * Integer representing the number of trial period days before the customer is charged for the first time.
   */
  trial_period_days?: number | null;
  /**
   * Settings related to subscription trials.
   */
  trial_settings?: SubscriptionsTrialsResourceTrialSettings | null;
};
/**
 * PaymentLinksResourceSubscriptionDataInvoiceSettings
 */
export type PaymentLinksResourceSubscriptionDataInvoiceSettings = {
  issuer: ConnectAccountReference;
};
/**
 * PaymentLinksResourceTaxIdCollection
 */
export type PaymentLinksResourceTaxIdCollection = {
  /**
   * Indicates whether tax ID collection is enabled for the session.
   */
  enabled: boolean;
  required: 'if_supported' | 'never';
};
/**
 * PaymentLinksResourceTransferData
 */
export type PaymentLinksResourceTransferData = {
  /**
   * The amount in cents (or local equivalent) that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
   */
  amount?: number | null;
  /**
   * The connected account receiving the transfer.
   */
  destination: string | Account;
};
/**
 * PaymentMethod
 * PaymentMethod objects represent your customer's payment instruments.
 * You can use them with [PaymentIntents](https://stripe.com/docs/payments/payment-intents) to collect payments or save them to
 * Customer objects to store instrument details for future payments.
 *
 * Related guides: [Payment Methods](https://stripe.com/docs/payments/payment-methods) and [More Payment Scenarios](https://stripe.com/docs/payments/more-payment-scenarios).
 */
export type PaymentMethod = {
  acss_debit?: PaymentMethodAcssDebit;
  affirm?: PaymentMethodAffirm;
  afterpay_clearpay?: PaymentMethodAfterpayClearpay;
  alipay?: PaymentFlowsPrivatePaymentMethodsAlipay;
  /**
   * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
   */
  allow_redisplay?: 'always' | 'limited' | 'unspecified';
  alma?: PaymentMethodAlma;
  amazon_pay?: PaymentMethodAmazonPay;
  au_becs_debit?: PaymentMethodAuBecsDebit;
  bacs_debit?: PaymentMethodBacsDebit;
  bancontact?: PaymentMethodBancontact;
  billie?: PaymentMethodBillie;
  billing_details: BillingDetails;
  blik?: PaymentMethodBlik;
  boleto?: PaymentMethodBoleto;
  card?: PaymentMethodCard;
  card_present?: PaymentMethodCardPresent;
  cashapp?: PaymentMethodCashapp;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The ID of the Customer to which this PaymentMethod is saved. This will not be set when the PaymentMethod has not been saved to a Customer.
   */
  customer?: (string | Customer) | null;
  customer_balance?: PaymentMethodCustomerBalance;
  eps?: PaymentMethodEps;
  fpx?: PaymentMethodFpx;
  giropay?: PaymentMethodGiropay;
  grabpay?: PaymentMethodGrabpay;
  /**
   * Unique identifier for the object.
   */
  id: string;
  ideal?: PaymentMethodIdeal;
  interac_present?: PaymentMethodInteracPresent;
  kakao_pay?: PaymentMethodKakaoPay;
  klarna?: PaymentMethodKlarna;
  konbini?: PaymentMethodKonbini;
  kr_card?: PaymentMethodKrCard;
  link?: PaymentMethodLink;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  mobilepay?: PaymentMethodMobilepay;
  multibanco?: PaymentMethodMultibanco;
  naver_pay?: PaymentMethodNaverPay;
  nz_bank_account?: PaymentMethodNzBankAccount;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'payment_method';
  oxxo?: PaymentMethodOxxo;
  p24?: PaymentMethodP24;
  pay_by_bank?: PaymentMethodPayByBank;
  payco?: PaymentMethodPayco;
  paynow?: PaymentMethodPaynow;
  paypal?: PaymentMethodPaypal;
  pix?: PaymentMethodPix;
  promptpay?: PaymentMethodPromptpay;
  radar_options?: RadarRadarOptions;
  revolut_pay?: PaymentMethodRevolutPay;
  samsung_pay?: PaymentMethodSamsungPay;
  satispay?: PaymentMethodSatispay;
  sepa_debit?: PaymentMethodSepaDebit;
  sofort?: PaymentMethodSofort;
  swish?: PaymentMethodSwish;
  twint?: PaymentMethodTwint;
  /**
   * The type of the PaymentMethod. An additional hash is included on the PaymentMethod with a name matching this value. It contains additional information specific to the PaymentMethod type.
   */
  type:
    | 'acss_debit'
    | 'affirm'
    | 'afterpay_clearpay'
    | 'alipay'
    | 'alma'
    | 'amazon_pay'
    | 'au_becs_debit'
    | 'bacs_debit'
    | 'bancontact'
    | 'billie'
    | 'blik'
    | 'boleto'
    | 'card'
    | 'card_present'
    | 'cashapp'
    | 'customer_balance'
    | 'eps'
    | 'fpx'
    | 'giropay'
    | 'grabpay'
    | 'ideal'
    | 'interac_present'
    | 'kakao_pay'
    | 'klarna'
    | 'konbini'
    | 'kr_card'
    | 'link'
    | 'mobilepay'
    | 'multibanco'
    | 'naver_pay'
    | 'nz_bank_account'
    | 'oxxo'
    | 'p24'
    | 'pay_by_bank'
    | 'payco'
    | 'paynow'
    | 'paypal'
    | 'pix'
    | 'promptpay'
    | 'revolut_pay'
    | 'samsung_pay'
    | 'satispay'
    | 'sepa_debit'
    | 'sofort'
    | 'swish'
    | 'twint'
    | 'us_bank_account'
    | 'wechat_pay'
    | 'zip';
  us_bank_account?: PaymentMethodUsBankAccount;
  wechat_pay?: PaymentMethodWechatPay;
  zip?: PaymentMethodZip;
};
/**
 * payment_method_acss_debit
 */
export type PaymentMethodAcssDebit = {
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Institution number of the bank account.
   */
  institution_number?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * Transit number of the bank account.
   */
  transit_number?: string | null;
};
/**
 * payment_method_affirm
 */
export type PaymentMethodAffirm = unknown;
/**
 * payment_method_afterpay_clearpay
 */
export type PaymentMethodAfterpayClearpay = unknown;
/**
 * payment_method_alma
 */
export type PaymentMethodAlma = unknown;
/**
 * payment_method_amazon_pay
 */
export type PaymentMethodAmazonPay = unknown;
/**
 * payment_method_au_becs_debit
 */
export type PaymentMethodAuBecsDebit = {
  /**
   * Six-digit number identifying bank and branch associated with this bank account.
   */
  bsb_number?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
};
/**
 * payment_method_bacs_debit
 */
export type PaymentMethodBacsDebit = {
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * Sort code of the bank account. (e.g., `10-20-30`)
   */
  sort_code?: string | null;
};
/**
 * payment_method_bancontact
 */
export type PaymentMethodBancontact = unknown;
/**
 * payment_method_billie
 */
export type PaymentMethodBillie = unknown;
/**
 * payment_method_blik
 */
export type PaymentMethodBlik = unknown;
/**
 * payment_method_boleto
 */
export type PaymentMethodBoleto = {
  /**
   * Uniquely identifies the customer tax id (CNPJ or CPF)
   */
  tax_id: string;
};
/**
 * payment_method_card
 */
export type PaymentMethodCard = {
  /**
   * Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  brand: string;
  /**
   * Checks on Card address and CVC if provided.
   */
  checks?: PaymentMethodCardChecks | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * The brand to use when displaying the card, this accounts for customer's brand choice on dual-branded cards. Can be `american_express`, `cartes_bancaires`, `diners_club`, `discover`, `eftpos_australia`, `interac`, `jcb`, `mastercard`, `union_pay`, `visa`, or `other` and may contain more values in the future.
   */
  display_brand?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding: string;
  /**
   * Details of the original PaymentMethod that created this object.
   */
  generated_from?: PaymentMethodCardGeneratedCard | null;
  /**
   * The last four digits of the card.
   */
  last4: string;
  /**
   * Contains information about card networks that can be used to process the payment.
   */
  networks?: Networks | null;
  /**
   * Status of a card based on the card issuer.
   */
  regulated_status?: ('regulated' | 'unregulated') | null;
  /**
   * Contains details on how this Card may be used for 3D Secure authentication.
   */
  three_d_secure_usage?: ThreeDSecureUsage | null;
  /**
   * If this Card is part of a card wallet, this contains the details of the card wallet.
   */
  wallet?: PaymentMethodCardWallet | null;
};
/**
 * payment_method_card_checks
 */
export type PaymentMethodCardChecks = {
  /**
   * If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_line1_check?: string | null;
  /**
   * If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_postal_code_check?: string | null;
  /**
   * If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  cvc_check?: string | null;
};
/**
 * payment_method_card_generated_card
 */
export type PaymentMethodCardGeneratedCard = {
  /**
   * The charge that created this object.
   */
  charge?: string | null;
  /**
   * Transaction-specific details of the payment method used in the payment.
   */
  payment_method_details?: CardGeneratedFromPaymentMethodDetails | null;
  /**
   * The ID of the SetupAttempt that generated this PaymentMethod, if any.
   */
  setup_attempt?: (string | SetupAttempt) | null;
};
/**
 * payment_method_card_present
 */
export type PaymentMethodCardPresent = {
  /**
   * Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  brand?: string | null;
  /**
   * The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card.
   */
  brand_product?: string | null;
  /**
   * The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
   */
  cardholder_name?: string | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * A high-level description of the type of cards issued in this range.
   */
  description?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding?: string | null;
  /**
   * The name of the card's issuing bank.
   */
  issuer?: string | null;
  /**
   * The last four digits of the card.
   */
  last4?: string | null;
  /**
   * Contains information about card networks that can be used to process the payment.
   */
  networks?: PaymentMethodCardPresentNetworks | null;
  /**
   * Details about payment methods collected offline.
   */
  offline?: PaymentMethodDetailsCardPresentOffline | null;
  /**
   * EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
   */
  preferred_locales?: string[] | null;
  /**
   * How card details were read in this transaction.
   */
  read_method?:
    | (
        | 'contact_emv'
        | 'contactless_emv'
        | 'contactless_magstripe_mode'
        | 'magnetic_stripe_fallback'
        | 'magnetic_stripe_track2'
      )
    | null;
  wallet?: PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet;
};
/**
 * payment_method_card_present_networks
 */
export type PaymentMethodCardPresentNetworks = {
  /**
   * All networks available for selection via [payment_method_options.card.network](/api/payment_intents/confirm#confirm_payment_intent-payment_method_options-card-network).
   */
  available: string[];
  /**
   * The preferred network for the card.
   */
  preferred?: string | null;
};
/**
 * payment_method_card_wallet
 */
export type PaymentMethodCardWallet = {
  amex_express_checkout?: PaymentMethodCardWalletAmexExpressCheckout;
  apple_pay?: PaymentMethodCardWalletApplePay;
  /**
   * (For tokenized numbers only.) The last four digits of the device account number.
   */
  dynamic_last4?: string | null;
  google_pay?: PaymentMethodCardWalletGooglePay;
  link?: PaymentMethodCardWalletLink;
  masterpass?: PaymentMethodCardWalletMasterpass;
  samsung_pay?: PaymentMethodCardWalletSamsungPay;
  /**
   * The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
   */
  type:
    | 'amex_express_checkout'
    | 'apple_pay'
    | 'google_pay'
    | 'link'
    | 'masterpass'
    | 'samsung_pay'
    | 'visa_checkout';
  visa_checkout?: PaymentMethodCardWalletVisaCheckout;
};
/**
 * payment_method_card_wallet_amex_express_checkout
 */
export type PaymentMethodCardWalletAmexExpressCheckout = unknown;
/**
 * payment_method_card_wallet_apple_pay
 */
export type PaymentMethodCardWalletApplePay = unknown;
/**
 * payment_method_card_wallet_google_pay
 */
export type PaymentMethodCardWalletGooglePay = unknown;
/**
 * payment_method_card_wallet_link
 */
export type PaymentMethodCardWalletLink = unknown;
/**
 * payment_method_card_wallet_masterpass
 */
export type PaymentMethodCardWalletMasterpass = {
  /**
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /**
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  email?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  name?: string | null;
  /**
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};
/**
 * payment_method_card_wallet_samsung_pay
 */
export type PaymentMethodCardWalletSamsungPay = unknown;
/**
 * payment_method_card_wallet_visa_checkout
 */
export type PaymentMethodCardWalletVisaCheckout = {
  /**
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /**
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  email?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  name?: string | null;
  /**
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};
/**
 * payment_method_cashapp
 */
export type PaymentMethodCashapp = {
  /**
   * A unique and immutable identifier assigned by Cash App to every buyer.
   */
  buyer_id?: string | null;
  /**
   * A public identifier for buyers using Cash App.
   */
  cashtag?: string | null;
};
/**
 * PaymentMethodConfigBizPaymentMethodConfigurationDetails
 */
export type PaymentMethodConfigBizPaymentMethodConfigurationDetails = {
  /**
   * ID of the payment method configuration used.
   */
  id: string;
  /**
   * ID of the parent payment method configuration used.
   */
  parent?: string | null;
};
/**
 * PaymentMethodConfigResourceDisplayPreference
 */
export type PaymentMethodConfigResourceDisplayPreference = {
  /**
   * For child configs, whether or not the account's preference will be observed. If `false`, the parent configuration's default is used.
   */
  overridable?: boolean | null;
  /**
   * The account's display preference.
   */
  preference: 'none' | 'off' | 'on';
  /**
   * The effective display preference value.
   */
  value: 'off' | 'on';
};
/**
 * PaymentMethodConfigResourcePaymentMethodProperties
 */
export type PaymentMethodConfigResourcePaymentMethodProperties = {
  /**
   * Whether this payment method may be offered at checkout. True if `display_preference` is `on` and the payment method's capability is active.
   */
  available: boolean;
  display_preference: PaymentMethodConfigResourceDisplayPreference;
};
/**
 * PaymentMethodConfigResourcePaymentMethodConfiguration
 * PaymentMethodConfigurations control which payment methods are displayed to your customers when you don't explicitly specify payment method types. You can have multiple configurations with different sets of payment methods for different scenarios.
 *
 * There are two types of PaymentMethodConfigurations. Which is used depends on the [charge type](https://stripe.com/docs/connect/charges):
 *
 * **Direct** configurations apply to payments created on your account, including Connect destination charges, Connect separate charges and transfers, and payments not involving Connect.
 *
 * **Child** configurations apply to payments created on your connected accounts using direct charges, and charges with the on_behalf_of parameter.
 *
 * Child configurations have a `parent` that sets default values and controls which settings connected accounts may override. You can specify a parent ID at payment time, and Stripe will automatically resolve the connected account’s associated child configuration. Parent configurations are [managed in the dashboard](https://dashboard.stripe.com/settings/payment_methods/connected_accounts) and are not available in this API.
 *
 * Related guides:
 * - [Payment Method Configurations API](https://stripe.com/docs/connect/payment-method-configurations)
 * - [Multiple configurations on dynamic payment methods](https://stripe.com/docs/payments/multiple-payment-method-configs)
 * - [Multiple configurations for your Connect accounts](https://stripe.com/docs/connect/multiple-payment-method-configurations)
 */
export type PaymentMethodConfiguration = {
  acss_debit?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * Whether the configuration can be used for new payments.
   */
  active: boolean;
  affirm?: PaymentMethodConfigResourcePaymentMethodProperties;
  afterpay_clearpay?: PaymentMethodConfigResourcePaymentMethodProperties;
  alipay?: PaymentMethodConfigResourcePaymentMethodProperties;
  alma?: PaymentMethodConfigResourcePaymentMethodProperties;
  amazon_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  apple_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * For child configs, the Connect application associated with the configuration.
   */
  application?: string | null;
  au_becs_debit?: PaymentMethodConfigResourcePaymentMethodProperties;
  bacs_debit?: PaymentMethodConfigResourcePaymentMethodProperties;
  bancontact?: PaymentMethodConfigResourcePaymentMethodProperties;
  billie?: PaymentMethodConfigResourcePaymentMethodProperties;
  blik?: PaymentMethodConfigResourcePaymentMethodProperties;
  boleto?: PaymentMethodConfigResourcePaymentMethodProperties;
  card?: PaymentMethodConfigResourcePaymentMethodProperties;
  cartes_bancaires?: PaymentMethodConfigResourcePaymentMethodProperties;
  cashapp?: PaymentMethodConfigResourcePaymentMethodProperties;
  customer_balance?: PaymentMethodConfigResourcePaymentMethodProperties;
  eps?: PaymentMethodConfigResourcePaymentMethodProperties;
  fpx?: PaymentMethodConfigResourcePaymentMethodProperties;
  giropay?: PaymentMethodConfigResourcePaymentMethodProperties;
  google_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  grabpay?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * Unique identifier for the object.
   */
  id: string;
  ideal?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * The default configuration is used whenever a payment method configuration is not specified.
   */
  is_default: boolean;
  jcb?: PaymentMethodConfigResourcePaymentMethodProperties;
  kakao_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  klarna?: PaymentMethodConfigResourcePaymentMethodProperties;
  konbini?: PaymentMethodConfigResourcePaymentMethodProperties;
  kr_card?: PaymentMethodConfigResourcePaymentMethodProperties;
  link?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  mobilepay?: PaymentMethodConfigResourcePaymentMethodProperties;
  multibanco?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * The configuration's name.
   */
  name: string;
  naver_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  nz_bank_account?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'payment_method_configuration';
  oxxo?: PaymentMethodConfigResourcePaymentMethodProperties;
  p24?: PaymentMethodConfigResourcePaymentMethodProperties;
  /**
   * For child configs, the configuration's parent configuration.
   */
  parent?: string | null;
  pay_by_bank?: PaymentMethodConfigResourcePaymentMethodProperties;
  payco?: PaymentMethodConfigResourcePaymentMethodProperties;
  paynow?: PaymentMethodConfigResourcePaymentMethodProperties;
  paypal?: PaymentMethodConfigResourcePaymentMethodProperties;
  pix?: PaymentMethodConfigResourcePaymentMethodProperties;
  promptpay?: PaymentMethodConfigResourcePaymentMethodProperties;
  revolut_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  samsung_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  satispay?: PaymentMethodConfigResourcePaymentMethodProperties;
  sepa_debit?: PaymentMethodConfigResourcePaymentMethodProperties;
  sofort?: PaymentMethodConfigResourcePaymentMethodProperties;
  swish?: PaymentMethodConfigResourcePaymentMethodProperties;
  twint?: PaymentMethodConfigResourcePaymentMethodProperties;
  us_bank_account?: PaymentMethodConfigResourcePaymentMethodProperties;
  wechat_pay?: PaymentMethodConfigResourcePaymentMethodProperties;
  zip?: PaymentMethodConfigResourcePaymentMethodProperties;
};
/**
 * payment_method_customer_balance
 */
export type PaymentMethodCustomerBalance = unknown;
/**
 * payment_method_details
 */
export type PaymentMethodDetails = {
  ach_credit_transfer?: PaymentMethodDetailsAchCreditTransfer;
  ach_debit?: PaymentMethodDetailsAchDebit;
  acss_debit?: PaymentMethodDetailsAcssDebit;
  affirm?: PaymentMethodDetailsAffirm;
  afterpay_clearpay?: PaymentMethodDetailsAfterpayClearpay;
  alipay?: PaymentFlowsPrivatePaymentMethodsAlipayDetails;
  alma?: PaymentMethodDetailsAlma;
  amazon_pay?: PaymentMethodDetailsAmazonPay;
  au_becs_debit?: PaymentMethodDetailsAuBecsDebit;
  bacs_debit?: PaymentMethodDetailsBacsDebit;
  bancontact?: PaymentMethodDetailsBancontact;
  billie?: PaymentMethodDetailsBillie;
  blik?: PaymentMethodDetailsBlik;
  boleto?: PaymentMethodDetailsBoleto;
  card?: PaymentMethodDetailsCard;
  card_present?: PaymentMethodDetailsCardPresent;
  cashapp?: PaymentMethodDetailsCashapp;
  customer_balance?: PaymentMethodDetailsCustomerBalance;
  eps?: PaymentMethodDetailsEps;
  fpx?: PaymentMethodDetailsFpx;
  giropay?: PaymentMethodDetailsGiropay;
  grabpay?: PaymentMethodDetailsGrabpay;
  ideal?: PaymentMethodDetailsIdeal;
  interac_present?: PaymentMethodDetailsInteracPresent;
  kakao_pay?: PaymentMethodDetailsKakaoPay;
  klarna?: PaymentMethodDetailsKlarna;
  konbini?: PaymentMethodDetailsKonbini;
  kr_card?: PaymentMethodDetailsKrCard;
  link?: PaymentMethodDetailsLink;
  mobilepay?: PaymentMethodDetailsMobilepay;
  multibanco?: PaymentMethodDetailsMultibanco;
  naver_pay?: PaymentMethodDetailsNaverPay;
  nz_bank_account?: PaymentMethodDetailsNzBankAccount;
  oxxo?: PaymentMethodDetailsOxxo;
  p24?: PaymentMethodDetailsP24;
  pay_by_bank?: PaymentMethodDetailsPayByBank;
  payco?: PaymentMethodDetailsPayco;
  paynow?: PaymentMethodDetailsPaynow;
  paypal?: PaymentMethodDetailsPaypal;
  pix?: PaymentMethodDetailsPix;
  promptpay?: PaymentMethodDetailsPromptpay;
  revolut_pay?: PaymentMethodDetailsRevolutPay;
  samsung_pay?: PaymentMethodDetailsSamsungPay;
  satispay?: PaymentMethodDetailsSatispay;
  sepa_debit?: PaymentMethodDetailsSepaDebit;
  sofort?: PaymentMethodDetailsSofort;
  stripe_account?: PaymentMethodDetailsStripeAccount;
  swish?: PaymentMethodDetailsSwish;
  twint?: PaymentMethodDetailsTwint;
  /**
   * The type of transaction-specific details of the payment method used in the payment. See [PaymentMethod.type](https://stripe.com/docs/api/payment_methods/object#payment_method_object-type) for the full list of possible types.
   * An additional hash is included on `payment_method_details` with a name matching this value.
   * It contains information specific to the payment method.
   */
  type: string;
  us_bank_account?: PaymentMethodDetailsUsBankAccount;
  wechat?: PaymentMethodDetailsWechat;
  wechat_pay?: PaymentMethodDetailsWechatPay;
  zip?: PaymentMethodDetailsZip;
};
/**
 * payment_method_details_ach_credit_transfer
 */
export type PaymentMethodDetailsAchCreditTransfer = {
  /**
   * Account number to transfer funds to.
   */
  account_number?: string | null;
  /**
   * Name of the bank associated with the routing number.
   */
  bank_name?: string | null;
  /**
   * Routing transit number for the bank account to transfer funds to.
   */
  routing_number?: string | null;
  /**
   * SWIFT code of the bank associated with the routing number.
   */
  swift_code?: string | null;
};
/**
 * payment_method_details_ach_debit
 */
export type PaymentMethodDetailsAchDebit = {
  /**
   * Type of entity that holds the account. This can be either `individual` or `company`.
   */
  account_holder_type?: ('company' | 'individual') | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Two-letter ISO code representing the country the bank account is located in.
   */
  country?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * Routing transit number of the bank account.
   */
  routing_number?: string | null;
};
/**
 * payment_method_details_acss_debit
 */
export type PaymentMethodDetailsAcssDebit = {
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Institution number of the bank account
   */
  institution_number?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment.
   */
  mandate?: string;
  /**
   * Transit number of the bank account.
   */
  transit_number?: string | null;
};
/**
 * payment_method_details_affirm
 */
export type PaymentMethodDetailsAffirm = {
  /**
   * ID of the [location](https://stripe.com/docs/api/terminal/locations) that this transaction's reader is assigned to.
   */
  location?: string;
  /**
   * ID of the [reader](https://stripe.com/docs/api/terminal/readers) this transaction was made on.
   */
  reader?: string;
  /**
   * The Affirm transaction ID associated with this payment.
   */
  transaction_id?: string | null;
};
/**
 * payment_method_details_afterpay_clearpay
 */
export type PaymentMethodDetailsAfterpayClearpay = {
  /**
   * The Afterpay order ID associated with this payment intent.
   */
  order_id?: string | null;
  /**
   * Order identifier shown to the merchant in Afterpay’s online portal.
   */
  reference?: string | null;
};
/**
 * payment_method_details_alma
 */
export type PaymentMethodDetailsAlma = unknown;
/**
 * payment_method_details_amazon_pay
 */
export type PaymentMethodDetailsAmazonPay = {
  funding?: AmazonPayUnderlyingPaymentMethodFundingDetails;
};
/**
 * payment_method_details_au_becs_debit
 */
export type PaymentMethodDetailsAuBecsDebit = {
  /**
   * Bank-State-Branch number of the bank account.
   */
  bsb_number?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment.
   */
  mandate?: string;
};
/**
 * payment_method_details_bacs_debit
 */
export type PaymentMethodDetailsBacsDebit = {
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment.
   */
  mandate?: string | null;
  /**
   * Sort code of the bank account. (e.g., `10-20-30`)
   */
  sort_code?: string | null;
};
/**
 * payment_method_details_bancontact
 */
export type PaymentMethodDetailsBancontact = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bank_code?: string | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Bank Identifier Code of the bank associated with the bank account.
   */
  bic?: string | null;
  /**
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit?: (string | PaymentMethod) | null;
  /**
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit_mandate?: (string | Mandate) | null;
  /**
   * Last four characters of the IBAN.
   */
  iban_last4?: string | null;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: ('de' | 'en' | 'fr' | 'nl') | null;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
};
/**
 * payment_method_details_billie
 */
export type PaymentMethodDetailsBillie = unknown;
/**
 * payment_method_details_blik
 */
export type PaymentMethodDetailsBlik = {
  /**
   * A unique and immutable identifier assigned by BLIK to every buyer.
   */
  buyer_id?: string | null;
};
/**
 * payment_method_details_boleto
 */
export type PaymentMethodDetailsBoleto = {
  /**
   * The tax ID of the customer (CPF for individuals consumers or CNPJ for businesses consumers)
   */
  tax_id: string;
};
/**
 * payment_method_details_card
 */
export type PaymentMethodDetailsCard = {
  /**
   * The authorized amount.
   */
  amount_authorized?: number | null;
  /**
   * Authorization code on the charge.
   */
  authorization_code?: string | null;
  /**
   * Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  brand?: string | null;
  /**
   * When using manual capture, a future timestamp at which the charge will be automatically refunded if uncaptured.
   */
  capture_before?: number;
  /**
   * Check results by Card networks on Card address and CVC at time of payment.
   */
  checks?: PaymentMethodDetailsCardChecks | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  extended_authorization?: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesExtendedAuthorizationExtendedAuthorization;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding?: string | null;
  incremental_authorization?: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesIncrementalAuthorizationIncrementalAuthorization;
  /**
   * Installment details for this payment (Mexico only).
   *
   * For more information, see the [installments integration guide](https://stripe.com/docs/payments/installments).
   */
  installments?: PaymentMethodDetailsCardInstallments | null;
  /**
   * The last four digits of the card.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment or created by it.
   */
  mandate?: string | null;
  multicapture?: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceMulticapture;
  /**
   * Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  network?: string | null;
  /**
   * If this card has network token credentials, this contains the details of the network token credentials.
   */
  network_token?: PaymentMethodDetailsCardNetworkToken | null;
  /**
   * This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.
   */
  network_transaction_id?: string | null;
  overcapture?: PaymentFlowsPrivatePaymentMethodsCardDetailsApiResourceEnterpriseFeaturesOvercaptureOvercapture;
  /**
   * Status of a card based on the card issuer.
   */
  regulated_status?: ('regulated' | 'unregulated') | null;
  /**
   * Populated if this transaction used 3D Secure authentication.
   */
  three_d_secure?: ThreeDSecureDetailsCharge | null;
  /**
   * If this Card is part of a card wallet, this contains the details of the card wallet.
   */
  wallet?: PaymentMethodDetailsCardWallet | null;
};
/**
 * payment_method_details_card_checks
 */
export type PaymentMethodDetailsCardChecks = {
  /**
   * If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_line1_check?: string | null;
  /**
   * If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_postal_code_check?: string | null;
  /**
   * If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  cvc_check?: string | null;
};
/**
 * payment_method_details_card_installments
 */
export type PaymentMethodDetailsCardInstallments = {
  /**
   * Installment plan selected for the payment.
   */
  plan?: PaymentMethodDetailsCardInstallmentsPlan | null;
};
/**
 * payment_method_details_card_installments_plan
 */
export type PaymentMethodDetailsCardInstallmentsPlan = {
  /**
   * For `fixed_count` installment plans, this is the number of installment payments your customer will make to their credit card.
   */
  count?: number | null;
  /**
   * For `fixed_count` installment plans, this is the interval between installment payments your customer will make to their credit card.
   * One of `month`.
   */
  interval?: 'month' | null;
  /**
   * Type of installment plan, one of `fixed_count`.
   */
  type: 'fixed_count';
};
/**
 * payment_method_details_card_network_token
 */
export type PaymentMethodDetailsCardNetworkToken = {
  /**
   * Indicates if Stripe used a network token, either user provided or Stripe managed when processing the transaction.
   */
  used: boolean;
};
/**
 * payment_method_details_card_present
 */
export type PaymentMethodDetailsCardPresent = {
  /**
   * The authorized amount
   */
  amount_authorized?: number | null;
  /**
   * Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  brand?: string | null;
  /**
   * The [product code](https://stripe.com/docs/card-product-codes) that identifies the specific program or product associated with a card.
   */
  brand_product?: string | null;
  /**
   * When using manual capture, a future timestamp after which the charge will be automatically refunded if uncaptured.
   */
  capture_before?: number;
  /**
   * The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
   */
  cardholder_name?: string | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * A high-level description of the type of cards issued in this range.
   */
  description?: string | null;
  /**
   * Authorization response cryptogram.
   */
  emv_auth_data?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding?: string | null;
  /**
   * ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
   */
  generated_card?: string | null;
  /**
   * Whether this [PaymentIntent](https://stripe.com/docs/api/payment_intents) is eligible for incremental authorizations. Request support using [request_incremental_authorization_support](https://stripe.com/docs/api/payment_intents/create#create_payment_intent-payment_method_options-card_present-request_incremental_authorization_support).
   */
  incremental_authorization_supported: boolean;
  /**
   * The name of the card's issuing bank.
   */
  issuer?: string | null;
  /**
   * The last four digits of the card.
   */
  last4?: string | null;
  /**
   * Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  network?: string | null;
  /**
   * This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.
   */
  network_transaction_id?: string | null;
  /**
   * Details about payments collected offline.
   */
  offline?: PaymentMethodDetailsCardPresentOffline | null;
  /**
   * Defines whether the authorized amount can be over-captured or not
   */
  overcapture_supported: boolean;
  /**
   * EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
   */
  preferred_locales?: string[] | null;
  /**
   * How card details were read in this transaction.
   */
  read_method?:
    | (
        | 'contact_emv'
        | 'contactless_emv'
        | 'contactless_magstripe_mode'
        | 'magnetic_stripe_fallback'
        | 'magnetic_stripe_track2'
      )
    | null;
  /**
   * A collection of fields required to be displayed on receipts. Only required for EMV transactions.
   */
  receipt?: PaymentMethodDetailsCardPresentReceipt | null;
  wallet?: PaymentFlowsPrivatePaymentMethodsCardPresentCommonWallet;
};
/**
 * payment_method_details_card_present_offline
 */
export type PaymentMethodDetailsCardPresentOffline = {
  /**
   * Time at which the payment was collected while offline
   */
  stored_at?: number | null;
  /**
   * The method used to process this payment method offline. Only deferred is allowed.
   */
  type?: 'deferred' | null;
};
/**
 * payment_method_details_card_present_receipt
 */
export type PaymentMethodDetailsCardPresentReceipt = {
  /**
   * The type of account being debited or credited
   */
  account_type?: 'checking' | 'credit' | 'prepaid' | 'unknown';
  /**
   * EMV tag 9F26, cryptogram generated by the integrated circuit chip.
   */
  application_cryptogram?: string | null;
  /**
   * Mnenomic of the Application Identifier.
   */
  application_preferred_name?: string | null;
  /**
   * Identifier for this transaction.
   */
  authorization_code?: string | null;
  /**
   * EMV tag 8A. A code returned by the card issuer.
   */
  authorization_response_code?: string | null;
  /**
   * Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
   */
  cardholder_verification_method?: string | null;
  /**
   * EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
   */
  dedicated_file_name?: string | null;
  /**
   * The outcome of a series of EMV functions performed by the card reader.
   */
  terminal_verification_results?: string | null;
  /**
   * An indication of various EMV functions performed during the transaction.
   */
  transaction_status_information?: string | null;
};
/**
 * payment_method_details_card_wallet
 */
export type PaymentMethodDetailsCardWallet = {
  amex_express_checkout?: PaymentMethodDetailsCardWalletAmexExpressCheckout;
  apple_pay?: PaymentMethodDetailsCardWalletApplePay;
  /**
   * (For tokenized numbers only.) The last four digits of the device account number.
   */
  dynamic_last4?: string | null;
  google_pay?: PaymentMethodDetailsCardWalletGooglePay;
  link?: PaymentMethodDetailsCardWalletLink;
  masterpass?: PaymentMethodDetailsCardWalletMasterpass;
  samsung_pay?: PaymentMethodDetailsCardWalletSamsungPay;
  /**
   * The type of the card wallet, one of `amex_express_checkout`, `apple_pay`, `google_pay`, `masterpass`, `samsung_pay`, `visa_checkout`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
   */
  type:
    | 'amex_express_checkout'
    | 'apple_pay'
    | 'google_pay'
    | 'link'
    | 'masterpass'
    | 'samsung_pay'
    | 'visa_checkout';
  visa_checkout?: PaymentMethodDetailsCardWalletVisaCheckout;
};
/**
 * payment_method_details_card_wallet_amex_express_checkout
 */
export type PaymentMethodDetailsCardWalletAmexExpressCheckout = unknown;
/**
 * payment_method_details_card_wallet_apple_pay
 */
export type PaymentMethodDetailsCardWalletApplePay = unknown;
/**
 * payment_method_details_card_wallet_google_pay
 */
export type PaymentMethodDetailsCardWalletGooglePay = unknown;
/**
 * payment_method_details_card_wallet_link
 */
export type PaymentMethodDetailsCardWalletLink = unknown;
/**
 * payment_method_details_card_wallet_masterpass
 */
export type PaymentMethodDetailsCardWalletMasterpass = {
  /**
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /**
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  email?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  name?: string | null;
  /**
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};
/**
 * payment_method_details_card_wallet_samsung_pay
 */
export type PaymentMethodDetailsCardWalletSamsungPay = unknown;
/**
 * payment_method_details_card_wallet_visa_checkout
 */
export type PaymentMethodDetailsCardWalletVisaCheckout = {
  /**
   * Owner's verified billing address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  billing_address?: Address | null;
  /**
   * Owner's verified email. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  email?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  name?: string | null;
  /**
   * Owner's verified shipping address. Values are verified or provided by the wallet directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  shipping_address?: Address | null;
};
/**
 * payment_method_details_cashapp
 */
export type PaymentMethodDetailsCashapp = {
  /**
   * A unique and immutable identifier assigned by Cash App to every buyer.
   */
  buyer_id?: string | null;
  /**
   * A public identifier for buyers using Cash App.
   */
  cashtag?: string | null;
};
/**
 * payment_method_details_customer_balance
 */
export type PaymentMethodDetailsCustomerBalance = unknown;
/**
 * payment_method_details_eps
 */
export type PaymentMethodDetailsEps = {
  /**
   * The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
   */
  bank?:
    | (
        | 'arzte_und_apotheker_bank'
        | 'austrian_anadi_bank_ag'
        | 'bank_austria'
        | 'bankhaus_carl_spangler'
        | 'bankhaus_schelhammer_und_schattera_ag'
        | 'bawag_psk_ag'
        | 'bks_bank_ag'
        | 'brull_kallmus_bank_ag'
        | 'btv_vier_lander_bank'
        | 'capital_bank_grawe_gruppe_ag'
        | 'deutsche_bank_ag'
        | 'dolomitenbank'
        | 'easybank_ag'
        | 'erste_bank_und_sparkassen'
        | 'hypo_alpeadriabank_international_ag'
        | 'hypo_bank_burgenland_aktiengesellschaft'
        | 'hypo_noe_lb_fur_niederosterreich_u_wien'
        | 'hypo_oberosterreich_salzburg_steiermark'
        | 'hypo_tirol_bank_ag'
        | 'hypo_vorarlberg_bank_ag'
        | 'marchfelder_bank'
        | 'oberbank_ag'
        | 'raiffeisen_bankengruppe_osterreich'
        | 'schoellerbank_ag'
        | 'sparda_bank_wien'
        | 'volksbank_gruppe'
        | 'volkskreditbank_ag'
        | 'vr_bank_braunau'
      )
    | null;
  /**
   * Owner's verified full name. Values are verified or provided by EPS directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * EPS rarely provides this information so the attribute is usually empty.
   */
  verified_name?: string | null;
};
/**
 * payment_method_details_fpx
 */
export type PaymentMethodDetailsFpx = {
  /**
   * The customer's bank. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
   */
  bank:
    | 'affin_bank'
    | 'agrobank'
    | 'alliance_bank'
    | 'ambank'
    | 'bank_islam'
    | 'bank_muamalat'
    | 'bank_of_china'
    | 'bank_rakyat'
    | 'bsn'
    | 'cimb'
    | 'deutsche_bank'
    | 'hong_leong_bank'
    | 'hsbc'
    | 'kfh'
    | 'maybank2e'
    | 'maybank2u'
    | 'ocbc'
    | 'pb_enterprise'
    | 'public_bank'
    | 'rhb'
    | 'standard_chartered'
    | 'uob';
  /**
   * Unique transaction id generated by FPX for every request from the merchant
   */
  transaction_id?: string | null;
};
/**
 * payment_method_details_giropay
 */
export type PaymentMethodDetailsGiropay = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bank_code?: string | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Bank Identifier Code of the bank associated with the bank account.
   */
  bic?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by Giropay directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Giropay rarely provides this information so the attribute is usually empty.
   */
  verified_name?: string | null;
};
/**
 * payment_method_details_grabpay
 */
export type PaymentMethodDetailsGrabpay = {
  /**
   * Unique transaction id generated by GrabPay
   */
  transaction_id?: string | null;
};
/**
 * payment_method_details_ideal
 */
export type PaymentMethodDetailsIdeal = {
  /**
   * The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
   */
  bank?:
    | (
        | 'abn_amro'
        | 'asn_bank'
        | 'bunq'
        | 'handelsbanken'
        | 'ing'
        | 'knab'
        | 'moneyou'
        | 'n26'
        | 'nn'
        | 'rabobank'
        | 'regiobank'
        | 'revolut'
        | 'sns_bank'
        | 'triodos_bank'
        | 'van_lanschot'
        | 'yoursafe'
      )
    | null;
  /**
   * The Bank Identifier Code of the customer's bank.
   */
  bic?:
    | (
        | 'ABNANL2A'
        | 'ASNBNL21'
        | 'BITSNL2A'
        | 'BUNQNL2A'
        | 'FVLBNL22'
        | 'HANDNL2A'
        | 'INGBNL2A'
        | 'KNABNL2H'
        | 'MOYONL21'
        | 'NNBANL2G'
        | 'NTSBDEB1'
        | 'RABONL2U'
        | 'RBRBNL21'
        | 'REVOIE23'
        | 'REVOLT21'
        | 'SNSBNL2A'
        | 'TRIONL2U'
      )
    | null;
  /**
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit?: (string | PaymentMethod) | null;
  /**
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit_mandate?: (string | Mandate) | null;
  /**
   * Last four characters of the IBAN.
   */
  iban_last4?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
};
/**
 * payment_method_details_interac_present
 */
export type PaymentMethodDetailsInteracPresent = {
  /**
   * Card brand. Can be `interac`, `mastercard` or `visa`.
   */
  brand?: string | null;
  /**
   * The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
   */
  cardholder_name?: string | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * A high-level description of the type of cards issued in this range.
   */
  description?: string | null;
  /**
   * Authorization response cryptogram.
   */
  emv_auth_data?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding?: string | null;
  /**
   * ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
   */
  generated_card?: string | null;
  /**
   * The name of the card's issuing bank.
   */
  issuer?: string | null;
  /**
   * The last four digits of the card.
   */
  last4?: string | null;
  /**
   * Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  network?: string | null;
  /**
   * This is used by the financial networks to identify a transaction. Visa calls this the Transaction ID, Mastercard calls this the Trace ID, and American Express calls this the Acquirer Reference Data. This value will be present if it is returned by the financial network in the authorization response, and null otherwise.
   */
  network_transaction_id?: string | null;
  /**
   * EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
   */
  preferred_locales?: string[] | null;
  /**
   * How card details were read in this transaction.
   */
  read_method?:
    | (
        | 'contact_emv'
        | 'contactless_emv'
        | 'contactless_magstripe_mode'
        | 'magnetic_stripe_fallback'
        | 'magnetic_stripe_track2'
      )
    | null;
  /**
   * A collection of fields required to be displayed on receipts. Only required for EMV transactions.
   */
  receipt?: PaymentMethodDetailsInteracPresentReceipt | null;
};
/**
 * payment_method_details_interac_present_receipt
 */
export type PaymentMethodDetailsInteracPresentReceipt = {
  /**
   * The type of account being debited or credited
   */
  account_type?: 'checking' | 'savings' | 'unknown';
  /**
   * EMV tag 9F26, cryptogram generated by the integrated circuit chip.
   */
  application_cryptogram?: string | null;
  /**
   * Mnenomic of the Application Identifier.
   */
  application_preferred_name?: string | null;
  /**
   * Identifier for this transaction.
   */
  authorization_code?: string | null;
  /**
   * EMV tag 8A. A code returned by the card issuer.
   */
  authorization_response_code?: string | null;
  /**
   * Describes the method used by the cardholder to verify ownership of the card. One of the following: `approval`, `failure`, `none`, `offline_pin`, `offline_pin_and_signature`, `online_pin`, or `signature`.
   */
  cardholder_verification_method?: string | null;
  /**
   * EMV tag 84. Similar to the application identifier stored on the integrated circuit chip.
   */
  dedicated_file_name?: string | null;
  /**
   * The outcome of a series of EMV functions performed by the card reader.
   */
  terminal_verification_results?: string | null;
  /**
   * An indication of various EMV functions performed during the transaction.
   */
  transaction_status_information?: string | null;
};
/**
 * payment_method_details_kakao_pay
 */
export type PaymentMethodDetailsKakaoPay = {
  /**
   * A unique identifier for the buyer as determined by the local payment processor.
   */
  buyer_id?: string | null;
};
/**
 * payment_method_details_klarna
 */
export type PaymentMethodDetailsKlarna = {
  /**
   * The payer details for this transaction.
   */
  payer_details?: KlarnaPayerDetails | null;
  /**
   * The Klarna payment method used for this transaction.
   * Can be one of `pay_later`, `pay_now`, `pay_with_financing`, or `pay_in_installments`
   */
  payment_method_category?: string | null;
  /**
   * Preferred language of the Klarna authorization page that the customer is redirected to.
   * Can be one of `de-AT`, `en-AT`, `nl-BE`, `fr-BE`, `en-BE`, `de-DE`, `en-DE`, `da-DK`, `en-DK`, `es-ES`, `en-ES`, `fi-FI`, `sv-FI`, `en-FI`, `en-GB`, `en-IE`, `it-IT`, `en-IT`, `nl-NL`, `en-NL`, `nb-NO`, `en-NO`, `sv-SE`, `en-SE`, `en-US`, `es-US`, `fr-FR`, `en-FR`, `cs-CZ`, `en-CZ`, `ro-RO`, `en-RO`, `el-GR`, `en-GR`, `en-AU`, `en-NZ`, `en-CA`, `fr-CA`, `pl-PL`, `en-PL`, `pt-PT`, `en-PT`, `de-CH`, `fr-CH`, `it-CH`, or `en-CH`
   */
  preferred_locale?: string | null;
};
/**
 * payment_method_details_konbini
 */
export type PaymentMethodDetailsKonbini = {
  /**
   * If the payment succeeded, this contains the details of the convenience store where the payment was completed.
   */
  store?: PaymentMethodDetailsKonbiniStore | null;
};
/**
 * payment_method_details_konbini_store
 */
export type PaymentMethodDetailsKonbiniStore = {
  /**
   * The name of the convenience store chain where the payment was completed.
   */
  chain?: ('familymart' | 'lawson' | 'ministop' | 'seicomart') | null;
};
/**
 * payment_method_details_kr_card
 */
export type PaymentMethodDetailsKrCard = {
  /**
   * The local credit or debit card brand.
   */
  brand?:
    | (
        | 'bc'
        | 'citi'
        | 'hana'
        | 'hyundai'
        | 'jeju'
        | 'jeonbuk'
        | 'kakaobank'
        | 'kbank'
        | 'kdbbank'
        | 'kookmin'
        | 'kwangju'
        | 'lotte'
        | 'mg'
        | 'nh'
        | 'post'
        | 'samsung'
        | 'savingsbank'
        | 'shinhan'
        | 'shinhyup'
        | 'suhyup'
        | 'tossbank'
        | 'woori'
      )
    | null;
  /**
   * A unique identifier for the buyer as determined by the local payment processor.
   */
  buyer_id?: string | null;
  /**
   * The last four digits of the card. This may not be present for American Express cards.
   */
  last4?: string | null;
};
/**
 * payment_method_details_link
 */
export type PaymentMethodDetailsLink = {
  /**
   * Two-letter ISO code representing the funding source country beneath the Link payment.
   * You could use this attribute to get a sense of international fees.
   */
  country?: string | null;
};
/**
 * payment_method_details_mobilepay
 */
export type PaymentMethodDetailsMobilepay = {
  /**
   * Internal card details
   */
  card?: InternalCard | null;
};
/**
 * payment_method_details_multibanco
 */
export type PaymentMethodDetailsMultibanco = {
  /**
   * Entity number associated with this Multibanco payment.
   */
  entity?: string | null;
  /**
   * Reference number associated with this Multibanco payment.
   */
  reference?: string | null;
};
/**
 * payment_method_details_naver_pay
 */
export type PaymentMethodDetailsNaverPay = {
  /**
   * A unique identifier for the buyer as determined by the local payment processor.
   */
  buyer_id?: string | null;
};
/**
 * payment_method_details_nz_bank_account
 */
export type PaymentMethodDetailsNzBankAccount = {
  /**
   * The name on the bank account. Only present if the account holder name is different from the name of the authorized signatory collected in the PaymentMethod’s billing details.
   */
  account_holder_name?: string | null;
  /**
   * The numeric code for the bank account's bank.
   */
  bank_code: string;
  /**
   * The name of the bank.
   */
  bank_name: string;
  /**
   * The numeric code for the bank account's bank branch.
   */
  branch_code: string;
  /**
   * Last four digits of the bank account number.
   */
  last4: string;
  /**
   * The suffix of the bank account number.
   */
  suffix?: string | null;
};
/**
 * payment_method_details_oxxo
 */
export type PaymentMethodDetailsOxxo = {
  /**
   * OXXO reference number
   */
  number?: string | null;
};
/**
 * payment_method_details_p24
 */
export type PaymentMethodDetailsP24 = {
  /**
   * The customer's bank. Can be one of `ing`, `citi_handlowy`, `tmobile_usbugi_bankowe`, `plus_bank`, `etransfer_pocztowy24`, `banki_spbdzielcze`, `bank_nowy_bfg_sa`, `getin_bank`, `velobank`, `blik`, `noble_pay`, `ideabank`, `envelobank`, `santander_przelew24`, `nest_przelew`, `mbank_mtransfer`, `inteligo`, `pbac_z_ipko`, `bnp_paribas`, `credit_agricole`, `toyota_bank`, `bank_pekao_sa`, `volkswagen_bank`, `bank_millennium`, `alior_bank`, or `boz`.
   */
  bank?:
    | (
        | 'alior_bank'
        | 'bank_millennium'
        | 'bank_nowy_bfg_sa'
        | 'bank_pekao_sa'
        | 'banki_spbdzielcze'
        | 'blik'
        | 'bnp_paribas'
        | 'boz'
        | 'citi_handlowy'
        | 'credit_agricole'
        | 'envelobank'
        | 'etransfer_pocztowy24'
        | 'getin_bank'
        | 'ideabank'
        | 'ing'
        | 'inteligo'
        | 'mbank_mtransfer'
        | 'nest_przelew'
        | 'noble_pay'
        | 'pbac_z_ipko'
        | 'plus_bank'
        | 'santander_przelew24'
        | 'tmobile_usbugi_bankowe'
        | 'toyota_bank'
        | 'velobank'
        | 'volkswagen_bank'
      )
    | null;
  /**
   * Unique reference for this Przelewy24 payment.
   */
  reference?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by Przelewy24 directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   * Przelewy24 rarely provides this information so the attribute is usually empty.
   */
  verified_name?: string | null;
};
/**
 * payment_method_details_passthrough_card
 */
export type PaymentMethodDetailsPassthroughCard = {
  /**
   * Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  brand?: string | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month?: number | null;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year?: number | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding?: string | null;
  /**
   * The last four digits of the card.
   */
  last4?: string | null;
};
/**
 * payment_method_details_pay_by_bank
 */
export type PaymentMethodDetailsPayByBank = unknown;
/**
 * payment_method_details_payco
 */
export type PaymentMethodDetailsPayco = {
  /**
   * A unique identifier for the buyer as determined by the local payment processor.
   */
  buyer_id?: string | null;
};
/**
 * payment_method_details_paynow
 */
export type PaymentMethodDetailsPaynow = {
  /**
   * Reference number associated with this PayNow payment
   */
  reference?: string | null;
};
/**
 * payment_method_details_paypal
 */
export type PaymentMethodDetailsPaypal = {
  /**
   * Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  country?: string | null;
  /**
   * Owner's email. Values are provided by PayPal directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  payer_email?: string | null;
  /**
   * PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
   */
  payer_id?: string | null;
  /**
   * Owner's full name. Values provided by PayPal directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  payer_name?: string | null;
  /**
   * The level of protection offered as defined by PayPal Seller Protection for Merchants, for this transaction.
   */
  seller_protection?: PaypalSellerProtection | null;
  /**
   * A unique ID generated by PayPal for this transaction.
   */
  transaction_id?: string | null;
};
/**
 * payment_method_details_pix
 */
export type PaymentMethodDetailsPix = {
  /**
   * Unique transaction id generated by BCB
   */
  bank_transaction_id?: string | null;
};
/**
 * payment_method_details_promptpay
 */
export type PaymentMethodDetailsPromptpay = {
  /**
   * Bill reference generated by PromptPay
   */
  reference?: string | null;
};
/**
 * payment_method_details_revolut_pay
 */
export type PaymentMethodDetailsRevolutPay = {
  funding?: RevolutPayUnderlyingPaymentMethodFundingDetails;
};
/**
 * payment_method_details_samsung_pay
 */
export type PaymentMethodDetailsSamsungPay = {
  /**
   * A unique identifier for the buyer as determined by the local payment processor.
   */
  buyer_id?: string | null;
};
/**
 * payment_method_details_satispay
 */
export type PaymentMethodDetailsSatispay = unknown;
/**
 * payment_method_details_sepa_debit
 */
export type PaymentMethodDetailsSepaDebit = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bank_code?: string | null;
  /**
   * Branch code of bank associated with the bank account.
   */
  branch_code?: string | null;
  /**
   * Two-letter ISO code representing the country the bank account is located in.
   */
  country?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four characters of the IBAN.
   */
  last4?: string | null;
  /**
   * Find the ID of the mandate used for this payment under the [payment_method_details.sepa_debit.mandate](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-sepa_debit-mandate) property on the Charge. Use this mandate ID to [retrieve the Mandate](https://stripe.com/docs/api/mandates/retrieve).
   */
  mandate?: string | null;
};
/**
 * payment_method_details_sofort
 */
export type PaymentMethodDetailsSofort = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bank_code?: string | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Bank Identifier Code of the bank associated with the bank account.
   */
  bic?: string | null;
  /**
   * Two-letter ISO code representing the country the bank account is located in.
   */
  country?: string | null;
  /**
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit?: (string | PaymentMethod) | null;
  /**
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this Charge.
   */
  generated_sepa_debit_mandate?: (string | Mandate) | null;
  /**
   * Last four characters of the IBAN.
   */
  iban_last4?: string | null;
  /**
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   * Can be one of `de`, `en`, `es`, `fr`, `it`, `nl`, or `pl`
   */
  preferred_language?: ('de' | 'en' | 'es' | 'fr' | 'it' | 'nl' | 'pl') | null;
  /**
   * Owner's verified full name. Values are verified or provided by SOFORT directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
};
/**
 * payment_method_details_stripe_account
 */
export type PaymentMethodDetailsStripeAccount = unknown;
/**
 * payment_method_details_swish
 */
export type PaymentMethodDetailsSwish = {
  /**
   * Uniquely identifies the payer's Swish account. You can use this attribute to check whether two Swish transactions were paid for by the same payer
   */
  fingerprint?: string | null;
  /**
   * Payer bank reference number for the payment
   */
  payment_reference?: string | null;
  /**
   * The last four digits of the Swish account phone number
   */
  verified_phone_last4?: string | null;
};
/**
 * payment_method_details_twint
 */
export type PaymentMethodDetailsTwint = unknown;
/**
 * payment_method_details_us_bank_account
 */
export type PaymentMethodDetailsUsBankAccount = {
  /**
   * Account holder type: individual or company.
   */
  account_holder_type?: ('company' | 'individual') | null;
  /**
   * Account type: checkings or savings. Defaults to checking if omitted.
   */
  account_type?: ('checking' | 'savings') | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * ID of the mandate used to make this payment.
   */
  mandate?: string | Mandate;
  /**
   * Reference number to locate ACH payments with customer's bank.
   */
  payment_reference?: string | null;
  /**
   * Routing number of the bank account.
   */
  routing_number?: string | null;
};
/**
 * payment_method_details_wechat
 */
export type PaymentMethodDetailsWechat = unknown;
/**
 * payment_method_details_wechat_pay
 */
export type PaymentMethodDetailsWechatPay = {
  /**
   * Uniquely identifies this particular WeChat Pay account. You can use this attribute to check whether two WeChat accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * ID of the [location](https://stripe.com/docs/api/terminal/locations) that this transaction's reader is assigned to.
   */
  location?: string;
  /**
   * ID of the [reader](https://stripe.com/docs/api/terminal/readers) this transaction was made on.
   */
  reader?: string;
  /**
   * Transaction ID of this particular WeChat Pay transaction.
   */
  transaction_id?: string | null;
};
/**
 * payment_method_details_zip
 */
export type PaymentMethodDetailsZip = unknown;
/**
 * PaymentMethodDomainResourcePaymentMethodDomain
 * A payment method domain represents a web domain that you have registered with Stripe.
 * Stripe Elements use registered payment method domains to control where certain payment methods are shown.
 *
 * Related guide: [Payment method domains](https://stripe.com/docs/payments/payment-methods/pmd-registration).
 */
export type PaymentMethodDomain = {
  amazon_pay: PaymentMethodDomainResourcePaymentMethodStatus;
  apple_pay: PaymentMethodDomainResourcePaymentMethodStatus;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The domain name that this payment method domain object represents.
   */
  domain_name: string;
  /**
   * Whether this payment method domain is enabled. If the domain is not enabled, payment methods that require a payment method domain will not appear in Elements.
   */
  enabled: boolean;
  google_pay: PaymentMethodDomainResourcePaymentMethodStatus;
  /**
   * Unique identifier for the object.
   */
  id: string;
  klarna: PaymentMethodDomainResourcePaymentMethodStatus;
  link: PaymentMethodDomainResourcePaymentMethodStatus;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'payment_method_domain';
  paypal: PaymentMethodDomainResourcePaymentMethodStatus;
};
/**
 * PaymentMethodDomainResourcePaymentMethodStatus
 * Indicates the status of a specific payment method on a payment method domain.
 */
export type PaymentMethodDomainResourcePaymentMethodStatus = {
  /**
   * The status of the payment method on the domain.
   */
  status: 'active' | 'inactive';
  status_details?: PaymentMethodDomainResourcePaymentMethodStatusDetails;
};
/**
 * PaymentMethodDomainResourcePaymentMethodStatusDetails
 * Contains additional details about the status of a payment method for a specific payment method domain.
 */
export type PaymentMethodDomainResourcePaymentMethodStatusDetails = {
  /**
   * The error message associated with the status of the payment method on the domain.
   */
  error_message: string;
};
/**
 * payment_method_eps
 */
export type PaymentMethodEps = {
  /**
   * The customer's bank. Should be one of `arzte_und_apotheker_bank`, `austrian_anadi_bank_ag`, `bank_austria`, `bankhaus_carl_spangler`, `bankhaus_schelhammer_und_schattera_ag`, `bawag_psk_ag`, `bks_bank_ag`, `brull_kallmus_bank_ag`, `btv_vier_lander_bank`, `capital_bank_grawe_gruppe_ag`, `deutsche_bank_ag`, `dolomitenbank`, `easybank_ag`, `erste_bank_und_sparkassen`, `hypo_alpeadriabank_international_ag`, `hypo_noe_lb_fur_niederosterreich_u_wien`, `hypo_oberosterreich_salzburg_steiermark`, `hypo_tirol_bank_ag`, `hypo_vorarlberg_bank_ag`, `hypo_bank_burgenland_aktiengesellschaft`, `marchfelder_bank`, `oberbank_ag`, `raiffeisen_bankengruppe_osterreich`, `schoellerbank_ag`, `sparda_bank_wien`, `volksbank_gruppe`, `volkskreditbank_ag`, or `vr_bank_braunau`.
   */
  bank?:
    | (
        | 'arzte_und_apotheker_bank'
        | 'austrian_anadi_bank_ag'
        | 'bank_austria'
        | 'bankhaus_carl_spangler'
        | 'bankhaus_schelhammer_und_schattera_ag'
        | 'bawag_psk_ag'
        | 'bks_bank_ag'
        | 'brull_kallmus_bank_ag'
        | 'btv_vier_lander_bank'
        | 'capital_bank_grawe_gruppe_ag'
        | 'deutsche_bank_ag'
        | 'dolomitenbank'
        | 'easybank_ag'
        | 'erste_bank_und_sparkassen'
        | 'hypo_alpeadriabank_international_ag'
        | 'hypo_bank_burgenland_aktiengesellschaft'
        | 'hypo_noe_lb_fur_niederosterreich_u_wien'
        | 'hypo_oberosterreich_salzburg_steiermark'
        | 'hypo_tirol_bank_ag'
        | 'hypo_vorarlberg_bank_ag'
        | 'marchfelder_bank'
        | 'oberbank_ag'
        | 'raiffeisen_bankengruppe_osterreich'
        | 'schoellerbank_ag'
        | 'sparda_bank_wien'
        | 'volksbank_gruppe'
        | 'volkskreditbank_ag'
        | 'vr_bank_braunau'
      )
    | null;
};
/**
 * payment_method_fpx
 */
export type PaymentMethodFpx = {
  /**
   * The customer's bank, if provided. Can be one of `affin_bank`, `agrobank`, `alliance_bank`, `ambank`, `bank_islam`, `bank_muamalat`, `bank_rakyat`, `bsn`, `cimb`, `hong_leong_bank`, `hsbc`, `kfh`, `maybank2u`, `ocbc`, `public_bank`, `rhb`, `standard_chartered`, `uob`, `deutsche_bank`, `maybank2e`, `pb_enterprise`, or `bank_of_china`.
   */
  bank:
    | 'affin_bank'
    | 'agrobank'
    | 'alliance_bank'
    | 'ambank'
    | 'bank_islam'
    | 'bank_muamalat'
    | 'bank_of_china'
    | 'bank_rakyat'
    | 'bsn'
    | 'cimb'
    | 'deutsche_bank'
    | 'hong_leong_bank'
    | 'hsbc'
    | 'kfh'
    | 'maybank2e'
    | 'maybank2u'
    | 'ocbc'
    | 'pb_enterprise'
    | 'public_bank'
    | 'rhb'
    | 'standard_chartered'
    | 'uob';
};
/**
 * payment_method_giropay
 */
export type PaymentMethodGiropay = unknown;
/**
 * payment_method_grabpay
 */
export type PaymentMethodGrabpay = unknown;
/**
 * payment_method_ideal
 */
export type PaymentMethodIdeal = {
  /**
   * The customer's bank, if provided. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
   */
  bank?:
    | (
        | 'abn_amro'
        | 'asn_bank'
        | 'bunq'
        | 'handelsbanken'
        | 'ing'
        | 'knab'
        | 'moneyou'
        | 'n26'
        | 'nn'
        | 'rabobank'
        | 'regiobank'
        | 'revolut'
        | 'sns_bank'
        | 'triodos_bank'
        | 'van_lanschot'
        | 'yoursafe'
      )
    | null;
  /**
   * The Bank Identifier Code of the customer's bank, if the bank was provided.
   */
  bic?:
    | (
        | 'ABNANL2A'
        | 'ASNBNL21'
        | 'BITSNL2A'
        | 'BUNQNL2A'
        | 'FVLBNL22'
        | 'HANDNL2A'
        | 'INGBNL2A'
        | 'KNABNL2H'
        | 'MOYONL21'
        | 'NNBANL2G'
        | 'NTSBDEB1'
        | 'RABONL2U'
        | 'RBRBNL21'
        | 'REVOIE23'
        | 'REVOLT21'
        | 'SNSBNL2A'
        | 'TRIONL2U'
      )
    | null;
};
/**
 * payment_method_interac_present
 */
export type PaymentMethodInteracPresent = {
  /**
   * Card brand. Can be `interac`, `mastercard` or `visa`.
   */
  brand?: string | null;
  /**
   * The cardholder name as read from the card, in [ISO 7813](https://en.wikipedia.org/wiki/ISO/IEC_7813) format. May include alphanumeric characters, special characters and first/last name separator (`/`). In some cases, the cardholder name may not be available depending on how the issuer has configured the card. Cardholder name is typically not available on swipe or contactless payments, such as those made with Apple Pay and Google Pay.
   */
  cardholder_name?: string | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * A high-level description of the type of cards issued in this range.
   */
  description?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month: number;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year: number;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding?: string | null;
  /**
   * The name of the card's issuing bank.
   */
  issuer?: string | null;
  /**
   * The last four digits of the card.
   */
  last4?: string | null;
  /**
   * Contains information about card networks that can be used to process the payment.
   */
  networks?: PaymentMethodCardPresentNetworks | null;
  /**
   * EMV tag 5F2D. Preferred languages specified by the integrated circuit chip.
   */
  preferred_locales?: string[] | null;
  /**
   * How card details were read in this transaction.
   */
  read_method?:
    | (
        | 'contact_emv'
        | 'contactless_emv'
        | 'contactless_magstripe_mode'
        | 'magnetic_stripe_fallback'
        | 'magnetic_stripe_track2'
      )
    | null;
};
/**
 * payment_method_kakao_pay
 */
export type PaymentMethodKakaoPay = unknown;
/**
 * payment_method_klarna
 */
export type PaymentMethodKlarna = {
  /**
   * The customer's date of birth, if provided.
   */
  dob?: PaymentFlowsPrivatePaymentMethodsKlarnaDob | null;
};
/**
 * payment_method_konbini
 */
export type PaymentMethodKonbini = unknown;
/**
 * payment_method_kr_card
 */
export type PaymentMethodKrCard = {
  /**
   * The local credit or debit card brand.
   */
  brand?:
    | (
        | 'bc'
        | 'citi'
        | 'hana'
        | 'hyundai'
        | 'jeju'
        | 'jeonbuk'
        | 'kakaobank'
        | 'kbank'
        | 'kdbbank'
        | 'kookmin'
        | 'kwangju'
        | 'lotte'
        | 'mg'
        | 'nh'
        | 'post'
        | 'samsung'
        | 'savingsbank'
        | 'shinhan'
        | 'shinhyup'
        | 'suhyup'
        | 'tossbank'
        | 'woori'
      )
    | null;
  /**
   * The last four digits of the card. This may not be present for American Express cards.
   */
  last4?: string | null;
};
/**
 * payment_method_link
 */
export type PaymentMethodLink = {
  /**
   * Account owner's email address.
   */
  email?: string | null;
};
/**
 * payment_method_mobilepay
 */
export type PaymentMethodMobilepay = unknown;
/**
 * payment_method_multibanco
 */
export type PaymentMethodMultibanco = unknown;
/**
 * payment_method_naver_pay
 */
export type PaymentMethodNaverPay = {
  /**
   * Uniquely identifies this particular Naver Pay account. You can use this attribute to check whether two Naver Pay accounts are the same.
   */
  buyer_id?: string | null;
  /**
   * Whether to fund this transaction with Naver Pay points or a card.
   */
  funding: 'card' | 'points';
};
/**
 * payment_method_nz_bank_account
 */
export type PaymentMethodNzBankAccount = {
  /**
   * The name on the bank account. Only present if the account holder name is different from the name of the authorized signatory collected in the PaymentMethod’s billing details.
   */
  account_holder_name?: string | null;
  /**
   * The numeric code for the bank account's bank.
   */
  bank_code: string;
  /**
   * The name of the bank.
   */
  bank_name: string;
  /**
   * The numeric code for the bank account's bank branch.
   */
  branch_code: string;
  /**
   * Last four digits of the bank account number.
   */
  last4: string;
  /**
   * The suffix of the bank account number.
   */
  suffix?: string | null;
};
/**
 * payment_method_options_affirm
 */
export type PaymentMethodOptionsAffirm = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Preferred language of the Affirm authorization page that the customer is redirected to.
   */
  preferred_locale?: string;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_afterpay_clearpay
 */
export type PaymentMethodOptionsAfterpayClearpay = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * An internal identifier or reference that this payment corresponds to. You must limit the identifier to 128 characters, and it can only contain letters, numbers, underscores, backslashes, and dashes.
   * This field differs from the statement descriptor and item name.
   */
  reference?: string | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_alipay
 */
export type PaymentMethodOptionsAlipay = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_alma
 */
export type PaymentMethodOptionsAlma = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
};
/**
 * payment_method_options_amazon_pay
 */
export type PaymentMethodOptionsAmazonPay = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_bancontact
 */
export type PaymentMethodOptionsBancontact = {
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   */
  preferred_language: 'de' | 'en' | 'fr' | 'nl';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_billie
 */
export type PaymentMethodOptionsBillie = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
};
/**
 * payment_method_options_boleto
 */
export type PaymentMethodOptionsBoleto = {
  /**
   * The number of calendar days before a Boleto voucher expires. For example, if you create a Boleto voucher on Monday and you set expires_after_days to 2, the Boleto voucher will expire on Wednesday at 23:59 America/Sao_Paulo time.
   */
  expires_after_days: number;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
};
/**
 * payment_method_options_card_installments
 */
export type PaymentMethodOptionsCardInstallments = {
  /**
   * Installment plans that may be selected for this PaymentIntent.
   */
  available_plans?: PaymentMethodDetailsCardInstallmentsPlan[] | null;
  /**
   * Whether Installments are enabled for this PaymentIntent.
   */
  enabled: boolean;
  /**
   * Installment plan selected for this PaymentIntent.
   */
  plan?: PaymentMethodDetailsCardInstallmentsPlan | null;
};
/**
 * payment_method_options_card_mandate_options
 */
export type PaymentMethodOptionsCardMandateOptions = {
  /**
   * Amount to be charged for future payments.
   */
  amount: number;
  /**
   * One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
   */
  amount_type: 'fixed' | 'maximum';
  /**
   * A description of the mandate or subscription that is meant to be displayed to the customer.
   */
  description?: string | null;
  /**
   * End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
   */
  end_date?: number | null;
  /**
   * Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
   */
  interval: 'day' | 'month' | 'sporadic' | 'week' | 'year';
  /**
   * The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
   */
  interval_count?: number | null;
  /**
   * Unique identifier for the mandate or subscription.
   */
  reference: string;
  /**
   * Start date of the mandate or subscription. Start date should not be lesser than yesterday.
   */
  start_date: number;
  /**
   * Specifies the type of mandates supported. Possible values are `india`.
   */
  supported_types?: 'india'[] | null;
};
/**
 * payment_method_options_card_present
 */
export type PaymentMethodOptionsCardPresent = {
  /**
   * Request ability to capture this payment beyond the standard [authorization validity window](https://stripe.com/docs/terminal/features/extended-authorizations#authorization-validity)
   */
  request_extended_authorization?: boolean | null;
  /**
   * Request ability to [increment](https://stripe.com/docs/terminal/features/incremental-authorizations) this PaymentIntent if the combination of MCC and card brand is eligible. Check [incremental_authorization_supported](https://stripe.com/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported) in the [Confirm](https://stripe.com/docs/api/payment_intents/confirm) response to verify support.
   */
  request_incremental_authorization_support?: boolean | null;
  routing?: PaymentMethodOptionsCardPresentRouting;
};
/**
 * payment_method_options_card_present_routing
 */
export type PaymentMethodOptionsCardPresentRouting = {
  /**
   * Requested routing priority
   */
  requested_priority?: ('domestic' | 'international') | null;
};
/**
 * payment_method_options_cashapp
 */
export type PaymentMethodOptionsCashapp = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session' | 'on_session';
};
/**
 * payment_method_options_customer_balance
 */
export type PaymentMethodOptionsCustomerBalance = {
  bank_transfer?: PaymentMethodOptionsCustomerBalanceBankTransfer;
  /**
   * The funding method type to be used when there are not enough funds in the customer balance. Permitted values include: `bank_transfer`.
   */
  funding_type?: 'bank_transfer' | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_customer_balance_bank_transfer
 */
export type PaymentMethodOptionsCustomerBalanceBankTransfer = {
  eu_bank_transfer?: PaymentMethodOptionsCustomerBalanceEuBankAccount;
  /**
   * List of address types that should be returned in the financial_addresses response. If not specified, all valid types will be returned.
   *
   * Permitted values include: `sort_code`, `zengin`, `iban`, or `spei`.
   */
  requested_address_types?: (
    | 'aba'
    | 'iban'
    | 'sepa'
    | 'sort_code'
    | 'spei'
    | 'swift'
    | 'zengin'
  )[];
  /**
   * The bank transfer type that this PaymentIntent is allowed to use for funding Permitted values include: `eu_bank_transfer`, `gb_bank_transfer`, `jp_bank_transfer`, `mx_bank_transfer`, or `us_bank_transfer`.
   */
  type?:
    | (
        | 'eu_bank_transfer'
        | 'gb_bank_transfer'
        | 'jp_bank_transfer'
        | 'mx_bank_transfer'
        | 'us_bank_transfer'
      )
    | null;
};
/**
 * payment_method_options_customer_balance_eu_bank_account
 */
export type PaymentMethodOptionsCustomerBalanceEuBankAccount = {
  /**
   * The desired country code of the bank account information. Permitted values include: `BE`, `DE`, `ES`, `FR`, `IE`, or `NL`.
   */
  country: 'BE' | 'DE' | 'ES' | 'FR' | 'IE' | 'NL';
};
/**
 * payment_method_options_fpx
 */
export type PaymentMethodOptionsFpx = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_giropay
 */
export type PaymentMethodOptionsGiropay = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_grabpay
 */
export type PaymentMethodOptionsGrabpay = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_ideal
 */
export type PaymentMethodOptionsIdeal = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_interac_present
 */
export type PaymentMethodOptionsInteracPresent = unknown;
/**
 * payment_method_options_klarna
 */
export type PaymentMethodOptionsKlarna = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Preferred locale of the Klarna checkout page that the customer is redirected to.
   */
  preferred_locale?: string | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_konbini
 */
export type PaymentMethodOptionsKonbini = {
  /**
   * An optional 10 to 11 digit numeric-only string determining the confirmation code at applicable convenience stores.
   */
  confirmation_number?: string | null;
  /**
   * The number of calendar days (between 1 and 60) after which Konbini payment instructions will expire. For example, if a PaymentIntent is confirmed with Konbini and `expires_after_days` set to 2 on Monday JST, the instructions will expire on Wednesday 23:59:59 JST.
   */
  expires_after_days?: number | null;
  /**
   * The timestamp at which the Konbini payment instructions will expire. Only one of `expires_after_days` or `expires_at` may be set.
   */
  expires_at?: number | null;
  /**
   * A product descriptor of up to 22 characters, which will appear to customers at the convenience store.
   */
  product_description?: string | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_kr_card
 */
export type PaymentMethodOptionsKrCard = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_multibanco
 */
export type PaymentMethodOptionsMultibanco = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_oxxo
 */
export type PaymentMethodOptionsOxxo = {
  /**
   * The number of calendar days before an OXXO invoice expires. For example, if you create an OXXO invoice on Monday and you set expires_after_days to 2, the OXXO invoice will expire on Wednesday at 23:59 America/Mexico_City time.
   */
  expires_after_days: number;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_p24
 */
export type PaymentMethodOptionsP24 = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_pay_by_bank
 */
export type PaymentMethodOptionsPayByBank = unknown;
/**
 * payment_method_options_paynow
 */
export type PaymentMethodOptionsPaynow = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_paypal
 */
export type PaymentMethodOptionsPaypal = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Preferred locale of the PayPal checkout page that the customer is redirected to.
   */
  preferred_locale?: string | null;
  /**
   * A reference of the PayPal transaction visible to customer which is mapped to PayPal's invoice ID. This must be a globally unique ID if you have configured in your PayPal settings to block multiple payments per invoice ID.
   */
  reference?: string | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_pix
 */
export type PaymentMethodOptionsPix = {
  /**
   * The number of seconds (between 10 and 1209600) after which Pix payment will expire.
   */
  expires_after_seconds?: number | null;
  /**
   * The timestamp at which the Pix expires.
   */
  expires_at?: number | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_promptpay
 */
export type PaymentMethodOptionsPromptpay = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_revolut_pay
 */
export type PaymentMethodOptionsRevolutPay = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_satispay
 */
export type PaymentMethodOptionsSatispay = {
  /**
   * Controls when the funds will be captured from the customer's account.
   */
  capture_method?: 'manual';
};
/**
 * payment_method_options_sofort
 */
export type PaymentMethodOptionsSofort = {
  /**
   * Preferred language of the SOFORT authorization page that the customer is redirected to.
   */
  preferred_language?: ('de' | 'en' | 'es' | 'fr' | 'it' | 'nl' | 'pl') | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none' | 'off_session';
};
/**
 * payment_method_options_twint
 */
export type PaymentMethodOptionsTwint = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_us_bank_account_mandate_options
 */
export type PaymentMethodOptionsUsBankAccountMandateOptions = {
  /**
   * Mandate collection method
   */
  collection_method?: 'paper';
};
/**
 * payment_method_options_wechat_pay
 */
export type PaymentMethodOptionsWechatPay = {
  /**
   * The app ID registered with WeChat Pay. Only required when client is ios or android.
   */
  app_id?: string | null;
  /**
   * The client type that the end customer will pay from
   */
  client?: ('android' | 'ios' | 'web') | null;
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_options_zip
 */
export type PaymentMethodOptionsZip = {
  /**
   * Indicates that you intend to make future payments with this PaymentIntent's payment method.
   *
   * If you provide a Customer with the PaymentIntent, you can use this parameter to [attach the payment method](/payments/save-during-payment) to the Customer after the PaymentIntent is confirmed and the customer completes any required actions. If you don't provide a Customer, you can still [attach](/api/payment_methods/attach) the payment method to a Customer after the transaction completes.
   *
   * If the payment method is `card_present` and isn't a digital wallet, Stripe creates and attaches a [generated_card](/api/charges/object#charge_object-payment_method_details-card_present-generated_card) payment method representing the card to the Customer instead.
   *
   * When processing card payments, Stripe uses `setup_future_usage` to help you comply with regional legislation and network rules, such as [SCA](/strong-customer-authentication).
   */
  setup_future_usage?: 'none';
};
/**
 * payment_method_oxxo
 */
export type PaymentMethodOxxo = unknown;
/**
 * payment_method_p24
 */
export type PaymentMethodP24 = {
  /**
   * The customer's bank, if provided.
   */
  bank?:
    | (
        | 'alior_bank'
        | 'bank_millennium'
        | 'bank_nowy_bfg_sa'
        | 'bank_pekao_sa'
        | 'banki_spbdzielcze'
        | 'blik'
        | 'bnp_paribas'
        | 'boz'
        | 'citi_handlowy'
        | 'credit_agricole'
        | 'envelobank'
        | 'etransfer_pocztowy24'
        | 'getin_bank'
        | 'ideabank'
        | 'ing'
        | 'inteligo'
        | 'mbank_mtransfer'
        | 'nest_przelew'
        | 'noble_pay'
        | 'pbac_z_ipko'
        | 'plus_bank'
        | 'santander_przelew24'
        | 'tmobile_usbugi_bankowe'
        | 'toyota_bank'
        | 'velobank'
        | 'volkswagen_bank'
      )
    | null;
};
/**
 * payment_method_pay_by_bank
 */
export type PaymentMethodPayByBank = unknown;
/**
 * payment_method_payco
 */
export type PaymentMethodPayco = unknown;
/**
 * payment_method_paynow
 */
export type PaymentMethodPaynow = unknown;
/**
 * payment_method_paypal
 */
export type PaymentMethodPaypal = {
  /**
   * Two-letter ISO code representing the buyer's country. Values are provided by PayPal directly (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  country?: string | null;
  /**
   * Owner's email. Values are provided by PayPal directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  payer_email?: string | null;
  /**
   * PayPal account PayerID. This identifier uniquely identifies the PayPal customer.
   */
  payer_id?: string | null;
};
/**
 * payment_method_pix
 */
export type PaymentMethodPix = unknown;
/**
 * payment_method_promptpay
 */
export type PaymentMethodPromptpay = unknown;
/**
 * payment_method_revolut_pay
 */
export type PaymentMethodRevolutPay = unknown;
/**
 * payment_method_samsung_pay
 */
export type PaymentMethodSamsungPay = unknown;
/**
 * payment_method_satispay
 */
export type PaymentMethodSatispay = unknown;
/**
 * payment_method_sepa_debit
 */
export type PaymentMethodSepaDebit = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bank_code?: string | null;
  /**
   * Branch code of bank associated with the bank account.
   */
  branch_code?: string | null;
  /**
   * Two-letter ISO code representing the country the bank account is located in.
   */
  country?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Information about the object that generated this PaymentMethod.
   */
  generated_from?: SepaDebitGeneratedFrom | null;
  /**
   * Last four characters of the IBAN.
   */
  last4?: string | null;
};
/**
 * payment_method_sofort
 */
export type PaymentMethodSofort = {
  /**
   * Two-letter ISO code representing the country the bank account is located in.
   */
  country?: string | null;
};
/**
 * payment_method_swish
 */
export type PaymentMethodSwish = unknown;
/**
 * payment_method_twint
 */
export type PaymentMethodTwint = unknown;
/**
 * payment_method_us_bank_account
 */
export type PaymentMethodUsBankAccount = {
  /**
   * Account holder type: individual or company.
   */
  account_holder_type?: ('company' | 'individual') | null;
  /**
   * Account type: checkings or savings. Defaults to checking if omitted.
   */
  account_type?: ('checking' | 'savings') | null;
  /**
   * The name of the bank.
   */
  bank_name?: string | null;
  /**
   * The ID of the Financial Connections Account used to create the payment method.
   */
  financial_connections_account?: string | null;
  /**
   * Uniquely identifies this particular bank account. You can use this attribute to check whether two bank accounts are the same.
   */
  fingerprint?: string | null;
  /**
   * Last four digits of the bank account number.
   */
  last4?: string | null;
  /**
   * Contains information about US bank account networks that can be used.
   */
  networks?: UsBankAccountNetworks | null;
  /**
   * Routing number of the bank account.
   */
  routing_number?: string | null;
  /**
   * Contains information about the future reusability of this PaymentMethod.
   */
  status_details?: PaymentMethodUsBankAccountStatusDetails | null;
};
/**
 * payment_method_us_bank_account_blocked
 */
export type PaymentMethodUsBankAccountBlocked = {
  /**
   * The ACH network code that resulted in this block.
   */
  network_code?:
    | (
        | 'R02'
        | 'R03'
        | 'R04'
        | 'R05'
        | 'R07'
        | 'R08'
        | 'R10'
        | 'R11'
        | 'R16'
        | 'R20'
        | 'R29'
        | 'R31'
      )
    | null;
  /**
   * The reason why this PaymentMethod's fingerprint has been blocked
   */
  reason?:
    | (
        | 'bank_account_closed'
        | 'bank_account_frozen'
        | 'bank_account_invalid_details'
        | 'bank_account_restricted'
        | 'bank_account_unusable'
        | 'debit_not_authorized'
      )
    | null;
};
/**
 * payment_method_us_bank_account_status_details
 */
export type PaymentMethodUsBankAccountStatusDetails = {
  blocked?: PaymentMethodUsBankAccountBlocked;
};
/**
 * payment_method_wechat_pay
 */
export type PaymentMethodWechatPay = unknown;
/**
 * payment_method_zip
 */
export type PaymentMethodZip = unknown;
/**
 * PaymentPagesCheckoutSessionAdaptivePricing
 */
export type PaymentPagesCheckoutSessionAdaptivePricing = {
  /**
   * Whether Adaptive Pricing is enabled.
   */
  enabled: boolean;
};
/**
 * PaymentPagesCheckoutSessionAfterExpiration
 */
export type PaymentPagesCheckoutSessionAfterExpiration = {
  /**
   * When set, configuration used to recover the Checkout Session on expiry.
   */
  recovery?: PaymentPagesCheckoutSessionAfterExpirationRecovery | null;
};
/**
 * PaymentPagesCheckoutSessionAfterExpirationRecovery
 */
export type PaymentPagesCheckoutSessionAfterExpirationRecovery = {
  /**
   * Enables user redeemable promotion codes on the recovered Checkout Sessions. Defaults to `false`
   */
  allow_promotion_codes: boolean;
  /**
   * If `true`, a recovery url will be generated to recover this Checkout Session if it
   * expires before a transaction is completed. It will be attached to the
   * Checkout Session object upon expiration.
   */
  enabled: boolean;
  /**
   * The timestamp at which the recovery URL will expire.
   */
  expires_at?: number | null;
  /**
   * URL that creates a new Checkout Session when clicked that is a copy of this expired Checkout Session
   */
  url?: string | null;
};
/**
 * PaymentPagesCheckoutSessionAutomaticTax
 */
export type PaymentPagesCheckoutSessionAutomaticTax = {
  /**
   * Indicates whether automatic tax is enabled for the session
   */
  enabled: boolean;
  /**
   * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
   */
  liability?: ConnectAccountReference | null;
  /**
   * The tax provider powering automatic tax.
   */
  provider?: string | null;
  /**
   * The status of the most recent automated tax calculation for this session.
   */
  status?: ('complete' | 'failed' | 'requires_location_inputs') | null;
};
/**
 * PaymentPagesCheckoutSessionCheckoutAddressDetails
 */
export type PaymentPagesCheckoutSessionCheckoutAddressDetails = {
  address: Address;
  /**
   * Customer name.
   */
  name: string;
};
/**
 * PaymentPagesCheckoutSessionCollectedInformation
 */
export type PaymentPagesCheckoutSessionCollectedInformation = {
  /**
   * Shipping information for this Checkout Session.
   */
  shipping_details?: PaymentPagesCheckoutSessionCheckoutAddressDetails | null;
};
/**
 * PaymentPagesCheckoutSessionConsent
 */
export type PaymentPagesCheckoutSessionConsent = {
  /**
   * If `opt_in`, the customer consents to receiving promotional communications
   * from the merchant about this Checkout Session.
   */
  promotions?: ('opt_in' | 'opt_out') | null;
  /**
   * If `accepted`, the customer in this Checkout Session has agreed to the merchant's terms of service.
   */
  terms_of_service?: 'accepted' | null;
};
/**
 * PaymentPagesCheckoutSessionConsentCollection
 */
export type PaymentPagesCheckoutSessionConsentCollection = {
  /**
   * If set to `hidden`, it will hide legal text related to the reuse of a payment method.
   */
  payment_method_reuse_agreement?: PaymentPagesCheckoutSessionPaymentMethodReuseAgreement | null;
  /**
   * If set to `auto`, enables the collection of customer consent for promotional communications. The Checkout
   * Session will determine whether to display an option to opt into promotional communication
   * from the merchant depending on the customer's locale. Only available to US merchants.
   */
  promotions?: ('auto' | 'none') | null;
  /**
   * If set to `required`, it requires customers to accept the terms of service before being able to pay.
   */
  terms_of_service?: ('none' | 'required') | null;
};
/**
 * PaymentPagesCheckoutSessionCurrencyConversion
 */
export type PaymentPagesCheckoutSessionCurrencyConversion = {
  /**
   * Total of all items in source currency before discounts or taxes are applied.
   */
  amount_subtotal: number;
  /**
   * Total of all items in source currency after discounts and taxes are applied.
   */
  amount_total: number;
  /**
   * Exchange rate used to convert source currency amounts to customer currency amounts
   */
  fx_rate: string;
  /**
   * Creation currency of the CheckoutSession before localization
   */
  source_currency: string;
};
/**
 * PaymentPagesCheckoutSessionCustomFields
 */
export type PaymentPagesCheckoutSessionCustomFields = {
  dropdown?: PaymentPagesCheckoutSessionCustomFieldsDropdown;
  /**
   * String of your choice that your integration can use to reconcile this field. Must be unique to this field, alphanumeric, and up to 200 characters.
   */
  key: string;
  label: PaymentPagesCheckoutSessionCustomFieldsLabel;
  numeric?: PaymentPagesCheckoutSessionCustomFieldsNumeric;
  /**
   * Whether the customer is required to complete the field before completing the Checkout Session. Defaults to `false`.
   */
  optional: boolean;
  text?: PaymentPagesCheckoutSessionCustomFieldsText;
  /**
   * The type of the field.
   */
  type: 'dropdown' | 'numeric' | 'text';
};
/**
 * PaymentPagesCheckoutSessionCustomFieldsDropdown
 */
export type PaymentPagesCheckoutSessionCustomFieldsDropdown = {
  /**
   * The value that will pre-fill on the payment page.
   */
  default_value?: string | null;
  /**
   * The options available for the customer to select. Up to 200 options allowed.
   */
  options: PaymentPagesCheckoutSessionCustomFieldsOption[];
  /**
   * The option selected by the customer. This will be the `value` for the option.
   */
  value?: string | null;
};
/**
 * PaymentPagesCheckoutSessionCustomFieldsLabel
 */
export type PaymentPagesCheckoutSessionCustomFieldsLabel = {
  /**
   * Custom text for the label, displayed to the customer. Up to 50 characters.
   */
  custom?: string | null;
  /**
   * The type of the label.
   */
  type: 'custom';
};
/**
 * PaymentPagesCheckoutSessionCustomFieldsNumeric
 */
export type PaymentPagesCheckoutSessionCustomFieldsNumeric = {
  /**
   * The value that will pre-fill the field on the payment page.
   */
  default_value?: string | null;
  /**
   * The maximum character length constraint for the customer's input.
   */
  maximum_length?: number | null;
  /**
   * The minimum character length requirement for the customer's input.
   */
  minimum_length?: number | null;
  /**
   * The value entered by the customer, containing only digits.
   */
  value?: string | null;
};
/**
 * PaymentPagesCheckoutSessionCustomFieldsOption
 */
export type PaymentPagesCheckoutSessionCustomFieldsOption = {
  /**
   * The label for the option, displayed to the customer. Up to 100 characters.
   */
  label: string;
  /**
   * The value for this option, not displayed to the customer, used by your integration to reconcile the option selected by the customer. Must be unique to this option, alphanumeric, and up to 100 characters.
   */
  value: string;
};
/**
 * PaymentPagesCheckoutSessionCustomFieldsText
 */
export type PaymentPagesCheckoutSessionCustomFieldsText = {
  /**
   * The value that will pre-fill the field on the payment page.
   */
  default_value?: string | null;
  /**
   * The maximum character length constraint for the customer's input.
   */
  maximum_length?: number | null;
  /**
   * The minimum character length requirement for the customer's input.
   */
  minimum_length?: number | null;
  /**
   * The value entered by the customer.
   */
  value?: string | null;
};
/**
 * PaymentPagesCheckoutSessionCustomText
 */
export type PaymentPagesCheckoutSessionCustomText = {
  /**
   * Custom text that should be displayed after the payment confirmation button.
   */
  after_submit?: PaymentPagesCheckoutSessionCustomTextPosition | null;
  /**
   * Custom text that should be displayed alongside shipping address collection.
   */
  shipping_address?: PaymentPagesCheckoutSessionCustomTextPosition | null;
  /**
   * Custom text that should be displayed alongside the payment confirmation button.
   */
  submit?: PaymentPagesCheckoutSessionCustomTextPosition | null;
  /**
   * Custom text that should be displayed in place of the default terms of service agreement text.
   */
  terms_of_service_acceptance?: PaymentPagesCheckoutSessionCustomTextPosition | null;
};
/**
 * PaymentPagesCheckoutSessionCustomTextPosition
 */
export type PaymentPagesCheckoutSessionCustomTextPosition = {
  /**
   * Text may be up to 1200 characters in length.
   */
  message: string;
};
/**
 * PaymentPagesCheckoutSessionCustomerDetails
 */
export type PaymentPagesCheckoutSessionCustomerDetails = {
  /**
   * The customer's address after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
   */
  address?: Address | null;
  /**
   * The email associated with the Customer, if one exists, on the Checkout Session after a completed Checkout Session or at time of session expiry.
   * Otherwise, if the customer has consented to promotional content, this value is the most recent valid email provided by the customer on the Checkout form.
   */
  email?: string | null;
  /**
   * The customer's name after a completed Checkout Session. Note: This property is populated only for sessions on or after March 30, 2022.
   */
  name?: string | null;
  /**
   * The customer's phone number after a completed Checkout Session.
   */
  phone?: string | null;
  /**
   * The customer’s tax exempt status after a completed Checkout Session.
   */
  tax_exempt?: ('exempt' | 'none' | 'reverse') | null;
  /**
   * The customer’s tax IDs after a completed Checkout Session.
   */
  tax_ids?: PaymentPagesCheckoutSessionTaxId[] | null;
};
/**
 * PaymentPagesCheckoutSessionDiscount
 */
export type PaymentPagesCheckoutSessionDiscount = {
  /**
   * Coupon attached to the Checkout Session.
   */
  coupon?: (string | Coupon) | null;
  /**
   * Promotion code attached to the Checkout Session.
   */
  promotion_code?: (string | PromotionCode) | null;
};
/**
 * PaymentPagesCheckoutSessionInvoiceCreation
 */
export type PaymentPagesCheckoutSessionInvoiceCreation = {
  /**
   * Indicates whether invoice creation is enabled for the Checkout Session.
   */
  enabled: boolean;
  invoice_data: PaymentPagesCheckoutSessionInvoiceSettings;
};
/**
 * PaymentPagesCheckoutSessionInvoiceSettings
 */
export type PaymentPagesCheckoutSessionInvoiceSettings = {
  /**
   * The account tax IDs associated with the invoice.
   */
  account_tax_ids?: (string | TaxId | DeletedTaxId)[] | null;
  /**
   * Custom fields displayed on the invoice.
   */
  custom_fields?: InvoiceSettingCustomField[] | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Footer displayed on the invoice.
   */
  footer?: string | null;
  /**
   * The connected account that issues the invoice. The invoice is presented with the branding and support information of the specified account.
   */
  issuer?: ConnectAccountReference | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * Options for invoice PDF rendering.
   */
  rendering_options?: InvoiceSettingCheckoutRenderingOptions | null;
};
/**
 * PaymentPagesCheckoutSessionOptionalItem
 */
export type PaymentPagesCheckoutSessionOptionalItem = {
  adjustable_quantity?: PaymentPagesCheckoutSessionOptionalItemAdjustableQuantity | null;
  price: string;
  quantity: number;
};
/**
 * PaymentPagesCheckoutSessionOptionalItemAdjustableQuantity
 */
export type PaymentPagesCheckoutSessionOptionalItemAdjustableQuantity = {
  /**
   * Set to true if the quantity can be adjusted to any non-negative integer.
   */
  enabled: boolean;
  /**
   * The maximum quantity of this item the customer can purchase. By default this value is 99. You can specify a value up to 999999.
   */
  maximum?: number | null;
  /**
   * The minimum quantity of this item the customer must purchase, if they choose to purchase it. Because this item is optional, the customer will always be able to remove it from their order, even if the `minimum` configured here is greater than 0. By default this value is 0.
   */
  minimum?: number | null;
};
/**
 * PaymentPagesCheckoutSessionPaymentMethodReuseAgreement
 */
export type PaymentPagesCheckoutSessionPaymentMethodReuseAgreement = {
  /**
   * Determines the position and visibility of the payment method reuse agreement in the UI. When set to `auto`, Stripe's defaults will be used.
   *
   * When set to `hidden`, the payment method reuse agreement text will always be hidden in the UI.
   */
  position: 'auto' | 'hidden';
};
/**
 * PaymentPagesCheckoutSessionPermissions
 */
export type PaymentPagesCheckoutSessionPermissions = {
  /**
   * Determines which entity is allowed to update the shipping details.
   *
   * Default is `client_only`. Stripe Checkout client will automatically update the shipping details. If set to `server_only`, only your server is allowed to update the shipping details.
   *
   * When set to `server_only`, you must add the onShippingDetailsChange event handler when initializing the Stripe Checkout client and manually update the shipping details from your server using the Stripe API.
   */
  update_shipping_details?: ('client_only' | 'server_only') | null;
};
/**
 * PaymentPagesCheckoutSessionPhoneNumberCollection
 */
export type PaymentPagesCheckoutSessionPhoneNumberCollection = {
  /**
   * Indicates whether phone number collection is enabled for the session
   */
  enabled: boolean;
};
/**
 * PaymentPagesCheckoutSessionSavedPaymentMethodOptions
 */
export type PaymentPagesCheckoutSessionSavedPaymentMethodOptions = {
  /**
   * Uses the `allow_redisplay` value of each saved payment method to filter the set presented to a returning customer. By default, only saved payment methods with ’allow_redisplay: ‘always’ are shown in Checkout.
   */
  allow_redisplay_filters?: ('always' | 'limited' | 'unspecified')[] | null;
  /**
   * Enable customers to choose if they wish to remove their saved payment methods. Disabled by default.
   */
  payment_method_remove?: ('disabled' | 'enabled') | null;
  /**
   * Enable customers to choose if they wish to save their payment method for future use. Disabled by default.
   */
  payment_method_save?: ('disabled' | 'enabled') | null;
};
/**
 * PaymentPagesCheckoutSessionShippingAddressCollection
 */
export type PaymentPagesCheckoutSessionShippingAddressCollection = {
  /**
   * An array of two-letter ISO country codes representing which countries Checkout should provide as options for
   * shipping locations. Unsupported country codes: `AS, CX, CC, CU, HM, IR, KP, MH, FM, NF, MP, PW, SY, UM, VI`.
   */
  allowed_countries: (
    | 'AC'
    | 'AD'
    | 'AE'
    | 'AF'
    | 'AG'
    | 'AI'
    | 'AL'
    | 'AM'
    | 'AO'
    | 'AQ'
    | 'AR'
    | 'AT'
    | 'AU'
    | 'AW'
    | 'AX'
    | 'AZ'
    | 'BA'
    | 'BB'
    | 'BD'
    | 'BE'
    | 'BF'
    | 'BG'
    | 'BH'
    | 'BI'
    | 'BJ'
    | 'BL'
    | 'BM'
    | 'BN'
    | 'BO'
    | 'BQ'
    | 'BR'
    | 'BS'
    | 'BT'
    | 'BV'
    | 'BW'
    | 'BY'
    | 'BZ'
    | 'CA'
    | 'CD'
    | 'CF'
    | 'CG'
    | 'CH'
    | 'CI'
    | 'CK'
    | 'CL'
    | 'CM'
    | 'CN'
    | 'CO'
    | 'CR'
    | 'CV'
    | 'CW'
    | 'CY'
    | 'CZ'
    | 'DE'
    | 'DJ'
    | 'DK'
    | 'DM'
    | 'DO'
    | 'DZ'
    | 'EC'
    | 'EE'
    | 'EG'
    | 'EH'
    | 'ER'
    | 'ES'
    | 'ET'
    | 'FI'
    | 'FJ'
    | 'FK'
    | 'FO'
    | 'FR'
    | 'GA'
    | 'GB'
    | 'GD'
    | 'GE'
    | 'GF'
    | 'GG'
    | 'GH'
    | 'GI'
    | 'GL'
    | 'GM'
    | 'GN'
    | 'GP'
    | 'GQ'
    | 'GR'
    | 'GS'
    | 'GT'
    | 'GU'
    | 'GW'
    | 'GY'
    | 'HK'
    | 'HN'
    | 'HR'
    | 'HT'
    | 'HU'
    | 'ID'
    | 'IE'
    | 'IL'
    | 'IM'
    | 'IN'
    | 'IO'
    | 'IQ'
    | 'IS'
    | 'IT'
    | 'JE'
    | 'JM'
    | 'JO'
    | 'JP'
    | 'KE'
    | 'KG'
    | 'KH'
    | 'KI'
    | 'KM'
    | 'KN'
    | 'KR'
    | 'KW'
    | 'KY'
    | 'KZ'
    | 'LA'
    | 'LB'
    | 'LC'
    | 'LI'
    | 'LK'
    | 'LR'
    | 'LS'
    | 'LT'
    | 'LU'
    | 'LV'
    | 'LY'
    | 'MA'
    | 'MC'
    | 'MD'
    | 'ME'
    | 'MF'
    | 'MG'
    | 'MK'
    | 'ML'
    | 'MM'
    | 'MN'
    | 'MO'
    | 'MQ'
    | 'MR'
    | 'MS'
    | 'MT'
    | 'MU'
    | 'MV'
    | 'MW'
    | 'MX'
    | 'MY'
    | 'MZ'
    | 'NA'
    | 'NC'
    | 'NE'
    | 'NG'
    | 'NI'
    | 'NL'
    | 'NO'
    | 'NP'
    | 'NR'
    | 'NU'
    | 'NZ'
    | 'OM'
    | 'PA'
    | 'PE'
    | 'PF'
    | 'PG'
    | 'PH'
    | 'PK'
    | 'PL'
    | 'PM'
    | 'PN'
    | 'PR'
    | 'PS'
    | 'PT'
    | 'PY'
    | 'QA'
    | 'RE'
    | 'RO'
    | 'RS'
    | 'RU'
    | 'RW'
    | 'SA'
    | 'SB'
    | 'SC'
    | 'SD'
    | 'SE'
    | 'SG'
    | 'SH'
    | 'SI'
    | 'SJ'
    | 'SK'
    | 'SL'
    | 'SM'
    | 'SN'
    | 'SO'
    | 'SR'
    | 'SS'
    | 'ST'
    | 'SV'
    | 'SX'
    | 'SZ'
    | 'TA'
    | 'TC'
    | 'TD'
    | 'TF'
    | 'TG'
    | 'TH'
    | 'TJ'
    | 'TK'
    | 'TL'
    | 'TM'
    | 'TN'
    | 'TO'
    | 'TR'
    | 'TT'
    | 'TV'
    | 'TW'
    | 'TZ'
    | 'UA'
    | 'UG'
    | 'US'
    | 'UY'
    | 'UZ'
    | 'VA'
    | 'VC'
    | 'VE'
    | 'VG'
    | 'VN'
    | 'VU'
    | 'WF'
    | 'WS'
    | 'XK'
    | 'YE'
    | 'YT'
    | 'ZA'
    | 'ZM'
    | 'ZW'
    | 'ZZ'
  )[];
};
/**
 * PaymentPagesCheckoutSessionShippingCost
 */
export type PaymentPagesCheckoutSessionShippingCost = {
  /**
   * Total shipping cost before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /**
   * Total tax amount applied due to shipping costs. If no tax was applied, defaults to 0.
   */
  amount_tax: number;
  /**
   * Total shipping cost after discounts and taxes are applied.
   */
  amount_total: number;
  /**
   * The ID of the ShippingRate for this order.
   */
  shipping_rate?: (string | ShippingRate) | null;
  /**
   * The taxes applied to the shipping rate.
   */
  taxes?: LineItemsTaxAmount[];
};
/**
 * PaymentPagesCheckoutSessionShippingOption
 */
export type PaymentPagesCheckoutSessionShippingOption = {
  /**
   * A non-negative integer in cents representing how much to charge.
   */
  shipping_amount: number;
  /**
   * The shipping rate.
   */
  shipping_rate: string | ShippingRate;
};
/**
 * PaymentPagesCheckoutSessionTaxID
 */
export type PaymentPagesCheckoutSessionTaxId = {
  /**
   * The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, `aw_tin`, `az_tin`, `bd_bin`, `bj_ifu`, `et_tin`, `kg_tin`, `la_tin`, `cm_niu`, `cv_nif`, `bf_ifu`, or `unknown`
   */
  type:
    | 'ad_nrt'
    | 'ae_trn'
    | 'al_tin'
    | 'am_tin'
    | 'ao_tin'
    | 'ar_cuit'
    | 'au_abn'
    | 'au_arn'
    | 'aw_tin'
    | 'az_tin'
    | 'ba_tin'
    | 'bb_tin'
    | 'bd_bin'
    | 'bf_ifu'
    | 'bg_uic'
    | 'bh_vat'
    | 'bj_ifu'
    | 'bo_tin'
    | 'br_cnpj'
    | 'br_cpf'
    | 'bs_tin'
    | 'by_tin'
    | 'ca_bn'
    | 'ca_gst_hst'
    | 'ca_pst_bc'
    | 'ca_pst_mb'
    | 'ca_pst_sk'
    | 'ca_qst'
    | 'cd_nif'
    | 'ch_uid'
    | 'ch_vat'
    | 'cl_tin'
    | 'cm_niu'
    | 'cn_tin'
    | 'co_nit'
    | 'cr_tin'
    | 'cv_nif'
    | 'de_stn'
    | 'do_rcn'
    | 'ec_ruc'
    | 'eg_tin'
    | 'es_cif'
    | 'et_tin'
    | 'eu_oss_vat'
    | 'eu_vat'
    | 'gb_vat'
    | 'ge_vat'
    | 'gn_nif'
    | 'hk_br'
    | 'hr_oib'
    | 'hu_tin'
    | 'id_npwp'
    | 'il_vat'
    | 'in_gst'
    | 'is_vat'
    | 'jp_cn'
    | 'jp_rn'
    | 'jp_trn'
    | 'ke_pin'
    | 'kg_tin'
    | 'kh_tin'
    | 'kr_brn'
    | 'kz_bin'
    | 'la_tin'
    | 'li_uid'
    | 'li_vat'
    | 'ma_vat'
    | 'md_vat'
    | 'me_pib'
    | 'mk_vat'
    | 'mr_nif'
    | 'mx_rfc'
    | 'my_frp'
    | 'my_itn'
    | 'my_sst'
    | 'ng_tin'
    | 'no_vat'
    | 'no_voec'
    | 'np_pan'
    | 'nz_gst'
    | 'om_vat'
    | 'pe_ruc'
    | 'ph_tin'
    | 'ro_tin'
    | 'rs_pib'
    | 'ru_inn'
    | 'ru_kpp'
    | 'sa_vat'
    | 'sg_gst'
    | 'sg_uen'
    | 'si_tin'
    | 'sn_ninea'
    | 'sr_fin'
    | 'sv_nit'
    | 'th_vat'
    | 'tj_tin'
    | 'tr_tin'
    | 'tw_vat'
    | 'tz_vat'
    | 'ua_vat'
    | 'ug_tin'
    | 'unknown'
    | 'us_ein'
    | 'uy_ruc'
    | 'uz_tin'
    | 'uz_vat'
    | 've_rif'
    | 'vn_tin'
    | 'za_vat'
    | 'zm_tin'
    | 'zw_tin';
  /**
   * The value of the tax ID.
   */
  value?: string | null;
};
/**
 * PaymentPagesCheckoutSessionTaxIDCollection
 */
export type PaymentPagesCheckoutSessionTaxIdCollection = {
  /**
   * Indicates whether tax ID collection is enabled for the session
   */
  enabled: boolean;
  /**
   * Indicates whether a tax ID is required on the payment page
   */
  required: 'if_supported' | 'never';
};
/**
 * PaymentPagesCheckoutSessionTotalDetails
 */
export type PaymentPagesCheckoutSessionTotalDetails = {
  /**
   * This is the sum of all the discounts.
   */
  amount_discount: number;
  /**
   * This is the sum of all the shipping amounts.
   */
  amount_shipping?: number | null;
  /**
   * This is the sum of all the tax amounts.
   */
  amount_tax: number;
  breakdown?: PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown;
};
/**
 * PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown
 */
export type PaymentPagesCheckoutSessionTotalDetailsResourceBreakdown = {
  /**
   * The aggregated discounts.
   */
  discounts: LineItemsDiscountAmount[];
  /**
   * The aggregated tax amounts by rate.
   */
  taxes: LineItemsTaxAmount[];
};
/**
 * PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions
 */
export type PaymentPagesPrivateCardPaymentMethodOptionsResourceRestrictions = {
  /**
   * Specify the card brands to block in the Checkout Session. If a customer enters or selects a card belonging to a blocked brand, they can't complete the Session.
   */
  brands_blocked?: (
    | 'american_express'
    | 'discover_global_network'
    | 'mastercard'
    | 'visa'
  )[];
};
/**
 * Polymorphic
 */
export type PaymentSource = Account | BankAccount | Card | Source;
/**
 * Payout
 * A `Payout` object is created when you receive funds from Stripe, or when you
 * initiate a payout to either a bank account or debit card of a [connected
 * Stripe account](/docs/connect/bank-debit-card-payouts). You can retrieve individual payouts,
 * and list all payouts. Payouts are made on [varying
 * schedules](/docs/connect/manage-payout-schedule), depending on your country and
 * industry.
 *
 * Related guide: [Receiving payouts](https://stripe.com/docs/payouts)
 */
export type Payout = {
  /**
   * The amount (in cents (or local equivalent)) that transfers to your bank account or debit card.
   */
  amount: number;
  /**
   * The application fee (if any) for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
   */
  application_fee?: (string | ApplicationFee) | null;
  /**
   * The amount of the application fee (if any) requested for the payout. [See the Connect documentation](https://stripe.com/docs/connect/instant-payouts#monetization-and-fees) for details.
   */
  application_fee_amount?: number | null;
  /**
   * Date that you can expect the payout to arrive in the bank. This factors in delays to account for weekends or bank holidays.
   */
  arrival_date: number;
  /**
   * Returns `true` if the payout is created by an [automated payout schedule](https://stripe.com/docs/payouts#payout-schedule) and `false` if it's [requested manually](https://stripe.com/docs/payouts#manual-payouts).
   */
  automatic: boolean;
  /**
   * ID of the balance transaction that describes the impact of this payout on your account balance.
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * ID of the bank account or card the payout is sent to.
   */
  destination?:
    | (string | BankAccount | Card | DeletedBankAccount | DeletedCard)
    | null;
  /**
   * If the payout fails or cancels, this is the ID of the balance transaction that reverses the initial balance transaction and returns the funds from the failed payout back in your balance.
   */
  failure_balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * Error code that provides a reason for a payout failure, if available. View our [list of failure codes](https://stripe.com/docs/api#payout_failures).
   */
  failure_code?: string | null;
  /**
   * Message that provides the reason for a payout failure, if available.
   */
  failure_message?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * The method used to send this payout, which can be `standard` or `instant`. `instant` is supported for payouts to debit cards and bank accounts in certain countries. Learn more about [bank support for Instant Payouts](https://stripe.com/docs/payouts/instant-payouts-banks).
   */
  method: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'payout';
  /**
   * If the payout reverses another, this is the ID of the original payout.
   */
  original_payout?: (string | Payout) | null;
  /**
   * If `completed`, you can use the [Balance Transactions API](https://stripe.com/docs/api/balance_transactions/list#balance_transaction_list-payout) to list all balance transactions that are paid out in this payout.
   */
  reconciliation_status: 'completed' | 'in_progress' | 'not_applicable';
  /**
   * If the payout reverses, this is the ID of the payout that reverses this payout.
   */
  reversed_by?: (string | Payout) | null;
  /**
   * The source balance this payout came from, which can be one of the following: `card`, `fpx`, or `bank_account`.
   */
  source_type: string;
  /**
   * Extra information about a payout that displays on the user's bank statement.
   */
  statement_descriptor?: string | null;
  /**
   * Current status of the payout: `paid`, `pending`, `in_transit`, `canceled` or `failed`. A payout is `pending` until it's submitted to the bank, when it becomes `in_transit`. The status changes to `paid` if the transaction succeeds, or to `failed` or `canceled` (within 5 business days). Some payouts that fail might initially show as `paid`, then change to `failed`.
   */
  status: string;
  /**
   * A value that generates from the beneficiary's bank that allows users to track payouts with their bank. Banks might call this a "reference number" or something similar.
   */
  trace_id?: PayoutsTraceId | null;
  /**
   * Can be `bank_account` or `card`.
   */
  type: 'bank_account' | 'card';
};
/**
 * PayoutsTraceID
 */
export type PayoutsTraceId = {
  /**
   * Possible values are `pending`, `supported`, and `unsupported`. When `payout.status` is `pending` or `in_transit`, this will be `pending`. When the payout transitions to `paid`, `failed`, or `canceled`, this status will become `supported` or `unsupported` shortly after in most cases. In some cases, this may appear as `pending` for up to 10 days after `arrival_date` until transitioning to `supported` or `unsupported`.
   */
  status: string;
  /**
   * The trace ID value if `trace_id.status` is `supported`, otherwise `nil`.
   */
  value?: string | null;
};
/**
 * paypal_seller_protection
 */
export type PaypalSellerProtection = {
  /**
   * An array of conditions that are covered for the transaction, if applicable.
   */
  dispute_categories?: ('fraudulent' | 'product_not_received')[] | null;
  /**
   * Indicates whether the transaction is eligible for PayPal's seller protection.
   */
  status: 'eligible' | 'not_eligible' | 'partially_eligible';
};
/**
 * Person
 * This is an object representing a person associated with a Stripe account.
 *
 * A platform can only access a subset of data in a person for an account where [account.controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`, which includes Standard and Express accounts, after creating an Account Link or Account Session to start Connect onboarding.
 *
 * See the [Standard onboarding](/connect/standard-accounts) or [Express onboarding](/connect/express-accounts) documentation for information about prefilling information and account onboarding steps. Learn more about [handling identity verification with the API](/connect/handling-api-verification#person-information).
 */
export type Person = {
  /**
   * The account the person is associated with.
   */
  account: string;
  additional_tos_acceptances?: PersonAdditionalTosAcceptances;
  address?: Address;
  address_kana?: LegalEntityJapanAddress | null;
  address_kanji?: LegalEntityJapanAddress | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  dob?: LegalEntityDob;
  /**
   * The person's email address. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  email?: string | null;
  /**
   * The person's first name. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  first_name?: string | null;
  /**
   * The Kana variation of the person's first name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  first_name_kana?: string | null;
  /**
   * The Kanji variation of the person's first name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  first_name_kanji?: string | null;
  /**
   * A list of alternate names or aliases that the person is known by. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  full_name_aliases?: string[];
  future_requirements?: PersonFutureRequirements | null;
  /**
   * The person's gender.
   */
  gender?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Whether the person's `id_number` was provided. True if either the full ID number was provided or if only the required part of the ID number was provided (ex. last four of an individual's SSN for the US indicated by `ssn_last_4_provided`).
   */
  id_number_provided?: boolean;
  /**
   * Whether the person's `id_number_secondary` was provided.
   */
  id_number_secondary_provided?: boolean;
  /**
   * The person's last name. Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  last_name?: string | null;
  /**
   * The Kana variation of the person's last name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  last_name_kana?: string | null;
  /**
   * The Kanji variation of the person's last name (Japan only). Also available for accounts where [controller.requirement_collection](/api/accounts/object#account_object-controller-requirement_collection) is `stripe`.
   */
  last_name_kanji?: string | null;
  /**
   * The person's maiden name.
   */
  maiden_name?: string | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /**
   * The country where the person is a national.
   */
  nationality?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'person';
  /**
   * The person's phone number.
   */
  phone?: string | null;
  /**
   * Indicates if the person or any of their representatives, family members, or other closely related persons, declares that they hold or have held an important public job or function, in any jurisdiction.
   */
  political_exposure?: 'existing' | 'none';
  registered_address?: Address;
  relationship?: PersonRelationship;
  requirements?: PersonRequirements | null;
  /**
   * Whether the last four digits of the person's Social Security number have been provided (U.S. only).
   */
  ssn_last_4_provided?: boolean;
  /**
   * Demographic data related to the person.
   */
  us_cfpb_data?: PersonUsCfpbData | null;
  verification?: LegalEntityPersonVerification;
};
/**
 * PersonAdditionalTOSAcceptance
 */
export type PersonAdditionalTosAcceptance = {
  /**
   * The Unix timestamp marking when the legal guardian accepted the service agreement.
   */
  date?: number | null;
  /**
   * The IP address from which the legal guardian accepted the service agreement.
   */
  ip?: string | null;
  /**
   * The user agent of the browser from which the legal guardian accepted the service agreement.
   */
  user_agent?: string | null;
};
/**
 * PersonAdditionalTOSAcceptances
 */
export type PersonAdditionalTosAcceptances = {
  /**
   * Details on the legal guardian's acceptance of the main Stripe service agreement.
   */
  account?: PersonAdditionalTosAcceptance | null;
};
/**
 * PersonEthnicityDetails
 */
export type PersonEthnicityDetails = {
  /**
   * The persons ethnicity
   */
  ethnicity?:
    | (
        | 'cuban'
        | 'hispanic_or_latino'
        | 'mexican'
        | 'not_hispanic_or_latino'
        | 'other_hispanic_or_latino'
        | 'prefer_not_to_answer'
        | 'puerto_rican'
      )[]
    | null;
  /**
   * Please specify your origin, when other is selected.
   */
  ethnicity_other?: string | null;
};
/**
 * PersonFutureRequirements
 */
export type PersonFutureRequirements = {
  /**
   * Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
   */
  alternatives?: AccountRequirementsAlternative[] | null;
  /**
   * Fields that need to be collected to keep the person's account enabled. If not collected by the account's `future_requirements[current_deadline]`, these fields will transition to the main `requirements` hash, and may immediately become `past_due`, but the account may also be given a grace period depending on the account's enablement state prior to transition.
   */
  currently_due: string[];
  /**
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors: AccountRequirementsError[];
  /**
   * Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `future_requirements[current_deadline]` becomes set.
   */
  eventually_due: string[];
  /**
   * Fields that weren't collected by the account's `requirements.current_deadline`. These fields need to be collected to enable the person's account. New fields will never appear here; `future_requirements.past_due` will always be a subset of `requirements.past_due`.
   */
  past_due: string[];
  /**
   * Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due` or `currently_due`. Fields might appear in `eventually_due` or `currently_due` and in `pending_verification` if verification fails but another verification is still pending.
   */
  pending_verification: string[];
};
/**
 * PersonRaceDetails
 */
export type PersonRaceDetails = {
  /**
   * The persons race.
   */
  race?:
    | (
        | 'african_american'
        | 'american_indian_or_alaska_native'
        | 'asian'
        | 'asian_indian'
        | 'black_or_african_american'
        | 'chinese'
        | 'ethiopian'
        | 'filipino'
        | 'guamanian_or_chamorro'
        | 'haitian'
        | 'jamaican'
        | 'japanese'
        | 'korean'
        | 'native_hawaiian'
        | 'native_hawaiian_or_other_pacific_islander'
        | 'nigerian'
        | 'other_asian'
        | 'other_black_or_african_american'
        | 'other_pacific_islander'
        | 'prefer_not_to_answer'
        | 'samoan'
        | 'somali'
        | 'vietnamese'
        | 'white'
      )[]
    | null;
  /**
   * Please specify your race, when other is selected.
   */
  race_other?: string | null;
};
/**
 * PersonRelationship
 */
export type PersonRelationship = {
  /**
   * Whether the person is the authorizer of the account's representative.
   */
  authorizer?: boolean | null;
  /**
   * Whether the person is a director of the account's legal entity. Directors are typically members of the governing board of the company, or responsible for ensuring the company meets its regulatory obligations.
   */
  director?: boolean | null;
  /**
   * Whether the person has significant responsibility to control, manage, or direct the organization.
   */
  executive?: boolean | null;
  /**
   * Whether the person is the legal guardian of the account's representative.
   */
  legal_guardian?: boolean | null;
  /**
   * Whether the person is an owner of the account’s legal entity.
   */
  owner?: boolean | null;
  /**
   * The percent owned by the person of the account's legal entity.
   */
  percent_ownership?: number | null;
  /**
   * Whether the person is authorized as the primary representative of the account. This is the person nominated by the business to provide information about themselves, and general information about the account. There can only be one representative at any given time. At the time the account is created, this person should be set to the person responsible for opening the account.
   */
  representative?: boolean | null;
  /**
   * The person's title (e.g., CEO, Support Engineer).
   */
  title?: string | null;
};
/**
 * PersonRequirements
 */
export type PersonRequirements = {
  /**
   * Fields that are due and can be satisfied by providing the corresponding alternative fields instead.
   */
  alternatives?: AccountRequirementsAlternative[] | null;
  /**
   * Fields that need to be collected to keep the person's account enabled. If not collected by the account's `current_deadline`, these fields appear in `past_due` as well, and the account is disabled.
   */
  currently_due: string[];
  /**
   * Fields that are `currently_due` and need to be collected again because validation or verification failed.
   */
  errors: AccountRequirementsError[];
  /**
   * Fields you must collect when all thresholds are reached. As they become required, they appear in `currently_due` as well, and the account's `current_deadline` becomes set.
   */
  eventually_due: string[];
  /**
   * Fields that weren't collected by the account's `current_deadline`. These fields need to be collected to enable the person's account.
   */
  past_due: string[];
  /**
   * Fields that might become required depending on the results of verification or review. It's an empty array unless an asynchronous verification is pending. If verification fails, these fields move to `eventually_due`, `currently_due`, or `past_due`. Fields might appear in `eventually_due`, `currently_due`, or `past_due` and in `pending_verification` if verification fails but another verification is still pending.
   */
  pending_verification: string[];
};
/**
 * PersonUSCfpbData
 */
export type PersonUsCfpbData = {
  /**
   * The persons ethnicity details
   */
  ethnicity_details?: PersonEthnicityDetails | null;
  /**
   * The persons race details
   */
  race_details?: PersonRaceDetails | null;
  /**
   * The persons self-identified gender
   */
  self_identified_gender?: string | null;
};
/**
 * Plan
 * You can now model subscriptions more flexibly using the [Prices API](https://stripe.com/docs/api#prices). It replaces the Plans API and is backwards compatible to simplify your migration.
 *
 * Plans define the base price, currency, and billing cycle for recurring purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and plans help you track pricing. Different physical goods or levels of service should be represented by products, and pricing options should be represented by plans. This approach lets you change prices without having to change your provisioning scheme.
 *
 * For example, you might have a single "gold" product that has plans for $10/month, $100/year, €9/month, and €90/year.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription) and more about [products and prices](https://stripe.com/docs/products-prices/overview).
 */
export type Plan = {
  /**
   * Whether the plan can be used for new purchases.
   */
  active: boolean;
  /**
   * The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
   */
  amount?: number | null;
  /**
   * The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
   */
  amount_decimal?: string | null;
  /**
   * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `amount`) will be charged per unit in `quantity` (for plans with `usage_type=licensed`), or per unit of total usage (for plans with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
   */
  billing_scheme: 'per_unit' | 'tiered';
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
   */
  interval: 'day' | 'month' | 'week' | 'year';
  /**
   * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
   */
  interval_count: number;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * The meter tracking the usage of a metered price
   */
  meter?: string | null;
  /**
   * A brief description of the plan, hidden from customers.
   */
  nickname?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'plan';
  /**
   * The product whose pricing this plan determines.
   */
  product?: (string | Product | DeletedProduct) | null;
  /**
   * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
   */
  tiers?: PlanTier[];
  /**
   * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
   */
  tiers_mode?: ('graduated' | 'volume') | null;
  /**
   * Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
   */
  transform_usage?: TransformUsage | null;
  /**
   * Default number of trial days when subscribing a customer to this plan using [`trial_from_plan=true`](https://stripe.com/docs/api#create_subscription-trial_from_plan).
   */
  trial_period_days?: number | null;
  /**
   * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
   */
  usage_type: 'licensed' | 'metered';
};
/**
 * PlanTier
 */
export type PlanTier = {
  /**
   * Price for the entire tier.
   */
  flat_amount?: number | null;
  /**
   * Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
   */
  flat_amount_decimal?: string | null;
  /**
   * Per unit price for units relevant to the tier.
   */
  unit_amount?: number | null;
  /**
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   */
  unit_amount_decimal?: string | null;
  /**
   * Up to and including to this quantity will be contained in the tier.
   */
  up_to?: number | null;
};
/**
 * PlatformEarningFeeSource
 */
export type PlatformEarningFeeSource = {
  /**
   * Charge ID that created this application fee.
   */
  charge?: string;
  /**
   * Payout ID that created this application fee.
   */
  payout?: string;
  /**
   * Type of object that created the application fee.
   */
  type: 'charge' | 'payout';
};
/**
 * PortalBusinessProfile
 */
export type PortalBusinessProfile = {
  /**
   * The messaging shown to customers in the portal.
   */
  headline?: string | null;
  /**
   * A link to the business’s publicly available privacy policy.
   */
  privacy_policy_url?: string | null;
  /**
   * A link to the business’s publicly available terms of service.
   */
  terms_of_service_url?: string | null;
};
/**
 * PortalCustomerUpdate
 */
export type PortalCustomerUpdate = {
  /**
   * The types of customer updates that are supported. When empty, customers are not updateable.
   */
  allowed_updates: (
    | 'address'
    | 'email'
    | 'name'
    | 'phone'
    | 'shipping'
    | 'tax_id'
  )[];
  /**
   * Whether the feature is enabled.
   */
  enabled: boolean;
};
/**
 * PortalFeatures
 */
export type PortalFeatures = {
  customer_update: PortalCustomerUpdate;
  invoice_history: PortalInvoiceList;
  payment_method_update: PortalPaymentMethodUpdate;
  subscription_cancel: PortalSubscriptionCancel;
  subscription_update: PortalSubscriptionUpdate;
};
/**
 * PortalFlowsAfterCompletionHostedConfirmation
 */
export type PortalFlowsAfterCompletionHostedConfirmation = {
  /**
   * A custom message to display to the customer after the flow is completed.
   */
  custom_message?: string | null;
};
/**
 * PortalFlowsAfterCompletionRedirect
 */
export type PortalFlowsAfterCompletionRedirect = {
  /**
   * The URL the customer will be redirected to after the flow is completed.
   */
  return_url: string;
};
/**
 * PortalFlowsCouponOffer
 */
export type PortalFlowsCouponOffer = {
  /**
   * The ID of the coupon to be offered.
   */
  coupon: string;
};
/**
 * PortalFlowsFlow
 */
export type PortalFlowsFlow = {
  after_completion: PortalFlowsFlowAfterCompletion;
  /**
   * Configuration when `flow.type=subscription_cancel`.
   */
  subscription_cancel?: PortalFlowsFlowSubscriptionCancel | null;
  /**
   * Configuration when `flow.type=subscription_update`.
   */
  subscription_update?: PortalFlowsFlowSubscriptionUpdate | null;
  /**
   * Configuration when `flow.type=subscription_update_confirm`.
   */
  subscription_update_confirm?: PortalFlowsFlowSubscriptionUpdateConfirm | null;
  /**
   * Type of flow that the customer will go through.
   */
  type:
    | 'payment_method_update'
    | 'subscription_cancel'
    | 'subscription_update'
    | 'subscription_update_confirm';
};
/**
 * PortalFlowsFlowAfterCompletion
 */
export type PortalFlowsFlowAfterCompletion = {
  /**
   * Configuration when `after_completion.type=hosted_confirmation`.
   */
  hosted_confirmation?: PortalFlowsAfterCompletionHostedConfirmation | null;
  /**
   * Configuration when `after_completion.type=redirect`.
   */
  redirect?: PortalFlowsAfterCompletionRedirect | null;
  /**
   * The specified type of behavior after the flow is completed.
   */
  type: 'hosted_confirmation' | 'portal_homepage' | 'redirect';
};
/**
 * PortalFlowsFlowSubscriptionCancel
 */
export type PortalFlowsFlowSubscriptionCancel = {
  /**
   * Specify a retention strategy to be used in the cancellation flow.
   */
  retention?: PortalFlowsRetention | null;
  /**
   * The ID of the subscription to be canceled.
   */
  subscription: string;
};
/**
 * PortalFlowsFlowSubscriptionUpdate
 */
export type PortalFlowsFlowSubscriptionUpdate = {
  /**
   * The ID of the subscription to be updated.
   */
  subscription: string;
};
/**
 * PortalFlowsFlowSubscriptionUpdateConfirm
 */
export type PortalFlowsFlowSubscriptionUpdateConfirm = {
  /**
   * The coupon or promotion code to apply to this subscription update. Currently, only up to one may be specified.
   */
  discounts?: PortalFlowsSubscriptionUpdateConfirmDiscount[] | null;
  /**
   * The [subscription item](https://stripe.com/docs/api/subscription_items) to be updated through this flow. Currently, only up to one may be specified and subscriptions with multiple items are not updatable.
   */
  items: PortalFlowsSubscriptionUpdateConfirmItem[];
  /**
   * The ID of the subscription to be updated.
   */
  subscription: string;
};
/**
 * PortalFlowsRetention
 */
export type PortalFlowsRetention = {
  /**
   * Configuration when `retention.type=coupon_offer`.
   */
  coupon_offer?: PortalFlowsCouponOffer | null;
  /**
   * Type of retention strategy that will be used.
   */
  type: 'coupon_offer';
};
/**
 * PortalFlowsSubscriptionUpdateConfirmDiscount
 */
export type PortalFlowsSubscriptionUpdateConfirmDiscount = {
  /**
   * The ID of the coupon to apply to this subscription update.
   */
  coupon?: string | null;
  /**
   * The ID of a promotion code to apply to this subscription update.
   */
  promotion_code?: string | null;
};
/**
 * PortalFlowsSubscriptionUpdateConfirmItem
 */
export type PortalFlowsSubscriptionUpdateConfirmItem = {
  /**
   * The ID of the [subscription item](https://stripe.com/docs/api/subscriptions/object#subscription_object-items-data-id) to be updated.
   */
  id?: string | null;
  /**
   * The price the customer should subscribe to through this flow. The price must also be included in the configuration's [`features.subscription_update.products`](https://stripe.com/docs/api/customer_portal/configuration#portal_configuration_object-features-subscription_update-products).
   */
  price?: string | null;
  /**
   * [Quantity](https://stripe.com/docs/subscriptions/quantities) for this item that the customer should subscribe to through this flow.
   */
  quantity?: number;
};
/**
 * PortalInvoiceList
 */
export type PortalInvoiceList = {
  /**
   * Whether the feature is enabled.
   */
  enabled: boolean;
};
/**
 * PortalLoginPage
 */
export type PortalLoginPage = {
  /**
   * If `true`, a shareable `url` will be generated that will take your customers to a hosted login page for the customer portal.
   *
   * If `false`, the previously generated `url`, if any, will be deactivated.
   */
  enabled: boolean;
  /**
   * A shareable URL to the hosted portal login page. Your customers will be able to log in with their [email](https://stripe.com/docs/api/customers/object#customer_object-email) and receive a link to their customer portal.
   */
  url?: string | null;
};
/**
 * PortalPaymentMethodUpdate
 */
export type PortalPaymentMethodUpdate = {
  /**
   * Whether the feature is enabled.
   */
  enabled: boolean;
};
/**
 * PortalResourceScheduleUpdateAtPeriodEnd
 */
export type PortalResourceScheduleUpdateAtPeriodEnd = {
  /**
   * List of conditions. When any condition is true, an update will be scheduled at the end of the current period.
   */
  conditions: PortalResourceScheduleUpdateAtPeriodEndCondition[];
};
/**
 * PortalResourceScheduleUpdateAtPeriodEndCondition
 */
export type PortalResourceScheduleUpdateAtPeriodEndCondition = {
  /**
   * The type of condition.
   */
  type: 'decreasing_item_amount' | 'shortening_interval';
};
/**
 * PortalSubscriptionCancel
 */
export type PortalSubscriptionCancel = {
  cancellation_reason: PortalSubscriptionCancellationReason;
  /**
   * Whether the feature is enabled.
   */
  enabled: boolean;
  /**
   * Whether to cancel subscriptions immediately or at the end of the billing period.
   */
  mode: 'at_period_end' | 'immediately';
  /**
   * Whether to create prorations when canceling subscriptions. Possible values are `none` and `create_prorations`.
   */
  proration_behavior: 'always_invoice' | 'create_prorations' | 'none';
};
/**
 * PortalSubscriptionCancellationReason
 */
export type PortalSubscriptionCancellationReason = {
  /**
   * Whether the feature is enabled.
   */
  enabled: boolean;
  /**
   * Which cancellation reasons will be given as options to the customer.
   */
  options: (
    | 'customer_service'
    | 'low_quality'
    | 'missing_features'
    | 'other'
    | 'switched_service'
    | 'too_complex'
    | 'too_expensive'
    | 'unused'
  )[];
};
/**
 * PortalSubscriptionUpdate
 */
export type PortalSubscriptionUpdate = {
  /**
   * The types of subscription updates that are supported for items listed in the `products` attribute. When empty, subscriptions are not updateable.
   */
  default_allowed_updates: ('price' | 'promotion_code' | 'quantity')[];
  /**
   * Whether the feature is enabled.
   */
  enabled: boolean;
  /**
   * The list of up to 10 products that support subscription updates.
   */
  products?: PortalSubscriptionUpdateProduct[] | null;
  /**
   * Determines how to handle prorations resulting from subscription updates. Valid values are `none`, `create_prorations`, and `always_invoice`. Defaults to a value of `none` if you don't set it during creation.
   */
  proration_behavior: 'always_invoice' | 'create_prorations' | 'none';
  schedule_at_period_end: PortalResourceScheduleUpdateAtPeriodEnd;
};
/**
 * PortalSubscriptionUpdateProduct
 */
export type PortalSubscriptionUpdateProduct = {
  /**
   * The list of price IDs which, when subscribed to, a subscription can be updated.
   */
  prices: string[];
  /**
   * The product ID.
   */
  product: string;
};
/**
 * Price
 * Prices define the unit cost, currency, and (optional) billing cycle for both recurring and one-time purchases of products.
 * [Products](https://stripe.com/docs/api#products) help you track inventory or provisioning, and prices help you track payment terms. Different physical goods or levels of service should be represented by products, and pricing options should be represented by prices. This approach lets you change prices without having to change your provisioning scheme.
 *
 * For example, you might have a single "gold" product that has prices for $10/month, $100/year, and €9 once.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription), [create an invoice](https://stripe.com/docs/billing/invoices/create), and more about [products and prices](https://stripe.com/docs/products-prices/overview).
 */
export type Price = {
  /**
   * Whether the price can be used for new purchases.
   */
  active: boolean;
  /**
   * Describes how to compute the price per period. Either `per_unit` or `tiered`. `per_unit` indicates that the fixed amount (specified in `unit_amount` or `unit_amount_decimal`) will be charged per unit in `quantity` (for prices with `usage_type=licensed`), or per unit of total usage (for prices with `usage_type=metered`). `tiered` indicates that the unit pricing will be computed using a tiering strategy as defined using the `tiers` and `tiers_mode` attributes.
   */
  billing_scheme: 'per_unit' | 'tiered';
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Prices defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
   */
  currency_options?: {
    [key: string]: CurrencyOption;
  };
  /**
   * When set, provides configuration for the amount to be adjusted by the customer during Checkout Sessions and Payment Links.
   */
  custom_unit_amount?: CustomUnitAmount | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * A lookup key used to retrieve prices dynamically from a static string. This may be up to 200 characters.
   */
  lookup_key?: string | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * A brief description of the price, hidden from customers.
   */
  nickname?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'price';
  /**
   * The ID of the product this price is associated with.
   */
  product: string | Product | DeletedProduct;
  /**
   * The recurring components of a price such as `interval` and `usage_type`.
   */
  recurring?: Recurring | null;
  /**
   * Only required if a [default tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#setting-a-default-tax-behavior-(recommended)) was not provided in the Stripe Tax settings. Specifies whether the price is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`. Once specified as either `inclusive` or `exclusive`, it cannot be changed.
   */
  tax_behavior?: ('exclusive' | 'inclusive' | 'unspecified') | null;
  /**
   * Each element represents a pricing tier. This parameter requires `billing_scheme` to be set to `tiered`. See also the documentation for `billing_scheme`.
   */
  tiers?: PriceTier[];
  /**
   * Defines if the tiering price should be `graduated` or `volume` based. In `volume`-based tiering, the maximum quantity within a period determines the per unit price. In `graduated` tiering, pricing can change as the quantity grows.
   */
  tiers_mode?: ('graduated' | 'volume') | null;
  /**
   * Apply a transformation to the reported usage or set quantity before computing the amount billed. Cannot be combined with `tiers`.
   */
  transform_quantity?: TransformQuantity | null;
  /**
   * One of `one_time` or `recurring` depending on whether the price is for a one-time purchase or a recurring (subscription) purchase.
   */
  type: 'one_time' | 'recurring';
  /**
   * The unit amount in cents (or local equivalent) to be charged, represented as a whole integer if possible. Only set if `billing_scheme=per_unit`.
   */
  unit_amount?: number | null;
  /**
   * The unit amount in cents (or local equivalent) to be charged, represented as a decimal string with at most 12 decimal places. Only set if `billing_scheme=per_unit`.
   */
  unit_amount_decimal?: string | null;
};
/**
 * PriceTier
 */
export type PriceTier = {
  /**
   * Price for the entire tier.
   */
  flat_amount?: number | null;
  /**
   * Same as `flat_amount`, but contains a decimal value with at most 12 decimal places.
   */
  flat_amount_decimal?: string | null;
  /**
   * Per unit price for units relevant to the tier.
   */
  unit_amount?: number | null;
  /**
   * Same as `unit_amount`, but contains a decimal value with at most 12 decimal places.
   */
  unit_amount_decimal?: string | null;
  /**
   * Up to and including to this quantity will be contained in the tier.
   */
  up_to?: number | null;
};
/**
 * Product
 * Products describe the specific goods or services you offer to your customers.
 * For example, you might offer a Standard and Premium version of your goods or service; each version would be a separate Product.
 * They can be used in conjunction with [Prices](https://stripe.com/docs/api#prices) to configure pricing in Payment Links, Checkout, and Subscriptions.
 *
 * Related guides: [Set up a subscription](https://stripe.com/docs/billing/subscriptions/set-up-subscription),
 * [share a Payment Link](https://stripe.com/docs/payment-links),
 * [accept payments with Checkout](https://stripe.com/docs/payments/accept-a-payment#create-product-prices-upfront),
 * and more about [Products and Prices](https://stripe.com/docs/products-prices/overview)
 */
export type Product = {
  /**
   * Whether the product is currently available for purchase.
   */
  active: boolean;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The ID of the [Price](https://stripe.com/docs/api/prices) object that is the default price for this product.
   */
  default_price?: (string | Price) | null;
  /**
   * The product's description, meant to be displayable to the customer. Use this field to optionally store a long form explanation of the product being sold for your own rendering purposes.
   */
  description?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * A list of up to 8 URLs of images for this product, meant to be displayable to the customer.
   */
  images: string[];
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * A list of up to 15 marketing features for this product. These are displayed in [pricing tables](https://stripe.com/docs/payments/checkout/pricing-table).
   */
  marketing_features: ProductMarketingFeature[];
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The product's name, meant to be displayable to the customer.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'product';
  /**
   * The dimensions of this product for shipping purposes.
   */
  package_dimensions?: PackageDimensions | null;
  /**
   * Whether this product is shipped (i.e., physical goods).
   */
  shippable?: boolean | null;
  /**
   * Extra information about a product which will appear on your customer's credit card statement. In the case that multiple products are billed at once, the first statement descriptor will be used. Only used for subscription payments.
   */
  statement_descriptor?: string | null;
  /**
   * A [tax code](https://stripe.com/docs/tax/tax-categories) ID.
   */
  tax_code?: (string | TaxCode) | null;
  /**
   * A label that represents units of this product. When set, this will be included in customers' receipts, invoices, Checkout, and the customer portal.
   */
  unit_label?: string | null;
  /**
   * Time at which the object was last updated. Measured in seconds since the Unix epoch.
   */
  updated: number;
  /**
   * A URL of a publicly-accessible webpage for this product.
   */
  url?: string | null;
};
/**
 * ProductFeature
 * A product_feature represents an attachment between a feature and a product.
 * When a product is purchased that has a feature attached, Stripe will create an entitlement to the feature for the purchasing customer.
 */
export type ProductFeature = {
  entitlement_feature: EntitlementsFeature;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'product_feature';
};
/**
 * ProductMarketingFeature
 */
export type ProductMarketingFeature = {
  /**
   * The marketing feature name. Up to 80 characters long.
   */
  name?: string;
};
/**
 * PromotionCode
 * A Promotion Code represents a customer-redeemable code for a [coupon](https://stripe.com/docs/api#coupons). It can be used to
 * create multiple codes for a single coupon.
 */
export type PromotionCode = {
  /**
   * Whether the promotion code is currently active. A promotion code is only active if the coupon is also valid.
   */
  active: boolean;
  /**
   * The customer-facing code. Regardless of case, this code must be unique across all active promotion codes for each customer. Valid characters are lower case letters (a-z), upper case letters (A-Z), and digits (0-9).
   */
  code: string;
  coupon: Coupon;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The customer that this promotion code can be used by.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * Date at which the promotion code can no longer be redeemed.
   */
  expires_at?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Maximum number of times this promotion code can be redeemed.
   */
  max_redemptions?: number | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'promotion_code';
  restrictions: PromotionCodesResourceRestrictions;
  /**
   * Number of times this promotion code has been used.
   */
  times_redeemed: number;
};
/**
 * PromotionCodeCurrencyOption
 */
export type PromotionCodeCurrencyOption = {
  /**
   * Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
   */
  minimum_amount: number;
};
/**
 * PromotionCodesResourceRestrictions
 */
export type PromotionCodesResourceRestrictions = {
  /**
   * Promotion code restrictions defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
   */
  currency_options?: {
    [key: string]: PromotionCodeCurrencyOption;
  };
  /**
   * A Boolean indicating if the Promotion Code should only be redeemed for Customers without any successful payments or invoices
   */
  first_time_transaction: boolean;
  /**
   * Minimum amount required to redeem this Promotion Code into a Coupon (e.g., a purchase must be $100 or more to work).
   */
  minimum_amount?: number | null;
  /**
   * Three-letter [ISO code](https://stripe.com/docs/currencies) for minimum_amount
   */
  minimum_amount_currency?: string | null;
};
/**
 * Quote
 * A Quote is a way to model prices that you'd like to provide to a customer.
 * Once accepted, it will automatically create an invoice, subscription or subscription schedule.
 */
export type Quote = {
  /**
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /**
   * Total after discounts and taxes are applied.
   */
  amount_total: number;
  /**
   * ID of the Connect Application that created the quote.
   */
  application?: (string | Application | DeletedApplication) | null;
  /**
   * The amount of the application fee (if any) that will be requested to be applied to the payment and transferred to the application owner's Stripe account. Only applicable if there are no line items with recurring prices on the quote.
   */
  application_fee_amount?: number | null;
  /**
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account. Only applicable if there are line items with recurring prices on the quote.
   */
  application_fee_percent?: number | null;
  automatic_tax: QuotesResourceAutomaticTax;
  /**
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay invoices at the end of the subscription cycle or on finalization using the default payment method attached to the subscription or customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`. Defaults to `charge_automatically`.
   */
  collection_method: 'charge_automatically' | 'send_invoice';
  computed: QuotesResourceComputed;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency?: string | null;
  /**
   * The customer which this quote belongs to. A customer is required before finalizing the quote. Once specified, it cannot be changed.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * The tax rates applied to this quote.
   */
  default_tax_rates?: (string | TaxRate)[];
  /**
   * A description that will be displayed on the quote PDF.
   */
  description?: string | null;
  /**
   * The discounts applied to this quote.
   */
  discounts: (string | Discount)[];
  /**
   * The date on which the quote will be canceled if in `open` or `draft` status. Measured in seconds since the Unix epoch.
   */
  expires_at: number;
  /**
   * A footer that will be displayed on the quote PDF.
   */
  footer?: string | null;
  /**
   * Details of the quote that was cloned. See the [cloning documentation](https://stripe.com/docs/quotes/clone) for more details.
   */
  from_quote?: QuotesResourceFromQuote | null;
  /**
   * A header that will be displayed on the quote PDF.
   */
  header?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The invoice that was created from this quote.
   */
  invoice?: (string | Invoice | DeletedInvoice) | null;
  invoice_settings: InvoiceSettingQuoteSetting;
  /**
   * QuotesResourceListLineItems
   * A list of items the customer is being quoted for.
   */
  line_items?: {
    /**
     * Details about each object.
     */
    data: Item[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * A unique number that identifies this particular quote. This number is assigned once the quote is [finalized](https://stripe.com/docs/quotes/overview#finalize).
   */
  number?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'quote';
  /**
   * The account on behalf of which to charge. See the [Connect documentation](https://support.stripe.com/questions/sending-invoices-on-behalf-of-connected-accounts) for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * The status of the quote.
   */
  status: 'accepted' | 'canceled' | 'draft' | 'open';
  status_transitions: QuotesResourceStatusTransitions;
  /**
   * The subscription that was created or updated from this quote.
   */
  subscription?: (string | Subscription) | null;
  subscription_data: QuotesResourceSubscriptionDataSubscriptionData;
  /**
   * The subscription schedule that was created or updated from this quote.
   */
  subscription_schedule?: (string | SubscriptionSchedule) | null;
  /**
   * ID of the test clock this quote belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
  total_details: QuotesResourceTotalDetails;
  /**
   * The account (if any) the payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the invoices.
   */
  transfer_data?: QuotesResourceTransferData | null;
};
/**
 * QuotesResourceAutomaticTax
 */
export type QuotesResourceAutomaticTax = {
  /**
   * Automatically calculate taxes
   */
  enabled: boolean;
  /**
   * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
   */
  liability?: ConnectAccountReference | null;
  /**
   * The tax provider powering automatic tax.
   */
  provider?: string | null;
  /**
   * The status of the most recent automated tax calculation for this quote.
   */
  status?: ('complete' | 'failed' | 'requires_location_inputs') | null;
};
/**
 * QuotesResourceComputed
 */
export type QuotesResourceComputed = {
  /**
   * The definitive totals and line items the customer will be charged on a recurring basis. Takes into account the line items with recurring prices and discounts with `duration=forever` coupons only. Defaults to `null` if no inputted line items with recurring prices.
   */
  recurring?: QuotesResourceRecurring | null;
  upfront: QuotesResourceUpfront;
};
/**
 * QuotesResourceFromQuote
 */
export type QuotesResourceFromQuote = {
  /**
   * Whether this quote is a revision of a different quote.
   */
  is_revision: boolean;
  /**
   * The quote that was cloned.
   */
  quote: string | Quote;
};
/**
 * QuotesResourceRecurring
 */
export type QuotesResourceRecurring = {
  /**
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /**
   * Total after discounts and taxes are applied.
   */
  amount_total: number;
  /**
   * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
   */
  interval: 'day' | 'month' | 'week' | 'year';
  /**
   * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
   */
  interval_count: number;
  total_details: QuotesResourceTotalDetails;
};
/**
 * QuotesResourceStatusTransitions
 */
export type QuotesResourceStatusTransitions = {
  /**
   * The time that the quote was accepted. Measured in seconds since Unix epoch.
   */
  accepted_at?: number | null;
  /**
   * The time that the quote was canceled. Measured in seconds since Unix epoch.
   */
  canceled_at?: number | null;
  /**
   * The time that the quote was finalized. Measured in seconds since Unix epoch.
   */
  finalized_at?: number | null;
};
/**
 * QuotesResourceSubscriptionDataSubscriptionData
 */
export type QuotesResourceSubscriptionDataSubscriptionData = {
  /**
   * The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
   */
  description?: string | null;
  /**
   * When creating a new subscription, the date of which the subscription schedule will start after the quote is accepted. This date is ignored if it is in the past when the quote is accepted. Measured in seconds since the Unix epoch.
   */
  effective_date?: number | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that will set metadata on the subscription or subscription schedule when the quote is accepted. If a recurring price is included in `line_items`, this field will be passed to the resulting subscription's `metadata` field. If `subscription_data.effective_date` is used, this field will be passed to the resulting subscription schedule's `phases.metadata` field. Unlike object-level metadata, this field is declarative. Updates will clear prior values.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * Integer representing the number of trial period days before the customer is charged for the first time.
   */
  trial_period_days?: number | null;
};
/**
 * QuotesResourceTotalDetails
 */
export type QuotesResourceTotalDetails = {
  /**
   * This is the sum of all the discounts.
   */
  amount_discount: number;
  /**
   * This is the sum of all the shipping amounts.
   */
  amount_shipping?: number | null;
  /**
   * This is the sum of all the tax amounts.
   */
  amount_tax: number;
  breakdown?: QuotesResourceTotalDetailsResourceBreakdown;
};
/**
 * QuotesResourceTotalDetailsResourceBreakdown
 */
export type QuotesResourceTotalDetailsResourceBreakdown = {
  /**
   * The aggregated discounts.
   */
  discounts: LineItemsDiscountAmount[];
  /**
   * The aggregated tax amounts by rate.
   */
  taxes: LineItemsTaxAmount[];
};
/**
 * QuotesResourceTransferData
 */
export type QuotesResourceTransferData = {
  /**
   * The amount in cents (or local equivalent) that will be transferred to the destination account when the invoice is paid. By default, the entire amount is transferred to the destination.
   */
  amount?: number | null;
  /**
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount will be transferred to the destination.
   */
  amount_percent?: number | null;
  /**
   * The account where funds from the payment will be transferred to upon payment success.
   */
  destination: string | Account;
};
/**
 * QuotesResourceUpfront
 */
export type QuotesResourceUpfront = {
  /**
   * Total before any discounts or taxes are applied.
   */
  amount_subtotal: number;
  /**
   * Total after discounts and taxes are applied.
   */
  amount_total: number;
  /**
   * QuotesResourceListLineItems
   * The line items that will appear on the next invoice after this quote is accepted. This does not include pending invoice items that exist on the customer but may still be included in the next invoice.
   */
  line_items?: {
    /**
     * Details about each object.
     */
    data: Item[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  total_details: QuotesResourceTotalDetails;
};
/**
 * RadarEarlyFraudWarning
 * An early fraud warning indicates that the card issuer has notified us that a
 * charge may be fraudulent.
 *
 * Related guide: [Early fraud warnings](https://stripe.com/docs/disputes/measuring#early-fraud-warnings)
 */
export type RadarEarlyFraudWarning = {
  /**
   * An EFW is actionable if it has not received a dispute and has not been fully refunded. You may wish to proactively refund a charge that receives an EFW, in order to avoid receiving a dispute later.
   */
  actionable: boolean;
  /**
   * ID of the charge this early fraud warning is for, optionally expanded.
   */
  charge: string | Charge;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The type of fraud labelled by the issuer. One of `card_never_received`, `fraudulent_card_application`, `made_with_counterfeit_card`, `made_with_lost_card`, `made_with_stolen_card`, `misc`, `unauthorized_use_of_card`.
   */
  fraud_type: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'radar.early_fraud_warning';
  /**
   * ID of the Payment Intent this early fraud warning is for, optionally expanded.
   */
  payment_intent?: string | PaymentIntent;
};
/**
 * RadarListList
 * Value lists allow you to group values together which can then be referenced in rules.
 *
 * Related guide: [Default Stripe lists](https://stripe.com/docs/radar/lists#managing-list-items)
 */
export type RadarValueList = {
  /**
   * The name of the value list for use in rules.
   */
  alias: string;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The name or email address of the user who created this value list.
   */
  created_by: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The type of items in the value list. One of `card_fingerprint`, `us_bank_account_fingerprint`, `sepa_debit_fingerprint`, `card_bin`, `email`, `ip_address`, `country`, `string`, `case_sensitive_string`, or `customer_id`.
   */
  item_type:
    | 'card_bin'
    | 'card_fingerprint'
    | 'case_sensitive_string'
    | 'country'
    | 'customer_id'
    | 'email'
    | 'ip_address'
    | 'sepa_debit_fingerprint'
    | 'string'
    | 'us_bank_account_fingerprint';
  /**
   * RadarListListItemList
   * List of items contained within this value list.
   */
  list_items: {
    /**
     * Details about each object.
     */
    data: RadarValueListItem[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The name of the value list.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'radar.value_list';
};
/**
 * RadarListListItem
 * Value list items allow you to add specific values to a given Radar value list, which can then be used in rules.
 *
 * Related guide: [Managing list items](https://stripe.com/docs/radar/lists#managing-list-items)
 */
export type RadarValueListItem = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The name or email address of the user who added this item to the value list.
   */
  created_by: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'radar.value_list_item';
  /**
   * The value of the item.
   */
  value: string;
  /**
   * The identifier of the value list this item belongs to.
   */
  value_list: string;
};
/**
 * RadarRadarOptions
 * Options to configure Radar. See [Radar Session](https://stripe.com/docs/radar/radar-session) for more information.
 */
export type RadarRadarOptions = {
  /**
   * A [Radar Session](https://stripe.com/docs/radar/radar-session) is a snapshot of the browser metadata and device details that help Radar make more accurate predictions on your payments.
   */
  session?: string;
};
/**
 * RadarReviewResourceLocation
 */
export type RadarReviewResourceLocation = {
  /**
   * The city where the payment originated.
   */
  city?: string | null;
  /**
   * Two-letter ISO code representing the country where the payment originated.
   */
  country?: string | null;
  /**
   * The geographic latitude where the payment originated.
   */
  latitude?: number | null;
  /**
   * The geographic longitude where the payment originated.
   */
  longitude?: number | null;
  /**
   * The state/county/province/region where the payment originated.
   */
  region?: string | null;
};
/**
 * RadarReviewResourceSession
 */
export type RadarReviewResourceSession = {
  /**
   * The browser used in this browser session (e.g., `Chrome`).
   */
  browser?: string | null;
  /**
   * Information about the device used for the browser session (e.g., `Samsung SM-G930T`).
   */
  device?: string | null;
  /**
   * The platform for the browser session (e.g., `Macintosh`).
   */
  platform?: string | null;
  /**
   * The version for the browser session (e.g., `61.0.3163.100`).
   */
  version?: string | null;
};
/**
 * received_payment_method_details_financial_account
 */
export type ReceivedPaymentMethodDetailsFinancialAccount = {
  /**
   * The FinancialAccount ID.
   */
  id: string;
  /**
   * The rails the ReceivedCredit was sent over. A FinancialAccount can only send funds over `stripe`.
   */
  network: 'stripe';
};
/**
 * Recurring
 */
export type Recurring = {
  /**
   * The frequency at which a subscription is billed. One of `day`, `week`, `month` or `year`.
   */
  interval: 'day' | 'month' | 'week' | 'year';
  /**
   * The number of intervals (specified in the `interval` attribute) between subscription billings. For example, `interval=month` and `interval_count=3` bills every 3 months.
   */
  interval_count: number;
  /**
   * The meter tracking the usage of a metered price
   */
  meter?: string | null;
  /**
   * Configures how the quantity per period should be determined. Can be either `metered` or `licensed`. `licensed` automatically bills the `quantity` set when adding it to a subscription. `metered` aggregates the total usage based on usage records. Defaults to `licensed`.
   */
  usage_type: 'licensed' | 'metered';
};
/**
 * Refund
 * Refund objects allow you to refund a previously created charge that isn't
 * refunded yet. Funds are refunded to the credit or debit card that's
 * initially charged.
 *
 * Related guide: [Refunds](https://stripe.com/docs/refunds)
 */
export type Refund = {
  /**
   * Amount, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Balance transaction that describes the impact on your account balance.
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * ID of the charge that's refunded.
   */
  charge?: (string | Charge) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. You can use this for displaying to users (available on non-card refunds only).
   */
  description?: string;
  destination_details?: RefundDestinationDetails;
  /**
   * After the refund fails, this balance transaction describes the adjustment made on your account balance that reverses the initial balance transaction.
   */
  failure_balance_transaction?: string | BalanceTransaction;
  /**
   * Provides the reason for the refund failure. Possible values are: `lost_or_stolen_card`, `expired_or_canceled_card`, `charge_for_pending_refund_disputed`, `insufficient_funds`, `declined`, `merchant_request`, or `unknown`.
   */
  failure_reason?: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * For payment methods without native refund support (for example, Konbini, PromptPay), provide an email address for the customer to receive refund instructions.
   */
  instructions_email?: string;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  next_action?: RefundNextAction;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'refund';
  /**
   * ID of the PaymentIntent that's refunded.
   */
  payment_intent?: (string | PaymentIntent) | null;
  /**
   * Provides the reason for why the refund is pending. Possible values are: `processing`, `insufficient_funds`, or `charge_pending`.
   */
  pending_reason?: 'charge_pending' | 'insufficient_funds' | 'processing';
  presentment_details?: PaymentFlowsPaymentIntentPresentmentDetails;
  /**
   * Reason for the refund, which is either user-provided (`duplicate`, `fraudulent`, or `requested_by_customer`) or generated by Stripe internally (`expired_uncaptured_charge`).
   */
  reason?:
    | (
        | 'duplicate'
        | 'expired_uncaptured_charge'
        | 'fraudulent'
        | 'requested_by_customer'
      )
    | null;
  /**
   * This is the transaction number that appears on email receipts sent for this refund.
   */
  receipt_number?: string | null;
  /**
   * The transfer reversal that's associated with the refund. Only present if the charge came from another Stripe account.
   */
  source_transfer_reversal?: (string | TransferReversal) | null;
  /**
   * Status of the refund. This can be `pending`, `requires_action`, `succeeded`, `failed`, or `canceled`. Learn more about [failed refunds](https://stripe.com/docs/refunds#failed-refunds).
   */
  status?: string | null;
  /**
   * This refers to the transfer reversal object if the accompanying transfer reverses. This is only applicable if the charge was created using the destination parameter.
   */
  transfer_reversal?: (string | TransferReversal) | null;
};
/**
 * refund_destination_details
 */
export type RefundDestinationDetails = {
  affirm?: DestinationDetailsUnimplemented;
  afterpay_clearpay?: DestinationDetailsUnimplemented;
  alipay?: DestinationDetailsUnimplemented;
  alma?: DestinationDetailsUnimplemented;
  amazon_pay?: DestinationDetailsUnimplemented;
  au_bank_transfer?: DestinationDetailsUnimplemented;
  blik?: RefundDestinationDetailsBlik;
  br_bank_transfer?: RefundDestinationDetailsBrBankTransfer;
  card?: RefundDestinationDetailsCard;
  cashapp?: DestinationDetailsUnimplemented;
  customer_cash_balance?: DestinationDetailsUnimplemented;
  eps?: DestinationDetailsUnimplemented;
  eu_bank_transfer?: RefundDestinationDetailsEuBankTransfer;
  gb_bank_transfer?: RefundDestinationDetailsGbBankTransfer;
  giropay?: DestinationDetailsUnimplemented;
  grabpay?: DestinationDetailsUnimplemented;
  jp_bank_transfer?: RefundDestinationDetailsJpBankTransfer;
  klarna?: DestinationDetailsUnimplemented;
  multibanco?: RefundDestinationDetailsMultibanco;
  mx_bank_transfer?: RefundDestinationDetailsMxBankTransfer;
  nz_bank_transfer?: DestinationDetailsUnimplemented;
  p24?: RefundDestinationDetailsP24;
  paynow?: DestinationDetailsUnimplemented;
  paypal?: RefundDestinationDetailsPaypal;
  pix?: DestinationDetailsUnimplemented;
  revolut?: DestinationDetailsUnimplemented;
  sofort?: DestinationDetailsUnimplemented;
  swish?: RefundDestinationDetailsSwish;
  th_bank_transfer?: RefundDestinationDetailsThBankTransfer;
  /**
   * The type of transaction-specific details of the payment method used in the refund (e.g., `card`). An additional hash is included on `destination_details` with a name matching this value. It contains information specific to the refund transaction.
   */
  type: string;
  us_bank_transfer?: RefundDestinationDetailsUsBankTransfer;
  wechat_pay?: DestinationDetailsUnimplemented;
  zip?: DestinationDetailsUnimplemented;
};
/**
 * refund_destination_details_blik
 */
export type RefundDestinationDetailsBlik = {
  /**
   * For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.
   */
  network_decline_code?: string | null;
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_br_bank_transfer
 */
export type RefundDestinationDetailsBrBankTransfer = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_card
 */
export type RefundDestinationDetailsCard = {
  /**
   * Value of the reference number assigned to the refund.
   */
  reference?: string;
  /**
   * Status of the reference number on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string;
  /**
   * Type of the reference number assigned to the refund.
   */
  reference_type?: string;
  /**
   * The type of refund. This can be `refund`, `reversal`, or `pending`.
   */
  type: 'pending' | 'refund' | 'reversal';
};
/**
 * refund_destination_details_eu_bank_transfer
 */
export type RefundDestinationDetailsEuBankTransfer = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_gb_bank_transfer
 */
export type RefundDestinationDetailsGbBankTransfer = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_jp_bank_transfer
 */
export type RefundDestinationDetailsJpBankTransfer = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_multibanco
 */
export type RefundDestinationDetailsMultibanco = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_mx_bank_transfer
 */
export type RefundDestinationDetailsMxBankTransfer = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_p24
 */
export type RefundDestinationDetailsP24 = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_paypal
 */
export type RefundDestinationDetailsPaypal = {
  /**
   * For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.
   */
  network_decline_code?: string | null;
};
/**
 * refund_destination_details_swish
 */
export type RefundDestinationDetailsSwish = {
  /**
   * For refunds declined by the network, a decline code provided by the network which indicates the reason the refund failed.
   */
  network_decline_code?: string | null;
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_th_bank_transfer
 */
export type RefundDestinationDetailsThBankTransfer = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * refund_destination_details_us_bank_transfer
 */
export type RefundDestinationDetailsUsBankTransfer = {
  /**
   * The reference assigned to the refund.
   */
  reference?: string | null;
  /**
   * Status of the reference on the refund. This can be `pending`, `available` or `unavailable`.
   */
  reference_status?: string | null;
};
/**
 * RefundNextAction
 */
export type RefundNextAction = {
  display_details?: RefundNextActionDisplayDetails;
  /**
   * Type of the next action to perform.
   */
  type: string;
};
/**
 * RefundNextActionDisplayDetails
 */
export type RefundNextActionDisplayDetails = {
  email_sent: EmailSent;
  /**
   * The expiry timestamp.
   */
  expires_at: number;
};
/**
 * reporting_report_run
 * The Report Run object represents an instance of a report type generated with
 * specific run parameters. Once the object is created, Stripe begins processing the report.
 * When the report has finished running, it will give you a reference to a file
 * where you can retrieve your results. For an overview, see
 * [API Access to Reports](https://stripe.com/docs/reporting/statements/api).
 *
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 */
export type ReportingReportRun = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * If something should go wrong during the run, a message about the failure (populated when
   *  `status=failed`).
   */
  error?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * `true` if the report is run on live mode data and `false` if it is run on test mode data.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'reporting.report_run';
  parameters: FinancialReportingFinanceReportRunRunParameters;
  /**
   * The ID of the [report type](https://stripe.com/docs/reports/report-types) to run, such as `"balance.summary.1"`.
   */
  report_type: string;
  /**
   * The file object representing the result of the report run (populated when
   *  `status=succeeded`).
   */
  result?: File | null;
  /**
   * Status of this report run. This will be `pending` when the run is initially created.
   *  When the run finishes, this will be set to `succeeded` and the `result` field will be populated.
   *  Rarely, we may encounter an error, at which point this will be set to `failed` and the `error` field will be populated.
   */
  status: string;
  /**
   * Timestamp at which this run successfully finished (populated when
   *  `status=succeeded`). Measured in seconds since the Unix epoch.
   */
  succeeded_at?: number | null;
};
/**
 * reporting_report_type
 * The Report Type resource corresponds to a particular type of report, such as
 * the "Activity summary" or "Itemized payouts" reports. These objects are
 * identified by an ID belonging to a set of enumerated values. See
 * [API Access to Reports documentation](https://stripe.com/docs/reporting/statements/api)
 * for those Report Type IDs, along with required and optional parameters.
 *
 * Note that certain report types can only be run based on your live-mode data (not test-mode
 * data), and will error when queried without a [live-mode API key](https://stripe.com/docs/keys#test-live-modes).
 */
export type ReportingReportType = {
  /**
   * Most recent time for which this Report Type is available. Measured in seconds since the Unix epoch.
   */
  data_available_end: number;
  /**
   * Earliest time for which this Report Type is available. Measured in seconds since the Unix epoch.
   */
  data_available_start: number;
  /**
   * List of column names that are included by default when this Report Type gets run. (If the Report Type doesn't support the `columns` parameter, this will be null.)
   */
  default_columns?: string[] | null;
  /**
   * The [ID of the Report Type](https://stripe.com/docs/reporting/statements/api#available-report-types), such as `balance.summary.1`.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Human-readable name of the Report Type
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'reporting.report_type';
  /**
   * When this Report Type was latest updated. Measured in seconds since the Unix epoch.
   */
  updated: number;
  /**
   * Version of the Report Type. Different versions report with the same ID will have the same purpose, but may take different run parameters or have different result schemas.
   */
  version: number;
};
/**
 * ReserveTransaction
 */
export type ReserveTransaction = {
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'reserve_transaction';
};
/**
 * RadarReview
 * Reviews can be used to supplement automated fraud detection with human expertise.
 *
 * Learn more about [Radar](/radar) and reviewing payments
 * [here](https://stripe.com/docs/radar/reviews).
 */
export type Review = {
  /**
   * The ZIP or postal code of the card used, if applicable.
   */
  billing_zip?: string | null;
  /**
   * The charge associated with this review.
   */
  charge?: (string | Charge) | null;
  /**
   * The reason the review was closed, or null if it has not yet been closed. One of `approved`, `refunded`, `refunded_as_fraud`, `disputed`, `redacted`, or `canceled`.
   */
  closed_reason?:
    | (
        | 'approved'
        | 'canceled'
        | 'disputed'
        | 'redacted'
        | 'refunded'
        | 'refunded_as_fraud'
      )
    | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The IP address where the payment originated.
   */
  ip_address?: string | null;
  /**
   * Information related to the location of the payment. Note that this information is an approximation and attempts to locate the nearest population center - it should not be used to determine a specific address.
   */
  ip_address_location?: RadarReviewResourceLocation | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'review';
  /**
   * If `true`, the review needs action.
   */
  open: boolean;
  /**
   * The reason the review was opened. One of `rule` or `manual`.
   */
  opened_reason: 'manual' | 'rule';
  /**
   * The PaymentIntent ID associated with this review, if one exists.
   */
  payment_intent?: string | PaymentIntent;
  /**
   * The reason the review is currently open or closed. One of `rule`, `manual`, `approved`, `refunded`, `refunded_as_fraud`, `disputed`, `redacted`, or `canceled`.
   */
  reason: string;
  /**
   * Information related to the browsing session of the user who initiated the payment.
   */
  session?: RadarReviewResourceSession | null;
};
/**
 * revolut_pay_underlying_payment_method_funding_details
 */
export type RevolutPayUnderlyingPaymentMethodFundingDetails = {
  card?: PaymentMethodDetailsPassthroughCard;
  /**
   * funding type of the underlying payment method.
   */
  type?: 'card' | null;
};
/**
 * RadarRule
 */
export type Rule = {
  /**
   * The action taken on the payment.
   */
  action: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The predicate to evaluate the payment against.
   */
  predicate: string;
};
/**
 * ScheduledQueryRun
 * If you have [scheduled a Sigma query](https://stripe.com/docs/sigma/scheduled-queries), you'll
 * receive a `sigma.scheduled_query_run.created` webhook each time the query
 * runs. The webhook contains a `ScheduledQueryRun` object, which you can use to
 * retrieve the query results.
 */
export type ScheduledQueryRun = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * When the query was run, Sigma contained a snapshot of your Stripe data at this time.
   */
  data_load_time: number;
  error?: SigmaScheduledQueryRunError;
  /**
   * The file object representing the results of the query.
   */
  file?: File | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'scheduled_query_run';
  /**
   * Time at which the result expires and is no longer available for download.
   */
  result_available_until: number;
  /**
   * SQL for the query.
   */
  sql: string;
  /**
   * The query's execution status, which will be `completed` for successful runs, and `canceled`, `failed`, or `timed_out` otherwise.
   */
  status: string;
  /**
   * Title of the query.
   */
  title: string;
};
/**
 * SchedulesPhaseAutomaticTax
 */
export type SchedulesPhaseAutomaticTax = {
  /**
   * If Stripe disabled automatic tax, this enum describes why.
   */
  disabled_reason?: 'requires_location_inputs' | null;
  /**
   * Whether Stripe automatically computes tax on invoices created during this phase.
   */
  enabled: boolean;
  /**
   * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
   */
  liability?: ConnectAccountReference | null;
};
/**
 * SecretServiceResourceScope
 */
export type SecretServiceResourceScope = {
  /**
   * The secret scope type.
   */
  type: 'account' | 'user';
  /**
   * The user ID, if type is set to "user"
   */
  user?: string;
};
/**
 * sepa_debit_generated_from
 */
export type SepaDebitGeneratedFrom = {
  /**
   * The ID of the Charge that generated this PaymentMethod, if any.
   */
  charge?: (string | Charge) | null;
  /**
   * The ID of the SetupAttempt that generated this PaymentMethod, if any.
   */
  setup_attempt?: (string | SetupAttempt) | null;
};
/**
 * PaymentFlowsSetupIntentSetupAttempt
 * A SetupAttempt describes one attempted confirmation of a SetupIntent,
 * whether that confirmation is successful or unsuccessful. You can use
 * SetupAttempts to inspect details of a specific attempt at setting up a
 * payment method using a SetupIntent.
 */
export type SetupAttempt = {
  /**
   * The value of [application](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-application) on the SetupIntent at the time of this confirmation.
   */
  application?: (string | Application) | null;
  /**
   * If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
   *
   * It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
   */
  attach_to_self?: boolean;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The value of [customer](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-customer) on the SetupIntent at the time of this confirmation.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * Indicates the directions of money movement for which this payment method is intended to be used.
   *
   * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
   */
  flow_directions?: ('inbound' | 'outbound')[] | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'setup_attempt';
  /**
   * The value of [on_behalf_of](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-on_behalf_of) on the SetupIntent at the time of this confirmation.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * ID of the payment method used with this SetupAttempt.
   */
  payment_method: string | PaymentMethod;
  payment_method_details: SetupAttemptPaymentMethodDetails;
  /**
   * The error encountered during this attempt to confirm the SetupIntent, if any.
   */
  setup_error?: ApiErrors | null;
  /**
   * ID of the SetupIntent that this attempt belongs to.
   */
  setup_intent: string | SetupIntent;
  /**
   * Status of this SetupAttempt, one of `requires_confirmation`, `requires_action`, `processing`, `succeeded`, `failed`, or `abandoned`.
   */
  status: string;
  /**
   * The value of [usage](https://stripe.com/docs/api/setup_intents/object#setup_intent_object-usage) on the SetupIntent at the time of this confirmation, one of `off_session` or `on_session`.
   */
  usage: string;
};
/**
 * SetupAttemptPaymentMethodDetails
 */
export type SetupAttemptPaymentMethodDetails = {
  acss_debit?: SetupAttemptPaymentMethodDetailsAcssDebit;
  amazon_pay?: SetupAttemptPaymentMethodDetailsAmazonPay;
  au_becs_debit?: SetupAttemptPaymentMethodDetailsAuBecsDebit;
  bacs_debit?: SetupAttemptPaymentMethodDetailsBacsDebit;
  bancontact?: SetupAttemptPaymentMethodDetailsBancontact;
  boleto?: SetupAttemptPaymentMethodDetailsBoleto;
  card?: SetupAttemptPaymentMethodDetailsCard;
  card_present?: SetupAttemptPaymentMethodDetailsCardPresent;
  cashapp?: SetupAttemptPaymentMethodDetailsCashapp;
  ideal?: SetupAttemptPaymentMethodDetailsIdeal;
  kakao_pay?: SetupAttemptPaymentMethodDetailsKakaoPay;
  klarna?: SetupAttemptPaymentMethodDetailsKlarna;
  kr_card?: SetupAttemptPaymentMethodDetailsKrCard;
  link?: SetupAttemptPaymentMethodDetailsLink;
  naver_pay?: SetupAttemptPaymentMethodDetailsNaverPay;
  nz_bank_account?: SetupAttemptPaymentMethodDetailsNzBankAccount;
  paypal?: SetupAttemptPaymentMethodDetailsPaypal;
  revolut_pay?: SetupAttemptPaymentMethodDetailsRevolutPay;
  sepa_debit?: SetupAttemptPaymentMethodDetailsSepaDebit;
  sofort?: SetupAttemptPaymentMethodDetailsSofort;
  /**
   * The type of the payment method used in the SetupIntent (e.g., `card`). An additional hash is included on `payment_method_details` with a name matching this value. It contains confirmation-specific information for the payment method.
   */
  type: string;
  us_bank_account?: SetupAttemptPaymentMethodDetailsUsBankAccount;
};
/**
 * setup_attempt_payment_method_details_acss_debit
 */
export type SetupAttemptPaymentMethodDetailsAcssDebit = unknown;
/**
 * setup_attempt_payment_method_details_amazon_pay
 */
export type SetupAttemptPaymentMethodDetailsAmazonPay = unknown;
/**
 * setup_attempt_payment_method_details_au_becs_debit
 */
export type SetupAttemptPaymentMethodDetailsAuBecsDebit = unknown;
/**
 * setup_attempt_payment_method_details_bacs_debit
 */
export type SetupAttemptPaymentMethodDetailsBacsDebit = unknown;
/**
 * setup_attempt_payment_method_details_bancontact
 */
export type SetupAttemptPaymentMethodDetailsBancontact = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bank_code?: string | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Bank Identifier Code of the bank associated with the bank account.
   */
  bic?: string | null;
  /**
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit?: (string | PaymentMethod) | null;
  /**
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit_mandate?: (string | Mandate) | null;
  /**
   * Last four characters of the IBAN.
   */
  iban_last4?: string | null;
  /**
   * Preferred language of the Bancontact authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: ('de' | 'en' | 'fr' | 'nl') | null;
  /**
   * Owner's verified full name. Values are verified or provided by Bancontact directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
};
/**
 * setup_attempt_payment_method_details_boleto
 */
export type SetupAttemptPaymentMethodDetailsBoleto = unknown;
/**
 * setup_attempt_payment_method_details_card
 */
export type SetupAttemptPaymentMethodDetailsCard = {
  /**
   * Card brand. Can be `amex`, `diners`, `discover`, `eftpos_au`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  brand?: string | null;
  /**
   * Check results by Card networks on Card address and CVC at the time of authorization
   */
  checks?: SetupAttemptPaymentMethodDetailsCardChecks | null;
  /**
   * Two-letter ISO code representing the country of the card. You could use this attribute to get a sense of the international breakdown of cards you've collected.
   */
  country?: string | null;
  /**
   * Two-digit number representing the card's expiration month.
   */
  exp_month?: number | null;
  /**
   * Four-digit number representing the card's expiration year.
   */
  exp_year?: number | null;
  /**
   * Uniquely identifies this particular card number. You can use this attribute to check whether two customers who’ve signed up with you are using the same card number, for example. For payment methods that tokenize card information (Apple Pay, Google Pay), the tokenized number might be provided instead of the underlying card number.
   *
   * *As of May 1, 2021, card fingerprint in India for Connect changed to allow two fingerprints for the same card---one for India and one for the rest of the world.*
   */
  fingerprint?: string | null;
  /**
   * Card funding type. Can be `credit`, `debit`, `prepaid`, or `unknown`.
   */
  funding?: string | null;
  /**
   * The last four digits of the card.
   */
  last4?: string | null;
  /**
   * Identifies which network this charge was processed on. Can be `amex`, `cartes_bancaires`, `diners`, `discover`, `eftpos_au`, `interac`, `jcb`, `link`, `mastercard`, `unionpay`, `visa`, or `unknown`.
   */
  network?: string | null;
  /**
   * Populated if this authorization used 3D Secure authentication.
   */
  three_d_secure?: ThreeDSecureDetails | null;
  /**
   * If this Card is part of a card wallet, this contains the details of the card wallet.
   */
  wallet?: SetupAttemptPaymentMethodDetailsCardWallet | null;
};
/**
 * setup_attempt_payment_method_details_card_checks
 */
export type SetupAttemptPaymentMethodDetailsCardChecks = {
  /**
   * If a address line1 was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_line1_check?: string | null;
  /**
   * If a address postal code was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  address_postal_code_check?: string | null;
  /**
   * If a CVC was provided, results of the check, one of `pass`, `fail`, `unavailable`, or `unchecked`.
   */
  cvc_check?: string | null;
};
/**
 * setup_attempt_payment_method_details_card_present
 */
export type SetupAttemptPaymentMethodDetailsCardPresent = {
  /**
   * The ID of the Card PaymentMethod which was generated by this SetupAttempt.
   */
  generated_card?: (string | PaymentMethod) | null;
  /**
   * Details about payments collected offline.
   */
  offline?: PaymentMethodDetailsCardPresentOffline | null;
};
/**
 * setup_attempt_payment_method_details_card_wallet
 */
export type SetupAttemptPaymentMethodDetailsCardWallet = {
  apple_pay?: PaymentMethodDetailsCardWalletApplePay;
  google_pay?: PaymentMethodDetailsCardWalletGooglePay;
  /**
   * The type of the card wallet, one of `apple_pay`, `google_pay`, or `link`. An additional hash is included on the Wallet subhash with a name matching this value. It contains additional information specific to the card wallet type.
   */
  type: 'apple_pay' | 'google_pay' | 'link';
};
/**
 * setup_attempt_payment_method_details_cashapp
 */
export type SetupAttemptPaymentMethodDetailsCashapp = unknown;
/**
 * setup_attempt_payment_method_details_ideal
 */
export type SetupAttemptPaymentMethodDetailsIdeal = {
  /**
   * The customer's bank. Can be one of `abn_amro`, `asn_bank`, `bunq`, `handelsbanken`, `ing`, `knab`, `moneyou`, `n26`, `nn`, `rabobank`, `regiobank`, `revolut`, `sns_bank`, `triodos_bank`, `van_lanschot`, or `yoursafe`.
   */
  bank?:
    | (
        | 'abn_amro'
        | 'asn_bank'
        | 'bunq'
        | 'handelsbanken'
        | 'ing'
        | 'knab'
        | 'moneyou'
        | 'n26'
        | 'nn'
        | 'rabobank'
        | 'regiobank'
        | 'revolut'
        | 'sns_bank'
        | 'triodos_bank'
        | 'van_lanschot'
        | 'yoursafe'
      )
    | null;
  /**
   * The Bank Identifier Code of the customer's bank.
   */
  bic?:
    | (
        | 'ABNANL2A'
        | 'ASNBNL21'
        | 'BITSNL2A'
        | 'BUNQNL2A'
        | 'FVLBNL22'
        | 'HANDNL2A'
        | 'INGBNL2A'
        | 'KNABNL2H'
        | 'MOYONL21'
        | 'NNBANL2G'
        | 'NTSBDEB1'
        | 'RABONL2U'
        | 'RBRBNL21'
        | 'REVOIE23'
        | 'REVOLT21'
        | 'SNSBNL2A'
        | 'TRIONL2U'
      )
    | null;
  /**
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit?: (string | PaymentMethod) | null;
  /**
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit_mandate?: (string | Mandate) | null;
  /**
   * Last four characters of the IBAN.
   */
  iban_last4?: string | null;
  /**
   * Owner's verified full name. Values are verified or provided by iDEAL directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
};
/**
 * setup_attempt_payment_method_details_kakao_pay
 */
export type SetupAttemptPaymentMethodDetailsKakaoPay = unknown;
/**
 * setup_attempt_payment_method_details_klarna
 */
export type SetupAttemptPaymentMethodDetailsKlarna = unknown;
/**
 * setup_attempt_payment_method_details_kr_card
 */
export type SetupAttemptPaymentMethodDetailsKrCard = unknown;
/**
 * setup_attempt_payment_method_details_link
 */
export type SetupAttemptPaymentMethodDetailsLink = unknown;
/**
 * setup_attempt_payment_method_details_naver_pay
 */
export type SetupAttemptPaymentMethodDetailsNaverPay = {
  /**
   * Uniquely identifies this particular Naver Pay account. You can use this attribute to check whether two Naver Pay accounts are the same.
   */
  buyer_id?: string;
};
/**
 * setup_attempt_payment_method_details_nz_bank_account
 */
export type SetupAttemptPaymentMethodDetailsNzBankAccount = unknown;
/**
 * setup_attempt_payment_method_details_paypal
 */
export type SetupAttemptPaymentMethodDetailsPaypal = unknown;
/**
 * setup_attempt_payment_method_details_revolut_pay
 */
export type SetupAttemptPaymentMethodDetailsRevolutPay = unknown;
/**
 * setup_attempt_payment_method_details_sepa_debit
 */
export type SetupAttemptPaymentMethodDetailsSepaDebit = unknown;
/**
 * setup_attempt_payment_method_details_sofort
 */
export type SetupAttemptPaymentMethodDetailsSofort = {
  /**
   * Bank code of bank associated with the bank account.
   */
  bank_code?: string | null;
  /**
   * Name of the bank associated with the bank account.
   */
  bank_name?: string | null;
  /**
   * Bank Identifier Code of the bank associated with the bank account.
   */
  bic?: string | null;
  /**
   * The ID of the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit?: (string | PaymentMethod) | null;
  /**
   * The mandate for the SEPA Direct Debit PaymentMethod which was generated by this SetupAttempt.
   */
  generated_sepa_debit_mandate?: (string | Mandate) | null;
  /**
   * Last four characters of the IBAN.
   */
  iban_last4?: string | null;
  /**
   * Preferred language of the Sofort authorization page that the customer is redirected to.
   * Can be one of `en`, `de`, `fr`, or `nl`
   */
  preferred_language?: ('de' | 'en' | 'fr' | 'nl') | null;
  /**
   * Owner's verified full name. Values are verified or provided by Sofort directly
   * (if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
};
/**
 * setup_attempt_payment_method_details_us_bank_account
 */
export type SetupAttemptPaymentMethodDetailsUsBankAccount = unknown;
/**
 * SetupIntent
 * A SetupIntent guides you through the process of setting up and saving a customer's payment credentials for future payments.
 * For example, you can use a SetupIntent to set up and save your customer's card without immediately collecting a payment.
 * Later, you can use [PaymentIntents](https://stripe.com/docs/api#payment_intents) to drive the payment flow.
 *
 * Create a SetupIntent when you're ready to collect your customer's payment credentials.
 * Don't maintain long-lived, unconfirmed SetupIntents because they might not be valid.
 * The SetupIntent transitions through multiple [statuses](https://docs.stripe.com/payments/intents#intent-statuses) as it guides
 * you through the setup process.
 *
 * Successful SetupIntents result in payment credentials that are optimized for future payments.
 * For example, cardholders in [certain regions](https://stripe.com/guides/strong-customer-authentication) might need to be run through
 * [Strong Customer Authentication](https://docs.stripe.com/strong-customer-authentication) during payment method collection
 * to streamline later [off-session payments](https://docs.stripe.com/payments/setup-intents).
 * If you use the SetupIntent with a [Customer](https://stripe.com/docs/api#setup_intent_object-customer),
 * it automatically attaches the resulting payment method to that Customer after successful setup.
 * We recommend using SetupIntents or [setup_future_usage](https://stripe.com/docs/api#payment_intent_object-setup_future_usage) on
 * PaymentIntents to save payment methods to prevent saving invalid or unoptimized payment methods.
 *
 * By using SetupIntents, you can reduce friction for your customers, even as regulations change over time.
 *
 * Related guide: [Setup Intents API](https://docs.stripe.com/payments/setup-intents)
 */
export type SetupIntent = {
  /**
   * ID of the Connect application that created the SetupIntent.
   */
  application?: (string | Application) | null;
  /**
   * If present, the SetupIntent's payment method will be attached to the in-context Stripe Account.
   *
   * It can only be used for this Stripe Account’s own money movement flows like InboundTransfer and OutboundTransfers. It cannot be set to true when setting up a PaymentMethod for a Customer, and defaults to false when attaching a PaymentMethod to a Customer.
   */
  attach_to_self?: boolean;
  /**
   * Settings for dynamic payment methods compatible with this Setup Intent
   */
  automatic_payment_methods?: PaymentFlowsAutomaticPaymentMethodsSetupIntent | null;
  /**
   * Reason for cancellation of this SetupIntent, one of `abandoned`, `requested_by_customer`, or `duplicate`.
   */
  cancellation_reason?:
    | ('abandoned' | 'duplicate' | 'requested_by_customer')
    | null;
  /**
   * The client secret of this SetupIntent. Used for client-side retrieval using a publishable key.
   *
   * The client secret can be used to complete payment setup from your frontend. It should not be stored, logged, or exposed to anyone other than the customer. Make sure that you have TLS enabled on any page that includes the client secret.
   */
  client_secret?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * ID of the Customer this SetupIntent belongs to, if one exists.
   *
   * If present, the SetupIntent's payment method will be attached to the Customer on successful setup. Payment methods attached to other Customers cannot be used with this SetupIntent.
   */
  customer?: (string | Customer | DeletedCustomer) | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Indicates the directions of money movement for which this payment method is intended to be used.
   *
   * Include `inbound` if you intend to use the payment method as the origin to pull funds from. Include `outbound` if you intend to use the payment method as the destination to send funds to. You can include both if you intend to use the payment method for both purposes.
   */
  flow_directions?: ('inbound' | 'outbound')[] | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The error encountered in the previous SetupIntent confirmation.
   */
  last_setup_error?: ApiErrors | null;
  /**
   * The most recent SetupAttempt for this SetupIntent.
   */
  latest_attempt?: (string | SetupAttempt) | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * ID of the multi use Mandate generated by the SetupIntent.
   */
  mandate?: (string | Mandate) | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * If present, this property tells you what actions you need to take in order for your customer to continue payment setup.
   */
  next_action?: SetupIntentNextAction | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'setup_intent';
  /**
   * The account (if any) for which the setup is intended.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * ID of the payment method used with this SetupIntent. If the payment method is `card_present` and isn't a digital wallet, then the [generated_card](https://docs.stripe.com/api/setup_attempts/object#setup_attempt_object-payment_method_details-card_present-generated_card) associated with the `latest_attempt` is attached to the Customer instead.
   */
  payment_method?: (string | PaymentMethod) | null;
  /**
   * Information about the [payment method configuration](https://stripe.com/docs/api/payment_method_configurations) used for this Setup Intent.
   */
  payment_method_configuration_details?: PaymentMethodConfigBizPaymentMethodConfigurationDetails | null;
  /**
   * Payment method-specific configuration for this SetupIntent.
   */
  payment_method_options?: SetupIntentPaymentMethodOptions | null;
  /**
   * The list of payment method types (e.g. card) that this SetupIntent is allowed to set up.
   */
  payment_method_types: string[];
  /**
   * ID of the single_use Mandate generated by the SetupIntent.
   */
  single_use_mandate?: (string | Mandate) | null;
  /**
   * [Status](https://stripe.com/docs/payments/intents#intent-statuses) of this SetupIntent, one of `requires_payment_method`, `requires_confirmation`, `requires_action`, `processing`, `canceled`, or `succeeded`.
   */
  status:
    | 'canceled'
    | 'processing'
    | 'requires_action'
    | 'requires_confirmation'
    | 'requires_payment_method'
    | 'succeeded';
  /**
   * Indicates how the payment method is intended to be used in the future.
   *
   * Use `on_session` if you intend to only reuse the payment method when the customer is in your checkout flow. Use `off_session` if your customer may or may not be in your checkout flow. If not provided, this value defaults to `off_session`.
   */
  usage: string;
};
/**
 * SetupIntentNextAction
 */
export type SetupIntentNextAction = {
  cashapp_handle_redirect_or_display_qr_code?: PaymentIntentNextActionCashappHandleRedirectOrDisplayQrCode;
  redirect_to_url?: SetupIntentNextActionRedirectToUrl;
  /**
   * Type of the next action to perform. Refer to the other child attributes under `next_action` for available values. Examples include: `redirect_to_url`, `use_stripe_sdk`, `alipay_handle_redirect`, `oxxo_display_details`, or `verify_with_microdeposits`.
   */
  type: string;
  /**
   * When confirming a SetupIntent with Stripe.js, Stripe.js depends on the contents of this dictionary to invoke authentication flows. The shape of the contents is subject to change and is only intended to be used by Stripe.js.
   */
  use_stripe_sdk?: unknown;
  verify_with_microdeposits?: SetupIntentNextActionVerifyWithMicrodeposits;
};
/**
 * SetupIntentNextActionRedirectToUrl
 */
export type SetupIntentNextActionRedirectToUrl = {
  /**
   * If the customer does not exit their browser while authenticating, they will be redirected to this specified URL after completion.
   */
  return_url?: string | null;
  /**
   * The URL you must redirect your customer to in order to authenticate.
   */
  url?: string | null;
};
/**
 * SetupIntentNextActionVerifyWithMicrodeposits
 */
export type SetupIntentNextActionVerifyWithMicrodeposits = {
  /**
   * The timestamp when the microdeposits are expected to land.
   */
  arrival_date: number;
  /**
   * The URL for the hosted verification page, which allows customers to verify their bank account.
   */
  hosted_verification_url: string;
  /**
   * The type of the microdeposit sent to the customer. Used to distinguish between different verification methods.
   */
  microdeposit_type?: ('amounts' | 'descriptor_code') | null;
};
/**
 * SetupIntentPaymentMethodOptions
 */
export type SetupIntentPaymentMethodOptions = {
  acss_debit?:
    | SetupIntentPaymentMethodOptionsAcssDebit
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  amazon_pay?:
    | SetupIntentPaymentMethodOptionsAmazonPay
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  bacs_debit?:
    | SetupIntentPaymentMethodOptionsBacsDebit
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  card?:
    | SetupIntentPaymentMethodOptionsCard
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  card_present?:
    | SetupIntentPaymentMethodOptionsCardPresent
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  link?:
    | SetupIntentPaymentMethodOptionsLink
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  paypal?:
    | SetupIntentPaymentMethodOptionsPaypal
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  sepa_debit?:
    | SetupIntentPaymentMethodOptionsSepaDebit
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
  us_bank_account?:
    | SetupIntentPaymentMethodOptionsUsBankAccount
    | SetupIntentTypeSpecificPaymentMethodOptionsClient;
};
/**
 * setup_intent_payment_method_options_acss_debit
 */
export type SetupIntentPaymentMethodOptionsAcssDebit = {
  /**
   * Currency supported by the bank account
   */
  currency?: ('cad' | 'usd') | null;
  mandate_options?: SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * setup_intent_payment_method_options_amazon_pay
 */
export type SetupIntentPaymentMethodOptionsAmazonPay = unknown;
/**
 * setup_intent_payment_method_options_bacs_debit
 */
export type SetupIntentPaymentMethodOptionsBacsDebit = {
  mandate_options?: SetupIntentPaymentMethodOptionsMandateOptionsBacsDebit;
};
/**
 * setup_intent_payment_method_options_card
 */
export type SetupIntentPaymentMethodOptionsCard = {
  /**
   * Configuration options for setting up an eMandate for cards issued in India.
   */
  mandate_options?: SetupIntentPaymentMethodOptionsCardMandateOptions | null;
  /**
   * Selected network to process this SetupIntent on. Depends on the available networks of the card attached to the setup intent. Can be only set confirm-time.
   */
  network?:
    | (
        | 'amex'
        | 'cartes_bancaires'
        | 'diners'
        | 'discover'
        | 'eftpos_au'
        | 'girocard'
        | 'interac'
        | 'jcb'
        | 'link'
        | 'mastercard'
        | 'unionpay'
        | 'unknown'
        | 'visa'
      )
    | null;
  /**
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. If not provided, this value defaults to `automatic`. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null;
};
/**
 * setup_intent_payment_method_options_card_mandate_options
 */
export type SetupIntentPaymentMethodOptionsCardMandateOptions = {
  /**
   * Amount to be charged for future payments.
   */
  amount: number;
  /**
   * One of `fixed` or `maximum`. If `fixed`, the `amount` param refers to the exact amount to be charged in future payments. If `maximum`, the amount charged can be up to the value passed for the `amount` param.
   */
  amount_type: 'fixed' | 'maximum';
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * A description of the mandate or subscription that is meant to be displayed to the customer.
   */
  description?: string | null;
  /**
   * End date of the mandate or subscription. If not provided, the mandate will be active until canceled. If provided, end date should be after start date.
   */
  end_date?: number | null;
  /**
   * Specifies payment frequency. One of `day`, `week`, `month`, `year`, or `sporadic`.
   */
  interval: 'day' | 'month' | 'sporadic' | 'week' | 'year';
  /**
   * The number of intervals between payments. For example, `interval=month` and `interval_count=3` indicates one payment every three months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks). This parameter is optional when `interval=sporadic`.
   */
  interval_count?: number | null;
  /**
   * Unique identifier for the mandate or subscription.
   */
  reference: string;
  /**
   * Start date of the mandate or subscription. Start date should not be lesser than yesterday.
   */
  start_date: number;
  /**
   * Specifies the type of mandates supported. Possible values are `india`.
   */
  supported_types?: 'india'[] | null;
};
/**
 * setup_intent_payment_method_options_card_present
 */
export type SetupIntentPaymentMethodOptionsCardPresent = unknown;
/**
 * setup_intent_payment_method_options_link
 */
export type SetupIntentPaymentMethodOptionsLink = unknown;
/**
 * setup_intent_payment_method_options_mandate_options_acss_debit
 */
export type SetupIntentPaymentMethodOptionsMandateOptionsAcssDebit = {
  /**
   * A URL for custom mandate text
   */
  custom_mandate_url?: string;
  /**
   * List of Stripe products where this mandate can be selected automatically.
   */
  default_for?: ('invoice' | 'subscription')[];
  /**
   * Description of the interval. Only required if the 'payment_schedule' parameter is 'interval' or 'combined'.
   */
  interval_description?: string | null;
  /**
   * Payment schedule for the mandate.
   */
  payment_schedule?: ('combined' | 'interval' | 'sporadic') | null;
  /**
   * Transaction type of the mandate.
   */
  transaction_type?: ('business' | 'personal') | null;
};
/**
 * setup_intent_payment_method_options_mandate_options_bacs_debit
 */
export type SetupIntentPaymentMethodOptionsMandateOptionsBacsDebit = {
  /**
   * Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'DDIC' or 'STRIPE'.
   */
  reference_prefix?: string;
};
/**
 * setup_intent_payment_method_options_mandate_options_sepa_debit
 */
export type SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit = {
  /**
   * Prefix used to generate the Mandate reference. Must be at most 12 characters long. Must consist of only uppercase letters, numbers, spaces, or the following special characters: '/', '_', '-', '&', '.'. Cannot begin with 'STRIPE'.
   */
  reference_prefix?: string;
};
/**
 * setup_intent_payment_method_options_paypal
 */
export type SetupIntentPaymentMethodOptionsPaypal = {
  /**
   * The PayPal Billing Agreement ID (BAID). This is an ID generated by PayPal which represents the mandate between the merchant and the customer.
   */
  billing_agreement_id?: string | null;
};
/**
 * setup_intent_payment_method_options_sepa_debit
 */
export type SetupIntentPaymentMethodOptionsSepaDebit = {
  mandate_options?: SetupIntentPaymentMethodOptionsMandateOptionsSepaDebit;
};
/**
 * setup_intent_payment_method_options_us_bank_account
 */
export type SetupIntentPaymentMethodOptionsUsBankAccount = {
  financial_connections?: LinkedAccountOptionsCommon;
  mandate_options?: PaymentMethodOptionsUsBankAccountMandateOptions;
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * SetupIntentTypeSpecificPaymentMethodOptionsClient
 */
export type SetupIntentTypeSpecificPaymentMethodOptionsClient = {
  /**
   * Bank account verification method.
   */
  verification_method?: 'automatic' | 'instant' | 'microdeposits';
};
/**
 * Shipping
 */
export type Shipping = {
  address?: Address;
  /**
   * The delivery service that shipped a physical product, such as Fedex, UPS, USPS, etc.
   */
  carrier?: string | null;
  /**
   * Recipient name.
   */
  name?: string;
  /**
   * Recipient phone (including extension).
   */
  phone?: string | null;
  /**
   * The tracking number for a physical product, obtained from the delivery service. If multiple tracking numbers were generated for this purchase, please separate them with commas.
   */
  tracking_number?: string | null;
};
/**
 * ShippingRate
 * Shipping rates describe the price of shipping presented to your customers and
 * applied to a purchase. For more information, see [Charge for shipping](https://stripe.com/docs/payments/during-payment/charge-shipping).
 */
export type ShippingRate = {
  /**
   * Whether the shipping rate can be used for new purchases. Defaults to `true`.
   */
  active: boolean;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The estimated range for how long shipping will take, meant to be displayable to the customer. This will appear on CheckoutSessions.
   */
  delivery_estimate?: ShippingRateDeliveryEstimate | null;
  /**
   * The name of the shipping rate, meant to be displayable to the customer. This will appear on CheckoutSessions.
   */
  display_name?: string | null;
  fixed_amount?: ShippingRateFixedAmount;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'shipping_rate';
  /**
   * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
   */
  tax_behavior?: ('exclusive' | 'inclusive' | 'unspecified') | null;
  /**
   * A [tax code](https://stripe.com/docs/tax/tax-categories) ID. The Shipping tax code is `txcd_92010001`.
   */
  tax_code?: (string | TaxCode) | null;
  /**
   * The type of calculation to use on the shipping rate.
   */
  type: 'fixed_amount';
};
/**
 * ShippingRateCurrencyOption
 */
export type ShippingRateCurrencyOption = {
  /**
   * A non-negative integer in cents representing how much to charge.
   */
  amount: number;
  /**
   * Specifies whether the rate is considered inclusive of taxes or exclusive of taxes. One of `inclusive`, `exclusive`, or `unspecified`.
   */
  tax_behavior: 'exclusive' | 'inclusive' | 'unspecified';
};
/**
 * ShippingRateDeliveryEstimate
 */
export type ShippingRateDeliveryEstimate = {
  /**
   * The upper bound of the estimated range. If empty, represents no upper bound i.e., infinite.
   */
  maximum?: ShippingRateDeliveryEstimateBound | null;
  /**
   * The lower bound of the estimated range. If empty, represents no lower bound.
   */
  minimum?: ShippingRateDeliveryEstimateBound | null;
};
/**
 * ShippingRateDeliveryEstimateBound
 */
export type ShippingRateDeliveryEstimateBound = {
  /**
   * A unit of time.
   */
  unit: 'business_day' | 'day' | 'hour' | 'month' | 'week';
  /**
   * Must be greater than 0.
   */
  value: number;
};
/**
 * ShippingRateFixedAmount
 */
export type ShippingRateFixedAmount = {
  /**
   * A non-negative integer in cents representing how much to charge.
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Shipping rates defined in each available currency option. Each key must be a three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html) and a [supported currency](https://stripe.com/docs/currencies).
   */
  currency_options?: {
    [key: string]: ShippingRateCurrencyOption;
  };
};
/**
 * SigmaSigmaResourcesSigmaAPIQuery
 * A saved query object represents a query that can be executed for a run.
 */
export type SigmaSigmaApiQuery = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The name of the query.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'sigma.sigma_api_query';
  /**
   * The sql statement for the query.
   */
  sql: string;
};
/**
 * SigmaScheduledQueryRunError
 */
export type SigmaScheduledQueryRunError = {
  /**
   * Information about the run failure.
   */
  message: string;
};
/**
 * Source
 * `Source` objects allow you to accept a variety of payment methods. They
 * represent a customer's payment instrument, and can be used with the Stripe API
 * just like a `Card` object: once chargeable, they can be charged, or can be
 * attached to customers.
 *
 * Stripe doesn't recommend using the deprecated [Sources API](https://stripe.com/docs/api/sources).
 * We recommend that you adopt the [PaymentMethods API](https://stripe.com/docs/api/payment_methods).
 * This newer API provides access to our latest features and payment method types.
 *
 * Related guides: [Sources API](https://stripe.com/docs/sources) and [Sources & Customers](https://stripe.com/docs/sources/customers).
 */
export type Source = {
  ach_credit_transfer?: SourceTypeAchCreditTransfer;
  ach_debit?: SourceTypeAchDebit;
  acss_debit?: SourceTypeAcssDebit;
  alipay?: SourceTypeAlipay;
  /**
   * This field indicates whether this payment method can be shown again to its customer in a checkout flow. Stripe products such as Checkout and Elements use this field to determine whether a payment method can be shown as a saved payment method in a checkout flow. The field defaults to “unspecified”.
   */
  allow_redisplay?: ('always' | 'limited' | 'unspecified') | null;
  /**
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount associated with the source. This is the amount for which the source will be chargeable once ready. Required for `single_use` sources.
   */
  amount?: number | null;
  au_becs_debit?: SourceTypeAuBecsDebit;
  bancontact?: SourceTypeBancontact;
  card?: SourceTypeCard;
  card_present?: SourceTypeCardPresent;
  /**
   * The client secret of the source. Used for client-side retrieval using a publishable key.
   */
  client_secret: string;
  code_verification?: SourceCodeVerificationFlow;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO code for the currency](https://stripe.com/docs/currencies) associated with the source. This is the currency for which the source will be chargeable once ready. Required for `single_use` sources.
   */
  currency?: string | null;
  /**
   * The ID of the customer to which this source is attached. This will not be present when the source has not been attached to a customer.
   */
  customer?: string;
  eps?: SourceTypeEps;
  /**
   * The authentication `flow` of the source. `flow` is one of `redirect`, `receiver`, `code_verification`, `none`.
   */
  flow: string;
  giropay?: SourceTypeGiropay;
  /**
   * Unique identifier for the object.
   */
  id: string;
  ideal?: SourceTypeIdeal;
  klarna?: SourceTypeKlarna;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  multibanco?: SourceTypeMultibanco;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'source';
  /**
   * Information about the owner of the payment instrument that may be used or required by particular source types.
   */
  owner?: SourceOwner | null;
  p24?: SourceTypeP24;
  receiver?: SourceReceiverFlow;
  redirect?: SourceRedirectFlow;
  sepa_debit?: SourceTypeSepaDebit;
  sofort?: SourceTypeSofort;
  source_order?: SourceOrder;
  /**
   * Extra information about a source. This will appear on your customer's statement every time you charge the source.
   */
  statement_descriptor?: string | null;
  /**
   * The status of the source, one of `canceled`, `chargeable`, `consumed`, `failed`, or `pending`. Only `chargeable` sources can be used to create a charge.
   */
  status: string;
  three_d_secure?: SourceTypeThreeDSecure;
  /**
   * The `type` of the source. The `type` is a payment method, one of `ach_credit_transfer`, `ach_debit`, `alipay`, `bancontact`, `card`, `card_present`, `eps`, `giropay`, `ideal`, `multibanco`, `klarna`, `p24`, `sepa_debit`, `sofort`, `three_d_secure`, or `wechat`. An additional hash is included on the source with a name matching this value. It contains additional information specific to the [payment method](https://stripe.com/docs/sources) used.
   */
  type:
    | 'ach_credit_transfer'
    | 'ach_debit'
    | 'acss_debit'
    | 'alipay'
    | 'au_becs_debit'
    | 'bancontact'
    | 'card'
    | 'card_present'
    | 'eps'
    | 'giropay'
    | 'ideal'
    | 'klarna'
    | 'multibanco'
    | 'p24'
    | 'sepa_debit'
    | 'sofort'
    | 'three_d_secure'
    | 'wechat';
  /**
   * Either `reusable` or `single_use`. Whether this source should be reusable or not. Some source types may or may not be reusable by construction, while others may leave the option at creation. If an incompatible value is passed, an error will be returned.
   */
  usage?: string | null;
  wechat?: SourceTypeWechat;
};
/**
 * SourceCodeVerificationFlow
 */
export type SourceCodeVerificationFlow = {
  /**
   * The number of attempts remaining to authenticate the source object with a verification code.
   */
  attempts_remaining: number;
  /**
   * The status of the code verification, either `pending` (awaiting verification, `attempts_remaining` should be greater than 0), `succeeded` (successful verification) or `failed` (failed verification, cannot be verified anymore as `attempts_remaining` should be 0).
   */
  status: string;
};
/**
 * SourceMandateNotification
 * Source mandate notifications should be created when a notification related to
 * a source mandate must be sent to the payer. They will trigger a webhook or
 * deliver an email to the customer.
 */
export type SourceMandateNotification = {
  acss_debit?: SourceMandateNotificationAcssDebitData;
  /**
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount associated with the mandate notification. The amount is expressed in the currency of the underlying source. Required if the notification type is `debit_initiated`.
   */
  amount?: number | null;
  bacs_debit?: SourceMandateNotificationBacsDebitData;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'source_mandate_notification';
  /**
   * The reason of the mandate notification. Valid reasons are `mandate_confirmed` or `debit_initiated`.
   */
  reason: string;
  sepa_debit?: SourceMandateNotificationSepaDebitData;
  source: Source;
  /**
   * The status of the mandate notification. Valid statuses are `pending` or `submitted`.
   */
  status: string;
  /**
   * The type of source this mandate notification is attached to. Should be the source type identifier code for the payment method, such as `three_d_secure`.
   */
  type: string;
};
/**
 * SourceMandateNotificationAcssDebitData
 */
export type SourceMandateNotificationAcssDebitData = {
  /**
   * The statement descriptor associate with the debit.
   */
  statement_descriptor?: string;
};
/**
 * SourceMandateNotificationBacsDebitData
 */
export type SourceMandateNotificationBacsDebitData = {
  /**
   * Last 4 digits of the account number associated with the debit.
   */
  last4?: string;
};
/**
 * SourceMandateNotificationSepaDebitData
 */
export type SourceMandateNotificationSepaDebitData = {
  /**
   * SEPA creditor ID.
   */
  creditor_identifier?: string;
  /**
   * Last 4 digits of the account number associated with the debit.
   */
  last4?: string;
  /**
   * Mandate reference associated with the debit.
   */
  mandate_reference?: string;
};
/**
 * SourceOrder
 */
export type SourceOrder = {
  /**
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the total amount for the order.
   */
  amount: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The email address of the customer placing the order.
   */
  email?: string;
  /**
   * List of items constituting the order.
   */
  items?: SourceOrderItem[] | null;
  shipping?: Shipping;
};
/**
 * SourceOrderItem
 */
export type SourceOrderItem = {
  /**
   * The amount (price) for this order item.
   */
  amount?: number | null;
  /**
   * This currency of this order item. Required when `amount` is present.
   */
  currency?: string | null;
  /**
   * Human-readable description for this order item.
   */
  description?: string | null;
  /**
   * The ID of the associated object for this line item. Expandable if not null (e.g., expandable to a SKU).
   */
  parent?: string | null;
  /**
   * The quantity of this order item. When type is `sku`, this is the number of instances of the SKU to be ordered.
   */
  quantity?: number;
  /**
   * The type of this order item. Must be `sku`, `tax`, or `shipping`.
   */
  type?: string | null;
};
/**
 * SourceOwner
 */
export type SourceOwner = {
  /**
   * Owner's address.
   */
  address?: Address | null;
  /**
   * Owner's email address.
   */
  email?: string | null;
  /**
   * Owner's full name.
   */
  name?: string | null;
  /**
   * Owner's phone number (including extension).
   */
  phone?: string | null;
  /**
   * Verified owner's address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_address?: Address | null;
  /**
   * Verified owner's email address. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_email?: string | null;
  /**
   * Verified owner's full name. Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_name?: string | null;
  /**
   * Verified owner's phone number (including extension). Verified values are verified or provided by the payment method directly (and if supported) at the time of authorization or settlement. They cannot be set or mutated.
   */
  verified_phone?: string | null;
};
/**
 * SourceReceiverFlow
 */
export type SourceReceiverFlow = {
  /**
   * The address of the receiver source. This is the value that should be communicated to the customer to send their funds to.
   */
  address?: string | null;
  /**
   * The total amount that was moved to your balance. This is almost always equal to the amount charged. In rare cases when customers deposit excess funds and we are unable to refund those, those funds get moved to your balance and show up in amount_charged as well. The amount charged is expressed in the source's currency.
   */
  amount_charged: number;
  /**
   * The total amount received by the receiver source. `amount_received = amount_returned + amount_charged` should be true for consumed sources unless customers deposit excess funds. The amount received is expressed in the source's currency.
   */
  amount_received: number;
  /**
   * The total amount that was returned to the customer. The amount returned is expressed in the source's currency.
   */
  amount_returned: number;
  /**
   * Type of refund attribute method, one of `email`, `manual`, or `none`.
   */
  refund_attributes_method: string;
  /**
   * Type of refund attribute status, one of `missing`, `requested`, or `available`.
   */
  refund_attributes_status: string;
};
/**
 * SourceRedirectFlow
 */
export type SourceRedirectFlow = {
  /**
   * The failure reason for the redirect, either `user_abort` (the customer aborted or dropped out of the redirect flow), `declined` (the authentication failed or the transaction was declined), or `processing_error` (the redirect failed due to a technical error). Present only if the redirect status is `failed`.
   */
  failure_reason?: string | null;
  /**
   * The URL you provide to redirect the customer to after they authenticated their payment.
   */
  return_url: string;
  /**
   * The status of the redirect, either `pending` (ready to be used by your customer to authenticate the transaction), `succeeded` (succesful authentication, cannot be reused) or `not_required` (redirect should not be used) or `failed` (failed authentication, cannot be reused).
   */
  status: string;
  /**
   * The URL provided to you to redirect a customer to as part of a `redirect` authentication flow.
   */
  url: string;
};
/**
 * SourceTransaction
 * Some payment methods have no required amount that a customer must send.
 * Customers can be instructed to send any amount, and it can be made up of
 * multiple transactions. As such, sources can have multiple associated
 * transactions.
 */
export type SourceTransaction = {
  ach_credit_transfer?: SourceTransactionAchCreditTransferData;
  /**
   * A positive integer in the smallest currency unit (that is, 100 cents for $1.00, or 1 for ¥1, Japanese Yen being a zero-decimal currency) representing the amount your customer has pushed to the receiver.
   */
  amount: number;
  chf_credit_transfer?: SourceTransactionChfCreditTransferData;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  gbp_credit_transfer?: SourceTransactionGbpCreditTransferData;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'source_transaction';
  paper_check?: SourceTransactionPaperCheckData;
  sepa_credit_transfer?: SourceTransactionSepaCreditTransferData;
  /**
   * The ID of the source this transaction is attached to.
   */
  source: string;
  /**
   * The status of the transaction, one of `succeeded`, `pending`, or `failed`.
   */
  status: string;
  /**
   * The type of source this transaction is attached to.
   */
  type:
    | 'ach_credit_transfer'
    | 'ach_debit'
    | 'alipay'
    | 'bancontact'
    | 'card'
    | 'card_present'
    | 'eps'
    | 'giropay'
    | 'ideal'
    | 'klarna'
    | 'multibanco'
    | 'p24'
    | 'sepa_debit'
    | 'sofort'
    | 'three_d_secure'
    | 'wechat';
};
/**
 * SourceTransactionAchCreditTransferData
 */
export type SourceTransactionAchCreditTransferData = {
  /**
   * Customer data associated with the transfer.
   */
  customer_data?: string;
  /**
   * Bank account fingerprint associated with the transfer.
   */
  fingerprint?: string;
  /**
   * Last 4 digits of the account number associated with the transfer.
   */
  last4?: string;
  /**
   * Routing number associated with the transfer.
   */
  routing_number?: string;
};
/**
 * SourceTransactionChfCreditTransferData
 */
export type SourceTransactionChfCreditTransferData = {
  /**
   * Reference associated with the transfer.
   */
  reference?: string;
  /**
   * Sender's country address.
   */
  sender_address_country?: string;
  /**
   * Sender's line 1 address.
   */
  sender_address_line1?: string;
  /**
   * Sender's bank account IBAN.
   */
  sender_iban?: string;
  /**
   * Sender's name.
   */
  sender_name?: string;
};
/**
 * SourceTransactionGbpCreditTransferData
 */
export type SourceTransactionGbpCreditTransferData = {
  /**
   * Bank account fingerprint associated with the Stripe owned bank account receiving the transfer.
   */
  fingerprint?: string;
  /**
   * The credit transfer rails the sender used to push this transfer. The possible rails are: Faster Payments, BACS, CHAPS, and wire transfers. Currently only Faster Payments is supported.
   */
  funding_method?: string;
  /**
   * Last 4 digits of sender account number associated with the transfer.
   */
  last4?: string;
  /**
   * Sender entered arbitrary information about the transfer.
   */
  reference?: string;
  /**
   * Sender account number associated with the transfer.
   */
  sender_account_number?: string;
  /**
   * Sender name associated with the transfer.
   */
  sender_name?: string;
  /**
   * Sender sort code associated with the transfer.
   */
  sender_sort_code?: string;
};
/**
 * SourceTransactionPaperCheckData
 */
export type SourceTransactionPaperCheckData = {
  /**
   * Time at which the deposited funds will be available for use. Measured in seconds since the Unix epoch.
   */
  available_at?: string;
  /**
   * Comma-separated list of invoice IDs associated with the paper check.
   */
  invoices?: string;
};
/**
 * SourceTransactionSepaCreditTransferData
 */
export type SourceTransactionSepaCreditTransferData = {
  /**
   * Reference associated with the transfer.
   */
  reference?: string;
  /**
   * Sender's bank account IBAN.
   */
  sender_iban?: string;
  /**
   * Sender's name.
   */
  sender_name?: string;
};
export type SourceTypeAchCreditTransfer = {
  account_number?: string | null;
  bank_name?: string | null;
  fingerprint?: string | null;
  refund_account_holder_name?: string | null;
  refund_account_holder_type?: string | null;
  refund_routing_number?: string | null;
  routing_number?: string | null;
  swift_code?: string | null;
};
export type SourceTypeAchDebit = {
  bank_name?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  routing_number?: string | null;
  type?: string | null;
};
export type SourceTypeAcssDebit = {
  bank_address_city?: string | null;
  bank_address_line_1?: string | null;
  bank_address_line_2?: string | null;
  bank_address_postal_code?: string | null;
  bank_name?: string | null;
  category?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  routing_number?: string | null;
};
export type SourceTypeAlipay = {
  data_string?: string | null;
  native_url?: string | null;
  statement_descriptor?: string | null;
};
export type SourceTypeAuBecsDebit = {
  bsb_number?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
};
export type SourceTypeBancontact = {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  iban_last4?: string | null;
  preferred_language?: string | null;
  statement_descriptor?: string | null;
};
export type SourceTypeCard = {
  address_line1_check?: string | null;
  address_zip_check?: string | null;
  brand?: string | null;
  country?: string | null;
  cvc_check?: string | null;
  dynamic_last4?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  name?: string | null;
  three_d_secure?: string;
  tokenization_method?: string | null;
};
export type SourceTypeCardPresent = {
  application_cryptogram?: string;
  application_preferred_name?: string;
  authorization_code?: string | null;
  authorization_response_code?: string;
  brand?: string | null;
  country?: string | null;
  cvm_type?: string;
  data_type?: string | null;
  dedicated_file_name?: string;
  emv_auth_data?: string;
  evidence_customer_signature?: string | null;
  evidence_transaction_certificate?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  pos_device_id?: string | null;
  pos_entry_mode?: string;
  read_method?: string | null;
  reader?: string | null;
  terminal_verification_results?: string;
  transaction_status_information?: string;
};
export type SourceTypeEps = {
  reference?: string | null;
  statement_descriptor?: string | null;
};
export type SourceTypeGiropay = {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  statement_descriptor?: string | null;
};
export type SourceTypeIdeal = {
  bank?: string | null;
  bic?: string | null;
  iban_last4?: string | null;
  statement_descriptor?: string | null;
};
export type SourceTypeKlarna = {
  background_image_url?: string;
  client_token?: string | null;
  first_name?: string;
  last_name?: string;
  locale?: string;
  logo_url?: string;
  page_title?: string;
  pay_later_asset_urls_descriptive?: string;
  pay_later_asset_urls_standard?: string;
  pay_later_name?: string;
  pay_later_redirect_url?: string;
  pay_now_asset_urls_descriptive?: string;
  pay_now_asset_urls_standard?: string;
  pay_now_name?: string;
  pay_now_redirect_url?: string;
  pay_over_time_asset_urls_descriptive?: string;
  pay_over_time_asset_urls_standard?: string;
  pay_over_time_name?: string;
  pay_over_time_redirect_url?: string;
  payment_method_categories?: string;
  purchase_country?: string;
  purchase_type?: string;
  redirect_url?: string;
  shipping_delay?: number;
  shipping_first_name?: string;
  shipping_last_name?: string;
};
export type SourceTypeMultibanco = {
  entity?: string | null;
  reference?: string | null;
  refund_account_holder_address_city?: string | null;
  refund_account_holder_address_country?: string | null;
  refund_account_holder_address_line1?: string | null;
  refund_account_holder_address_line2?: string | null;
  refund_account_holder_address_postal_code?: string | null;
  refund_account_holder_address_state?: string | null;
  refund_account_holder_name?: string | null;
  refund_iban?: string | null;
};
export type SourceTypeP24 = {
  reference?: string | null;
};
export type SourceTypeSepaDebit = {
  bank_code?: string | null;
  branch_code?: string | null;
  country?: string | null;
  fingerprint?: string | null;
  last4?: string | null;
  mandate_reference?: string | null;
  mandate_url?: string | null;
};
export type SourceTypeSofort = {
  bank_code?: string | null;
  bank_name?: string | null;
  bic?: string | null;
  country?: string | null;
  iban_last4?: string | null;
  preferred_language?: string | null;
  statement_descriptor?: string | null;
};
export type SourceTypeThreeDSecure = {
  address_line1_check?: string | null;
  address_zip_check?: string | null;
  authenticated?: boolean | null;
  brand?: string | null;
  card?: string | null;
  country?: string | null;
  customer?: string | null;
  cvc_check?: string | null;
  dynamic_last4?: string | null;
  exp_month?: number | null;
  exp_year?: number | null;
  fingerprint?: string;
  funding?: string | null;
  last4?: string | null;
  name?: string | null;
  three_d_secure?: string;
  tokenization_method?: string | null;
};
export type SourceTypeWechat = {
  prepay_id?: string;
  qr_code_url?: string | null;
  statement_descriptor?: string;
};
/**
 * Subscription
 * Subscriptions allow you to charge a customer on a recurring basis.
 *
 * Related guide: [Creating subscriptions](https://stripe.com/docs/billing/subscriptions/creating)
 */
export type Subscription = {
  /**
   * ID of the Connect Application that created the subscription.
   */
  application?: (string | Application | DeletedApplication) | null;
  /**
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account.
   */
  application_fee_percent?: number | null;
  automatic_tax: SubscriptionAutomaticTax;
  /**
   * The reference point that aligns future [billing cycle](https://stripe.com/docs/subscriptions/billing-cycle) dates. It sets the day of week for `week` intervals, the day of month for `month` and `year` intervals, and the month of year for `year` intervals. The timestamp is in UTC format.
   */
  billing_cycle_anchor: number;
  /**
   * The fixed values used to calculate the `billing_cycle_anchor`.
   */
  billing_cycle_anchor_config?: SubscriptionsResourceBillingCycleAnchorConfig | null;
  /**
   * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionBillingThresholds | null;
  /**
   * A date in the future at which the subscription will automatically get canceled
   */
  cancel_at?: number | null;
  /**
   * Whether this subscription will (if `status=active`) or did (if `status=canceled`) cancel at the end of the current billing period. This field will be removed in a future API version. Please use `cancel_at` instead.
   */
  cancel_at_period_end: boolean;
  /**
   * If the subscription has been canceled, the date of that cancellation. If the subscription was canceled with `cancel_at_period_end`, `canceled_at` will reflect the time of the most recent update request, not the end of the subscription period when the subscription is automatically moved to a canceled state.
   */
  canceled_at?: number | null;
  /**
   * Details about why this subscription was cancelled
   */
  cancellation_details?: CancellationDetails | null;
  /**
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay this subscription at the end of the cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
   */
  collection_method: 'charge_automatically' | 'send_invoice';
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the customer who owns the subscription.
   */
  customer: string | Customer | DeletedCustomer;
  /**
   * Number of days a customer has to pay invoices generated by this subscription. This value will be `null` for subscriptions where `collection_method=charge_automatically`.
   */
  days_until_due?: number | null;
  /**
   * ID of the default payment method for the subscription. It must belong to the customer associated with the subscription. This takes precedence over `default_source`. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
   */
  default_payment_method?: (string | PaymentMethod) | null;
  /**
   * ID of the default payment source for the subscription. It must belong to the customer associated with the subscription and be in a chargeable state. If `default_payment_method` is also set, `default_payment_method` will take precedence. If neither are set, invoices will use the customer's [invoice_settings.default_payment_method](https://stripe.com/docs/api/customers/object#customer_object-invoice_settings-default_payment_method) or [default_source](https://stripe.com/docs/api/customers/object#customer_object-default_source).
   */
  default_source?: (string | BankAccount | Card | Source) | null;
  /**
   * The tax rates that will apply to any subscription item that does not have `tax_rates` set. Invoices created will have their `default_tax_rates` populated from the subscription.
   */
  default_tax_rates?: TaxRate[] | null;
  /**
   * The subscription's description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
   */
  description?: string | null;
  /**
   * The discounts applied to the subscription. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts: (string | Discount)[];
  /**
   * If the subscription has ended, the date the subscription ended.
   */
  ended_at?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  invoice_settings: SubscriptionsResourceSubscriptionInvoiceSettings;
  /**
   * SubscriptionItemList
   * List of subscription items, each with an attached price.
   */
  items: {
    /**
     * Details about each object.
     */
    data: SubscriptionItem[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * The most recent invoice this subscription has generated.
   */
  latest_invoice?: (string | Invoice) | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * Specifies the approximate timestamp on which any pending invoice items will be billed according to the schedule provided at `pending_invoice_item_interval`.
   */
  next_pending_invoice_item_invoice?: number | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'subscription';
  /**
   * The account (if any) the charge was made on behalf of for charges associated with this subscription. See the [Connect documentation](https://stripe.com/docs/connect/subscriptions#on-behalf-of) for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * If specified, payment collection for this subscription will be paused. Note that the subscription status will be unchanged and will not be updated to `paused`. Learn more about [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment).
   */
  pause_collection?: SubscriptionsResourcePauseCollection | null;
  /**
   * Payment settings passed on to invoices created by the subscription.
   */
  payment_settings?: SubscriptionsResourcePaymentSettings | null;
  /**
   * Specifies an interval for how often to bill for any pending invoice items. It is analogous to calling [Create an invoice](https://stripe.com/docs/api#create_invoice) for the given subscription at the specified interval.
   */
  pending_invoice_item_interval?: SubscriptionPendingInvoiceItemInterval | null;
  /**
   * You can use this [SetupIntent](https://stripe.com/docs/api/setup_intents) to collect user authentication when creating a subscription without immediate payment or updating a subscription's payment method, allowing you to optimize for off-session payments. Learn more in the [SCA Migration Guide](https://stripe.com/docs/billing/migration/strong-customer-authentication#scenario-2).
   */
  pending_setup_intent?: (string | SetupIntent) | null;
  /**
   * If specified, [pending updates](https://stripe.com/docs/billing/subscriptions/pending-updates) that will be applied to the subscription once the `latest_invoice` has been paid.
   */
  pending_update?: SubscriptionsResourcePendingUpdate | null;
  /**
   * The schedule attached to the subscription
   */
  schedule?: (string | SubscriptionSchedule) | null;
  /**
   * Date when the subscription was first created. The date might differ from the `created` date due to backdating.
   */
  start_date: number;
  /**
   * Possible values are `incomplete`, `incomplete_expired`, `trialing`, `active`, `past_due`, `canceled`, `unpaid`, or `paused`.
   *
   * For `collection_method=charge_automatically` a subscription moves into `incomplete` if the initial payment attempt fails. A subscription in this status can only have metadata and default_source updated. Once the first invoice is paid, the subscription moves into an `active` status. If the first invoice is not paid within 23 hours, the subscription transitions to `incomplete_expired`. This is a terminal status, the open invoice will be voided and no further invoices will be generated.
   *
   * A subscription that is currently in a trial period is `trialing` and moves to `active` when the trial period is over.
   *
   * A subscription can only enter a `paused` status [when a trial ends without a payment method](https://stripe.com/docs/billing/subscriptions/trials#create-free-trials-without-payment). A `paused` subscription doesn't generate invoices and can be resumed after your customer adds their payment method. The `paused` status is different from [pausing collection](https://stripe.com/docs/billing/subscriptions/pause-payment), which still generates invoices and leaves the subscription's status unchanged.
   *
   * If subscription `collection_method=charge_automatically`, it becomes `past_due` when payment is required but cannot be paid (due to failed payment or awaiting additional user actions). Once Stripe has exhausted all payment retry attempts, the subscription will become `canceled` or `unpaid` (depending on your subscriptions settings).
   *
   * If subscription `collection_method=send_invoice` it becomes `past_due` when its invoice is not paid by the due date, and `canceled` or `unpaid` if it is still not paid by an additional deadline after that. Note that when a subscription has a status of `unpaid`, no subsequent invoices will be attempted (invoices will be created, but then immediately automatically closed). After receiving updated payment information from a customer, you may choose to reopen and pay their closed invoices.
   */
  status:
    | 'active'
    | 'canceled'
    | 'incomplete'
    | 'incomplete_expired'
    | 'past_due'
    | 'paused'
    | 'trialing'
    | 'unpaid';
  /**
   * ID of the test clock this subscription belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
  /**
   * The account (if any) the subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
   */
  transfer_data?: SubscriptionTransferData | null;
  /**
   * If the subscription has a trial, the end of that trial.
   */
  trial_end?: number | null;
  /**
   * Settings related to subscription trials.
   */
  trial_settings?: SubscriptionsTrialsResourceTrialSettings | null;
  /**
   * If the subscription has a trial, the beginning of that trial. For subsequent trials, this date remains as the start of the first ever trial on the subscription.
   */
  trial_start?: number | null;
};
/**
 * SubscriptionAutomaticTax
 */
export type SubscriptionAutomaticTax = {
  /**
   * If Stripe disabled automatic tax, this enum describes why.
   */
  disabled_reason?: 'requires_location_inputs' | null;
  /**
   * Whether Stripe automatically computes tax on this subscription.
   */
  enabled: boolean;
  /**
   * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
   */
  liability?: ConnectAccountReference | null;
};
/**
 * SubscriptionBillingThresholds
 */
export type SubscriptionBillingThresholds = {
  /**
   * Monetary threshold that triggers the subscription to create an invoice
   */
  amount_gte?: number | null;
  /**
   * Indicates if the `billing_cycle_anchor` should be reset when a threshold is reached. If true, `billing_cycle_anchor` will be updated to the date/time the threshold was last reached; otherwise, the value will remain unchanged. This value may not be `true` if the subscription contains items with plans that have `aggregate_usage=last_ever`.
   */
  reset_billing_cycle_anchor?: boolean | null;
};
/**
 * SubscriptionItem
 * Subscription items allow you to create customer subscriptions with more than
 * one plan, making it easy to represent complex billing relationships.
 */
export type SubscriptionItem = {
  /**
   * Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionItemBillingThresholds | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * The end time of this subscription item's current billing period.
   */
  current_period_end: number;
  /**
   * The start time of this subscription item's current billing period.
   */
  current_period_start: number;
  /**
   * The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts: (string | Discount)[];
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'subscription_item';
  price: Price;
  /**
   * The [quantity](https://stripe.com/docs/subscriptions/quantities) of the plan to which the customer should be subscribed.
   */
  quantity?: number;
  /**
   * The `subscription` this `subscription_item` belongs to.
   */
  subscription: string;
  /**
   * The tax rates which apply to this `subscription_item`. When set, the `default_tax_rates` on the subscription do not apply to this `subscription_item`.
   */
  tax_rates?: TaxRate[] | null;
};
/**
 * SubscriptionItemBillingThresholds
 */
export type SubscriptionItemBillingThresholds = {
  /**
   * Usage threshold that triggers the subscription to create an invoice
   */
  usage_gte?: number | null;
};
/**
 * subscription_payment_method_options_card
 */
export type SubscriptionPaymentMethodOptionsCard = {
  mandate_options?: InvoiceMandateOptionsCard;
  /**
   * Selected network to process this Subscription on. Depends on the available networks of the card attached to the Subscription. Can be only set confirm-time.
   */
  network?:
    | (
        | 'amex'
        | 'cartes_bancaires'
        | 'diners'
        | 'discover'
        | 'eftpos_au'
        | 'girocard'
        | 'interac'
        | 'jcb'
        | 'link'
        | 'mastercard'
        | 'unionpay'
        | 'unknown'
        | 'visa'
      )
    | null;
  /**
   * We strongly recommend that you rely on our SCA Engine to automatically prompt your customers for authentication based on risk level and [other requirements](https://stripe.com/docs/strong-customer-authentication). However, if you wish to request 3D Secure based on logic from your own fraud engine, provide this option. Read our guide on [manually requesting 3D Secure](https://stripe.com/docs/payments/3d-secure/authentication-flow#manual-three-ds) for more information on how this configuration interacts with Radar and our SCA Engine.
   */
  request_three_d_secure?: ('any' | 'automatic' | 'challenge') | null;
};
/**
 * SubscriptionPendingInvoiceItemInterval
 */
export type SubscriptionPendingInvoiceItemInterval = {
  /**
   * Specifies invoicing frequency. Either `day`, `week`, `month` or `year`.
   */
  interval: 'day' | 'month' | 'week' | 'year';
  /**
   * The number of intervals between invoices. For example, `interval=month` and `interval_count=3` bills every 3 months. Maximum of one year interval allowed (1 year, 12 months, or 52 weeks).
   */
  interval_count: number;
};
/**
 * SubscriptionSchedule
 * A subscription schedule allows you to create and manage the lifecycle of a subscription by predefining expected changes.
 *
 * Related guide: [Subscription schedules](https://stripe.com/docs/billing/subscriptions/subscription-schedules)
 */
export type SubscriptionSchedule = {
  /**
   * ID of the Connect Application that created the schedule.
   */
  application?: (string | Application | DeletedApplication) | null;
  /**
   * Time at which the subscription schedule was canceled. Measured in seconds since the Unix epoch.
   */
  canceled_at?: number | null;
  /**
   * Time at which the subscription schedule was completed. Measured in seconds since the Unix epoch.
   */
  completed_at?: number | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Object representing the start and end dates for the current phase of the subscription schedule, if it is `active`.
   */
  current_phase?: SubscriptionScheduleCurrentPhase | null;
  /**
   * ID of the customer who owns the subscription schedule.
   */
  customer: string | Customer | DeletedCustomer;
  default_settings: SubscriptionSchedulesResourceDefaultSettings;
  /**
   * Behavior of the subscription schedule and underlying subscription when it ends. Possible values are `release` or `cancel` with the default being `release`. `release` will end the subscription schedule and keep the underlying subscription running. `cancel` will end the subscription schedule and cancel the underlying subscription.
   */
  end_behavior: 'cancel' | 'none' | 'release' | 'renew';
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'subscription_schedule';
  /**
   * Configuration for the subscription schedule's phases.
   */
  phases: SubscriptionSchedulePhaseConfiguration[];
  /**
   * Time at which the subscription schedule was released. Measured in seconds since the Unix epoch.
   */
  released_at?: number | null;
  /**
   * ID of the subscription once managed by the subscription schedule (if it is released).
   */
  released_subscription?: string | null;
  /**
   * The present status of the subscription schedule. Possible values are `not_started`, `active`, `completed`, `released`, and `canceled`. You can read more about the different states in our [behavior guide](https://stripe.com/docs/billing/subscriptions/subscription-schedules).
   */
  status: 'active' | 'canceled' | 'completed' | 'not_started' | 'released';
  /**
   * ID of the subscription managed by the subscription schedule.
   */
  subscription?: (string | Subscription) | null;
  /**
   * ID of the test clock this subscription schedule belongs to.
   */
  test_clock?: (string | TestHelpersTestClock) | null;
};
/**
 * SubscriptionScheduleAddInvoiceItem
 * An Add Invoice Item describes the prices and quantities that will be added as pending invoice items when entering a phase.
 */
export type SubscriptionScheduleAddInvoiceItem = {
  /**
   * The stackable discounts that will be applied to the item.
   */
  discounts: DiscountsResourceStackableDiscount[];
  /**
   * ID of the price used to generate the invoice item.
   */
  price: string | Price | DeletedPrice;
  /**
   * The quantity of the invoice item.
   */
  quantity?: number | null;
  /**
   * The tax rates which apply to the item. When set, the `default_tax_rates` do not apply to this item.
   */
  tax_rates?: TaxRate[] | null;
};
/**
 * SubscriptionScheduleConfigurationItem
 * A phase item describes the price and quantity of a phase.
 */
export type SubscriptionScheduleConfigurationItem = {
  /**
   * Define thresholds at which an invoice will be sent, and the related subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionItemBillingThresholds | null;
  /**
   * The discounts applied to the subscription item. Subscription item discounts are applied before subscription discounts. Use `expand[]=discounts` to expand each discount.
   */
  discounts: DiscountsResourceStackableDiscount[];
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an item. Metadata on this item will update the underlying subscription item's `metadata` when the phase is entered.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * ID of the price to which the customer should be subscribed.
   */
  price: string | Price | DeletedPrice;
  /**
   * Quantity of the plan to which the customer should be subscribed.
   */
  quantity?: number;
  /**
   * The tax rates which apply to this `phase_item`. When set, the `default_tax_rates` on the phase do not apply to this `phase_item`.
   */
  tax_rates?: TaxRate[] | null;
};
/**
 * SubscriptionScheduleCurrentPhase
 */
export type SubscriptionScheduleCurrentPhase = {
  /**
   * The end of this phase of the subscription schedule.
   */
  end_date: number;
  /**
   * The start of this phase of the subscription schedule.
   */
  start_date: number;
};
/**
 * SubscriptionSchedulePhaseConfiguration
 * A phase describes the plans, coupon, and trialing status of a subscription for a predefined time period.
 */
export type SubscriptionSchedulePhaseConfiguration = {
  /**
   * A list of prices and quantities that will generate invoice items appended to the next invoice for this phase.
   */
  add_invoice_items: SubscriptionScheduleAddInvoiceItem[];
  /**
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
   */
  application_fee_percent?: number | null;
  automatic_tax?: SchedulesPhaseAutomaticTax;
  /**
   * Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
   */
  billing_cycle_anchor?: ('automatic' | 'phase_start') | null;
  /**
   * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionBillingThresholds | null;
  /**
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
   */
  collection_method?: ('charge_automatically' | 'send_invoice') | null;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the default payment method for the subscription schedule. It must belong to the customer associated with the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
   */
  default_payment_method?: (string | PaymentMethod) | null;
  /**
   * The default tax rates to apply to the subscription during this phase of the subscription schedule.
   */
  default_tax_rates?: TaxRate[] | null;
  /**
   * Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
   */
  description?: string | null;
  /**
   * The stackable discounts that will be applied to the subscription on this phase. Subscription item discounts are applied before subscription discounts.
   */
  discounts: DiscountsResourceStackableDiscount[];
  /**
   * The end of this phase of the subscription schedule.
   */
  end_date: number;
  /**
   * The invoice settings applicable during this phase.
   */
  invoice_settings?: InvoiceSettingSubscriptionSchedulePhaseSetting | null;
  /**
   * Subscription items to configure the subscription to during this phase of the subscription schedule.
   */
  items: SubscriptionScheduleConfigurationItem[];
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to a phase. Metadata on a schedule's phase will update the underlying subscription's `metadata` when the phase is entered. Updating the underlying subscription's `metadata` directly will not affect the current phase's `metadata`.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * When transitioning phases, controls how prorations are handled (if any). Possible values are `create_prorations`, `none`, and `always_invoice`.
   */
  proration_behavior: 'always_invoice' | 'create_prorations' | 'none';
  /**
   * The start of this phase of the subscription schedule.
   */
  start_date: number;
  /**
   * The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
   */
  transfer_data?: SubscriptionTransferData | null;
  /**
   * When the trial ends within the phase.
   */
  trial_end?: number | null;
};
/**
 * SubscriptionSchedulesResourceDefaultSettings
 */
export type SubscriptionSchedulesResourceDefaultSettings = {
  /**
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the application owner's Stripe account during this phase of the schedule.
   */
  application_fee_percent?: number | null;
  automatic_tax?: SubscriptionSchedulesResourceDefaultSettingsAutomaticTax;
  /**
   * Possible values are `phase_start` or `automatic`. If `phase_start` then billing cycle anchor of the subscription is set to the start of the phase when entering the phase. If `automatic` then the billing cycle anchor is automatically modified as needed when entering the phase. For more information, see the billing cycle [documentation](https://stripe.com/docs/billing/subscriptions/billing-cycle).
   */
  billing_cycle_anchor: 'automatic' | 'phase_start';
  /**
   * Define thresholds at which an invoice will be sent, and the subscription advanced to a new billing period
   */
  billing_thresholds?: SubscriptionBillingThresholds | null;
  /**
   * Either `charge_automatically`, or `send_invoice`. When charging automatically, Stripe will attempt to pay the underlying subscription at the end of each billing cycle using the default source attached to the customer. When sending an invoice, Stripe will email your customer an invoice with payment instructions and mark the subscription as `active`.
   */
  collection_method?: ('charge_automatically' | 'send_invoice') | null;
  /**
   * ID of the default payment method for the subscription schedule. If not set, invoices will use the default payment method in the customer's invoice settings.
   */
  default_payment_method?: (string | PaymentMethod) | null;
  /**
   * Subscription description, meant to be displayable to the customer. Use this field to optionally store an explanation of the subscription for rendering in Stripe surfaces and certain local payment methods UIs.
   */
  description?: string | null;
  invoice_settings: InvoiceSettingSubscriptionScheduleSetting;
  /**
   * The account (if any) the charge was made on behalf of for charges associated with the schedule's subscription. See the Connect documentation for details.
   */
  on_behalf_of?: (string | Account) | null;
  /**
   * The account (if any) the associated subscription's payments will be attributed to for tax reporting, and where funds from each payment will be transferred to for each of the subscription's invoices.
   */
  transfer_data?: SubscriptionTransferData | null;
};
/**
 * SubscriptionSchedulesResourceDefaultSettingsAutomaticTax
 */
export type SubscriptionSchedulesResourceDefaultSettingsAutomaticTax = {
  /**
   * If Stripe disabled automatic tax, this enum describes why.
   */
  disabled_reason?: 'requires_location_inputs' | null;
  /**
   * Whether Stripe automatically computes tax on invoices created during this phase.
   */
  enabled: boolean;
  /**
   * The account that's liable for tax. If set, the business address and tax registrations required to perform the tax calculation are loaded from this account. The tax transaction is returned in the report of the connected account.
   */
  liability?: ConnectAccountReference | null;
};
/**
 * SubscriptionTransferData
 */
export type SubscriptionTransferData = {
  /**
   * A non-negative decimal between 0 and 100, with at most two decimal places. This represents the percentage of the subscription invoice total that will be transferred to the destination account. By default, the entire amount is transferred to the destination.
   */
  amount_percent?: number | null;
  /**
   * The account where funds from the payment will be transferred to upon payment success.
   */
  destination: string | Account;
};
/**
 * SubscriptionsResourceBillingCycleAnchorConfig
 */
export type SubscriptionsResourceBillingCycleAnchorConfig = {
  /**
   * The day of the month of the billing_cycle_anchor.
   */
  day_of_month: number;
  /**
   * The hour of the day of the billing_cycle_anchor.
   */
  hour?: number | null;
  /**
   * The minute of the hour of the billing_cycle_anchor.
   */
  minute?: number | null;
  /**
   * The month to start full cycle billing periods.
   */
  month?: number | null;
  /**
   * The second of the minute of the billing_cycle_anchor.
   */
  second?: number | null;
};
/**
 * SubscriptionsResourcePauseCollection
 * The Pause Collection settings determine how we will pause collection for this subscription and for how long the subscription
 * should be paused.
 */
export type SubscriptionsResourcePauseCollection = {
  /**
   * The payment collection behavior for this subscription while paused. One of `keep_as_draft`, `mark_uncollectible`, or `void`.
   */
  behavior: 'keep_as_draft' | 'mark_uncollectible' | 'void';
  /**
   * The time after which the subscription will resume collecting payments.
   */
  resumes_at?: number | null;
};
/**
 * SubscriptionsResourcePaymentMethodOptions
 */
export type SubscriptionsResourcePaymentMethodOptions = {
  /**
   * This sub-hash contains details about the Canadian pre-authorized debit payment method options to pass to invoices created by the subscription.
   */
  acss_debit?: InvoicePaymentMethodOptionsAcssDebit | null;
  /**
   * This sub-hash contains details about the Bancontact payment method options to pass to invoices created by the subscription.
   */
  bancontact?: InvoicePaymentMethodOptionsBancontact | null;
  /**
   * This sub-hash contains details about the Card payment method options to pass to invoices created by the subscription.
   */
  card?: SubscriptionPaymentMethodOptionsCard | null;
  /**
   * This sub-hash contains details about the Bank transfer payment method options to pass to invoices created by the subscription.
   */
  customer_balance?: InvoicePaymentMethodOptionsCustomerBalance | null;
  /**
   * This sub-hash contains details about the Konbini payment method options to pass to invoices created by the subscription.
   */
  konbini?: InvoicePaymentMethodOptionsKonbini | null;
  /**
   * This sub-hash contains details about the SEPA Direct Debit payment method options to pass to invoices created by the subscription.
   */
  sepa_debit?: InvoicePaymentMethodOptionsSepaDebit | null;
  /**
   * This sub-hash contains details about the ACH direct debit payment method options to pass to invoices created by the subscription.
   */
  us_bank_account?: InvoicePaymentMethodOptionsUsBankAccount | null;
};
/**
 * SubscriptionsResourcePaymentSettings
 */
export type SubscriptionsResourcePaymentSettings = {
  /**
   * Payment-method-specific configuration to provide to invoices created by the subscription.
   */
  payment_method_options?: SubscriptionsResourcePaymentMethodOptions | null;
  /**
   * The list of payment method types to provide to every invoice created by the subscription. If not set, Stripe attempts to automatically determine the types to use by looking at the invoice’s default payment method, the subscription’s default payment method, the customer’s default payment method, and your [invoice template settings](https://dashboard.stripe.com/settings/billing/invoice).
   */
  payment_method_types?:
    | (
        | 'ach_credit_transfer'
        | 'ach_debit'
        | 'acss_debit'
        | 'affirm'
        | 'amazon_pay'
        | 'au_becs_debit'
        | 'bacs_debit'
        | 'bancontact'
        | 'boleto'
        | 'card'
        | 'cashapp'
        | 'customer_balance'
        | 'eps'
        | 'fpx'
        | 'giropay'
        | 'grabpay'
        | 'ideal'
        | 'jp_credit_transfer'
        | 'kakao_pay'
        | 'klarna'
        | 'konbini'
        | 'kr_card'
        | 'link'
        | 'multibanco'
        | 'naver_pay'
        | 'nz_bank_account'
        | 'p24'
        | 'payco'
        | 'paynow'
        | 'paypal'
        | 'promptpay'
        | 'revolut_pay'
        | 'sepa_credit_transfer'
        | 'sepa_debit'
        | 'sofort'
        | 'swish'
        | 'us_bank_account'
        | 'wechat_pay'
      )[]
    | null;
  /**
   * Configure whether Stripe updates `subscription.default_payment_method` when payment succeeds. Defaults to `off`.
   */
  save_default_payment_method?: ('off' | 'on_subscription') | null;
};
/**
 * SubscriptionsResourcePendingUpdate
 * Pending Updates store the changes pending from a previous update that will be applied
 * to the Subscription upon successful payment.
 */
export type SubscriptionsResourcePendingUpdate = {
  /**
   * If the update is applied, determines the date of the first full invoice, and, for plans with `month` or `year` intervals, the day of the month for subsequent invoices. The timestamp is in UTC format.
   */
  billing_cycle_anchor?: number | null;
  /**
   * The point after which the changes reflected by this update will be discarded and no longer applied.
   */
  expires_at: number;
  /**
   * List of subscription items, each with an attached plan, that will be set if the update is applied.
   */
  subscription_items?: SubscriptionItem[] | null;
  /**
   * Unix timestamp representing the end of the trial period the customer will get before being charged for the first time, if the update is applied.
   */
  trial_end?: number | null;
  /**
   * Indicates if a plan's `trial_period_days` should be applied to the subscription. Setting `trial_end` per subscription is preferred, and this defaults to `false`. Setting this flag to `true` together with `trial_end` is not allowed. See [Using trial periods on subscriptions](https://stripe.com/docs/billing/subscriptions/trials) to learn more.
   */
  trial_from_plan?: boolean | null;
};
/**
 * SubscriptionsResourceSubscriptionInvoiceSettings
 */
export type SubscriptionsResourceSubscriptionInvoiceSettings = {
  /**
   * The account tax IDs associated with the subscription. Will be set on invoices generated by the subscription.
   */
  account_tax_ids?: (string | TaxId | DeletedTaxId)[] | null;
  issuer: ConnectAccountReference;
};
/**
 * SubscriptionsTrialsResourceEndBehavior
 * Defines how a subscription behaves when a free trial ends.
 */
export type SubscriptionsTrialsResourceEndBehavior = {
  /**
   * Indicates how the subscription should change when the trial ends if the user did not provide a payment method.
   */
  missing_payment_method: 'cancel' | 'create_invoice' | 'pause';
};
/**
 * SubscriptionsTrialsResourceTrialSettings
 * Configures how this subscription behaves during the trial period.
 */
export type SubscriptionsTrialsResourceTrialSettings = {
  end_behavior: SubscriptionsTrialsResourceEndBehavior;
};
/**
 * TaxProductResourceTaxCalculation
 * A Tax Calculation allows you to calculate the tax to collect from your customer.
 *
 * Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom)
 */
export type TaxCalculation = {
  /**
   * Total amount after taxes in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_total: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
   */
  customer?: string | null;
  customer_details: TaxProductResourceCustomerDetails;
  /**
   * Timestamp of date at which the tax calculation will expire.
   */
  expires_at?: number | null;
  /**
   * Unique identifier for the calculation.
   */
  id?: string | null;
  /**
   * TaxProductResourceTaxCalculationLineItemList
   * The list of items the customer is purchasing.
   */
  line_items?: {
    /**
     * Details about each object.
     */
    data: TaxCalculationLineItem[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  } | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax.calculation';
  /**
   * The details of the ship from location, such as the address.
   */
  ship_from_details?: TaxProductResourceShipFromDetails | null;
  /**
   * The shipping cost details for the calculation.
   */
  shipping_cost?: TaxProductResourceTaxCalculationShippingCost | null;
  /**
   * The amount of tax to be collected on top of the line item prices.
   */
  tax_amount_exclusive: number;
  /**
   * The amount of tax already included in the line item prices.
   */
  tax_amount_inclusive: number;
  /**
   * Breakdown of individual tax amounts that add up to the total.
   */
  tax_breakdown: TaxProductResourceTaxBreakdown[];
  /**
   * Timestamp of date at which the tax rules and rates in effect applies for the calculation.
   */
  tax_date: number;
};
/**
 * TaxProductResourceTaxCalculationLineItem
 */
export type TaxCalculationLineItem = {
  /**
   * The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
   */
  amount: number;
  /**
   * The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_tax: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax.calculation_line_item';
  /**
   * The ID of an existing [Product](https://stripe.com/docs/api/products/object).
   */
  product?: string | null;
  /**
   * The number of units of the item being purchased. For reversals, this is the quantity reversed.
   */
  quantity: number;
  /**
   * A custom identifier for this line item.
   */
  reference: string;
  /**
   * Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
   */
  tax_behavior: 'exclusive' | 'inclusive';
  /**
   * Detailed account of taxes relevant to this line item.
   */
  tax_breakdown?: TaxProductResourceLineItemTaxBreakdown[] | null;
  /**
   * The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
   */
  tax_code: string;
};
/**
 * TaxProductRegistrationsResourceTaxRegistration
 * A Tax `Registration` lets us know that your business is registered to collect tax on payments within a region, enabling you to [automatically collect tax](https://stripe.com/docs/tax).
 *
 * Stripe doesn't register on your behalf with the relevant authorities when you create a Tax `Registration` object. For more information on how to register to collect tax, see [our guide](https://stripe.com/docs/tax/registering).
 *
 * Related guide: [Using the Registrations API](https://stripe.com/docs/tax/registrations-api)
 */
export type TaxRegistration = {
  /**
   * Time at which the registration becomes active. Measured in seconds since the Unix epoch.
   */
  active_from: number;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country: string;
  country_options: TaxProductRegistrationsResourceCountryOptions;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * If set, the registration stops being active at this time. If not set, the registration will be active indefinitely. Measured in seconds since the Unix epoch.
   */
  expires_at?: number | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax.registration';
  /**
   * The status of the registration. This field is present for convenience and can be deduced from `active_from` and `expires_at`.
   */
  status: 'active' | 'expired' | 'scheduled';
};
/**
 * TaxProductResourceTaxSettings
 * You can use Tax `Settings` to manage configurations used by Stripe Tax calculations.
 *
 * Related guide: [Using the Settings API](https://stripe.com/docs/tax/settings-api)
 */
export type TaxSettings = {
  defaults: TaxProductResourceTaxSettingsDefaults;
  /**
   * The place where your business is located.
   */
  head_office?: TaxProductResourceTaxSettingsHeadOffice | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax.settings';
  /**
   * The status of the Tax `Settings`.
   */
  status: 'active' | 'pending';
  status_details: TaxProductResourceTaxSettingsStatusDetails;
};
/**
 * TaxProductResourceTaxTransaction
 * A Tax Transaction records the tax collected from or refunded to your customer.
 *
 * Related guide: [Calculate tax in your custom payment flow](https://stripe.com/docs/tax/custom#tax-transaction)
 */
export type TaxTransaction = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The ID of an existing [Customer](https://stripe.com/docs/api/customers/object) used for the resource.
   */
  customer?: string | null;
  customer_details: TaxProductResourceCustomerDetails;
  /**
   * Unique identifier for the transaction.
   */
  id: string;
  /**
   * TaxProductResourceTaxTransactionLineItemList
   * The tax collected or refunded, by line item.
   */
  line_items?: {
    /**
     * Details about each object.
     */
    data: TaxTransactionLineItem[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  } | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax.transaction';
  /**
   * The Unix timestamp representing when the tax liability is assumed or reduced.
   */
  posted_at: number;
  /**
   * A custom unique identifier, such as 'myOrder_123'.
   */
  reference: string;
  /**
   * If `type=reversal`, contains information about what was reversed.
   */
  reversal?: TaxProductResourceTaxTransactionResourceReversal | null;
  /**
   * The details of the ship from location, such as the address.
   */
  ship_from_details?: TaxProductResourceShipFromDetails | null;
  /**
   * The shipping cost details for the transaction.
   */
  shipping_cost?: TaxProductResourceTaxTransactionShippingCost | null;
  /**
   * Timestamp of date at which the tax rules and rates in effect applies for the calculation.
   */
  tax_date: number;
  /**
   * If `reversal`, this transaction reverses an earlier transaction.
   */
  type: 'reversal' | 'transaction';
};
/**
 * TaxProductResourceTaxTransactionLineItem
 */
export type TaxTransactionLineItem = {
  /**
   * The line item amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
   */
  amount: number;
  /**
   * The amount of tax calculated for this line item, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_tax: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax.transaction_line_item';
  /**
   * The ID of an existing [Product](https://stripe.com/docs/api/products/object).
   */
  product?: string | null;
  /**
   * The number of units of the item being purchased. For reversals, this is the quantity reversed.
   */
  quantity: number;
  /**
   * A custom identifier for this line item in the transaction.
   */
  reference: string;
  /**
   * If `type=reversal`, contains information about what was reversed.
   */
  reversal?: TaxProductResourceTaxTransactionLineItemResourceReversal | null;
  /**
   * Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
   */
  tax_behavior: 'exclusive' | 'inclusive';
  /**
   * The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for this resource.
   */
  tax_code: string;
  /**
   * If `reversal`, this line item reverses an earlier transaction.
   */
  type: 'reversal' | 'transaction';
};
/**
 * TaxProductResourceTaxCode
 * [Tax codes](https://stripe.com/docs/tax/tax-categories) classify goods and services for tax purposes.
 */
export type TaxCode = {
  /**
   * A detailed description of which types of products the tax code represents.
   */
  description: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * A short name for the tax code.
   */
  name: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax_code';
};
/**
 * TaxDeductedAtSource
 */
export type TaxDeductedAtSource = {
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax_deducted_at_source';
  /**
   * The end of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
   */
  period_end: number;
  /**
   * The start of the invoicing period. This TDS applies to Stripe fees collected during this invoicing period.
   */
  period_start: number;
  /**
   * The TAN that was supplied to Stripe when TDS was assessed
   */
  tax_deduction_account_number: string;
};
/**
 * TaxIDsOwner
 */
export type TaxIDsOwner = {
  /**
   * The account being referenced when `type` is `account`.
   */
  account?: string | Account;
  /**
   * The Connect Application being referenced when `type` is `application`.
   */
  application?: string | Application;
  /**
   * The customer being referenced when `type` is `customer`.
   */
  customer?: string | Customer;
  /**
   * Type of owner referenced.
   */
  type: 'account' | 'application' | 'customer' | 'self';
};
/**
 * tax_id
 * You can add one or multiple tax IDs to a [customer](https://stripe.com/docs/api/customers) or account.
 * Customer and account tax IDs get displayed on related invoices and credit notes.
 *
 * Related guides: [Customer tax identification numbers](https://stripe.com/docs/billing/taxes/tax-ids), [Account tax IDs](https://stripe.com/docs/invoicing/connect#account-tax-ids)
 */
export type TaxId = {
  /**
   * Two-letter ISO code representing the country of the tax ID.
   */
  country?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * ID of the customer.
   */
  customer?: (string | Customer) | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax_id';
  /**
   * The account or customer the tax ID belongs to.
   */
  owner?: TaxIDsOwner | null;
  /**
   * Type of the tax ID, one of `ad_nrt`, `ae_trn`, `al_tin`, `am_tin`, `ao_tin`, `ar_cuit`, `au_abn`, `au_arn`, `aw_tin`, `az_tin`, `ba_tin`, `bb_tin`, `bd_bin`, `bf_ifu`, `bg_uic`, `bh_vat`, `bj_ifu`, `bo_tin`, `br_cnpj`, `br_cpf`, `bs_tin`, `by_tin`, `ca_bn`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `ca_qst`, `cd_nif`, `ch_uid`, `ch_vat`, `cl_tin`, `cm_niu`, `cn_tin`, `co_nit`, `cr_tin`, `cv_nif`, `de_stn`, `do_rcn`, `ec_ruc`, `eg_tin`, `es_cif`, `et_tin`, `eu_oss_vat`, `eu_vat`, `gb_vat`, `ge_vat`, `gn_nif`, `hk_br`, `hr_oib`, `hu_tin`, `id_npwp`, `il_vat`, `in_gst`, `is_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `ke_pin`, `kg_tin`, `kh_tin`, `kr_brn`, `kz_bin`, `la_tin`, `li_uid`, `li_vat`, `ma_vat`, `md_vat`, `me_pib`, `mk_vat`, `mr_nif`, `mx_rfc`, `my_frp`, `my_itn`, `my_sst`, `ng_tin`, `no_vat`, `no_voec`, `np_pan`, `nz_gst`, `om_vat`, `pe_ruc`, `ph_tin`, `ro_tin`, `rs_pib`, `ru_inn`, `ru_kpp`, `sa_vat`, `sg_gst`, `sg_uen`, `si_tin`, `sn_ninea`, `sr_fin`, `sv_nit`, `th_vat`, `tj_tin`, `tr_tin`, `tw_vat`, `tz_vat`, `ua_vat`, `ug_tin`, `us_ein`, `uy_ruc`, `uz_tin`, `uz_vat`, `ve_rif`, `vn_tin`, `za_vat`, `zm_tin`, or `zw_tin`. Note that some legacy tax IDs have type `unknown`
   */
  type:
    | 'ad_nrt'
    | 'ae_trn'
    | 'al_tin'
    | 'am_tin'
    | 'ao_tin'
    | 'ar_cuit'
    | 'au_abn'
    | 'au_arn'
    | 'aw_tin'
    | 'az_tin'
    | 'ba_tin'
    | 'bb_tin'
    | 'bd_bin'
    | 'bf_ifu'
    | 'bg_uic'
    | 'bh_vat'
    | 'bj_ifu'
    | 'bo_tin'
    | 'br_cnpj'
    | 'br_cpf'
    | 'bs_tin'
    | 'by_tin'
    | 'ca_bn'
    | 'ca_gst_hst'
    | 'ca_pst_bc'
    | 'ca_pst_mb'
    | 'ca_pst_sk'
    | 'ca_qst'
    | 'cd_nif'
    | 'ch_uid'
    | 'ch_vat'
    | 'cl_tin'
    | 'cm_niu'
    | 'cn_tin'
    | 'co_nit'
    | 'cr_tin'
    | 'cv_nif'
    | 'de_stn'
    | 'do_rcn'
    | 'ec_ruc'
    | 'eg_tin'
    | 'es_cif'
    | 'et_tin'
    | 'eu_oss_vat'
    | 'eu_vat'
    | 'gb_vat'
    | 'ge_vat'
    | 'gn_nif'
    | 'hk_br'
    | 'hr_oib'
    | 'hu_tin'
    | 'id_npwp'
    | 'il_vat'
    | 'in_gst'
    | 'is_vat'
    | 'jp_cn'
    | 'jp_rn'
    | 'jp_trn'
    | 'ke_pin'
    | 'kg_tin'
    | 'kh_tin'
    | 'kr_brn'
    | 'kz_bin'
    | 'la_tin'
    | 'li_uid'
    | 'li_vat'
    | 'ma_vat'
    | 'md_vat'
    | 'me_pib'
    | 'mk_vat'
    | 'mr_nif'
    | 'mx_rfc'
    | 'my_frp'
    | 'my_itn'
    | 'my_sst'
    | 'ng_tin'
    | 'no_vat'
    | 'no_voec'
    | 'np_pan'
    | 'nz_gst'
    | 'om_vat'
    | 'pe_ruc'
    | 'ph_tin'
    | 'ro_tin'
    | 'rs_pib'
    | 'ru_inn'
    | 'ru_kpp'
    | 'sa_vat'
    | 'sg_gst'
    | 'sg_uen'
    | 'si_tin'
    | 'sn_ninea'
    | 'sr_fin'
    | 'sv_nit'
    | 'th_vat'
    | 'tj_tin'
    | 'tr_tin'
    | 'tw_vat'
    | 'tz_vat'
    | 'ua_vat'
    | 'ug_tin'
    | 'unknown'
    | 'us_ein'
    | 'uy_ruc'
    | 'uz_tin'
    | 'uz_vat'
    | 've_rif'
    | 'vn_tin'
    | 'za_vat'
    | 'zm_tin'
    | 'zw_tin';
  /**
   * Value of the tax ID.
   */
  value: string;
  /**
   * Tax ID verification information.
   */
  verification?: TaxIdVerification | null;
};
/**
 * tax_id_verification
 */
export type TaxIdVerification = {
  /**
   * Verification status, one of `pending`, `verified`, `unverified`, or `unavailable`.
   */
  status: 'pending' | 'unavailable' | 'unverified' | 'verified';
  /**
   * Verified address.
   */
  verified_address?: string | null;
  /**
   * Verified name.
   */
  verified_name?: string | null;
};
/**
 * TaxProductRegistrationsResourceCountryOptions
 */
export type TaxProductRegistrationsResourceCountryOptions = {
  ae?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  al?: TaxProductRegistrationsResourceCountryOptionsDefault;
  am?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ao?: TaxProductRegistrationsResourceCountryOptionsDefault;
  at?: TaxProductRegistrationsResourceCountryOptionsEurope;
  au?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  aw?: TaxProductRegistrationsResourceCountryOptionsDefault;
  az?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ba?: TaxProductRegistrationsResourceCountryOptionsDefault;
  bb?: TaxProductRegistrationsResourceCountryOptionsDefault;
  bd?: TaxProductRegistrationsResourceCountryOptionsDefault;
  be?: TaxProductRegistrationsResourceCountryOptionsEurope;
  bf?: TaxProductRegistrationsResourceCountryOptionsDefault;
  bg?: TaxProductRegistrationsResourceCountryOptionsEurope;
  bh?: TaxProductRegistrationsResourceCountryOptionsDefault;
  bj?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  bs?: TaxProductRegistrationsResourceCountryOptionsDefault;
  by?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ca?: TaxProductRegistrationsResourceCountryOptionsCanada;
  cd?: TaxProductRegistrationsResourceCountryOptionsDefault;
  ch?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  cl?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  cm?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  co?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  cr?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  cv?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  cy?: TaxProductRegistrationsResourceCountryOptionsEurope;
  cz?: TaxProductRegistrationsResourceCountryOptionsEurope;
  de?: TaxProductRegistrationsResourceCountryOptionsEurope;
  dk?: TaxProductRegistrationsResourceCountryOptionsEurope;
  ec?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ee?: TaxProductRegistrationsResourceCountryOptionsEurope;
  eg?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  es?: TaxProductRegistrationsResourceCountryOptionsEurope;
  et?: TaxProductRegistrationsResourceCountryOptionsDefault;
  fi?: TaxProductRegistrationsResourceCountryOptionsEurope;
  fr?: TaxProductRegistrationsResourceCountryOptionsEurope;
  gb?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  ge?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  gn?: TaxProductRegistrationsResourceCountryOptionsDefault;
  gr?: TaxProductRegistrationsResourceCountryOptionsEurope;
  hr?: TaxProductRegistrationsResourceCountryOptionsEurope;
  hu?: TaxProductRegistrationsResourceCountryOptionsEurope;
  id?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ie?: TaxProductRegistrationsResourceCountryOptionsEurope;
  in?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  is?: TaxProductRegistrationsResourceCountryOptionsDefault;
  it?: TaxProductRegistrationsResourceCountryOptionsEurope;
  jp?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  ke?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  kg?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  kh?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  kr?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  kz?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  la?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  lt?: TaxProductRegistrationsResourceCountryOptionsEurope;
  lu?: TaxProductRegistrationsResourceCountryOptionsEurope;
  lv?: TaxProductRegistrationsResourceCountryOptionsEurope;
  ma?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  md?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  me?: TaxProductRegistrationsResourceCountryOptionsDefault;
  mk?: TaxProductRegistrationsResourceCountryOptionsDefault;
  mr?: TaxProductRegistrationsResourceCountryOptionsDefault;
  mt?: TaxProductRegistrationsResourceCountryOptionsEurope;
  mx?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  my?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ng?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  nl?: TaxProductRegistrationsResourceCountryOptionsEurope;
  no?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  np?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  nz?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  om?: TaxProductRegistrationsResourceCountryOptionsDefault;
  pe?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ph?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  pl?: TaxProductRegistrationsResourceCountryOptionsEurope;
  pt?: TaxProductRegistrationsResourceCountryOptionsEurope;
  ro?: TaxProductRegistrationsResourceCountryOptionsEurope;
  rs?: TaxProductRegistrationsResourceCountryOptionsDefault;
  ru?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  sa?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  se?: TaxProductRegistrationsResourceCountryOptionsEurope;
  sg?: TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods;
  si?: TaxProductRegistrationsResourceCountryOptionsEurope;
  sk?: TaxProductRegistrationsResourceCountryOptionsEurope;
  sn?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  sr?: TaxProductRegistrationsResourceCountryOptionsDefault;
  th?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  tj?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  tr?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  tz?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  ug?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  us?: TaxProductRegistrationsResourceCountryOptionsUnitedStates;
  uy?: TaxProductRegistrationsResourceCountryOptionsDefault;
  uz?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  vn?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  za?: TaxProductRegistrationsResourceCountryOptionsDefault;
  zm?: TaxProductRegistrationsResourceCountryOptionsSimplified;
  zw?: TaxProductRegistrationsResourceCountryOptionsDefault;
};
/**
 * TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard
 */
export type TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard = {
  /**
   * Two-letter CA province code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).
   */
  province: string;
};
/**
 * TaxProductRegistrationsResourceCountryOptionsCanada
 */
export type TaxProductRegistrationsResourceCountryOptionsCanada = {
  province_standard?: TaxProductRegistrationsResourceCountryOptionsCaProvinceStandard;
  /**
   * Type of registration in Canada.
   */
  type: 'province_standard' | 'simplified' | 'standard';
};
/**
 * TaxProductRegistrationsResourceCountryOptionsDefault
 */
export type TaxProductRegistrationsResourceCountryOptionsDefault = {
  /**
   * Type of registration in `country`.
   */
  type: 'standard';
};
/**
 * TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods
 */
export type TaxProductRegistrationsResourceCountryOptionsDefaultInboundGoods = {
  /**
   * Type of registration in `country`.
   */
  type: 'standard';
};
/**
 * TaxProductRegistrationsResourceCountryOptionsEuStandard
 */
export type TaxProductRegistrationsResourceCountryOptionsEuStandard = {
  /**
   * Place of supply scheme used in an EU standard registration.
   */
  place_of_supply_scheme: 'small_seller' | 'standard';
};
/**
 * TaxProductRegistrationsResourceCountryOptionsEurope
 */
export type TaxProductRegistrationsResourceCountryOptionsEurope = {
  standard?: TaxProductRegistrationsResourceCountryOptionsEuStandard;
  /**
   * Type of registration in an EU country.
   */
  type: 'ioss' | 'oss_non_union' | 'oss_union' | 'standard';
};
/**
 * TaxProductRegistrationsResourceCountryOptionsSimplified
 */
export type TaxProductRegistrationsResourceCountryOptionsSimplified = {
  /**
   * Type of registration in `country`.
   */
  type: 'simplified';
};
/**
 * TaxProductRegistrationsResourceCountryOptionsUnitedStates
 */
export type TaxProductRegistrationsResourceCountryOptionsUnitedStates = {
  local_amusement_tax?: TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax;
  local_lease_tax?: TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax;
  /**
   * Two-letter US state code ([ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2)).
   */
  state: string;
  state_sales_tax?: TaxProductRegistrationsResourceCountryOptionsUsStateSalesTax;
  /**
   * Type of registration in the US.
   */
  type:
    | 'local_amusement_tax'
    | 'local_lease_tax'
    | 'state_communications_tax'
    | 'state_retail_delivery_fee'
    | 'state_sales_tax';
};
/**
 * TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax
 */
export type TaxProductRegistrationsResourceCountryOptionsUsLocalAmusementTax = {
  /**
   * A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
   */
  jurisdiction: string;
};
/**
 * TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax
 */
export type TaxProductRegistrationsResourceCountryOptionsUsLocalLeaseTax = {
  /**
   * A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
   */
  jurisdiction: string;
};
/**
 * TaxProductRegistrationsResourceCountryOptionsUsStateSalesTax
 */
export type TaxProductRegistrationsResourceCountryOptionsUsStateSalesTax = {
  /**
   * Elections for the state sales tax registration.
   */
  elections?: TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElection[];
};
/**
 * TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElection
 */
export type TaxProductRegistrationsResourceCountryOptionsUsStateSalesTaxElection =
  {
    /**
     * A [FIPS code](https://www.census.gov/library/reference/code-lists/ansi.html) representing the local jurisdiction.
     */
    jurisdiction?: string;
    /**
     * The type of the election for the state sales tax registration.
     */
    type:
      | 'local_use_tax'
      | 'simplified_sellers_use_tax'
      | 'single_local_use_tax';
  };
/**
 * TaxProductResourceCustomerDetails
 */
export type TaxProductResourceCustomerDetails = {
  /**
   * The customer's postal address (for example, home or business location).
   */
  address?: TaxProductResourcePostalAddress | null;
  /**
   * The type of customer address provided.
   */
  address_source?: ('billing' | 'shipping') | null;
  /**
   * The customer's IP address (IPv4 or IPv6).
   */
  ip_address?: string | null;
  /**
   * The customer's tax IDs (for example, EU VAT numbers).
   */
  tax_ids: TaxProductResourceCustomerDetailsResourceTaxId[];
  /**
   * The taxability override used for taxation.
   */
  taxability_override: 'customer_exempt' | 'none' | 'reverse_charge';
};
/**
 * TaxProductResourceCustomerDetailsResourceTaxId
 */
export type TaxProductResourceCustomerDetailsResourceTaxId = {
  /**
   * The type of the tax ID, one of `ad_nrt`, `ar_cuit`, `eu_vat`, `bo_tin`, `br_cnpj`, `br_cpf`, `cn_tin`, `co_nit`, `cr_tin`, `do_rcn`, `ec_ruc`, `eu_oss_vat`, `hr_oib`, `pe_ruc`, `ro_tin`, `rs_pib`, `sv_nit`, `uy_ruc`, `ve_rif`, `vn_tin`, `gb_vat`, `nz_gst`, `au_abn`, `au_arn`, `in_gst`, `no_vat`, `no_voec`, `za_vat`, `ch_vat`, `mx_rfc`, `sg_uen`, `ru_inn`, `ru_kpp`, `ca_bn`, `hk_br`, `es_cif`, `tw_vat`, `th_vat`, `jp_cn`, `jp_rn`, `jp_trn`, `li_uid`, `li_vat`, `my_itn`, `us_ein`, `kr_brn`, `ca_qst`, `ca_gst_hst`, `ca_pst_bc`, `ca_pst_mb`, `ca_pst_sk`, `my_sst`, `sg_gst`, `ae_trn`, `cl_tin`, `sa_vat`, `id_npwp`, `my_frp`, `il_vat`, `ge_vat`, `ua_vat`, `is_vat`, `bg_uic`, `hu_tin`, `si_tin`, `ke_pin`, `tr_tin`, `eg_tin`, `ph_tin`, `al_tin`, `bh_vat`, `kz_bin`, `ng_tin`, `om_vat`, `de_stn`, `ch_uid`, `tz_vat`, `uz_vat`, `uz_tin`, `md_vat`, `ma_vat`, `by_tin`, `ao_tin`, `bs_tin`, `bb_tin`, `cd_nif`, `mr_nif`, `me_pib`, `zw_tin`, `ba_tin`, `gn_nif`, `mk_vat`, `sr_fin`, `sn_ninea`, `am_tin`, `np_pan`, `tj_tin`, `ug_tin`, `zm_tin`, `kh_tin`, `aw_tin`, `az_tin`, `bd_bin`, `bj_ifu`, `et_tin`, `kg_tin`, `la_tin`, `cm_niu`, `cv_nif`, `bf_ifu`, or `unknown`
   */
  type:
    | 'ad_nrt'
    | 'ae_trn'
    | 'al_tin'
    | 'am_tin'
    | 'ao_tin'
    | 'ar_cuit'
    | 'au_abn'
    | 'au_arn'
    | 'aw_tin'
    | 'az_tin'
    | 'ba_tin'
    | 'bb_tin'
    | 'bd_bin'
    | 'bf_ifu'
    | 'bg_uic'
    | 'bh_vat'
    | 'bj_ifu'
    | 'bo_tin'
    | 'br_cnpj'
    | 'br_cpf'
    | 'bs_tin'
    | 'by_tin'
    | 'ca_bn'
    | 'ca_gst_hst'
    | 'ca_pst_bc'
    | 'ca_pst_mb'
    | 'ca_pst_sk'
    | 'ca_qst'
    | 'cd_nif'
    | 'ch_uid'
    | 'ch_vat'
    | 'cl_tin'
    | 'cm_niu'
    | 'cn_tin'
    | 'co_nit'
    | 'cr_tin'
    | 'cv_nif'
    | 'de_stn'
    | 'do_rcn'
    | 'ec_ruc'
    | 'eg_tin'
    | 'es_cif'
    | 'et_tin'
    | 'eu_oss_vat'
    | 'eu_vat'
    | 'gb_vat'
    | 'ge_vat'
    | 'gn_nif'
    | 'hk_br'
    | 'hr_oib'
    | 'hu_tin'
    | 'id_npwp'
    | 'il_vat'
    | 'in_gst'
    | 'is_vat'
    | 'jp_cn'
    | 'jp_rn'
    | 'jp_trn'
    | 'ke_pin'
    | 'kg_tin'
    | 'kh_tin'
    | 'kr_brn'
    | 'kz_bin'
    | 'la_tin'
    | 'li_uid'
    | 'li_vat'
    | 'ma_vat'
    | 'md_vat'
    | 'me_pib'
    | 'mk_vat'
    | 'mr_nif'
    | 'mx_rfc'
    | 'my_frp'
    | 'my_itn'
    | 'my_sst'
    | 'ng_tin'
    | 'no_vat'
    | 'no_voec'
    | 'np_pan'
    | 'nz_gst'
    | 'om_vat'
    | 'pe_ruc'
    | 'ph_tin'
    | 'ro_tin'
    | 'rs_pib'
    | 'ru_inn'
    | 'ru_kpp'
    | 'sa_vat'
    | 'sg_gst'
    | 'sg_uen'
    | 'si_tin'
    | 'sn_ninea'
    | 'sr_fin'
    | 'sv_nit'
    | 'th_vat'
    | 'tj_tin'
    | 'tr_tin'
    | 'tw_vat'
    | 'tz_vat'
    | 'ua_vat'
    | 'ug_tin'
    | 'unknown'
    | 'us_ein'
    | 'uy_ruc'
    | 'uz_tin'
    | 'uz_vat'
    | 've_rif'
    | 'vn_tin'
    | 'za_vat'
    | 'zm_tin'
    | 'zw_tin';
  /**
   * The value of the tax ID.
   */
  value: string;
};
/**
 * TaxProductResourceJurisdiction
 */
export type TaxProductResourceJurisdiction = {
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country: string;
  /**
   * A human-readable name for the jurisdiction imposing the tax.
   */
  display_name: string;
  /**
   * Indicates the level of the jurisdiction imposing the tax.
   */
  level: 'city' | 'country' | 'county' | 'district' | 'state';
  /**
   * [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States.
   */
  state?: string | null;
};
/**
 * TaxProductResourceLineItemTaxBreakdown
 */
export type TaxProductResourceLineItemTaxBreakdown = {
  /**
   * The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  jurisdiction: TaxProductResourceJurisdiction;
  /**
   * Indicates whether the jurisdiction was determined by the origin (merchant's address) or destination (customer's address).
   */
  sourcing: 'destination' | 'origin';
  /**
   * Details regarding the rate for this tax. This field will be `null` when the tax is not imposed, for example if the product is exempt from tax.
   */
  tax_rate_details?: TaxProductResourceLineItemTaxRateDetails | null;
  /**
   * The reasoning behind this tax, for example, if the product is tax exempt. The possible values for this field may be extended as new tax rules are supported.
   */
  taxability_reason:
    | 'customer_exempt'
    | 'not_collecting'
    | 'not_subject_to_tax'
    | 'not_supported'
    | 'portion_product_exempt'
    | 'portion_reduced_rated'
    | 'portion_standard_rated'
    | 'product_exempt'
    | 'product_exempt_holiday'
    | 'proportionally_rated'
    | 'reduced_rated'
    | 'reverse_charge'
    | 'standard_rated'
    | 'taxable_basis_reduced'
    | 'zero_rated';
  /**
   * The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  taxable_amount: number;
};
/**
 * TaxProductResourceLineItemTaxRateDetails
 */
export type TaxProductResourceLineItemTaxRateDetails = {
  /**
   * A localized display name for tax type, intended to be human-readable. For example, "Local Sales and Use Tax", "Value-added tax (VAT)", or "Umsatzsteuer (USt.)".
   */
  display_name: string;
  /**
   * The tax rate percentage as a string. For example, 8.5% is represented as "8.5".
   */
  percentage_decimal: string;
  /**
   * The tax type, such as `vat` or `sales_tax`.
   */
  tax_type:
    | 'amusement_tax'
    | 'communications_tax'
    | 'gst'
    | 'hst'
    | 'igst'
    | 'jct'
    | 'lease_tax'
    | 'pst'
    | 'qst'
    | 'retail_delivery_fee'
    | 'rst'
    | 'sales_tax'
    | 'service_tax'
    | 'vat';
};
/**
 * TaxProductResourcePostalAddress
 */
export type TaxProductResourcePostalAddress = {
  /**
   * City, district, suburb, town, or village.
   */
  city?: string | null;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country: string;
  /**
   * Address line 1 (e.g., street, PO Box, or company name).
   */
  line1?: string | null;
  /**
   * Address line 2 (e.g., apartment, suite, unit, or building).
   */
  line2?: string | null;
  /**
   * ZIP or postal code.
   */
  postal_code?: string | null;
  /**
   * State/province as an [ISO 3166-2](https://en.wikipedia.org/wiki/ISO_3166-2) subdivision code, without country prefix. Example: "NY" or "TX".
   */
  state?: string | null;
};
/**
 * TaxProductResourceShipFromDetails
 */
export type TaxProductResourceShipFromDetails = {
  address: TaxProductResourcePostalAddress;
};
/**
 * TaxProductResourceTaxBreakdown
 */
export type TaxProductResourceTaxBreakdown = {
  /**
   * The amount of tax, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /**
   * Specifies whether the tax amount is included in the line item amount.
   */
  inclusive: boolean;
  tax_rate_details: TaxProductResourceTaxRateDetails;
  /**
   * The reasoning behind this tax, for example, if the product is tax exempt. We might extend the possible values for this field to support new tax rules.
   */
  taxability_reason:
    | 'customer_exempt'
    | 'not_collecting'
    | 'not_subject_to_tax'
    | 'not_supported'
    | 'portion_product_exempt'
    | 'portion_reduced_rated'
    | 'portion_standard_rated'
    | 'product_exempt'
    | 'product_exempt_holiday'
    | 'proportionally_rated'
    | 'reduced_rated'
    | 'reverse_charge'
    | 'standard_rated'
    | 'taxable_basis_reduced'
    | 'zero_rated';
  /**
   * The amount on which tax is calculated, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  taxable_amount: number;
};
/**
 * TaxProductResourceTaxCalculationShippingCost
 */
export type TaxProductResourceTaxCalculationShippingCost = {
  /**
   * The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
   */
  amount: number;
  /**
   * The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_tax: number;
  /**
   * The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
   */
  shipping_rate?: string;
  /**
   * Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
   */
  tax_behavior: 'exclusive' | 'inclusive';
  /**
   * Detailed account of taxes relevant to shipping cost.
   */
  tax_breakdown?: TaxProductResourceLineItemTaxBreakdown[];
  /**
   * The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
   */
  tax_code: string;
};
/**
 * TaxProductResourceTaxRateDetails
 */
export type TaxProductResourceTaxRateDetails = {
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country?: string | null;
  /**
   * The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.
   */
  flat_amount?: TaxRateFlatAmount | null;
  /**
   * The tax rate percentage as a string. For example, 8.5% is represented as `"8.5"`.
   */
  percentage_decimal: string;
  /**
   * Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.
   */
  rate_type?: ('flat_amount' | 'percentage') | null;
  /**
   * State, county, province, or region.
   */
  state?: string | null;
  /**
   * The tax type, such as `vat` or `sales_tax`.
   */
  tax_type?:
    | (
        | 'amusement_tax'
        | 'communications_tax'
        | 'gst'
        | 'hst'
        | 'igst'
        | 'jct'
        | 'lease_tax'
        | 'pst'
        | 'qst'
        | 'retail_delivery_fee'
        | 'rst'
        | 'sales_tax'
        | 'service_tax'
        | 'vat'
      )
    | null;
};
/**
 * TaxProductResourceTaxSettingsDefaults
 */
export type TaxProductResourceTaxSettingsDefaults = {
  /**
   * Default [tax behavior](https://stripe.com/docs/tax/products-prices-tax-categories-tax-behavior#tax-behavior) used to specify whether the price is considered inclusive of taxes or exclusive of taxes. If the item's price has a tax behavior set, it will take precedence over the default tax behavior.
   */
  tax_behavior?: ('exclusive' | 'inclusive' | 'inferred_by_currency') | null;
  /**
   * Default [tax code](https://stripe.com/docs/tax/tax-categories) used to classify your products and prices.
   */
  tax_code?: string | null;
};
/**
 * TaxProductResourceTaxSettingsHeadOffice
 */
export type TaxProductResourceTaxSettingsHeadOffice = {
  address: Address;
};
/**
 * TaxProductResourceTaxSettingsStatusDetails
 */
export type TaxProductResourceTaxSettingsStatusDetails = {
  active?: TaxProductResourceTaxSettingsStatusDetailsResourceActive;
  pending?: TaxProductResourceTaxSettingsStatusDetailsResourcePending;
};
/**
 * TaxProductResourceTaxSettingsStatusDetailsResourceActive
 */
export type TaxProductResourceTaxSettingsStatusDetailsResourceActive = unknown;
/**
 * TaxProductResourceTaxSettingsStatusDetailsResourcePending
 */
export type TaxProductResourceTaxSettingsStatusDetailsResourcePending = {
  /**
   * The list of missing fields that are required to perform calculations. It includes the entry `head_office` when the status is `pending`. It is recommended to set the optional values even if they aren't listed as required for calculating taxes. Calculations can fail if missing fields aren't explicitly provided on every call.
   */
  missing_fields?: string[] | null;
};
/**
 * TaxProductResourceTaxTransactionLineItemResourceReversal
 */
export type TaxProductResourceTaxTransactionLineItemResourceReversal = {
  /**
   * The `id` of the line item to reverse in the original transaction.
   */
  original_line_item: string;
};
/**
 * TaxProductResourceTaxTransactionResourceReversal
 */
export type TaxProductResourceTaxTransactionResourceReversal = {
  /**
   * The `id` of the reversed `Transaction` object.
   */
  original_transaction?: string | null;
};
/**
 * TaxProductResourceTaxTransactionShippingCost
 */
export type TaxProductResourceTaxTransactionShippingCost = {
  /**
   * The shipping amount in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal). If `tax_behavior=inclusive`, then this amount includes taxes. Otherwise, taxes were calculated on top of this amount.
   */
  amount: number;
  /**
   * The amount of tax calculated for shipping, in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount_tax: number;
  /**
   * The ID of an existing [ShippingRate](https://stripe.com/docs/api/shipping_rates/object).
   */
  shipping_rate?: string;
  /**
   * Specifies whether the `amount` includes taxes. If `tax_behavior=inclusive`, then the amount includes taxes.
   */
  tax_behavior: 'exclusive' | 'inclusive';
  /**
   * The [tax code](https://stripe.com/docs/tax/tax-categories) ID used for shipping.
   */
  tax_code: string;
};
/**
 * TaxRate
 * Tax rates can be applied to [invoices](/invoicing/taxes/tax-rates), [subscriptions](/billing/taxes/tax-rates) and [Checkout Sessions](/payments/checkout/use-manual-tax-rates) to collect tax.
 *
 * Related guide: [Tax rates](/billing/taxes/tax-rates)
 */
export type TaxRate = {
  /**
   * Defaults to `true`. When set to `false`, this tax rate cannot be used with new applications or Checkout Sessions, but will still work for subscriptions and invoices that already have it set.
   */
  active: boolean;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * An arbitrary string attached to the tax rate for your internal use only. It will not be visible to your customers.
   */
  description?: string | null;
  /**
   * The display name of the tax rates as it will appear to your customer on their receipt email, PDF, and the hosted invoice page.
   */
  display_name: string;
  /**
   * Actual/effective tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true,
   * this percentage reflects the rate actually used to calculate tax based on the product's taxability
   * and whether the user is registered to collect taxes in the corresponding jurisdiction.
   */
  effective_percentage?: number | null;
  /**
   * The amount of the tax rate when the `rate_type` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.
   */
  flat_amount?: TaxRateFlatAmount | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * This specifies if the tax rate is inclusive or exclusive.
   */
  inclusive: boolean;
  /**
   * The jurisdiction for the tax rate. You can use this label field for tax reporting purposes. It also appears on your customer’s invoice.
   */
  jurisdiction?: string | null;
  /**
   * The level of the jurisdiction that imposes this tax rate. Will be `null` for manually defined tax rates.
   */
  jurisdiction_level?:
    | ('city' | 'country' | 'county' | 'district' | 'multiple' | 'state')
    | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'tax_rate';
  /**
   * Tax rate percentage out of 100. For tax calculations with automatic_tax[enabled]=true, this percentage includes the statutory tax rate of non-taxable jurisdictions.
   */
  percentage: number;
  /**
   * Indicates the type of tax rate applied to the taxable amount. This value can be `null` when no tax applies to the location. This field is only present for TaxRates created by Stripe Tax.
   */
  rate_type?: ('flat_amount' | 'percentage') | null;
  /**
   * [ISO 3166-2 subdivision code](https://en.wikipedia.org/wiki/ISO_3166-2), without country prefix. For example, "NY" for New York, United States.
   */
  state?: string | null;
  /**
   * The high-level tax type, such as `vat` or `sales_tax`.
   */
  tax_type?:
    | (
        | 'amusement_tax'
        | 'communications_tax'
        | 'gst'
        | 'hst'
        | 'igst'
        | 'jct'
        | 'lease_tax'
        | 'pst'
        | 'qst'
        | 'retail_delivery_fee'
        | 'rst'
        | 'sales_tax'
        | 'service_tax'
        | 'vat'
      )
    | null;
};
/**
 * TaxRateFlatAmount
 * The amount of the tax rate when the `rate_type`` is `flat_amount`. Tax rates with `rate_type` `percentage` can vary based on the transaction, resulting in this field being `null`. This field exposes the amount and currency of the flat tax rate.
 */
export type TaxRateFlatAmount = {
  /**
   * Amount of the tax when the `rate_type` is `flat_amount`. This positive integer represents how much to charge in the smallest currency unit (e.g., 100 cents to charge $1.00 or 100 to charge ¥100, a zero-decimal currency). The amount value supports up to eight digits (e.g., a value of 99999999 for a USD charge of $999,999.99).
   */
  amount: number;
  /**
   * Three-letter ISO currency code, in lowercase.
   */
  currency: string;
};
/**
 * TerminalConfigurationConfiguration
 * A Configurations object represents how features should be configured for terminal readers.
 */
export type TerminalConfiguration = {
  bbpos_wisepos_e?: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Whether this Configuration is the default for your account
   */
  is_account_default?: boolean | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String indicating the name of the Configuration object, set by the user
   */
  name?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'terminal.configuration';
  offline?: TerminalConfigurationConfigurationResourceOfflineConfig;
  reboot_window?: TerminalConfigurationConfigurationResourceRebootWindow;
  stripe_s700?: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig;
  tipping?: TerminalConfigurationConfigurationResourceTipping;
  verifone_p400?: TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig;
  wifi?: TerminalConfigurationConfigurationResourceWifiConfig;
};
/**
 * TerminalConnectionToken
 * A Connection Token is used by the Stripe Terminal SDK to connect to a reader.
 *
 * Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
 */
export type TerminalConnectionToken = {
  /**
   * The id of the location that this connection token is scoped to. Note that location scoping only applies to internet-connected readers. For more details, see [the docs on scoping connection tokens](https://docs.stripe.com/terminal/fleet/locations-and-zones?dashboard-or-api=api#connection-tokens).
   */
  location?: string;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'terminal.connection_token';
  /**
   * Your application should pass this token to the Stripe Terminal SDK.
   */
  secret: string;
};
/**
 * TerminalLocationLocation
 * A Location represents a grouping of readers.
 *
 * Related guide: [Fleet management](https://stripe.com/docs/terminal/fleet/locations)
 */
export type TerminalLocation = {
  address: Address;
  /**
   * The ID of a configuration that will be used to customize all readers in this location.
   */
  configuration_overrides?: string;
  /**
   * The display name of the location.
   */
  display_name: string;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'terminal.location';
};
/**
 * TerminalReaderReader
 * A Reader represents a physical device for accepting payment details.
 *
 * Related guide: [Connecting to a reader](https://stripe.com/docs/terminal/payments/connect-reader)
 */
export type TerminalReader = {
  /**
   * The most recent action performed by the reader.
   */
  action?: TerminalReaderReaderResourceReaderAction | null;
  /**
   * The current software version of the reader.
   */
  device_sw_version?: string | null;
  /**
   * Device type of the reader.
   */
  device_type:
    | 'bbpos_chipper2x'
    | 'bbpos_wisepad3'
    | 'bbpos_wisepos_e'
    | 'mobile_phone_reader'
    | 'simulated_stripe_s700'
    | 'simulated_wisepos_e'
    | 'stripe_m2'
    | 'stripe_s700'
    | 'verifone_P400';
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * The local IP address of the reader.
   */
  ip_address?: string | null;
  /**
   * Custom label given to the reader for easier identification.
   */
  label: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The location identifier of the reader.
   */
  location?: (string | TerminalLocation) | null;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'terminal.reader';
  /**
   * Serial number of the reader.
   */
  serial_number: string;
  /**
   * The networking status of the reader. We do not recommend using this field in flows that may block taking payments.
   */
  status?: ('offline' | 'online') | null;
};
/**
 * TerminalConfigurationConfigurationResourceCurrencySpecificConfig
 */
export type TerminalConfigurationConfigurationResourceCurrencySpecificConfig = {
  /**
   * Fixed amounts displayed when collecting a tip
   */
  fixed_amounts?: number[] | null;
  /**
   * Percentages displayed when collecting a tip
   */
  percentages?: number[] | null;
  /**
   * Below this amount, fixed amounts will be displayed; above it, percentages will be displayed
   */
  smart_tip_threshold?: number;
};
/**
 * TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig
 */
export type TerminalConfigurationConfigurationResourceDeviceTypeSpecificConfig =
  {
    /**
     * A File ID representing an image to display on the reader
     */
    splashscreen?: string | File;
  };
/**
 * TerminalConfigurationConfigurationResourceEnterprisePEAPWifi
 */
export type TerminalConfigurationConfigurationResourceEnterprisePeapWifi = {
  /**
   * A File ID representing a PEM file containing the server certificate
   */
  ca_certificate_file?: string;
  /**
   * Password for connecting to the WiFi network
   */
  password: string;
  /**
   * Name of the WiFi network
   */
  ssid: string;
  /**
   * Username for connecting to the WiFi network
   */
  username: string;
};
/**
 * TerminalConfigurationConfigurationResourceEnterpriseTLSWifi
 */
export type TerminalConfigurationConfigurationResourceEnterpriseTlsWifi = {
  /**
   * A File ID representing a PEM file containing the server certificate
   */
  ca_certificate_file?: string;
  /**
   * A File ID representing a PEM file containing the client certificate
   */
  client_certificate_file: string;
  /**
   * A File ID representing a PEM file containing the client RSA private key
   */
  private_key_file: string;
  /**
   * Password for the private key file
   */
  private_key_file_password?: string;
  /**
   * Name of the WiFi network
   */
  ssid: string;
};
/**
 * TerminalConfigurationConfigurationResourceOfflineConfig
 */
export type TerminalConfigurationConfigurationResourceOfflineConfig = {
  /**
   * Determines whether to allow transactions to be collected while reader is offline. Defaults to false.
   */
  enabled?: boolean | null;
};
/**
 * TerminalConfigurationConfigurationResourcePersonalPSKWifi
 */
export type TerminalConfigurationConfigurationResourcePersonalPskWifi = {
  /**
   * Password for connecting to the WiFi network
   */
  password: string;
  /**
   * Name of the WiFi network
   */
  ssid: string;
};
/**
 * TerminalConfigurationConfigurationResourceRebootWindow
 */
export type TerminalConfigurationConfigurationResourceRebootWindow = {
  /**
   * Integer between 0 to 23 that represents the end hour of the reboot time window. The value must be different than the start_hour.
   */
  end_hour: number;
  /**
   * Integer between 0 to 23 that represents the start hour of the reboot time window.
   */
  start_hour: number;
};
/**
 * TerminalConfigurationConfigurationResourceTipping
 */
export type TerminalConfigurationConfigurationResourceTipping = {
  aud?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  cad?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  chf?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  czk?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  dkk?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  eur?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  gbp?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  hkd?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  jpy?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  myr?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  nok?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  nzd?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  pln?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  sek?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  sgd?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
  usd?: TerminalConfigurationConfigurationResourceCurrencySpecificConfig;
};
/**
 * TerminalConfigurationConfigurationResourceWifiConfig
 */
export type TerminalConfigurationConfigurationResourceWifiConfig = {
  enterprise_eap_peap?: TerminalConfigurationConfigurationResourceEnterprisePeapWifi;
  enterprise_eap_tls?: TerminalConfigurationConfigurationResourceEnterpriseTlsWifi;
  personal_psk?: TerminalConfigurationConfigurationResourcePersonalPskWifi;
  /**
   * Security type of the WiFi network. The hash with the corresponding name contains the credentials for this security type.
   */
  type: 'enterprise_eap_peap' | 'enterprise_eap_tls' | 'personal_psk';
};
/**
 * TerminalReaderReaderResourceCart
 * Represents a cart to be displayed on the reader
 */
export type TerminalReaderReaderResourceCart = {
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * List of line items in the cart.
   */
  line_items: TerminalReaderReaderResourceLineItem[];
  /**
   * Tax amount for the entire cart. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  tax?: number | null;
  /**
   * Total amount for the entire cart, including tax. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  total: number;
};
/**
 * TerminalReaderReaderResourceChoice
 * Choice to be selected on a Reader
 */
export type TerminalReaderReaderResourceChoice = {
  /**
   * The id to be selected
   */
  id?: string | null;
  /**
   * The button style for the choice
   */
  style?: ('primary' | 'secondary') | null;
  /**
   * The text to be selected
   */
  text: string;
};
/**
 * TerminalReaderReaderResourceCollectInputsAction
 * Represents a reader action to collect customer inputs
 */
export type TerminalReaderReaderResourceCollectInputsAction = {
  /**
   * List of inputs to be collected.
   */
  inputs: TerminalReaderReaderResourceInput[];
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
};
/**
 * TerminalReaderReaderResourceCustomText
 * Represents custom text to be displayed when collecting the input using a reader
 */
export type TerminalReaderReaderResourceCustomText = {
  /**
   * Customize the default description for this input
   */
  description?: string | null;
  /**
   * Customize the default label for this input's skip button
   */
  skip_button?: string | null;
  /**
   * Customize the default label for this input's submit button
   */
  submit_button?: string | null;
  /**
   * Customize the default title for this input
   */
  title?: string | null;
};
/**
 * TerminalReaderReaderResourceEmail
 * Information about a email being collected using a reader
 */
export type TerminalReaderReaderResourceEmail = {
  /**
   * The collected email address
   */
  value?: string | null;
};
/**
 * TerminalReaderReaderResourceInput
 * Represents an input to be collected using the reader
 */
export type TerminalReaderReaderResourceInput = {
  /**
   * Default text of input being collected.
   */
  custom_text?: TerminalReaderReaderResourceCustomText | null;
  email?: TerminalReaderReaderResourceEmail;
  numeric?: TerminalReaderReaderResourceNumeric;
  phone?: TerminalReaderReaderResourcePhone;
  /**
   * Indicate that this input is required, disabling the skip button.
   */
  required?: boolean | null;
  selection?: TerminalReaderReaderResourceSelection;
  signature?: TerminalReaderReaderResourceSignature;
  /**
   * Indicate that this input was skipped by the user.
   */
  skipped?: boolean;
  text?: TerminalReaderReaderResourceText;
  /**
   * List of toggles being collected. Values are present if collection is complete.
   */
  toggles?: TerminalReaderReaderResourceToggle[] | null;
  /**
   * Type of input being collected.
   */
  type: 'email' | 'numeric' | 'phone' | 'selection' | 'signature' | 'text';
};
/**
 * TerminalReaderReaderResourceLineItem
 * Represents a line item to be displayed on the reader
 */
export type TerminalReaderReaderResourceLineItem = {
  /**
   * The amount of the line item. A positive integer in the [smallest currency unit](https://stripe.com/docs/currencies#zero-decimal).
   */
  amount: number;
  /**
   * Description of the line item.
   */
  description: string;
  /**
   * The quantity of the line item.
   */
  quantity: number;
};
/**
 * TerminalReaderReaderResourceNumeric
 * Information about a number being collected using a reader
 */
export type TerminalReaderReaderResourceNumeric = {
  /**
   * The collected number
   */
  value?: string | null;
};
/**
 * TerminalReaderReaderResourcePhone
 * Information about a phone number being collected using a reader
 */
export type TerminalReaderReaderResourcePhone = {
  /**
   * The collected phone number
   */
  value?: string | null;
};
/**
 * TerminalReaderReaderResourceProcessConfig
 * Represents a per-transaction override of a reader configuration
 */
export type TerminalReaderReaderResourceProcessConfig = {
  /**
   * Enable customer initiated cancellation when processing this payment.
   */
  enable_customer_cancellation?: boolean;
  /**
   * If the customer does not abandon authenticating the payment, they will be redirected to this specified URL after completion.
   */
  return_url?: string;
  /**
   * Override showing a tipping selection screen on this transaction.
   */
  skip_tipping?: boolean;
  tipping?: TerminalReaderReaderResourceTippingConfig;
};
/**
 * TerminalReaderReaderResourceProcessPaymentIntentAction
 * Represents a reader action to process a payment intent
 */
export type TerminalReaderReaderResourceProcessPaymentIntentAction = {
  /**
   * Most recent PaymentIntent processed by the reader.
   */
  payment_intent: string | PaymentIntent;
  process_config?: TerminalReaderReaderResourceProcessConfig;
};
/**
 * TerminalReaderReaderResourceProcessSetupConfig
 * Represents a per-setup override of a reader configuration
 */
export type TerminalReaderReaderResourceProcessSetupConfig = {
  /**
   * Enable customer initiated cancellation when processing this SetupIntent.
   */
  enable_customer_cancellation?: boolean;
};
/**
 * TerminalReaderReaderResourceProcessSetupIntentAction
 * Represents a reader action to process a setup intent
 */
export type TerminalReaderReaderResourceProcessSetupIntentAction = {
  /**
   * ID of a card PaymentMethod generated from the card_present PaymentMethod that may be attached to a Customer for future transactions. Only present if it was possible to generate a card PaymentMethod.
   */
  generated_card?: string;
  process_config?: TerminalReaderReaderResourceProcessSetupConfig;
  /**
   * Most recent SetupIntent processed by the reader.
   */
  setup_intent: string | SetupIntent;
};
/**
 * TerminalReaderReaderResourceReaderAction
 * Represents an action performed by the reader
 */
export type TerminalReaderReaderResourceReaderAction = {
  collect_inputs?: TerminalReaderReaderResourceCollectInputsAction;
  /**
   * Failure code, only set if status is `failed`.
   */
  failure_code?: string | null;
  /**
   * Detailed failure message, only set if status is `failed`.
   */
  failure_message?: string | null;
  process_payment_intent?: TerminalReaderReaderResourceProcessPaymentIntentAction;
  process_setup_intent?: TerminalReaderReaderResourceProcessSetupIntentAction;
  refund_payment?: TerminalReaderReaderResourceRefundPaymentAction;
  set_reader_display?: TerminalReaderReaderResourceSetReaderDisplayAction;
  /**
   * Status of the action performed by the reader.
   */
  status: 'failed' | 'in_progress' | 'succeeded';
  /**
   * Type of action performed by the reader.
   */
  type:
    | 'collect_inputs'
    | 'process_payment_intent'
    | 'process_setup_intent'
    | 'refund_payment'
    | 'set_reader_display';
};
/**
 * TerminalReaderReaderResourceRefundPaymentAction
 * Represents a reader action to refund a payment
 */
export type TerminalReaderReaderResourceRefundPaymentAction = {
  /**
   * The amount being refunded.
   */
  amount?: number;
  /**
   * Charge that is being refunded.
   */
  charge?: string | Charge;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  };
  /**
   * Payment intent that is being refunded.
   */
  payment_intent?: string | PaymentIntent;
  /**
   * The reason for the refund.
   */
  reason?: 'duplicate' | 'fraudulent' | 'requested_by_customer';
  /**
   * Unique identifier for the refund object.
   */
  refund?: string | Refund;
  /**
   * Boolean indicating whether the application fee should be refunded when refunding this charge. If a full charge refund is given, the full application fee will be refunded. Otherwise, the application fee will be refunded in an amount proportional to the amount of the charge refunded. An application fee can be refunded only by the application that created the charge.
   */
  refund_application_fee?: boolean;
  refund_payment_config?: TerminalReaderReaderResourceRefundPaymentConfig;
  /**
   * Boolean indicating whether the transfer should be reversed when refunding this charge. The transfer will be reversed proportionally to the amount being refunded (either the entire or partial amount). A transfer can be reversed only by the application that created the charge.
   */
  reverse_transfer?: boolean;
};
/**
 * TerminalReaderReaderResourceRefundPaymentConfig
 * Represents a per-transaction override of a reader configuration
 */
export type TerminalReaderReaderResourceRefundPaymentConfig = {
  /**
   * Enable customer initiated cancellation when refunding this payment.
   */
  enable_customer_cancellation?: boolean;
};
/**
 * TerminalReaderReaderResourceSelection
 * Information about a selection being collected using a reader
 */
export type TerminalReaderReaderResourceSelection = {
  /**
   * List of possible choices to be selected
   */
  choices: TerminalReaderReaderResourceChoice[];
  /**
   * The id of the selected choice
   */
  id?: string | null;
  /**
   * The text of the selected choice
   */
  text?: string | null;
};
/**
 * TerminalReaderReaderResourceSetReaderDisplayAction
 * Represents a reader action to set the reader display
 */
export type TerminalReaderReaderResourceSetReaderDisplayAction = {
  /**
   * Cart object to be displayed by the reader.
   */
  cart?: TerminalReaderReaderResourceCart | null;
  /**
   * Type of information to be displayed by the reader.
   */
  type: 'cart';
};
/**
 * TerminalReaderReaderResourceSignature
 * Information about a signature being collected using a reader
 */
export type TerminalReaderReaderResourceSignature = {
  /**
   * The File ID of a collected signature image
   */
  value?: string | null;
};
/**
 * TerminalReaderReaderResourceText
 * Information about text being collected using a reader
 */
export type TerminalReaderReaderResourceText = {
  /**
   * The collected text value
   */
  value?: string | null;
};
/**
 * TerminalReaderReaderResourceTippingConfig
 * Represents a per-transaction tipping configuration
 */
export type TerminalReaderReaderResourceTippingConfig = {
  /**
   * Amount used to calculate tip suggestions on tipping selection screen for this transaction. Must be a positive integer in the smallest currency unit (e.g., 100 cents to represent $1.00 or 100 to represent ¥100, a zero-decimal currency).
   */
  amount_eligible?: number;
};
/**
 * TerminalReaderReaderResourceToggle
 * Information about an input's toggle
 */
export type TerminalReaderReaderResourceToggle = {
  /**
   * The toggle's default value
   */
  default_value?: ('disabled' | 'enabled') | null;
  /**
   * The toggle's description text
   */
  description?: string | null;
  /**
   * The toggle's title text
   */
  title?: string | null;
  /**
   * The toggle's collected value
   */
  value?: ('disabled' | 'enabled') | null;
};
/**
 * TestClock
 * A test clock enables deterministic control over objects in testmode. With a test clock, you can create
 * objects at a frozen time in the past or future, and advance to a specific future time to observe webhooks and state changes. After the clock advances,
 * you can either validate the current state of your scenario (and test your assumptions), change the current state of your scenario (and test more complex scenarios), or keep advancing forward in time.
 */
export type TestHelpersTestClock = {
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Time at which this clock is scheduled to auto delete.
   */
  deletes_after: number;
  /**
   * Time at which all objects belonging to this clock are frozen.
   */
  frozen_time: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The custom name supplied at creation.
   */
  name?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'test_helpers.test_clock';
  /**
   * The status of the Test Clock.
   */
  status: 'advancing' | 'internal_failure' | 'ready';
  status_details: BillingClocksResourceStatusDetailsStatusDetails;
};
/**
 * three_d_secure_details
 */
export type ThreeDSecureDetails = {
  /**
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authentication_flow?: ('challenge' | 'frictionless') | null;
  /**
   * The Electronic Commerce Indicator (ECI). A protocol-level field
   * indicating what degree of authentication was performed.
   */
  electronic_commerce_indicator?: ('01' | '02' | '05' | '06' | '07') | null;
  /**
   * Indicates the outcome of 3D Secure authentication.
   */
  result?:
    | (
        | 'attempt_acknowledged'
        | 'authenticated'
        | 'exempted'
        | 'failed'
        | 'not_supported'
        | 'processing_error'
      )
    | null;
  /**
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  result_reason?:
    | (
        | 'abandoned'
        | 'bypassed'
        | 'canceled'
        | 'card_not_enrolled'
        | 'network_not_supported'
        | 'protocol_error'
        | 'rejected'
      )
    | null;
  /**
   * The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
   * (dsTransId) for this payment.
   */
  transaction_id?: string | null;
  /**
   * The version of 3D Secure that was used.
   */
  version?: ('1.0.2' | '2.1.0' | '2.2.0') | null;
};
/**
 * three_d_secure_details_charge
 */
export type ThreeDSecureDetailsCharge = {
  /**
   * For authenticated transactions: how the customer was authenticated by
   * the issuing bank.
   */
  authentication_flow?: ('challenge' | 'frictionless') | null;
  /**
   * The Electronic Commerce Indicator (ECI). A protocol-level field
   * indicating what degree of authentication was performed.
   */
  electronic_commerce_indicator?: ('01' | '02' | '05' | '06' | '07') | null;
  /**
   * The exemption requested via 3DS and accepted by the issuer at authentication time.
   */
  exemption_indicator?: ('low_risk' | 'none') | null;
  /**
   * Whether Stripe requested the value of `exemption_indicator` in the transaction. This will depend on
   * the outcome of Stripe's internal risk assessment.
   */
  exemption_indicator_applied?: boolean;
  /**
   * Indicates the outcome of 3D Secure authentication.
   */
  result?:
    | (
        | 'attempt_acknowledged'
        | 'authenticated'
        | 'exempted'
        | 'failed'
        | 'not_supported'
        | 'processing_error'
      )
    | null;
  /**
   * Additional information about why 3D Secure succeeded or failed based
   * on the `result`.
   */
  result_reason?:
    | (
        | 'abandoned'
        | 'bypassed'
        | 'canceled'
        | 'card_not_enrolled'
        | 'network_not_supported'
        | 'protocol_error'
        | 'rejected'
      )
    | null;
  /**
   * The 3D Secure 1 XID or 3D Secure 2 Directory Server Transaction ID
   * (dsTransId) for this payment.
   */
  transaction_id?: string | null;
  /**
   * The version of 3D Secure that was used.
   */
  version?: ('1.0.2' | '2.1.0' | '2.2.0') | null;
};
/**
 * three_d_secure_usage
 */
export type ThreeDSecureUsage = {
  /**
   * Whether 3D Secure is supported on this card.
   */
  supported: boolean;
};
/**
 * ThresholdsResourceUsageAlertFilter
 */
export type ThresholdsResourceUsageAlertFilter = {
  /**
   * Limit the scope of the alert to this customer ID
   */
  customer?: (string | Customer) | null;
  type: 'customer';
};
/**
 * ThresholdsResourceUsageThresholdConfig
 * The usage threshold alert configuration enables setting up alerts for when a certain usage threshold on a specific meter is crossed.
 */
export type ThresholdsResourceUsageThresholdConfig = {
  /**
   * The filters allow limiting the scope of this usage alert. You can only specify up to one filter at this time.
   */
  filters?: ThresholdsResourceUsageAlertFilter[] | null;
  /**
   * The value at which this alert will trigger.
   */
  gte: number;
  /**
   * The [Billing Meter](/api/billing/meter) ID whose usage is monitored.
   */
  meter: string | BillingMeter;
  /**
   * Defines how the alert will behave.
   */
  recurrence: 'one_time';
};
/**
 * Token
 * Tokenization is the process Stripe uses to collect sensitive card or bank
 * account details, or personally identifiable information (PII), directly from
 * your customers in a secure manner. A token representing this information is
 * returned to your server to use. Use our
 * [recommended payments integrations](https://stripe.com/docs/payments) to perform this process
 * on the client-side. This guarantees that no sensitive card data touches your server,
 * and allows your integration to operate in a PCI-compliant way.
 *
 * If you can't use client-side tokenization, you can also create tokens using
 * the API with either your publishable or secret API key. If
 * your integration uses this method, you're responsible for any PCI compliance
 * that it might require, and you must keep your secret API key safe. Unlike with
 * client-side tokenization, your customer's information isn't sent directly to
 * Stripe, so we can't determine how it's handled or stored.
 *
 * You can't store or use tokens more than once. To store card or bank account
 * information for later use, create [Customer](https://stripe.com/docs/api#customers)
 * objects or [External accounts](/api#external_accounts).
 * [Radar](https://stripe.com/docs/radar), our integrated solution for automatic fraud protection,
 * performs best with integrations that use client-side tokenization.
 */
export type Token = {
  bank_account?: BankAccount;
  card?: Card;
  /**
   * IP address of the client that generates the token.
   */
  client_ip?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'token';
  /**
   * Type of the token: `account`, `bank_account`, `card`, or `pii`.
   */
  type: string;
  /**
   * Determines if you have already used this token (you can only use tokens once).
   */
  used: boolean;
};
/**
 * token_card_networks
 */
export type TokenCardNetworks = {
  /**
   * The preferred network for co-branded cards. Can be `cartes_bancaires`, `mastercard`, `visa` or `invalid_preference` if requested network is not valid for the card.
   */
  preferred?: string | null;
};
/**
 * Topup
 * To top up your Stripe balance, you create a top-up object. You can retrieve
 * individual top-ups, as well as list all top-ups. Top-ups are identified by a
 * unique, random ID.
 *
 * Related guide: [Topping up your platform account](https://stripe.com/docs/connect/top-ups)
 */
export type Topup = {
  /**
   * Amount transferred.
   */
  amount: number;
  /**
   * ID of the balance transaction that describes the impact of this top-up on your account balance. May not be specified depending on status of top-up.
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Date the funds are expected to arrive in your Stripe account for payouts. This factors in delays like weekends or bank holidays. May not be specified depending on status of top-up.
   */
  expected_availability_date?: number | null;
  /**
   * Error code explaining reason for top-up failure if available (see [the errors section](https://stripe.com/docs/api#errors) for a list of codes).
   */
  failure_code?: string | null;
  /**
   * Message to user further explaining reason for top-up failure if available.
   */
  failure_message?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'topup';
  /**
   * The source field is deprecated. It might not always be present in the API response.
   */
  source?: Source | null;
  /**
   * Extra information about a top-up. This will appear on your source's bank statement. It must contain at least one letter.
   */
  statement_descriptor?: string | null;
  /**
   * The status of the top-up is either `canceled`, `failed`, `pending`, `reversed`, or `succeeded`.
   */
  status: 'canceled' | 'failed' | 'pending' | 'reversed' | 'succeeded';
  /**
   * A string that identifies this top-up as part of a group.
   */
  transfer_group?: string | null;
};
/**
 * Transfer
 * A `Transfer` object is created when you move funds between Stripe accounts as
 * part of Connect.
 *
 * Before April 6, 2017, transfers also represented movement of funds from a
 * Stripe account to a card or bank account. This behavior has since been split
 * out into a [Payout](https://stripe.com/docs/api#payout_object) object, with corresponding payout endpoints. For more
 * information, read about the
 * [transfer/payout split](https://stripe.com/docs/transfer-payout-split).
 *
 * Related guide: [Creating separate charges and transfers](https://stripe.com/docs/connect/separate-charges-and-transfers)
 */
export type Transfer = {
  /**
   * Amount in cents (or local equivalent) to be transferred.
   */
  amount: number;
  /**
   * Amount in cents (or local equivalent) reversed (can be less than the amount attribute on the transfer if a partial reversal was issued).
   */
  amount_reversed: number;
  /**
   * Balance transaction that describes the impact of this transfer on your account balance.
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * Time that this record of the transfer was first created.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * ID of the Stripe account the transfer was sent to.
   */
  destination?: (string | Account) | null;
  /**
   * If the destination is a Stripe account, this will be the ID of the payment that the destination account received for the transfer.
   */
  destination_payment?: string | Charge;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'transfer';
  /**
   * TransferReversalList
   * A list of reversals that have been applied to the transfer.
   */
  reversals: {
    /**
     * Details about each object.
     */
    data: TransferReversal[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  };
  /**
   * Whether the transfer has been fully reversed. If the transfer is only partially reversed, this attribute will still be false.
   */
  reversed: boolean;
  /**
   * ID of the charge that was used to fund the transfer. If null, the transfer was funded from the available balance.
   */
  source_transaction?: (string | Charge) | null;
  /**
   * The source balance this transfer came from. One of `card`, `fpx`, or `bank_account`.
   */
  source_type?: string;
  /**
   * A string that identifies this transaction as part of a group. See the [Connect documentation](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options) for details.
   */
  transfer_group?: string | null;
};
/**
 * transfer_data
 */
export type TransferData = {
  /**
   * The amount transferred to the destination account. This transfer will occur automatically after the payment succeeds. If no amount is specified, by default the entire payment amount is transferred to the destination account.
   *  The amount must be less than or equal to the [amount](https://stripe.com/docs/api/payment_intents/object#payment_intent_object-amount), and must be a positive integer
   *  representing how much to transfer in the smallest currency unit (e.g., 100 cents to charge $1.00).
   */
  amount?: number;
  /**
   * The account (if any) that the payment is attributed to for tax reporting, and where funds from the payment are transferred to after payment success.
   */
  destination: string | Account;
};
/**
 * TransferReversal
 * [Stripe Connect](https://stripe.com/docs/connect) platforms can reverse transfers made to a
 * connected account, either entirely or partially, and can also specify whether
 * to refund any related application fees. Transfer reversals add to the
 * platform's balance and subtract from the destination account's balance.
 *
 * Reversing a transfer that was made for a [destination
 * charge](/docs/connect/destination-charges) is allowed only up to the amount of
 * the charge. It is possible to reverse a
 * [transfer_group](https://stripe.com/docs/connect/separate-charges-and-transfers#transfer-options)
 * transfer only if the destination account has enough balance to cover the
 * reversal.
 *
 * Related guide: [Reverse transfers](https://stripe.com/docs/connect/separate-charges-and-transfers#reverse-transfers)
 */
export type TransferReversal = {
  /**
   * Amount, in cents (or local equivalent).
   */
  amount: number;
  /**
   * Balance transaction that describes the impact on your account balance.
   */
  balance_transaction?: (string | BalanceTransaction) | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * Linked payment refund for the transfer reversal.
   */
  destination_payment_refund?: (string | Refund) | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'transfer_reversal';
  /**
   * ID of the refund responsible for the transfer reversal.
   */
  source_refund?: (string | Refund) | null;
  /**
   * ID of the transfer that was reversed.
   */
  transfer: string | Transfer;
};
/**
 * TransferSchedule
 */
export type TransferSchedule = {
  /**
   * The number of days charges for the account will be held before being paid out.
   */
  delay_days: number;
  /**
   * How frequently funds will be paid out. One of `manual` (payouts only created via API call), `daily`, `weekly`, or `monthly`.
   */
  interval: string;
  /**
   * The day of the month funds will be paid out. Only shown if `interval` is monthly. Payouts scheduled between the 29th and 31st of the month are sent on the last day of shorter months.
   */
  monthly_anchor?: number;
  /**
   * The day of the week funds will be paid out, of the style 'monday', 'tuesday', etc. Only shown if `interval` is weekly.
   */
  weekly_anchor?: string;
};
/**
 * TransformQuantity
 */
export type TransformQuantity = {
  /**
   * Divide usage by this number.
   */
  divide_by: number;
  /**
   * After division, either round the result `up` or `down`.
   */
  round: 'down' | 'up';
};
/**
 * TransformUsage
 */
export type TransformUsage = {
  /**
   * Divide usage by this number.
   */
  divide_by: number;
  /**
   * After division, either round the result `up` or `down`.
   */
  round: 'down' | 'up';
};
/**
 * TreasuryReceivedCreditsResourceCreditReversal
 * You can reverse some [ReceivedCredits](https://stripe.com/docs/api#received_credits) depending on their network and source flow. Reversing a ReceivedCredit leads to the creation of a new object known as a CreditReversal.
 */
export type TreasuryCreditReversal = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The FinancialAccount to reverse funds from.
   */
  financial_account: string;
  /**
   * A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
   */
  hosted_regulatory_receipt_url?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The rails used to reverse the funds.
   */
  network: 'ach' | 'stripe';
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.credit_reversal';
  /**
   * The ReceivedCredit being reversed.
   */
  received_credit: string;
  /**
   * Status of the CreditReversal
   */
  status: 'canceled' | 'posted' | 'processing';
  status_transitions: TreasuryReceivedCreditsResourceStatusTransitions;
  /**
   * The Transaction associated with this object.
   */
  transaction?: (string | TreasuryTransaction) | null;
};
/**
 * TreasuryReceivedDebitsResourceDebitReversal
 * You can reverse some [ReceivedDebits](https://stripe.com/docs/api#received_debits) depending on their network and source flow. Reversing a ReceivedDebit leads to the creation of a new object known as a DebitReversal.
 */
export type TreasuryDebitReversal = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * The FinancialAccount to reverse funds from.
   */
  financial_account?: string | null;
  /**
   * A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
   */
  hosted_regulatory_receipt_url?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Other flows linked to a DebitReversal.
   */
  linked_flows?: TreasuryReceivedDebitsResourceDebitReversalLinkedFlows | null;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * The rails used to reverse the funds.
   */
  network: 'ach' | 'card';
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.debit_reversal';
  /**
   * The ReceivedDebit being reversed.
   */
  received_debit: string;
  /**
   * Status of the DebitReversal
   */
  status: 'failed' | 'processing' | 'succeeded';
  status_transitions: TreasuryReceivedDebitsResourceStatusTransitions;
  /**
   * The Transaction associated with this object.
   */
  transaction?: (string | TreasuryTransaction) | null;
};
/**
 * TreasuryFinancialAccountsResourceFinancialAccount
 * Stripe Treasury provides users with a container for money called a FinancialAccount that is separate from their Payments balance.
 * FinancialAccounts serve as the source and destination of Treasury’s money movement APIs.
 */
export type TreasuryFinancialAccount = {
  /**
   * The array of paths to active Features in the Features hash.
   */
  active_features?: (
    | 'card_issuing'
    | 'deposit_insurance'
    | 'financial_addresses.aba'
    | 'financial_addresses.aba.forwarding'
    | 'inbound_transfers.ach'
    | 'intra_stripe_flows'
    | 'outbound_payments.ach'
    | 'outbound_payments.us_domestic_wire'
    | 'outbound_transfers.ach'
    | 'outbound_transfers.us_domestic_wire'
    | 'remote_deposit_capture'
  )[];
  balance: TreasuryFinancialAccountsResourceBalance;
  /**
   * Two-letter country code ([ISO 3166-1 alpha-2](https://en.wikipedia.org/wiki/ISO_3166-1_alpha-2)).
   */
  country: string;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  features?: TreasuryFinancialAccountFeatures;
  /**
   * The set of credentials that resolve to a FinancialAccount.
   */
  financial_addresses: TreasuryFinancialAccountsResourceFinancialAddress[];
  /**
   * Unique identifier for the object.
   */
  id: string;
  is_default?: boolean;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata?: {
    [key: string]: string;
  } | null;
  /**
   * The nickname for the FinancialAccount.
   */
  nickname?: string | null;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.financial_account';
  /**
   * The array of paths to pending Features in the Features hash.
   */
  pending_features?: (
    | 'card_issuing'
    | 'deposit_insurance'
    | 'financial_addresses.aba'
    | 'financial_addresses.aba.forwarding'
    | 'inbound_transfers.ach'
    | 'intra_stripe_flows'
    | 'outbound_payments.ach'
    | 'outbound_payments.us_domestic_wire'
    | 'outbound_transfers.ach'
    | 'outbound_transfers.us_domestic_wire'
    | 'remote_deposit_capture'
  )[];
  /**
   * The set of functionalities that the platform can restrict on the FinancialAccount.
   */
  platform_restrictions?: TreasuryFinancialAccountsResourcePlatformRestrictions | null;
  /**
   * The array of paths to restricted Features in the Features hash.
   */
  restricted_features?: (
    | 'card_issuing'
    | 'deposit_insurance'
    | 'financial_addresses.aba'
    | 'financial_addresses.aba.forwarding'
    | 'inbound_transfers.ach'
    | 'intra_stripe_flows'
    | 'outbound_payments.ach'
    | 'outbound_payments.us_domestic_wire'
    | 'outbound_transfers.ach'
    | 'outbound_transfers.us_domestic_wire'
    | 'remote_deposit_capture'
  )[];
  /**
   * Status of this FinancialAccount.
   */
  status: 'closed' | 'open';
  status_details: TreasuryFinancialAccountsResourceStatusDetails;
  /**
   * The currencies the FinancialAccount can hold a balance in. Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase.
   */
  supported_currencies: string[];
};
/**
 * TreasuryFinancialAccountsResourceFinancialAccountFeatures
 * Encodes whether a FinancialAccount has access to a particular Feature, with a `status` enum and associated `status_details`.
 * Stripe or the platform can control Features via the requested field.
 */
export type TreasuryFinancialAccountFeatures = {
  card_issuing?: TreasuryFinancialAccountsResourceToggleSettings;
  deposit_insurance?: TreasuryFinancialAccountsResourceToggleSettings;
  financial_addresses?: TreasuryFinancialAccountsResourceFinancialAddressesFeatures;
  inbound_transfers?: TreasuryFinancialAccountsResourceInboundTransfers;
  intra_stripe_flows?: TreasuryFinancialAccountsResourceToggleSettings;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.financial_account_features';
  outbound_payments?: TreasuryFinancialAccountsResourceOutboundPayments;
  outbound_transfers?: TreasuryFinancialAccountsResourceOutboundTransfers;
};
/**
 * TreasuryInboundTransfersResourceInboundTransfer
 * Use [InboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers) to add funds to your [FinancialAccount](https://stripe.com/docs/api#financial_accounts) via a PaymentMethod that is owned by you. The funds will be transferred via an ACH debit.
 *
 * Related guide: [Moving money with Treasury using InboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/into/inbound-transfers)
 */
export type TreasuryInboundTransfer = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  /**
   * Returns `true` if the InboundTransfer is able to be canceled.
   */
  cancelable: boolean;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * Details about this InboundTransfer's failure. Only set when status is `failed`.
   */
  failure_details?: TreasuryInboundTransfersResourceFailureDetails | null;
  /**
   * The FinancialAccount that received the funds.
   */
  financial_account: string;
  /**
   * A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
   */
  hosted_regulatory_receipt_url?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  linked_flows: TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.inbound_transfer';
  /**
   * The origin payment method to be debited for an InboundTransfer.
   */
  origin_payment_method?: string | null;
  /**
   * Details about the PaymentMethod for an InboundTransfer.
   */
  origin_payment_method_details?: InboundTransfers | null;
  /**
   * Returns `true` if the funds for an InboundTransfer were returned after the InboundTransfer went to the `succeeded` state.
   */
  returned?: boolean | null;
  /**
   * Statement descriptor shown when funds are debited from the source. Not all payment networks support `statement_descriptor`.
   */
  statement_descriptor: string;
  /**
   * Status of the InboundTransfer: `processing`, `succeeded`, `failed`, and `canceled`. An InboundTransfer is `processing` if it is created and pending. The status changes to `succeeded` once the funds have been "confirmed" and a `transaction` is created and posted. The status changes to `failed` if the transfer fails.
   */
  status: 'canceled' | 'failed' | 'processing' | 'succeeded';
  status_transitions: TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions;
  /**
   * The Transaction associated with this object.
   */
  transaction?: (string | TreasuryTransaction) | null;
};
/**
 * TreasuryOutboundPaymentsResourceOutboundPayment
 * Use [OutboundPayments](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments) to send funds to another party's external bank account or [FinancialAccount](https://stripe.com/docs/api#financial_accounts). To send money to an account belonging to the same user, use an [OutboundTransfer](https://stripe.com/docs/api#outbound_transfers).
 *
 * Simulate OutboundPayment state changes with the `/v1/test_helpers/treasury/outbound_payments` endpoints. These methods can only be called on test mode objects.
 *
 * Related guide: [Moving money with Treasury using OutboundPayment objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-payments)
 */
export type TreasuryOutboundPayment = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  /**
   * Returns `true` if the object can be canceled, and `false` otherwise.
   */
  cancelable: boolean;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * ID of the [customer](https://stripe.com/docs/api/customers) to whom an OutboundPayment is sent.
   */
  customer?: string | null;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * The PaymentMethod via which an OutboundPayment is sent. This field can be empty if the OutboundPayment was created using `destination_payment_method_data`.
   */
  destination_payment_method?: string | null;
  /**
   * Details about the PaymentMethod for an OutboundPayment.
   */
  destination_payment_method_details?: OutboundPaymentsPaymentMethodDetails | null;
  /**
   * Details about the end user.
   */
  end_user_details?: TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails | null;
  /**
   * The date when funds are expected to arrive in the destination account.
   */
  expected_arrival_date: number;
  /**
   * The FinancialAccount that funds were pulled from.
   */
  financial_account: string;
  /**
   * A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
   */
  hosted_regulatory_receipt_url?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.outbound_payment';
  /**
   * Details about a returned OutboundPayment. Only set when the status is `returned`.
   */
  returned_details?: TreasuryOutboundPaymentsResourceReturnedStatus | null;
  /**
   * The description that appears on the receiving end for an OutboundPayment (for example, bank statement for external bank transfer).
   */
  statement_descriptor: string;
  /**
   * Current status of the OutboundPayment: `processing`, `failed`, `posted`, `returned`, `canceled`. An OutboundPayment is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundPayment has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundPayment fails to arrive at its destination, its status will change to `returned`.
   */
  status: 'canceled' | 'failed' | 'posted' | 'processing' | 'returned';
  status_transitions: TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions;
  /**
   * Details about network-specific tracking information if available.
   */
  tracking_details?: TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetails | null;
  /**
   * The Transaction associated with this object.
   */
  transaction: string | TreasuryTransaction;
};
/**
 * TreasuryOutboundTransfersResourceOutboundTransfer
 * Use [OutboundTransfers](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers) to transfer funds from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) to a PaymentMethod belonging to the same entity. To send funds to a different party, use [OutboundPayments](https://stripe.com/docs/api#outbound_payments) instead. You can send funds over ACH rails or through a domestic wire transfer to a user's own external bank account.
 *
 * Simulate OutboundTransfer state changes with the `/v1/test_helpers/treasury/outbound_transfers` endpoints. These methods can only be called on test mode objects.
 *
 * Related guide: [Moving money with Treasury using OutboundTransfer objects](https://docs.stripe.com/docs/treasury/moving-money/financial-accounts/out-of/outbound-transfers)
 */
export type TreasuryOutboundTransfer = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  /**
   * Returns `true` if the object can be canceled, and `false` otherwise.
   */
  cancelable: boolean;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description?: string | null;
  /**
   * The PaymentMethod used as the payment instrument for an OutboundTransfer.
   */
  destination_payment_method?: string | null;
  destination_payment_method_details: OutboundTransfersPaymentMethodDetails;
  /**
   * The date when funds are expected to arrive in the destination account.
   */
  expected_arrival_date: number;
  /**
   * The FinancialAccount that funds were pulled from.
   */
  financial_account: string;
  /**
   * A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
   */
  hosted_regulatory_receipt_url?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.outbound_transfer';
  /**
   * Details about a returned OutboundTransfer. Only set when the status is `returned`.
   */
  returned_details?: TreasuryOutboundTransfersResourceReturnedDetails | null;
  /**
   * Information about the OutboundTransfer to be sent to the recipient account.
   */
  statement_descriptor: string;
  /**
   * Current status of the OutboundTransfer: `processing`, `failed`, `canceled`, `posted`, `returned`. An OutboundTransfer is `processing` if it has been created and is pending. The status changes to `posted` once the OutboundTransfer has been "confirmed" and funds have left the account, or to `failed` or `canceled`. If an OutboundTransfer fails to arrive at its destination, its status will change to `returned`.
   */
  status: 'canceled' | 'failed' | 'posted' | 'processing' | 'returned';
  status_transitions: TreasuryOutboundTransfersResourceStatusTransitions;
  /**
   * Details about network-specific tracking information if available.
   */
  tracking_details?: TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetails | null;
  /**
   * The Transaction associated with this object.
   */
  transaction: string | TreasuryTransaction;
};
/**
 * TreasuryReceivedCreditsResourceReceivedCredit
 * ReceivedCredits represent funds sent to a [FinancialAccount](https://stripe.com/docs/api#financial_accounts) (for example, via ACH or wire). These money movements are not initiated from the FinancialAccount.
 */
export type TreasuryReceivedCredit = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description: string;
  /**
   * Reason for the failure. A ReceivedCredit might fail because the receiving FinancialAccount is closed or frozen.
   */
  failure_code?:
    | (
        | 'account_closed'
        | 'account_frozen'
        | 'international_transaction'
        | 'other'
      )
    | null;
  /**
   * The FinancialAccount that received the funds.
   */
  financial_account?: string | null;
  /**
   * A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
   */
  hosted_regulatory_receipt_url?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  initiating_payment_method_details: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails;
  linked_flows: TreasuryReceivedCreditsResourceLinkedFlows;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The rails used to send the funds.
   */
  network: 'ach' | 'card' | 'stripe' | 'us_domestic_wire';
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.received_credit';
  /**
   * Details describing when a ReceivedCredit may be reversed.
   */
  reversal_details?: TreasuryReceivedCreditsResourceReversalDetails | null;
  /**
   * Status of the ReceivedCredit. ReceivedCredits are created either `succeeded` (approved) or `failed` (declined). If a ReceivedCredit is declined, the failure reason can be found in the `failure_code` field.
   */
  status: 'failed' | 'succeeded';
  /**
   * The Transaction associated with this object.
   */
  transaction?: (string | TreasuryTransaction) | null;
};
/**
 * TreasuryReceivedDebitsResourceReceivedDebit
 * ReceivedDebits represent funds pulled from a [FinancialAccount](https://stripe.com/docs/api#financial_accounts). These are not initiated from the FinancialAccount.
 */
export type TreasuryReceivedDebit = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description: string;
  /**
   * Reason for the failure. A ReceivedDebit might fail because the FinancialAccount doesn't have sufficient funds, is closed, or is frozen.
   */
  failure_code?:
    | (
        | 'account_closed'
        | 'account_frozen'
        | 'insufficient_funds'
        | 'international_transaction'
        | 'other'
      )
    | null;
  /**
   * The FinancialAccount that funds were pulled from.
   */
  financial_account?: string | null;
  /**
   * A [hosted transaction receipt](https://stripe.com/docs/treasury/moving-money/regulatory-receipts) URL that is provided when money movement is considered regulated under Stripe's money transmission licenses.
   */
  hosted_regulatory_receipt_url?: string | null;
  /**
   * Unique identifier for the object.
   */
  id: string;
  initiating_payment_method_details?: TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails;
  linked_flows: TreasuryReceivedDebitsResourceLinkedFlows;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * The network used for the ReceivedDebit.
   */
  network: 'ach' | 'card' | 'stripe';
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.received_debit';
  /**
   * Details describing when a ReceivedDebit might be reversed.
   */
  reversal_details?: TreasuryReceivedDebitsResourceReversalDetails | null;
  /**
   * Status of the ReceivedDebit. ReceivedDebits are created with a status of either `succeeded` (approved) or `failed` (declined). The failure reason can be found under the `failure_code`.
   */
  status: 'failed' | 'succeeded';
  /**
   * The Transaction associated with this object.
   */
  transaction?: (string | TreasuryTransaction) | null;
};
/**
 * TreasuryTransactionsResourceTransaction
 * Transactions represent changes to a [FinancialAccount's](https://stripe.com/docs/api#financial_accounts) balance.
 */
export type TreasuryTransaction = {
  /**
   * Amount (in cents) transferred.
   */
  amount: number;
  balance_impact: TreasuryTransactionsResourceBalanceImpact;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * An arbitrary string attached to the object. Often useful for displaying to users.
   */
  description: string;
  /**
   * TreasuryTransactionsResourceTransactionEntryList
   * A list of TransactionEntries that are part of this Transaction. This cannot be expanded in any list endpoints.
   */
  entries?: {
    /**
     * Details about each object.
     */
    data: TreasuryTransactionEntry[];
    /**
     * True if this list has another page of items after this one that can be fetched.
     */
    has_more: boolean;
    /**
     * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
     */
    object: 'list';
    /**
     * The URL where this list can be accessed.
     */
    url: string;
  } | null;
  /**
   * The FinancialAccount associated with this object.
   */
  financial_account: string;
  /**
   * ID of the flow that created the Transaction.
   */
  flow?: string | null;
  /**
   * Details of the flow that created the Transaction.
   */
  flow_details?: TreasuryTransactionsResourceFlowDetails | null;
  /**
   * Type of the flow that created the Transaction.
   */
  flow_type:
    | 'credit_reversal'
    | 'debit_reversal'
    | 'inbound_transfer'
    | 'issuing_authorization'
    | 'other'
    | 'outbound_payment'
    | 'outbound_transfer'
    | 'received_credit'
    | 'received_debit';
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.transaction';
  /**
   * Status of the Transaction.
   */
  status: 'open' | 'posted' | 'void';
  status_transitions: TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions;
};
/**
 * TreasuryTransactionsResourceTransactionEntry
 * TransactionEntries represent individual units of money movements within a single [Transaction](https://stripe.com/docs/api#transactions).
 */
export type TreasuryTransactionEntry = {
  balance_impact: TreasuryTransactionsResourceBalanceImpact;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * Three-letter [ISO currency code](https://www.iso.org/iso-4217-currency-codes.html), in lowercase. Must be a [supported currency](https://stripe.com/docs/currencies).
   */
  currency: string;
  /**
   * When the TransactionEntry will impact the FinancialAccount's balance.
   */
  effective_at: number;
  /**
   * The FinancialAccount associated with this object.
   */
  financial_account: string;
  /**
   * Token of the flow associated with the TransactionEntry.
   */
  flow?: string | null;
  /**
   * Details of the flow associated with the TransactionEntry.
   */
  flow_details?: TreasuryTransactionsResourceFlowDetails | null;
  /**
   * Type of the flow associated with the TransactionEntry.
   */
  flow_type:
    | 'credit_reversal'
    | 'debit_reversal'
    | 'inbound_transfer'
    | 'issuing_authorization'
    | 'other'
    | 'outbound_payment'
    | 'outbound_transfer'
    | 'received_credit'
    | 'received_debit';
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'treasury.transaction_entry';
  /**
   * The Transaction associated with this object.
   */
  transaction: string | TreasuryTransaction;
  /**
   * The specific money movement that generated the TransactionEntry.
   */
  type:
    | 'credit_reversal'
    | 'credit_reversal_posting'
    | 'debit_reversal'
    | 'inbound_transfer'
    | 'inbound_transfer_return'
    | 'issuing_authorization_hold'
    | 'issuing_authorization_release'
    | 'other'
    | 'outbound_payment'
    | 'outbound_payment_cancellation'
    | 'outbound_payment_failure'
    | 'outbound_payment_posting'
    | 'outbound_payment_return'
    | 'outbound_transfer'
    | 'outbound_transfer_cancellation'
    | 'outbound_transfer_failure'
    | 'outbound_transfer_posting'
    | 'outbound_transfer_return'
    | 'received_credit'
    | 'received_debit';
};
/**
 * TreasuryFinancialAccountsResourceABARecord
 * ABA Records contain U.S. bank account details per the ABA format.
 */
export type TreasuryFinancialAccountsResourceAbaRecord = {
  /**
   * The name of the person or business that owns the bank account.
   */
  account_holder_name: string;
  /**
   * The account number.
   */
  account_number?: string | null;
  /**
   * The last four characters of the account number.
   */
  account_number_last4: string;
  /**
   * Name of the bank.
   */
  bank_name: string;
  /**
   * Routing number for the account.
   */
  routing_number: string;
};
/**
 * TreasuryFinancialAccountsResourceAbaToggleSettings
 * Toggle settings for enabling/disabling the ABA address feature
 */
export type TreasuryFinancialAccountsResourceAbaToggleSettings = {
  /**
   * Whether the FinancialAccount should have the Feature.
   */
  requested: boolean;
  /**
   * Whether the Feature is operational.
   */
  status: 'active' | 'pending' | 'restricted';
  /**
   * Additional details; includes at least one entry when the status is not `active`.
   */
  status_details: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails[];
};
/**
 * TreasuryFinancialAccountsResourceBalance
 * Balance information for the FinancialAccount
 */
export type TreasuryFinancialAccountsResourceBalance = {
  /**
   * Funds the user can spend right now.
   */
  cash: {
    [key: string]: number;
  };
  /**
   * Funds not spendable yet, but will become available at a later time.
   */
  inbound_pending: {
    [key: string]: number;
  };
  /**
   * Funds in the account, but not spendable because they are being held for pending outbound flows.
   */
  outbound_pending: {
    [key: string]: number;
  };
};
/**
 * TreasuryFinancialAccountsResourceClosedStatusDetails
 */
export type TreasuryFinancialAccountsResourceClosedStatusDetails = {
  /**
   * The array that contains reasons for a FinancialAccount closure.
   */
  reasons: ('account_rejected' | 'closed_by_platform' | 'other')[];
};
/**
 * TreasuryFinancialAccountsResourceFinancialAddress
 * FinancialAddresses contain identifying information that resolves to a FinancialAccount.
 */
export type TreasuryFinancialAccountsResourceFinancialAddress = {
  aba?: TreasuryFinancialAccountsResourceAbaRecord;
  /**
   * The list of networks that the address supports
   */
  supported_networks?: ('ach' | 'us_domestic_wire')[];
  /**
   * The type of financial address
   */
  type: 'aba';
};
/**
 * TreasuryFinancialAccountsResourceFinancialAddressesFeatures
 * Settings related to Financial Addresses features on a Financial Account
 */
export type TreasuryFinancialAccountsResourceFinancialAddressesFeatures = {
  aba?: TreasuryFinancialAccountsResourceAbaToggleSettings;
};
/**
 * TreasuryFinancialAccountsResourceInboundAchToggleSettings
 * Toggle settings for enabling/disabling an inbound ACH specific feature
 */
export type TreasuryFinancialAccountsResourceInboundAchToggleSettings = {
  /**
   * Whether the FinancialAccount should have the Feature.
   */
  requested: boolean;
  /**
   * Whether the Feature is operational.
   */
  status: 'active' | 'pending' | 'restricted';
  /**
   * Additional details; includes at least one entry when the status is not `active`.
   */
  status_details: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails[];
};
/**
 * TreasuryFinancialAccountsResourceInboundTransfers
 * InboundTransfers contains inbound transfers features for a FinancialAccount.
 */
export type TreasuryFinancialAccountsResourceInboundTransfers = {
  ach?: TreasuryFinancialAccountsResourceInboundAchToggleSettings;
};
/**
 * TreasuryFinancialAccountsResourceOutboundAchToggleSettings
 * Toggle settings for enabling/disabling an outbound ACH specific feature
 */
export type TreasuryFinancialAccountsResourceOutboundAchToggleSettings = {
  /**
   * Whether the FinancialAccount should have the Feature.
   */
  requested: boolean;
  /**
   * Whether the Feature is operational.
   */
  status: 'active' | 'pending' | 'restricted';
  /**
   * Additional details; includes at least one entry when the status is not `active`.
   */
  status_details: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails[];
};
/**
 * TreasuryFinancialAccountsResourceOutboundPayments
 * Settings related to Outbound Payments features on a Financial Account
 */
export type TreasuryFinancialAccountsResourceOutboundPayments = {
  ach?: TreasuryFinancialAccountsResourceOutboundAchToggleSettings;
  us_domestic_wire?: TreasuryFinancialAccountsResourceToggleSettings;
};
/**
 * TreasuryFinancialAccountsResourceOutboundTransfers
 * OutboundTransfers contains outbound transfers features for a FinancialAccount.
 */
export type TreasuryFinancialAccountsResourceOutboundTransfers = {
  ach?: TreasuryFinancialAccountsResourceOutboundAchToggleSettings;
  us_domestic_wire?: TreasuryFinancialAccountsResourceToggleSettings;
};
/**
 * TreasuryFinancialAccountsResourcePlatformRestrictions
 * Restrictions that a Connect Platform has placed on this FinancialAccount.
 */
export type TreasuryFinancialAccountsResourcePlatformRestrictions = {
  /**
   * Restricts all inbound money movement.
   */
  inbound_flows?: ('restricted' | 'unrestricted') | null;
  /**
   * Restricts all outbound money movement.
   */
  outbound_flows?: ('restricted' | 'unrestricted') | null;
};
/**
 * TreasuryFinancialAccountsResourceStatusDetails
 */
export type TreasuryFinancialAccountsResourceStatusDetails = {
  /**
   * Details related to the closure of this FinancialAccount
   */
  closed?: TreasuryFinancialAccountsResourceClosedStatusDetails | null;
};
/**
 * TreasuryFinancialAccountsResourceToggleSettings
 * Toggle settings for enabling/disabling a feature
 */
export type TreasuryFinancialAccountsResourceToggleSettings = {
  /**
   * Whether the FinancialAccount should have the Feature.
   */
  requested: boolean;
  /**
   * Whether the Feature is operational.
   */
  status: 'active' | 'pending' | 'restricted';
  /**
   * Additional details; includes at least one entry when the status is not `active`.
   */
  status_details: TreasuryFinancialAccountsResourceTogglesSettingStatusDetails[];
};
/**
 * TreasuryFinancialAccountsResourceTogglesSettingStatusDetails
 * Additional details on the FinancialAccount Features information.
 */
export type TreasuryFinancialAccountsResourceTogglesSettingStatusDetails = {
  /**
   * Represents the reason why the status is `pending` or `restricted`.
   */
  code:
    | 'activating'
    | 'capability_not_requested'
    | 'financial_account_closed'
    | 'rejected_other'
    | 'rejected_unsupported_business'
    | 'requirements_past_due'
    | 'requirements_pending_verification'
    | 'restricted_by_platform'
    | 'restricted_other';
  /**
   * Represents what the user should do, if anything, to activate the Feature.
   */
  resolution?:
    | ('contact_stripe' | 'provide_information' | 'remove_restriction')
    | null;
  /**
   * The `platform_restrictions` that are restricting this Feature.
   */
  restriction?: 'inbound_flows' | 'outbound_flows';
};
/**
 * TreasuryInboundTransfersResourceFailureDetails
 */
export type TreasuryInboundTransfersResourceFailureDetails = {
  /**
   * Reason for the failure.
   */
  code:
    | 'account_closed'
    | 'account_frozen'
    | 'bank_account_restricted'
    | 'bank_ownership_changed'
    | 'debit_not_authorized'
    | 'incorrect_account_holder_address'
    | 'incorrect_account_holder_name'
    | 'incorrect_account_holder_tax_id'
    | 'insufficient_funds'
    | 'invalid_account_number'
    | 'invalid_currency'
    | 'no_account'
    | 'other';
};
/**
 * TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows
 */
export type TreasuryInboundTransfersResourceInboundTransferResourceLinkedFlows =
  {
    /**
     * If funds for this flow were returned after the flow went to the `succeeded` state, this field contains a reference to the ReceivedDebit return.
     */
    received_debit?: string | null;
  };
/**
 * TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions
 */
export type TreasuryInboundTransfersResourceInboundTransferResourceStatusTransitions =
  {
    /**
     * Timestamp describing when an InboundTransfer changed status to `canceled`.
     */
    canceled_at?: number | null;
    /**
     * Timestamp describing when an InboundTransfer changed status to `failed`.
     */
    failed_at?: number | null;
    /**
     * Timestamp describing when an InboundTransfer changed status to `succeeded`.
     */
    succeeded_at?: number | null;
  };
/**
 * TreasuryOutboundPaymentsResourceACHTrackingDetails
 */
export type TreasuryOutboundPaymentsResourceAchTrackingDetails = {
  /**
   * ACH trace ID of the OutboundPayment for payments sent over the `ach` network.
   */
  trace_id: string;
};
/**
 * TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails
 */
export type TreasuryOutboundPaymentsResourceOutboundPaymentResourceEndUserDetails =
  {
    /**
     * IP address of the user initiating the OutboundPayment. Set if `present` is set to `true`. IP address collection is required for risk and compliance reasons. This will be used to help determine if the OutboundPayment is authorized or should be blocked.
     */
    ip_address?: string | null;
    /**
     * `true` if the OutboundPayment creation request is being made on behalf of an end user by a platform. Otherwise, `false`.
     */
    present: boolean;
  };
/**
 * TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions
 */
export type TreasuryOutboundPaymentsResourceOutboundPaymentResourceStatusTransitions =
  {
    /**
     * Timestamp describing when an OutboundPayment changed status to `canceled`.
     */
    canceled_at?: number | null;
    /**
     * Timestamp describing when an OutboundPayment changed status to `failed`.
     */
    failed_at?: number | null;
    /**
     * Timestamp describing when an OutboundPayment changed status to `posted`.
     */
    posted_at?: number | null;
    /**
     * Timestamp describing when an OutboundPayment changed status to `returned`.
     */
    returned_at?: number | null;
  };
/**
 * TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetails
 */
export type TreasuryOutboundPaymentsResourceOutboundPaymentResourceTrackingDetails =
  {
    ach?: TreasuryOutboundPaymentsResourceAchTrackingDetails;
    /**
     * The US bank account network used to send funds.
     */
    type: 'ach' | 'us_domestic_wire';
    us_domestic_wire?: TreasuryOutboundPaymentsResourceUsDomesticWireTrackingDetails;
  };
/**
 * TreasuryOutboundPaymentsResourceReturnedStatus
 */
export type TreasuryOutboundPaymentsResourceReturnedStatus = {
  /**
   * Reason for the return.
   */
  code:
    | 'account_closed'
    | 'account_frozen'
    | 'bank_account_restricted'
    | 'bank_ownership_changed'
    | 'declined'
    | 'incorrect_account_holder_name'
    | 'invalid_account_number'
    | 'invalid_currency'
    | 'no_account'
    | 'other';
  /**
   * The Transaction associated with this object.
   */
  transaction: string | TreasuryTransaction;
};
/**
 * TreasuryOutboundPaymentsResourceUSDomesticWireTrackingDetails
 */
export type TreasuryOutboundPaymentsResourceUsDomesticWireTrackingDetails = {
  /**
   * CHIPS System Sequence Number (SSN) of the OutboundPayment for payments sent over the `us_domestic_wire` network.
   */
  chips?: string | null;
  /**
   * IMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network.
   */
  imad?: string | null;
  /**
   * OMAD of the OutboundPayment for payments sent over the `us_domestic_wire` network.
   */
  omad?: string | null;
};
/**
 * TreasuryOutboundTransfersResourceACHTrackingDetails
 */
export type TreasuryOutboundTransfersResourceAchTrackingDetails = {
  /**
   * ACH trace ID of the OutboundTransfer for transfers sent over the `ach` network.
   */
  trace_id: string;
};
/**
 * TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetails
 */
export type TreasuryOutboundTransfersResourceOutboundTransferResourceTrackingDetails =
  {
    ach?: TreasuryOutboundTransfersResourceAchTrackingDetails;
    /**
     * The US bank account network used to send funds.
     */
    type: 'ach' | 'us_domestic_wire';
    us_domestic_wire?: TreasuryOutboundTransfersResourceUsDomesticWireTrackingDetails;
  };
/**
 * TreasuryOutboundTransfersResourceReturnedDetails
 */
export type TreasuryOutboundTransfersResourceReturnedDetails = {
  /**
   * Reason for the return.
   */
  code:
    | 'account_closed'
    | 'account_frozen'
    | 'bank_account_restricted'
    | 'bank_ownership_changed'
    | 'declined'
    | 'incorrect_account_holder_name'
    | 'invalid_account_number'
    | 'invalid_currency'
    | 'no_account'
    | 'other';
  /**
   * The Transaction associated with this object.
   */
  transaction: string | TreasuryTransaction;
};
/**
 * TreasuryOutboundTransfersResourceStatusTransitions
 */
export type TreasuryOutboundTransfersResourceStatusTransitions = {
  /**
   * Timestamp describing when an OutboundTransfer changed status to `canceled`
   */
  canceled_at?: number | null;
  /**
   * Timestamp describing when an OutboundTransfer changed status to `failed`
   */
  failed_at?: number | null;
  /**
   * Timestamp describing when an OutboundTransfer changed status to `posted`
   */
  posted_at?: number | null;
  /**
   * Timestamp describing when an OutboundTransfer changed status to `returned`
   */
  returned_at?: number | null;
};
/**
 * TreasuryOutboundTransfersResourceUSDomesticWireTrackingDetails
 */
export type TreasuryOutboundTransfersResourceUsDomesticWireTrackingDetails = {
  /**
   * CHIPS System Sequence Number (SSN) of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.
   */
  chips?: string | null;
  /**
   * IMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.
   */
  imad?: string | null;
  /**
   * OMAD of the OutboundTransfer for transfers sent over the `us_domestic_wire` network.
   */
  omad?: string | null;
};
/**
 * TreasuryReceivedCreditsResourceLinkedFlows
 */
export type TreasuryReceivedCreditsResourceLinkedFlows = {
  /**
   * The CreditReversal created as a result of this ReceivedCredit being reversed.
   */
  credit_reversal?: string | null;
  /**
   * Set if the ReceivedCredit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
   */
  issuing_authorization?: string | null;
  /**
   * Set if the ReceivedCredit is also viewable as an [Issuing transaction](https://stripe.com/docs/api#issuing_transactions) object.
   */
  issuing_transaction?: string | null;
  /**
   * ID of the source flow. Set if `network` is `stripe` and the source flow is visible to the user. Examples of source flows include OutboundPayments, payouts, or CreditReversals.
   */
  source_flow?: string | null;
  /**
   * The expandable object of the source flow.
   */
  source_flow_details?: TreasuryReceivedCreditsResourceSourceFlowsDetails | null;
  /**
   * The type of flow that originated the ReceivedCredit (for example, `outbound_payment`).
   */
  source_flow_type?: string | null;
};
/**
 * TreasuryReceivedCreditsResourceReversalDetails
 */
export type TreasuryReceivedCreditsResourceReversalDetails = {
  /**
   * Time before which a ReceivedCredit can be reversed.
   */
  deadline?: number | null;
  /**
   * Set if a ReceivedCredit cannot be reversed.
   */
  restricted_reason?:
    | (
        | 'already_reversed'
        | 'deadline_passed'
        | 'network_restricted'
        | 'other'
        | 'source_flow_restricted'
      )
    | null;
};
/**
 * TreasuryReceivedCreditsResourceSourceFlowsDetails
 */
export type TreasuryReceivedCreditsResourceSourceFlowsDetails = {
  credit_reversal?: TreasuryCreditReversal;
  outbound_payment?: TreasuryOutboundPayment;
  outbound_transfer?: TreasuryOutboundTransfer;
  payout?: Payout;
  /**
   * The type of the source flow that originated the ReceivedCredit.
   */
  type:
    | 'credit_reversal'
    | 'other'
    | 'outbound_payment'
    | 'outbound_transfer'
    | 'payout';
};
/**
 * TreasuryReceivedCreditsResourceStatusTransitions
 */
export type TreasuryReceivedCreditsResourceStatusTransitions = {
  /**
   * Timestamp describing when the CreditReversal changed status to `posted`
   */
  posted_at?: number | null;
};
/**
 * TreasuryReceivedDebitsResourceDebitReversalLinkedFlows
 */
export type TreasuryReceivedDebitsResourceDebitReversalLinkedFlows = {
  /**
   * Set if there is an Issuing dispute associated with the DebitReversal.
   */
  issuing_dispute?: string | null;
};
/**
 * TreasuryReceivedDebitsResourceLinkedFlows
 */
export type TreasuryReceivedDebitsResourceLinkedFlows = {
  /**
   * The DebitReversal created as a result of this ReceivedDebit being reversed.
   */
  debit_reversal?: string | null;
  /**
   * Set if the ReceivedDebit is associated with an InboundTransfer's return of funds.
   */
  inbound_transfer?: string | null;
  /**
   * Set if the ReceivedDebit was created due to an [Issuing Authorization](https://stripe.com/docs/api#issuing_authorizations) object.
   */
  issuing_authorization?: string | null;
  /**
   * Set if the ReceivedDebit is also viewable as an [Issuing Dispute](https://stripe.com/docs/api#issuing_disputes) object.
   */
  issuing_transaction?: string | null;
  /**
   * Set if the ReceivedDebit was created due to a [Payout](https://stripe.com/docs/api#payouts) object.
   */
  payout?: string | null;
};
/**
 * TreasuryReceivedDebitsResourceReversalDetails
 */
export type TreasuryReceivedDebitsResourceReversalDetails = {
  /**
   * Time before which a ReceivedDebit can be reversed.
   */
  deadline?: number | null;
  /**
   * Set if a ReceivedDebit can't be reversed.
   */
  restricted_reason?:
    | (
        | 'already_reversed'
        | 'deadline_passed'
        | 'network_restricted'
        | 'other'
        | 'source_flow_restricted'
      )
    | null;
};
/**
 * TreasuryReceivedDebitsResourceStatusTransitions
 */
export type TreasuryReceivedDebitsResourceStatusTransitions = {
  /**
   * Timestamp describing when the DebitReversal changed status to `completed`.
   */
  completed_at?: number | null;
};
/**
 * TreasurySharedResourceBillingDetails
 */
export type TreasurySharedResourceBillingDetails = {
  address: Address;
  /**
   * Email address.
   */
  email?: string | null;
  /**
   * Full name.
   */
  name?: string | null;
};
/**
 * TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails
 */
export type TreasurySharedResourceInitiatingPaymentMethodDetailsInitiatingPaymentMethodDetails =
  {
    /**
     * Set when `type` is `balance`.
     */
    balance?: 'payments';
    billing_details: TreasurySharedResourceBillingDetails;
    financial_account?: ReceivedPaymentMethodDetailsFinancialAccount;
    /**
     * Set when `type` is `issuing_card`. This is an [Issuing Card](https://stripe.com/docs/api#issuing_cards) ID.
     */
    issuing_card?: string;
    /**
     * Polymorphic type matching the originating money movement's source. This can be an external account, a Stripe balance, or a FinancialAccount.
     */
    type:
      | 'balance'
      | 'financial_account'
      | 'issuing_card'
      | 'stripe'
      | 'us_bank_account';
    us_bank_account?: TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount;
  };
/**
 * TreasurySharedResourceInitiatingPaymentMethodDetailsUSBankAccount
 */
export type TreasurySharedResourceInitiatingPaymentMethodDetailsUsBankAccount =
  {
    /**
     * Bank name.
     */
    bank_name?: string | null;
    /**
     * The last four digits of the bank account number.
     */
    last4?: string | null;
    /**
     * The routing number for the bank account.
     */
    routing_number?: string | null;
  };
/**
 * TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions
 */
export type TreasuryTransactionsResourceAbstractTransactionResourceStatusTransitions =
  {
    /**
     * Timestamp describing when the Transaction changed status to `posted`.
     */
    posted_at?: number | null;
    /**
     * Timestamp describing when the Transaction changed status to `void`.
     */
    void_at?: number | null;
  };
/**
 * TreasuryTransactionsResourceBalanceImpact
 * Change to a FinancialAccount's balance
 */
export type TreasuryTransactionsResourceBalanceImpact = {
  /**
   * The change made to funds the user can spend right now.
   */
  cash: number;
  /**
   * The change made to funds that are not spendable yet, but will become available at a later time.
   */
  inbound_pending: number;
  /**
   * The change made to funds in the account, but not spendable because they are being held for pending outbound flows.
   */
  outbound_pending: number;
};
/**
 * TreasuryTransactionsResourceFlowDetails
 */
export type TreasuryTransactionsResourceFlowDetails = {
  credit_reversal?: TreasuryCreditReversal;
  debit_reversal?: TreasuryDebitReversal;
  inbound_transfer?: TreasuryInboundTransfer;
  issuing_authorization?: IssuingAuthorization;
  outbound_payment?: TreasuryOutboundPayment;
  outbound_transfer?: TreasuryOutboundTransfer;
  received_credit?: TreasuryReceivedCredit;
  received_debit?: TreasuryReceivedDebit;
  /**
   * Type of the flow that created the Transaction. Set to the same value as `flow_type`.
   */
  type:
    | 'credit_reversal'
    | 'debit_reversal'
    | 'inbound_transfer'
    | 'issuing_authorization'
    | 'other'
    | 'outbound_payment'
    | 'outbound_transfer'
    | 'received_credit'
    | 'received_debit';
};
/**
 * us_bank_account_networks
 */
export type UsBankAccountNetworks = {
  /**
   * The preferred network.
   */
  preferred?: string | null;
  /**
   * All supported networks.
   */
  supported: ('ach' | 'us_domestic_wire')[];
};
/**
 * verification_session_redaction
 */
export type VerificationSessionRedaction = {
  /**
   * Indicates whether this object and its related objects have been redacted or not.
   */
  status: 'processing' | 'redacted';
};
/**
 * NotificationWebhookEndpoint
 * You can configure [webhook endpoints](https://docs.stripe.com/webhooks/) via the API to be
 * notified about events that happen in your Stripe account or connected
 * accounts.
 *
 * Most users configure webhooks from [the dashboard](https://dashboard.stripe.com/webhooks), which provides a user interface for registering and testing your webhook endpoints.
 *
 * Related guide: [Setting up webhooks](https://docs.stripe.com/webhooks/configure)
 */
export type WebhookEndpoint = {
  /**
   * The API version events are rendered as for this webhook endpoint.
   */
  api_version?: string | null;
  /**
   * The ID of the associated Connect application.
   */
  application?: string | null;
  /**
   * Time at which the object was created. Measured in seconds since the Unix epoch.
   */
  created: number;
  /**
   * An optional description of what the webhook is used for.
   */
  description?: string | null;
  /**
   * The list of events to enable for this endpoint. `['*']` indicates that all events are enabled, except those that require explicit selection.
   */
  enabled_events: string[];
  /**
   * Unique identifier for the object.
   */
  id: string;
  /**
   * Has the value `true` if the object exists in live mode or the value `false` if the object exists in test mode.
   */
  livemode: boolean;
  /**
   * Set of [key-value pairs](https://stripe.com/docs/api/metadata) that you can attach to an object. This can be useful for storing additional information about the object in a structured format.
   */
  metadata: {
    [key: string]: string;
  };
  /**
   * String representing the object's type. Objects of the same type share the same value.
   */
  object: 'webhook_endpoint';
  /**
   * The endpoint's secret, used to generate [webhook signatures](https://docs.stripe.com/webhooks/signatures). Only returned at creation.
   */
  secret?: string;
  /**
   * The status of the webhook. It can be `enabled` or `disabled`.
   */
  status: string;
  /**
   * The URL of the webhook endpoint.
   */
  url: string;
};
export type AuthMethods = {
  basicAuth?: r.HttpBasicSecurityAuthentication;
  bearerAuth?: r.HttpBearerSecurityAuthentication;
};
export function configureAuth(
  params?: r.CreateContextParams<AuthMethods>['authProviders'],
): AuthMethods {
  return {
    basicAuth:
      params?.basicAuth &&
      new r.HttpBasicSecurityAuthentication(params.basicAuth),
    bearerAuth:
      params?.bearerAuth &&
      new r.HttpBearerSecurityAuthentication(params.bearerAuth),
  };
}
export function createContext<FetcherData extends r.BaseFetcherData>(
  params?: r.CreateContextParams<AuthMethods, FetcherData>,
): r.Context<AuthMethods, FetcherData> {
  return new r.Context<AuthMethods, FetcherData>({
    serverConfiguration: new r.ServerConfiguration(
      'https://api.stripe.com/',
      {},
    ),
    authMethods: configureAuth(params?.authProviders),
    ...params,
  });
}
/**
 * Retrieve account
 * <p>Retrieves the details of an account.</p>
 */
export async function getAccount<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Account> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/account',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an account link
 * <p>Creates an AccountLink object that includes a single-use Stripe URL that the platform can redirect their user to in
 * order to take them through the Connect Onboarding flow.</p>
 */
export async function postAccountLinks<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, AccountLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/account_links',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an Account Session
 * <p>Creates a AccountSession object that includes a single-use token that the platform can use on their front-end to
 * grant client-side API access.</p>
 */
export async function postAccountSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, AccountSession> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/account_sessions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all connected accounts
 * <p>Returns a list of accounts connected to your platform via <a href="/docs/connect">Connect</a>. If you’re not a
 * platform, the list is empty.</p>
 */
export async function getAccounts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Account[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>With <a href="/docs/connect">Connect</a>, you can create Stripe accounts for your users.
 * To do this, you’ll first
 * need to <a href="https://dashboard.stripe.com/account/applications/settings">register your platform</a>.</p>
 *
 * <p>If
 * you’ve already collected information for your connected accounts, you <a
 * href="/docs/connect/best-practices#onboarding">can prefill that information</a> when
 * creating the account. Connect
 * Onboarding won’t ask for the prefilled information during account onboarding.
 * You can prefill any information on the
 * account.</p>
 */
export async function postAccounts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Account> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete an account
 * <p>With <a href="/connect">Connect</a>, you can delete accounts you manage.</p>
 *
 * <p>Test-mode accounts can be deleted at
 * any time.</p>
 *
 * <p>Live-mode accounts where Stripe is responsible for negative account balances cannot be deleted, which
 * includes Standard accounts. Live-mode accounts where your platform is liable for negative account balances, which
 * includes Custom and Express accounts, can be deleted when all <a href="/api/balance/balance_object">balances</a> are
 * zero.</p>
 *
 * <p>If you want to delete your own account, use the <a
 * href="https://dashboard.stripe.com/settings/account">account information tab in your account settings</a> instead.</p>
 */
export async function deleteAccountsAccount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve account
 * <p>Retrieves the details of an account.</p>
 */
export async function getAccountsAccount<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Account> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an account
 * <p>Updates a <a href="/connect/accounts">connected account</a> by setting the values of the parameters passed. Any
 * parameters not provided are
 * left unchanged.</p>
 *
 * <p>For accounts where <a
 * href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
 * is
 * <code>application</code>, which includes Custom accounts, you can update any information on the account.</p>
 *
 * <p>For
 * accounts where <a
 * href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a>
 * is
 * <code>stripe</code>, which includes Standard and Express accounts, you can update all information until you create
 * an <a
 * href="/api/account_links">Account Link</a> or <a href="/api/account_sessions">Account Session</a> to start Connect
 * onboarding,
 * after which some properties can no longer be updated.</p>
 *
 * <p>To update your own account, use the <a
 * href="https://dashboard.stripe.com/settings/account">Dashboard</a>. Refer to our
 * <a
 * href="/docs/connect/updating-accounts">Connect</a> documentation to learn more about updating accounts.</p>
 */
export async function postAccountsAccount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Account> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an external account
 * <p>Create an external account for a given account.</p>
 */
export async function postAccountsAccountBankAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExternalAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/bank_accounts',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete an external account
 * <p>Delete a specified external account for a given account.</p>
 */
export async function deleteAccountsAccountBankAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedExternalAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/bank_accounts/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an external account
 * <p>Retrieve a specified external account for a given account.</p>
 */
export async function getAccountsAccountBankAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExternalAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/bank_accounts/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
 * a connected account and
 * optionally sets it as the default for its currency. Other bank account
 * details are not editable by design.</p>
 *
 * <p>You
 * can only update bank accounts when <a
 * href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a>
 * is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
 *
 * <p>You can
 * re-enable a disabled bank account by performing an update call without providing any
 * arguments or changes.</p>
 */
export async function postAccountsAccountBankAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExternalAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/bank_accounts/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all account capabilities
 * <p>Returns a list of capabilities associated with the account. The capabilities are returned sorted by creation date,
 * with the most recent capability appearing first.</p>
 */
export async function getAccountsAccountCapabilities<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Capability[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/capabilities',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an Account Capability
 * <p>Retrieves information about the specified Account Capability.</p>
 */
export async function getAccountsAccountCapabilitiesCapability<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    capability: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Capability> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/capabilities/{capability}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an Account Capability
 * <p>Updates an existing Account Capability. Request or remove a capability by updating its <code>requested</code>
 * parameter.</p>
 */
export async function postAccountsAccountCapabilitiesCapability<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    capability: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Capability> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/capabilities/{capability}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all external accounts
 * <p>List external accounts for an account.</p>
 */
export async function getAccountsAccountExternalAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    object?: 'bank_account' | 'card';
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * The list contains all external accounts that have been attached to the Stripe account. These may be bank accounts or cards.
         */
        data: (BankAccount | Card)[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/external_accounts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'object',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an external account
 * <p>Create an external account for a given account.</p>
 */
export async function postAccountsAccountExternalAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExternalAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/external_accounts',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete an external account
 * <p>Delete a specified external account for a given account.</p>
 */
export async function deleteAccountsAccountExternalAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedExternalAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/external_accounts/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an external account
 * <p>Retrieve a specified external account for a given account.</p>
 */
export async function getAccountsAccountExternalAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExternalAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/external_accounts/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
 * a connected account and
 * optionally sets it as the default for its currency. Other bank account
 * details are not editable by design.</p>
 *
 * <p>You
 * can only update bank accounts when <a
 * href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a>
 * is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
 *
 * <p>You can
 * re-enable a disabled bank account by performing an update call without providing any
 * arguments or changes.</p>
 */
export async function postAccountsAccountExternalAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExternalAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/external_accounts/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a login link
 * <p>Creates a login link for a connected account to access the Express Dashboard.</p>
 *
 * <p><strong>You can only create
 * login links for accounts that use the <a href="/connect/express-dashboard">Express Dashboard</a> and are connected to
 * your platform</strong>.</p>
 */
export async function postAccountsAccountLoginLinks<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, LoginLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/login_links',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all persons
 * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date,
 * with the most recent people appearing first.</p>
 */
export async function getAccountsAccountPeople<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    relationship?: {
      authorizer?: boolean;
      director?: boolean;
      executive?: boolean;
      legal_guardian?: boolean;
      owner?: boolean;
      representative?: boolean;
    };
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Person[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/people',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'relationship',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a person
 * <p>Creates a new person.</p>
 */
export async function postAccountsAccountPeople<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Person> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/people',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a person
 * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an
 * account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is
 * using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
 */
export async function deleteAccountsAccountPeoplePerson<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    person: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedPerson> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/people/{person}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a person
 * <p>Retrieves an existing person.</p>
 */
export async function getAccountsAccountPeoplePerson<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
    person: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Person> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/people/{person}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a person
 * <p>Updates an existing person.</p>
 */
export async function postAccountsAccountPeoplePerson<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    person: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Person> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/people/{person}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all persons
 * <p>Returns a list of people associated with the account’s legal entity. The people are returned sorted by creation date,
 * with the most recent people appearing first.</p>
 */
export async function getAccountsAccountPersons<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    relationship?: {
      authorizer?: boolean;
      director?: boolean;
      executive?: boolean;
      legal_guardian?: boolean;
      owner?: boolean;
      representative?: boolean;
    };
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Person[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/persons',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'relationship',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a person
 * <p>Creates a new person.</p>
 */
export async function postAccountsAccountPersons<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Person> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/persons',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a person
 * <p>Deletes an existing person’s relationship to the account’s legal entity. Any person with a relationship for an
 * account can be deleted through the API, except if the person is the <code>account_opener</code>. If your integration is
 * using the <code>executive</code> parameter, you cannot delete the only verified <code>executive</code> on file.</p>
 */
export async function deleteAccountsAccountPersonsPerson<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    person: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedPerson> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/persons/{person}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a person
 * <p>Retrieves an existing person.</p>
 */
export async function getAccountsAccountPersonsPerson<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
    person: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Person> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/persons/{person}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a person
 * <p>Updates an existing person.</p>
 */
export async function postAccountsAccountPersonsPerson<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    person: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Person> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/persons/{person}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Reject an account
 * <p>With <a href="/connect">Connect</a>, you can reject accounts that you have flagged as suspicious.</p>
 *
 * <p>Only
 * accounts where your platform is liable for negative account balances, which includes Custom and Express accounts, can be
 * rejected. Test-mode accounts can be rejected at any time. Live-mode accounts can only be rejected after all balances are
 * zero.</p>
 */
export async function postAccountsAccountReject<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Account> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/accounts/{account}/reject',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>List apple pay domains.</p>
 */
export async function getApplePayDomains<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    domain_name?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ApplePayDomain[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apple_pay/domains',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'domain_name',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Create an apple pay domain.</p>
 */
export async function postApplePayDomains<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ApplePayDomain> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apple_pay/domains',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Delete an apple pay domain.</p>
 */
export async function deleteApplePayDomainsDomain<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    domain: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedApplePayDomain>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apple_pay/domains/{domain}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Retrieve an apple pay domain.</p>
 */
export async function getApplePayDomainsDomain<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    domain: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ApplePayDomain> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apple_pay/domains/{domain}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all application fees
 * <p>Returns a list of application fees you’ve previously collected. The application fees are returned in sorted order,
 * with the most recent fees appearing first.</p>
 */
export async function getApplicationFees<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ApplicationFee[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/application_fees',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'charge',
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an application fee refund
 * <p>By default, you can see the 10 most recent refunds stored directly on the application fee object, but you can also
 * retrieve details about a specific refund stored on the application fee.</p>
 */
export async function getApplicationFeesFeeRefundsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    fee: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, FeeRefund> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/application_fees/{fee}/refunds/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an application fee refund
 * <p>Updates the specified application fee refund by setting the values of the parameters passed. Any parameters not
 * provided will be left unchanged.</p>
 *
 * <p>This request only accepts metadata as an argument.</p>
 */
export async function postApplicationFeesFeeRefundsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    fee: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, FeeRefund> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/application_fees/{fee}/refunds/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an application fee
 * <p>Retrieves the details of an application fee that your account has collected. The same information is returned when
 * refunding the application fee.</p>
 */
export async function getApplicationFeesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ApplicationFee> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/application_fees/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
export async function postApplicationFeesIdRefund<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ApplicationFee> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/application_fees/{id}/refund',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all application fee refunds
 * <p>You can see a list of the refunds belonging to a specific application fee. Note that the 10 most recent refunds are
 * always available by default on the application fee object. If you need more than those 10, you can use this API method
 * and the <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
 */
export async function getApplicationFeesIdRefunds<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    id: string;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: FeeRefund[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/application_fees/{id}/refunds',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an application fee refund
 * <p>Refunds an application fee that has previously been collected but not yet refunded.
 * Funds will be refunded to the
 * Stripe account from which the fee was originally collected.</p>
 *
 * <p>You can optionally refund only part of an
 * application fee.
 * You can do so multiple times, until the entire fee has been refunded.</p>
 *
 * <p>Once entirely refunded,
 * an application fee can’t be refunded again.
 * This method will raise an error when called on an already-refunded
 * application fee,
 * or when trying to refund more money than is left on an application fee.</p>
 */
export async function postApplicationFeesIdRefunds<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, FeeRefund> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/application_fees/{id}/refunds',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List secrets
 * <p>List all secrets stored on the given scope.</p>
 */
export async function getAppsSecrets<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    scope: {
      type: 'account' | 'user';
      user?: string;
    };
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: AppsSecret[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apps/secrets',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'scope',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Set a Secret
 * <p>Create or replace a secret in the secret store.</p>
 */
export async function postAppsSecrets<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, AppsSecret> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apps/secrets',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a Secret
 * <p>Deletes a secret from the secret store by name and scope.</p>
 */
export async function postAppsSecretsDelete<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, AppsSecret> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apps/secrets/delete',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Find a Secret
 * <p>Finds a secret in the secret store by name and scope.</p>
 */
export async function getAppsSecretsFind<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    name: string;
    scope: {
      type: 'account' | 'user';
      user?: string;
    };
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, AppsSecret> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/apps/secrets/find',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'name', 'scope'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve balance
 * <p>Retrieves the current account balance, based on the authentication that was used to make the request.
 *  For a sample
 * request, see <a href="/docs/connect/account-balances#accounting-for-negative-balances">Accounting for negative
 * balances</a>.</p>
 */
export async function getBalance<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Balance> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/balance',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all balance transactions
 * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so
 * forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
 *
 * <p>Note
 * that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
 */
export async function getBalanceHistory<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    currency?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payout?: string;
    source?: string;
    starting_after?: string;
    type?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BalanceTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/balance/history',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'currency',
      'ending_before',
      'expand',
      'limit',
      'payout',
      'source',
      'starting_after',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a balance transaction
 * <p>Retrieves the balance transaction with the given ID.</p>
 *
 * <p>Note that this endpoint previously used the path
 * <code>/v1/balance/history/:id</code>.</p>
 */
export async function getBalanceHistoryId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BalanceTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/balance/history/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all balance transactions
 * <p>Returns a list of transactions that have contributed to the Stripe account balance (e.g., charges, transfers, and so
 * forth). The transactions are returned in sorted order, with the most recent transactions appearing first.</p>
 *
 * <p>Note
 * that this endpoint was previously called “Balance history” and used the path <code>/v1/balance/history</code>.</p>
 */
export async function getBalanceTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    currency?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payout?: string;
    source?: string;
    starting_after?: string;
    type?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BalanceTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/balance_transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'currency',
      'ending_before',
      'expand',
      'limit',
      'payout',
      'source',
      'starting_after',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a balance transaction
 * <p>Retrieves the balance transaction with the given ID.</p>
 *
 * <p>Note that this endpoint previously used the path
 * <code>/v1/balance/history/:id</code>.</p>
 */
export async function getBalanceTransactionsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BalanceTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/balance_transactions/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List billing alerts
 * <p>Lists billing active and inactive alerts</p>
 */
export async function getBillingAlerts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    alert_type?: 'usage_threshold';
    ending_before?: string;
    expand?: string[];
    limit?: number;
    meter?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BillingAlert[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/alerts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'alert_type',
      'ending_before',
      'expand',
      'limit',
      'meter',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a billing alert
 * <p>Creates a billing alert</p>
 */
export async function postBillingAlerts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingAlert> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/alerts',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a billing alert
 * <p>Retrieves a billing alert given an ID</p>
 */
export async function getBillingAlertsId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingAlert> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/alerts/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Activate a billing alert
 * <p>Reactivates this alert, allowing it to trigger again.</p>
 */
export async function postBillingAlertsIdActivate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingAlert> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/alerts/{id}/activate',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Archive a billing alert
 * <p>Archives this alert, removing it from the list view and APIs. This is non-reversible.</p>
 */
export async function postBillingAlertsIdArchive<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingAlert> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/alerts/{id}/archive',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Deactivate a billing alert
 * <p>Deactivates this alert, preventing it from triggering.</p>
 */
export async function postBillingAlertsIdDeactivate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingAlert> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/alerts/{id}/deactivate',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve the credit balance summary for a customer
 * <p>Retrieves the credit balance summary for a customer.</p>
 */
export async function getBillingCreditBalanceSummary<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    filter: {
      /**
       * scope_param
       */
      applicability_scope?: {
        price_type?: 'metered';
        prices?: {
          id: string;
        }[];
      };
      credit_grant?: string;
      type: 'applicability_scope' | 'credit_grant';
    };
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, BillingCreditBalanceSummary>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_balance_summary',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['customer', 'expand', 'filter'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List credit balance transactions
 * <p>Retrieve a list of credit balance transactions.</p>
 */
export async function getBillingCreditBalanceTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    credit_grant?: string;
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BillingCreditBalanceTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_balance_transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'credit_grant',
      'customer',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a credit balance transaction
 * <p>Retrieves a credit balance transaction.</p>
 */
export async function getBillingCreditBalanceTransactionsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, BillingCreditBalanceTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_balance_transactions/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List credit grants
 * <p>Retrieve a list of credit grants.</p>
 */
export async function getBillingCreditGrants<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BillingCreditGrant[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_grants',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'customer',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a credit grant
 * <p>Creates a credit grant.</p>
 */
export async function postBillingCreditGrants<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingCreditGrant> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_grants',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a credit grant
 * <p>Retrieves a credit grant.</p>
 */
export async function getBillingCreditGrantsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingCreditGrant> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_grants/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a credit grant
 * <p>Updates a credit grant.</p>
 */
export async function postBillingCreditGrantsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingCreditGrant> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_grants/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Expire a credit grant
 * <p>Expires a credit grant.</p>
 */
export async function postBillingCreditGrantsIdExpire<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingCreditGrant> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_grants/{id}/expire',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Void a credit grant
 * <p>Voids a credit grant.</p>
 */
export async function postBillingCreditGrantsIdVoid<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingCreditGrant> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/credit_grants/{id}/void',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a billing meter event adjustment
 * <p>Creates a billing meter event adjustment.</p>
 */
export async function postBillingMeterEventAdjustments<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, BillingMeterEventAdjustment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meter_event_adjustments',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a billing meter event
 * <p>Creates a billing meter event.</p>
 */
export async function postBillingMeterEvents<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingMeterEvent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meter_events',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List billing meters
 * <p>Retrieve a list of billing meters.</p>
 */
export async function getBillingMeters<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'active' | 'inactive';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BillingMeter[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meters',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a billing meter
 * <p>Creates a billing meter.</p>
 */
export async function postBillingMeters<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingMeter> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meters',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a billing meter
 * <p>Retrieves a billing meter given an ID.</p>
 */
export async function getBillingMetersId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingMeter> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meters/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a billing meter
 * <p>Updates a billing meter.</p>
 */
export async function postBillingMetersId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingMeter> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meters/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Deactivate a billing meter
 * <p>When a meter is deactivated, no more meter events will be accepted for this meter. You can’t attach a deactivated
 * meter to a price.</p>
 */
export async function postBillingMetersIdDeactivate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingMeter> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meters/{id}/deactivate',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List billing meter event summaries
 * <p>Retrieve a list of billing meter event summaries.</p>
 */
export async function getBillingMetersIdEventSummaries<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    end_time: number;
    ending_before?: string;
    expand?: string[];
    id: string;
    limit?: number;
    start_time: number;
    starting_after?: string;
    value_grouping_window?: 'day' | 'hour';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BillingMeterEventSummary[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meters/{id}/event_summaries',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'customer',
      'end_time',
      'ending_before',
      'expand',
      'limit',
      'start_time',
      'starting_after',
      'value_grouping_window',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Reactivate a billing meter
 * <p>When a meter is reactivated, events for this meter can be accepted and you can attach the meter to a price.</p>
 */
export async function postBillingMetersIdReactivate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BillingMeter> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing/meters/{id}/reactivate',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List portal configurations
 * <p>Returns a list of configurations that describe the functionality of the customer portal.</p>
 */
export async function getBillingPortalConfigurations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    ending_before?: string;
    expand?: string[];
    is_default?: boolean;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: BillingPortalConfiguration[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing_portal/configurations',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'ending_before',
      'expand',
      'is_default',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a portal configuration
 * <p>Creates a configuration that describes the functionality and behavior of a PortalSession</p>
 */
export async function postBillingPortalConfigurations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, BillingPortalConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing_portal/configurations',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a portal configuration
 * <p>Retrieves a configuration that describes the functionality of the customer portal.</p>
 */
export async function getBillingPortalConfigurationsConfiguration<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    configuration: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, BillingPortalConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing_portal/configurations/{configuration}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a portal configuration
 * <p>Updates a configuration that describes the functionality of the customer portal.</p>
 */
export async function postBillingPortalConfigurationsConfiguration<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    configuration: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, BillingPortalConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing_portal/configurations/{configuration}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a portal session
 * <p>Creates a session of the customer portal.</p>
 */
export async function postBillingPortalSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, BillingPortalSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/billing_portal/sessions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all charges
 * <p>Returns a list of charges you’ve previously created. The charges are returned in sorted order, with the most recent
 * charges appearing first.</p>
 */
export async function getCharges<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payment_intent?: string;
    starting_after?: string;
    transfer_group?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Charge[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/charges',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'customer',
      'ending_before',
      'expand',
      'limit',
      'payment_intent',
      'starting_after',
      'transfer_group',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>This method is no longer recommended—use the <a href="/docs/api/payment_intents">Payment Intents API</a>
 * to initiate
 * a new payment instead. Confirmation of the PaymentIntent creates the <code>Charge</code>
 * object used to request
 * payment.</p>
 */
export async function postCharges<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Charge> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Search charges
 * <p>Search for charges you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query
 * Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal
 * operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be
 * up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export async function getChargesSearch<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    limit?: number;
    page?: string;
    query: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Charge[];
        has_more: boolean;
        next_page?: string | null;
        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        object: 'search_result';
        /**
         * The total number of objects that match the query, only accurate up to 10,000.
         */
        total_count?: number;
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/charges/search',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'limit', 'page', 'query'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a charge
 * <p>Retrieves the details of a charge that has previously been created. Supply the unique charge ID that was returned
 * from your previous request, and Stripe will return the corresponding charge information. The same information is
 * returned when creating or refunding the charge.</p>
 */
export async function getChargesCharge<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Charge> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a charge
 * <p>Updates the specified charge by setting the values of the parameters passed. Any parameters not provided will be left
 * unchanged.</p>
 */
export async function postChargesCharge<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Charge> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Capture a payment
 * <p>Capture the payment of an existing, uncaptured charge that was created with the <code>capture</code> option set to
 * false.</p>
 *
 * <p>Uncaptured payments expire a set number of days after they are created (<a
 * href="/docs/charges/placing-a-hold">7 by default</a>), after which they are marked as refunded and capture attempts will
 * fail.</p>
 *
 * <p>Don’t use this method to capture a PaymentIntent-initiated charge. Use <a
 * href="/docs/api/payment_intents/capture">Capture a PaymentIntent</a>.</p>
 */
export async function postChargesChargeCapture<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Charge> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/capture',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Retrieve a dispute for a specified charge.</p>
 */
export async function getChargesChargeDispute<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Dispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/dispute',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
export async function postChargesChargeDispute<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Dispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/dispute',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
export async function postChargesChargeDisputeClose<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Dispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/dispute/close',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a refund
 * <p>When you create a new refund, you must specify either a Charge or a PaymentIntent object.</p>
 *
 * <p>This action refunds
 * a previously created charge that’s not refunded yet.
 * Funds are refunded to the credit or debit card that’s originally
 * charged.</p>
 *
 * <p>You can optionally refund only part of a charge.
 * You can repeat this until the entire charge is
 * refunded.</p>
 *
 * <p>After you entirely refund a charge, you can’t refund it again.
 * This method raises an error when it’s
 * called on an already-refunded charge,
 * or when you attempt to refund more money than is left on a charge.</p>
 */
export async function postChargesChargeRefund<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Charge> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/refund',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all refunds
 * <p>You can see a list of the refunds belonging to a specific charge. Note that the 10 most recent refunds are always
 * available by default on the charge object. If you need more than those 10, you can use this API method and the
 * <code>limit</code> and <code>starting_after</code> parameters to page through additional refunds.</p>
 */
export async function getChargesChargeRefunds<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Refund[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/refunds',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create customer balance refund
 * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create
 * it.</p>
 *
 * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
 * Funds will
 * be refunded to the credit or debit card that was originally charged.</p>
 *
 * <p>You can optionally refund only part of a
 * charge.
 * You can do so multiple times, until the entire charge has been refunded.</p>
 *
 * <p>Once entirely refunded, a
 * charge can’t be refunded again.
 * This method will raise an error when called on an already-refunded charge,
 * or when
 * trying to refund more money than is left on a charge.</p>
 */
export async function postChargesChargeRefunds<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/refunds',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Retrieves the details of an existing refund.</p>
 */
export async function getChargesChargeRefundsRefund<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
    expand?: string[];
    refund: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/refunds/{refund}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Update a specified refund.</p>
 */
export async function postChargesChargeRefundsRefund<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge: string;
    refund: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/charges/{charge}/refunds/{refund}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Checkout Sessions
 * <p>Returns a list of Checkout Sessions.</p>
 */
export async function getCheckoutSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    customer_details?: {
      email: string;
    };
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payment_intent?: string;
    payment_link?: string;
    starting_after?: string;
    status?: 'complete' | 'expired' | 'open';
    subscription?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: CheckoutSession[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/checkout/sessions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'customer',
      'customer_details',
      'ending_before',
      'expand',
      'limit',
      'payment_intent',
      'payment_link',
      'starting_after',
      'status',
      'subscription',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Checkout Session
 * <p>Creates a Checkout Session object.</p>
 */
export async function postCheckoutSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CheckoutSession> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/checkout/sessions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Checkout Session
 * <p>Retrieves a Checkout Session object.</p>
 */
export async function getCheckoutSessionsSession<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CheckoutSession> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/checkout/sessions/{session}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a Checkout Session
 * <p>Updates a Checkout Session object.</p>
 *
 * <p>Related guide: <a href="/payments/checkout/dynamic-updates">Dynamically
 * update Checkout</a></p>
 */
export async function postCheckoutSessionsSession<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CheckoutSession> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/checkout/sessions/{session}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Expire a Checkout Session
 * <p>A Checkout Session can be expired when it is in one of these statuses: <code>open</code> </p>
 *
 * <p>After it expires, a
 * customer can’t complete a Checkout Session and customers loading the Checkout Session see a message saying the Checkout
 * Session is expired.</p>
 */
export async function postCheckoutSessionsSessionExpire<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CheckoutSession> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/checkout/sessions/{session}/expire',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Checkout Session's line items
 * <p>When retrieving a Checkout Session, there is an includable <strong>line_items</strong> property containing the first
 * handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export async function getCheckoutSessionsSessionLineItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    session: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Item[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/checkout/sessions/{session}/line_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List orders
 * <p>Lists all Climate order objects. The orders are returned sorted by creation date, with the
 * most recently created
 * orders appearing first.</p>
 */
export async function getClimateOrders<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ClimateOrder[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/orders',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an order
 * <p>Creates a Climate order object for a given Climate product. The order will be processed immediately
 * after creation
 * and payment will be deducted your Stripe balance.</p>
 */
export async function postClimateOrders<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ClimateOrder> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/orders',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an order
 * <p>Retrieves the details of a Climate order object with the given ID.</p>
 */
export async function getClimateOrdersOrder<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    order: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ClimateOrder> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/orders/{order}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an order
 * <p>Updates the specified order by setting the values of the parameters passed.</p>
 */
export async function postClimateOrdersOrder<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    order: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ClimateOrder> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/orders/{order}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel an order
 * <p>Cancels a Climate order. You can cancel an order within 24 hours of creation. Stripe refunds the
 * reservation
 * <code>amount_subtotal</code>, but not the <code>amount_fees</code> for user-triggered cancellations. Frontier
 * might
 * cancel reservations if suppliers fail to deliver. If Frontier cancels the reservation, Stripe
 * provides 90 days advance
 * notice and refunds the <code>amount_total</code>.</p>
 */
export async function postClimateOrdersOrderCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    order: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ClimateOrder> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/orders/{order}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List products
 * <p>Lists all available Climate product objects.</p>
 */
export async function getClimateProducts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ClimateProduct[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/products',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a product
 * <p>Retrieves the details of a Climate product with the given ID.</p>
 */
export async function getClimateProductsProduct<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    product: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ClimateProduct> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/products/{product}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List suppliers
 * <p>Lists all available Climate supplier objects.</p>
 */
export async function getClimateSuppliers<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ClimateSupplier[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/suppliers',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a supplier
 * <p>Retrieves a Climate supplier object.</p>
 */
export async function getClimateSuppliersSupplier<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    supplier: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ClimateSupplier> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/climate/suppliers/{supplier}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a ConfirmationToken
 * <p>Retrieves an existing ConfirmationToken object</p>
 */
export async function getConfirmationTokensConfirmationToken<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    confirmation_token: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ConfirmationToken> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/confirmation_tokens/{confirmation_token}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List Country Specs
 * <p>Lists all Country Spec objects available in the API.</p>
 */
export async function getCountrySpecs<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: CountrySpec[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/country_specs',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Country Spec
 * <p>Returns a Country Spec for a given Country code.</p>
 */
export async function getCountrySpecsCountry<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    country: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CountrySpec> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/country_specs/{country}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all coupons
 * <p>Returns a list of your coupons.</p>
 */
export async function getCoupons<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Coupon[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/coupons',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a coupon
 * <p>You can create coupons easily via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of
 * the Stripe dashboard. Coupon creation is also accessible via the API if you need to create coupons on the fly.</p>
 *
 * <p>A
 * coupon has either a <code>percent_off</code> or an <code>amount_off</code> and <code>currency</code>. If you set an
 * <code>amount_off</code>, that amount will be subtracted from any invoice’s subtotal. For example, an invoice with a
 * subtotal of <currency>100</currency> will have a final total of <currency>0</currency> if a coupon with an
 * <code>amount_off</code> of <amount>200</amount> is applied to it and an invoice with a subtotal of
 * <currency>300</currency> will have a final total of <currency>100</currency> if a coupon with an <code>amount_off</code>
 * of <amount>200</amount> is applied to it.</p>
 */
export async function postCoupons<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Coupon> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/coupons',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a coupon
 * <p>You can delete coupons via the <a href="https://dashboard.stripe.com/coupons">coupon management</a> page of the
 * Stripe dashboard. However, deleting a coupon does not affect any customers who have already applied the coupon; it means
 * that new customers can’t redeem the coupon. You can also delete coupons via the API.</p>
 */
export async function deleteCouponsCoupon<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    coupon: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedCoupon> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/coupons/{coupon}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a coupon
 * <p>Retrieves the coupon with the given ID.</p>
 */
export async function getCouponsCoupon<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    coupon: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Coupon> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/coupons/{coupon}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a coupon
 * <p>Updates the metadata of a coupon. Other coupon details (currency, duration, amount_off) are, by design, not
 * editable.</p>
 */
export async function postCouponsCoupon<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    coupon: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Coupon> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/coupons/{coupon}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all credit notes
 * <p>Returns a list of credit notes.</p>
 */
export async function getCreditNotes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    invoice?: string;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: CreditNote[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'customer',
      'ending_before',
      'expand',
      'invoice',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a credit note
 * <p>Issue a credit note to adjust the amount of a finalized invoice. A credit note will first reduce the invoice’s
 * <code>amount_remaining</code> (and <code>amount_due</code>), but not below zero.
 * This amount is indicated by the credit
 * note’s <code>pre_payment_amount</code>. The excess amount is indicated by <code>post_payment_amount</code>, and it can
 * result in any combination of the following:</p>
 *
 * <ul>
 * <li>Refunds: create a new refund (using
 * <code>refund_amount</code>) or link existing refunds (using <code>refunds</code>).</li>
 * <li>Customer balance credit:
 * credit the customer’s balance (using <code>credit_amount</code>) which will be automatically applied to their next
 * invoice when it’s finalized.</li>
 * <li>Outside of Stripe credit: record the amount that is or will be credited outside of
 * Stripe (using <code>out_of_band_amount</code>).</li>
 * </ul>
 *
 * <p>The sum of refunds, customer balance credits, and outside
 * of Stripe credits must equal the <code>post_payment_amount</code>.</p>
 *
 * <p>You may issue multiple credit notes for an
 * invoice. Each credit note may increment the invoice’s
 * <code>pre_payment_credit_notes_amount</code>,
 * <code>post_payment_credit_notes_amount</code>, or both, depending on the
 * invoice’s <code>amount_remaining</code> at the time of credit note creation.</p>
 */
export async function postCreditNotes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CreditNote> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Preview a credit note
 * <p>Get a preview of a credit note without creating it.</p>
 */
export async function getCreditNotesPreview<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    amount?: number;
    credit_amount?: number;
    effective_at?: number;
    email_type?: 'credit_note' | 'none';
    expand?: string[];
    invoice: string;
    lines?: {
      amount?: number;
      description?: string;
      invoice_line_item?: string;
      quantity?: number;
      tax_amounts?:
        | {
            amount: number;
            tax_rate: string;
            taxable_amount: number;
          }[]
        | '';
      tax_rates?: string[] | '';
      type: 'custom_line_item' | 'invoice_line_item';
      unit_amount?: number;
      unit_amount_decimal?: string;
    }[];
    memo?: string;
    metadata?: {
      [key: string]: string;
    };
    out_of_band_amount?: number;
    reason?:
      | 'duplicate'
      | 'fraudulent'
      | 'order_change'
      | 'product_unsatisfactory';
    refund_amount?: number;
    refunds?: {
      amount_refunded?: number;
      refund?: string;
    }[];
    shipping_cost?: {
      shipping_rate?: string;
    };
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CreditNote> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes/preview',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'amount',
      'credit_amount',
      'effective_at',
      'email_type',
      'expand',
      'invoice',
      'lines',
      'memo',
      'metadata',
      'out_of_band_amount',
      'reason',
      'refund_amount',
      'refunds',
      'shipping_cost',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a credit note preview's line items
 * <p>When retrieving a credit note preview, you’ll get a <strong>lines</strong> property containing the first handful of
 * those items. This URL you can retrieve the full (paginated) list of line items.</p>
 */
export async function getCreditNotesPreviewLines<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    amount?: number;
    credit_amount?: number;
    effective_at?: number;
    email_type?: 'credit_note' | 'none';
    ending_before?: string;
    expand?: string[];
    invoice: string;
    limit?: number;
    lines?: {
      amount?: number;
      description?: string;
      invoice_line_item?: string;
      quantity?: number;
      tax_amounts?:
        | {
            amount: number;
            tax_rate: string;
            taxable_amount: number;
          }[]
        | '';
      tax_rates?: string[] | '';
      type: 'custom_line_item' | 'invoice_line_item';
      unit_amount?: number;
      unit_amount_decimal?: string;
    }[];
    memo?: string;
    metadata?: {
      [key: string]: string;
    };
    out_of_band_amount?: number;
    reason?:
      | 'duplicate'
      | 'fraudulent'
      | 'order_change'
      | 'product_unsatisfactory';
    refund_amount?: number;
    refunds?: {
      amount_refunded?: number;
      refund?: string;
    }[];
    shipping_cost?: {
      shipping_rate?: string;
    };
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: CreditNoteLineItem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes/preview/lines',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'amount',
      'credit_amount',
      'effective_at',
      'email_type',
      'ending_before',
      'expand',
      'invoice',
      'limit',
      'lines',
      'memo',
      'metadata',
      'out_of_band_amount',
      'reason',
      'refund_amount',
      'refunds',
      'shipping_cost',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a credit note's line items
 * <p>When retrieving a credit note, you’ll get a <strong>lines</strong> property containing the first handful of those
 * items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export async function getCreditNotesCreditNoteLines<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    credit_note: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: CreditNoteLineItem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes/{credit_note}/lines',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a credit note
 * <p>Retrieves the credit note object with the given identifier.</p>
 */
export async function getCreditNotesId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CreditNote> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a credit note
 * <p>Updates an existing credit note.</p>
 */
export async function postCreditNotesId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CreditNote> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Void a credit note
 * <p>Marks a credit note as void. Learn more about <a href="/docs/billing/invoices/credit-notes#voiding">voiding credit
 * notes</a>.</p>
 */
export async function postCreditNotesIdVoid<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CreditNote> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/credit_notes/{id}/void',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Customer Session
 * <p>Creates a Customer Session object that includes a single-use client secret that you can use on your front-end to
 * grant client-side API access for certain customer resources.</p>
 */
export async function postCustomerSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CustomerSession> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customer_sessions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all customers
 * <p>Returns a list of your customers. The customers are returned sorted by creation date, with the most recent customers
 * appearing first.</p>
 */
export async function getCustomers<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    email?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    test_clock?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Customer[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'email',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'test_clock',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a customer
 * <p>Creates a new customer object.</p>
 */
export async function postCustomers<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Customer> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Search customers
 * <p>Search for customers you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search
 * Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal
 * operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be
 * up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export async function getCustomersSearch<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    limit?: number;
    page?: string;
    query: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Customer[];
        has_more: boolean;
        next_page?: string | null;
        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        object: 'search_result';
        /**
         * The total number of objects that match the query, only accurate up to 10,000.
         */
        total_count?: number;
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/search',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'limit', 'page', 'query'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a customer
 * <p>Permanently deletes a customer. It cannot be undone. Also immediately cancels any active subscriptions on the
 * customer.</p>
 */
export async function deleteCustomersCustomer<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedCustomer> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a customer
 * <p>Retrieves a Customer object.</p>
 */
export async function getCustomersCustomer<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, Customer | DeletedCustomer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a customer
 * <p>Updates the specified customer by setting the values of the parameters passed. Any parameters not provided will be
 * left unchanged. For example, if you pass the <strong>source</strong> parameter, that becomes the customer’s active
 * source (e.g., a card) to be used for all charges in the future. When you update a customer to a new valid card source by
 * passing the <strong>source</strong> parameter: for each of the customer’s current subscriptions, if the subscription
 * bills automatically and is in the <code>past_due</code> state, then the latest open invoice for the subscription with
 * automatic collection enabled will be retried. This retry will not count as an automatic retry, and will not affect the
 * next regularly scheduled payment for the invoice. Changing the <strong>default_source</strong> for a customer will not
 * trigger this behavior.</p>
 *
 * <p>This request accepts mostly the same arguments as the customer creation call.</p>
 */
export async function postCustomersCustomer<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Customer> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List customer balance transactions
 * <p>Returns a list of transactions that updated the customer’s <a href="/docs/billing/customer/balance">balances</a>.</p>
 */
export async function getCustomersCustomerBalanceTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: CustomerBalanceTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/balance_transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a customer balance transaction
 * <p>Creates an immutable transaction that updates the customer’s credit <a
 * href="/docs/billing/customer/balance">balance</a>.</p>
 */
export async function postCustomersCustomerBalanceTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, CustomerBalanceTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/balance_transactions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a customer balance transaction
 * <p>Retrieves a specific customer balance transaction that updated the customer’s <a
 * href="/docs/billing/customer/balance">balances</a>.</p>
 */
export async function getCustomersCustomerBalanceTransactionsTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, CustomerBalanceTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/balance_transactions/{transaction}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a customer credit balance transaction
 * <p>Most credit balance transaction fields are immutable, but you may update its <code>description</code> and
 * <code>metadata</code>.</p>
 */
export async function postCustomersCustomerBalanceTransactionsTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, CustomerBalanceTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/balance_transactions/{transaction}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all bank accounts
 * <p>You can see a list of the bank accounts belonging to a Customer. Note that the 10 most recent sources are always
 * available by default on the Customer. If you need more than those 10, you can use this API method and the
 * <code>limit</code> and <code>starting_after</code> parameters to page through additional bank accounts.</p>
 * @deprecated
 */
export async function getCustomersCustomerBankAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: BankAccount[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/bank_accounts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a card
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
 *
 * <p>If the
 * card’s owner has no default card, then the new card will become the default.
 * However, if the owner already has a
 * default, then it will not change.
 * To change the default, you should <a href="/docs/api#update_customer">update the
 * customer</a> to have a new <code>default_source</code>.</p>
 */
export async function postCustomersCustomerBankAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentSource> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/bank_accounts',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a customer source
 * <p>Delete a specified source for a given customer.</p>
 */
export async function deleteCustomersCustomerBankAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentSource | DeletedPaymentSource>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/bank_accounts/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a bank account
 * <p>By default, you can see the 10 most recent sources stored on a Customer directly on the object, but you can also
 * retrieve details about a specific bank account stored on the Stripe account.</p>
 * @deprecated
 */
export async function getCustomersCustomerBankAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BankAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/bank_accounts/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Update a specified source for a given customer.</p>
 */
export async function postCustomersCustomerBankAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, Card | BankAccount | Source>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/bank_accounts/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Verify a bank account
 * <p>Verify a specified bank account for a given customer.</p>
 */
export async function postCustomersCustomerBankAccountsIdVerify<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BankAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/bank_accounts/{id}/verify',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all cards
 * <p>You can see a list of the cards belonging to a customer.
 * Note that the 10 most recent sources are always available on
 * the <code>Customer</code> object.
 * If you need more than those 10, you can use this API method and the <code>limit</code>
 * and <code>starting_after</code> parameters to page through additional cards.</p>
 * @deprecated
 */
export async function getCustomersCustomerCards<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Card[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cards',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a card
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
 *
 * <p>If the
 * card’s owner has no default card, then the new card will become the default.
 * However, if the owner already has a
 * default, then it will not change.
 * To change the default, you should <a href="/docs/api#update_customer">update the
 * customer</a> to have a new <code>default_source</code>.</p>
 */
export async function postCustomersCustomerCards<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentSource> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cards',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a customer source
 * <p>Delete a specified source for a given customer.</p>
 */
export async function deleteCustomersCustomerCardsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentSource | DeletedPaymentSource>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cards/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a card
 * <p>You can always see the 10 most recent cards directly on a customer; this method lets you retrieve details about a
 * specific card stored on the customer.</p>
 * @deprecated
 */
export async function getCustomersCustomerCardsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Card> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cards/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Update a specified source for a given customer.</p>
 */
export async function postCustomersCustomerCardsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, Card | BankAccount | Source>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cards/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a cash balance
 * <p>Retrieves a customer’s cash balance.</p>
 */
export async function getCustomersCustomerCashBalance<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CashBalance> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cash_balance',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a cash balance's settings
 * <p>Changes the settings on a customer’s cash balance.</p>
 */
export async function postCustomersCustomerCashBalance<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, CashBalance> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cash_balance',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List cash balance transactions
 * <p>Returns a list of transactions that modified the customer’s <a href="/docs/payments/customer-balance">cash
 * balance</a>.</p>
 */
export async function getCustomersCustomerCashBalanceTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: CustomerCashBalanceTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cash_balance_transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a cash balance transaction
 * <p>Retrieves a specific cash balance transaction, which updated the customer’s <a
 * href="/docs/payments/customer-balance">cash balance</a>.</p>
 */
export async function getCustomersCustomerCashBalanceTransactionsTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, CustomerCashBalanceTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/cash_balance_transactions/{transaction}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a customer discount
 * <p>Removes the currently applied discount on a customer.</p>
 */
export async function deleteCustomersCustomerDiscount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedDiscount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/discount',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
export async function getCustomersCustomerDiscount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Discount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/discount',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create or retrieve funding instructions for a customer cash balance
 * <p>Retrieve funding instructions for a customer cash balance. If funding instructions do not yet exist for the customer,
 * new
 * funding instructions will be created. If funding instructions have already been created for a given customer, the
 * same
 * funding instructions will be retrieved. In other words, we will return the same funding instructions each time.</p>
 */
export async function postCustomersCustomerFundingInstructions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FundingInstructions>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/funding_instructions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List a Customer's PaymentMethods
 * <p>Returns a list of PaymentMethods for a given Customer</p>
 */
export async function getCustomersCustomerPaymentMethods<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    allow_redisplay?: 'always' | 'limited' | 'unspecified';
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    type?:
      | 'acss_debit'
      | 'affirm'
      | 'afterpay_clearpay'
      | 'alipay'
      | 'alma'
      | 'amazon_pay'
      | 'au_becs_debit'
      | 'bacs_debit'
      | 'bancontact'
      | 'billie'
      | 'blik'
      | 'boleto'
      | 'card'
      | 'cashapp'
      | 'customer_balance'
      | 'eps'
      | 'fpx'
      | 'giropay'
      | 'grabpay'
      | 'ideal'
      | 'kakao_pay'
      | 'klarna'
      | 'konbini'
      | 'kr_card'
      | 'link'
      | 'mobilepay'
      | 'multibanco'
      | 'naver_pay'
      | 'nz_bank_account'
      | 'oxxo'
      | 'p24'
      | 'pay_by_bank'
      | 'payco'
      | 'paynow'
      | 'paypal'
      | 'pix'
      | 'promptpay'
      | 'revolut_pay'
      | 'samsung_pay'
      | 'satispay'
      | 'sepa_debit'
      | 'sofort'
      | 'swish'
      | 'twint'
      | 'us_bank_account'
      | 'wechat_pay'
      | 'zip';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PaymentMethod[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/payment_methods',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'allow_redisplay',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Customer's PaymentMethod
 * <p>Retrieves a PaymentMethod object for a given Customer.</p>
 */
export async function getCustomersCustomerPaymentMethodsPaymentMethod<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    payment_method: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentMethod> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/payment_methods/{payment_method}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>List sources for a specified customer.</p>
 */
export async function getCustomersCustomerSources<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    object?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: (BankAccount | Card | Source)[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/sources',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'object',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a card
 * <p>When you create a new credit card, you must specify a customer or recipient on which to create it.</p>
 *
 * <p>If the
 * card’s owner has no default card, then the new card will become the default.
 * However, if the owner already has a
 * default, then it will not change.
 * To change the default, you should <a href="/docs/api#update_customer">update the
 * customer</a> to have a new <code>default_source</code>.</p>
 */
export async function postCustomersCustomerSources<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentSource> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/sources',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a customer source
 * <p>Delete a specified source for a given customer.</p>
 */
export async function deleteCustomersCustomerSourcesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentSource | DeletedPaymentSource>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/sources/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Retrieve a specified source for a given customer.</p>
 */
export async function getCustomersCustomerSourcesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentSource> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/sources/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Update a specified source for a given customer.</p>
 */
export async function postCustomersCustomerSourcesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, Card | BankAccount | Source>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/sources/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Verify a bank account
 * <p>Verify a specified bank account for a given customer.</p>
 */
export async function postCustomersCustomerSourcesIdVerify<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, BankAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/sources/{id}/verify',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List active subscriptions
 * <p>You can see a list of the customer’s active subscriptions. Note that the 10 most recent active subscriptions are
 * always available by default on the customer object. If you need more than those 10, you can use the limit and
 * starting_after parameters to page through additional subscriptions.</p>
 */
export async function getCustomersCustomerSubscriptions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Subscription[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/subscriptions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a subscription
 * <p>Creates a new subscription on an existing customer.</p>
 */
export async function postCustomersCustomerSubscriptions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/subscriptions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a subscription
 * <p>Cancels a customer’s subscription. If you set the <code>at_period_end</code> parameter to <code>true</code>, the
 * subscription will remain active until the end of the period, at which point it will be canceled and not renewed.
 * Otherwise, with the default <code>false</code> value, the subscription is terminated immediately. In either case, the
 * customer will not be charged again for the subscription.</p>
 *
 * <p>Note, however, that any pending invoice items that
 * you’ve created will still be charged for at the end of the period, unless manually <a
 * href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending
 * prorations will also be left in place and collected at the end of the period. But if the subscription is set to cancel
 * immediately, pending prorations will be removed.</p>
 *
 * <p>By default, upon subscription cancellation, Stripe will stop
 * automatic collection of all finalized invoices for the customer. This is intended to prevent unexpected payment attempts
 * after the customer has canceled a subscription. However, you can resume automatic collection of the invoices manually
 * after subscription cancellation to have us proceed. Or, you could check for unpaid invoices before allowing the customer
 * to cancel the subscription at all.</p>
 */
export async function deleteCustomersCustomerSubscriptionsSubscriptionExposedId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a subscription
 * <p>Retrieves the subscription with the given ID.</p>
 */
export async function getCustomersCustomerSubscriptionsSubscriptionExposedId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a subscription on a customer
 * <p>Updates an existing subscription on a customer to match the specified parameters. When changing plans or quantities,
 * we will optionally prorate the price we charge next month to make up for any price changes. To preview how the proration
 * will be calculated, use the <a href="#upcoming_invoice">upcoming invoice</a> endpoint.</p>
 */
export async function postCustomersCustomerSubscriptionsSubscriptionExposedId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a customer discount
 * <p>Removes the currently applied discount on a customer.</p>
 */
export async function deleteCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedDiscount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
export async function getCustomersCustomerSubscriptionsSubscriptionExposedIdDiscount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Discount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/subscriptions/{subscription_exposed_id}/discount',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Customer tax IDs
 * <p>Returns a list of tax IDs for a customer.</p>
 */
export async function getCustomersCustomerTaxIds<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TaxId[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/tax_ids',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Customer tax ID
 * <p>Creates a new <code>tax_id</code> object for a customer.</p>
 */
export async function postCustomersCustomerTaxIds<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, TaxId> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/tax_ids',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a Customer tax ID
 * <p>Deletes an existing <code>tax_id</code> object.</p>
 */
export async function deleteCustomersCustomerTaxIdsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedTaxId> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/tax_ids/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Customer tax ID
 * <p>Retrieves the <code>tax_id</code> object with the given identifier.</p>
 */
export async function getCustomersCustomerTaxIdsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, TaxId> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/customers/{customer}/tax_ids/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all disputes
 * <p>Returns a list of your disputes.</p>
 */
export async function getDisputes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payment_intent?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Dispute[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/disputes',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'charge',
      'created',
      'ending_before',
      'expand',
      'limit',
      'payment_intent',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a dispute
 * <p>Retrieves the dispute with the given ID.</p>
 */
export async function getDisputesDispute<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    dispute: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Dispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/disputes/{dispute}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a dispute
 * <p>When you get a dispute, contacting your customer is always the best first step. If that doesn’t work, you can submit
 * evidence to help us resolve the dispute in your favor. You can do this in your <a
 * href="https://dashboard.stripe.com/disputes">dashboard</a>, but if you prefer, you can use the API to submit evidence
 * programmatically.</p>
 *
 * <p>Depending on your dispute type, different evidence fields will give you a better chance of
 * winning your dispute. To figure out which evidence fields to provide, see our <a href="/docs/disputes/categories">guide
 * to dispute types</a>.</p>
 */
export async function postDisputesDispute<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    dispute: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Dispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/disputes/{dispute}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Close a dispute
 * <p>Closing the dispute for a charge indicates that you do not have any evidence to submit and are essentially dismissing
 * the dispute, acknowledging it as lost.</p>
 *
 * <p>The status of the dispute will change from <code>needs_response</code> to
 * <code>lost</code>. <em>Closing a dispute is irreversible</em>.</p>
 */
export async function postDisputesDisputeClose<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    dispute: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Dispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/disputes/{dispute}/close',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all active entitlements
 * <p>Retrieve a list of active entitlements for a customer</p>
 */
export async function getEntitlementsActiveEntitlements<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: EntitlementsActiveEntitlement[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/entitlements/active_entitlements',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'customer',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an active entitlement
 * <p>Retrieve an active entitlement</p>
 */
export async function getEntitlementsActiveEntitlementsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, EntitlementsActiveEntitlement>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/entitlements/active_entitlements/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all features
 * <p>Retrieve a list of features</p>
 */
export async function getEntitlementsFeatures<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    archived?: boolean;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    lookup_key?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: EntitlementsFeature[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/entitlements/features',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'archived',
      'ending_before',
      'expand',
      'limit',
      'lookup_key',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a feature
 * <p>Creates a feature</p>
 */
export async function postEntitlementsFeatures<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, EntitlementsFeature>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/entitlements/features',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a feature
 * <p>Retrieves a feature</p>
 */
export async function getEntitlementsFeaturesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, EntitlementsFeature>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/entitlements/features/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Updates a feature
 * <p>Update a feature’s metadata or permanently deactivate it.</p>
 */
export async function postEntitlementsFeaturesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, EntitlementsFeature>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/entitlements/features/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an ephemeral key
 * <p>Creates a short-lived API key for a given resource.</p>
 */
export async function postEphemeralKeys<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, EphemeralKey> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/ephemeral_keys',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Immediately invalidate an ephemeral key
 * <p>Invalidates a short-lived API key for a given resource.</p>
 */
export async function deleteEphemeralKeysKey<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    key: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, EphemeralKey> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/ephemeral_keys/{key}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all events
 * <p>List events, going back up to 30 days. Each event data is rendered according to Stripe API version at its creation
 * time, specified in <a href="https://docs.stripe.com/api/events/object">event object</a> <code>api_version</code>
 * attribute (not according to your current Stripe API version or <code>Stripe-Version</code> header).</p>
 */
export async function getEvents<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    delivery_success?: boolean;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    type?: string;
    types?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Event[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/events',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'delivery_success',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'type',
      'types',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an event
 * <p>Retrieves the details of an event if it was created in the last 30 days. Supply the unique identifier of the event,
 * which you might have received in a webhook.</p>
 */
export async function getEventsId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Event> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/events/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all exchange rates
 * <p>Returns a list of objects that contain the rates at which foreign currencies are converted to one another. Only shows
 * the currencies for which Stripe supports.</p>
 */
export async function getExchangeRates<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ExchangeRate[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/exchange_rates',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an exchange rate
 * <p>Retrieves the exchange rates from the given currency to every supported currency.</p>
 */
export async function getExchangeRatesRateId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    rate_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExchangeRate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/exchange_rates/{rate_id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Updates the metadata, account holder name, account holder type of a bank account belonging to
 * a connected account and
 * optionally sets it as the default for its currency. Other bank account
 * details are not editable by design.</p>
 *
 * <p>You
 * can only update bank accounts when <a
 * href="/api/accounts/object#account_object-controller-requirement_collection">account.controller.requirement_collection</a>
 * is <code>application</code>, which includes <a href="/connect/custom-accounts">Custom accounts</a>.</p>
 *
 * <p>You can
 * re-enable a disabled bank account by performing an update call without providing any
 * arguments or changes.</p>
 */
export async function postExternalAccountsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ExternalAccount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/external_accounts/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all file links
 * <p>Returns a list of file links.</p>
 */
export async function getFileLinks<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    expired?: boolean;
    file?: string;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: FileLink[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/file_links',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'expired',
      'file',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a file link
 * <p>Creates a new file link object.</p>
 */
export async function postFileLinks<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, FileLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/file_links',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a file link
 * <p>Retrieves the file link with the given ID.</p>
 */
export async function getFileLinksLink<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    link: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, FileLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/file_links/{link}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a file link
 * <p>Updates an existing file link object. Expired links can no longer be updated.</p>
 */
export async function postFileLinksLink<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    link: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, FileLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/file_links/{link}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all files
 * <p>Returns a list of the files that your account has access to. Stripe sorts and returns the files by their creation
 * dates, placing the most recently created files at the top.</p>
 */
export async function getFiles<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    purpose?:
      | 'account_requirement'
      | 'additional_verification'
      | 'business_icon'
      | 'business_logo'
      | 'customer_signature'
      | 'dispute_evidence'
      | 'document_provider_identity_document'
      | 'finance_report_run'
      | 'financial_account_statement'
      | 'identity_document'
      | 'identity_document_downloadable'
      | 'issuing_regulatory_reporting'
      | 'pci_document'
      | 'selfie'
      | 'sigma_scheduled_query'
      | 'tax_document_user_upload'
      | 'terminal_reader_splashscreen';
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: File[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/files',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'purpose',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a file
 * <p>To upload a file to Stripe, you need to send a request of type <code>multipart/form-data</code>. Include the file you
 * want to upload in the request, and the parameters for creating a file.</p>
 *
 * <p>All of Stripe’s officially supported
 * Client libraries support sending <code>multipart/form-data</code>.</p>
 */
export async function postFiles<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, File> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/files',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a file
 * <p>Retrieves the details of an existing file object. After you supply a unique file ID, Stripe returns the corresponding
 * file object. Learn how to <a href="/docs/file-upload#download-file-contents">access file contents</a>.</p>
 */
export async function getFilesFile<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    file: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, File> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/files/{file}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List Accounts
 * <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
 */
export async function getFinancialConnectionsAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account_holder?: {
      account?: string;
      customer?: string;
    };
    ending_before?: string;
    expand?: string[];
    limit?: number;
    session?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: FinancialConnectionsAccount[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/accounts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'account_holder',
      'ending_before',
      'expand',
      'limit',
      'session',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an Account
 * <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
 */
export async function getFinancialConnectionsAccountsAccount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/accounts/{account}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Disconnect an Account
 * <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data
 * associated with the account (e.g. balances, transactions).</p>
 */
export async function postFinancialConnectionsAccountsAccountDisconnect<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/accounts/{account}/disconnect',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List Account Owners
 * <p>Lists all owners for a given <code>Account</code></p>
 */
export async function getFinancialConnectionsAccountsAccountOwners<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    ownership: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: FinancialConnectionsAccountOwner[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/accounts/{account}/owners',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'ownership',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Refresh Account data
 * <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
 */
export async function postFinancialConnectionsAccountsAccountRefresh<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/accounts/{account}/refresh',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Subscribe to data refreshes for an Account
 * <p>Subscribes to periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
 */
export async function postFinancialConnectionsAccountsAccountSubscribe<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/accounts/{account}/subscribe',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Unsubscribe from data refreshes for an Account
 * <p>Unsubscribes from periodic refreshes of data associated with a Financial Connections <code>Account</code>.</p>
 */
export async function postFinancialConnectionsAccountsAccountUnsubscribe<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/accounts/{account}/unsubscribe',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Session
 * <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s
 * <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
 */
export async function postFinancialConnectionsSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/sessions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Session
 * <p>Retrieves the details of a Financial Connections <code>Session</code></p>
 */
export async function getFinancialConnectionsSessionsSession<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/sessions/{session}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List Transactions
 * <p>Returns a list of Financial Connections <code>Transaction</code> objects.</p>
 */
export async function getFinancialConnectionsTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    transacted_at?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    transaction_refresh?: {
      after: string;
    };
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: FinancialConnectionsTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'account',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'transacted_at',
      'transaction_refresh',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Transaction
 * <p>Retrieves the details of a Financial Connections <code>Transaction</code></p>
 */
export async function getFinancialConnectionsTransactionsTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/financial_connections/transactions/{transaction}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all ForwardingRequests
 * <p>Lists all ForwardingRequest objects.</p>
 */
export async function getForwardingRequests<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?: {
      gt?: number;
      gte?: number;
      lt?: number;
      lte?: number;
    };
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ForwardingRequest[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/forwarding/requests',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a ForwardingRequest
 * <p>Creates a ForwardingRequest object.</p>
 */
export async function postForwardingRequests<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ForwardingRequest> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/forwarding/requests',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a ForwardingRequest
 * <p>Retrieves a ForwardingRequest object.</p>
 */
export async function getForwardingRequestsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ForwardingRequest> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/forwarding/requests/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List VerificationReports
 * <p>List all verification reports.</p>
 */
export async function getIdentityVerificationReports<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_reference_id?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    type?: 'document' | 'id_number';
    verification_session?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IdentityVerificationReport[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_reports',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'client_reference_id',
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'type',
      'verification_session',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a VerificationReport
 * <p>Retrieves an existing VerificationReport</p>
 */
export async function getIdentityVerificationReportsReport<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    report: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IdentityVerificationReport>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_reports/{report}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List VerificationSessions
 * <p>Returns a list of VerificationSessions</p>
 */
export async function getIdentityVerificationSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_reference_id?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    related_customer?: string;
    starting_after?: string;
    status?: 'canceled' | 'processing' | 'requires_input' | 'verified';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IdentityVerificationSession[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_sessions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'client_reference_id',
      'created',
      'ending_before',
      'expand',
      'limit',
      'related_customer',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a VerificationSession
 * <p>Creates a VerificationSession object.</p>
 *
 * <p>After the VerificationSession is created, display a verification modal
 * using the session <code>client_secret</code> or send your users to the session’s <code>url</code>.</p>
 *
 * <p>If your API
 * key is in test mode, verification checks won’t actually process, though everything else will occur as if in live
 * mode.</p>
 *
 * <p>Related guide: <a href="/docs/identity/verify-identity-documents">Verify your users’ identity
 * documents</a></p>
 */
export async function postIdentityVerificationSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IdentityVerificationSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_sessions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a VerificationSession
 * <p>Retrieves the details of a VerificationSession that was previously created.</p>
 *
 * <p>When the session status is
 * <code>requires_input</code>, you can use this method to retrieve a valid
 * <code>client_secret</code> or <code>url</code>
 * to allow re-submission.</p>
 */
export async function getIdentityVerificationSessionsSession<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IdentityVerificationSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_sessions/{session}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a VerificationSession
 * <p>Updates a VerificationSession object.</p>
 *
 * <p>When the session status is <code>requires_input</code>, you can use
 * this method to update the
 * verification check and options.</p>
 */
export async function postIdentityVerificationSessionsSession<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IdentityVerificationSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_sessions/{session}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a VerificationSession
 * <p>A VerificationSession object can be canceled when it is in <code>requires_input</code> <a
 * href="/docs/identity/how-sessions-work">status</a>.</p>
 *
 * <p>Once canceled, future submission attempts are disabled. This
 * cannot be undone. <a href="/docs/identity/verification-sessions#cancel">Learn more</a>.</p>
 */
export async function postIdentityVerificationSessionsSessionCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IdentityVerificationSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_sessions/{session}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Redact a VerificationSession
 * <p>Redact a VerificationSession to remove all collected information from Stripe. This will redact
 * the
 * VerificationSession and all objects related to it, including VerificationReports, Events,
 * request logs, etc.</p>
 *
 * <p>A
 * VerificationSession object can be redacted when it is in <code>requires_input</code> or <code>verified</code>
 * <a
 * href="/docs/identity/how-sessions-work">status</a>. Redacting a VerificationSession in
 * <code>requires_action</code>
 * state will automatically cancel it.</p>
 *
 * <p>The redaction process may take up to four days.
 * When the redaction process is in progress, the
 * VerificationSession’s <code>redaction.status</code> field will be set to
 * <code>processing</code>; when the process is
 * finished, it will change to <code>redacted</code> and an
 * <code>identity.verification_session.redacted</code> event
 * will be emitted.</p>
 *
 * <p>Redaction is irreversible. Redacted
 * objects are still accessible in the Stripe API, but all the
 * fields that contain personal data will be replaced by the
 * string <code>[redacted]</code> or a similar
 * placeholder. The <code>metadata</code> field will also be erased. Redacted
 * objects cannot be updated or
 * used for any purpose.</p>
 *
 * <p><a href="/docs/identity/verification-sessions#redact">Learn
 * more</a>.</p>
 */
export async function postIdentityVerificationSessionsSessionRedact<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IdentityVerificationSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/identity/verification_sessions/{session}/redact',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all payments for an invoice
 * <p>When retrieving an invoice, there is an includable payments property containing the first handful of those items.
 * There is also a URL where you can retrieve the full (paginated) list of payments.</p>
 */
export async function getInvoicePayments<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    invoice?: string;
    limit?: number;
    payment?: {
      payment_intent?: string;
      type: 'payment_intent';
    };
    starting_after?: string;
    status?: 'canceled' | 'open' | 'paid';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: InvoicePayment[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoice_payments',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'invoice',
      'limit',
      'payment',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an InvoicePayment
 * <p>Retrieves the invoice payment with the given ID.</p>
 */
export async function getInvoicePaymentsInvoicePayment<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    invoice_payment: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, InvoicePayment> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoice_payments/{invoice_payment}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all invoice rendering templates
 * <p>List all templates, ordered by creation date, with the most recently created template appearing first.</p>
 */
export async function getInvoiceRenderingTemplates<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'active' | 'archived';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: InvoiceRenderingTemplate[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoice_rendering_templates',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an invoice rendering template
 * <p>Retrieves an invoice rendering template with the given ID. It by default returns the latest version of the template.
 * Optionally, specify a version to see previous versions.</p>
 */
export async function getInvoiceRenderingTemplatesTemplate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    template: string;
    version?: number;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, InvoiceRenderingTemplate>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoice_rendering_templates/{template}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'version'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Archive an invoice rendering template
 * <p>Updates the status of an invoice rendering template to ‘archived’ so no new Stripe objects (customers, invoices,
 * etc.) can reference it. The template can also no longer be updated. However, if the template is already set on a Stripe
 * object, it will continue to be applied on invoices generated by it.</p>
 */
export async function postInvoiceRenderingTemplatesTemplateArchive<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    template: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, InvoiceRenderingTemplate>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoice_rendering_templates/{template}/archive',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Unarchive an invoice rendering template
 * <p>Unarchive an invoice rendering template so it can be used on new Stripe objects again.</p>
 */
export async function postInvoiceRenderingTemplatesTemplateUnarchive<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    template: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, InvoiceRenderingTemplate>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoice_rendering_templates/{template}/unarchive',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all invoice items
 * <p>Returns a list of your invoice items. Invoice items are returned sorted by creation date, with the most recently
 * created invoice items appearing first.</p>
 */
export async function getInvoiceitems<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    invoice?: string;
    limit?: number;
    pending?: boolean;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Invoiceitem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoiceitems',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'customer',
      'ending_before',
      'expand',
      'invoice',
      'limit',
      'pending',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an invoice item
 * <p>Creates an item to be added to a draft invoice (up to 250 items per invoice). If no invoice is specified, the item
 * will be on the next invoice created for the customer specified.</p>
 */
export async function postInvoiceitems<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoiceitem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoiceitems',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete an invoice item
 * <p>Deletes an invoice item, removing it from an invoice. Deleting invoice items is only possible when they’re not
 * attached to invoices, or if it’s attached to a draft invoice.</p>
 */
export async function deleteInvoiceitemsInvoiceitem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoiceitem: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedInvoiceitem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoiceitems/{invoiceitem}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an invoice item
 * <p>Retrieves the invoice item with the given ID.</p>
 */
export async function getInvoiceitemsInvoiceitem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    invoiceitem: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoiceitem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoiceitems/{invoiceitem}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an invoice item
 * <p>Updates the amount or description of an invoice item on an upcoming invoice. Updating an invoice item is only
 * possible before the invoice it’s attached to is closed.</p>
 */
export async function postInvoiceitemsInvoiceitem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoiceitem: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoiceitem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoiceitems/{invoiceitem}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all invoices
 * <p>You can list all invoices, or list the invoices for a specific customer. The invoices are returned sorted by creation
 * date, with the most recently created invoices appearing first.</p>
 */
export async function getInvoices<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    collection_method?: 'charge_automatically' | 'send_invoice';
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    due_date?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'draft' | 'open' | 'paid' | 'uncollectible' | 'void';
    subscription?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Invoice[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'collection_method',
      'created',
      'customer',
      'due_date',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
      'subscription',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an invoice
 * <p>This endpoint creates a draft invoice for a given customer. The invoice remains a draft until you <a
 * href="#finalize_invoice">finalize</a> the invoice, which allows you to <a href="#pay_invoice">pay</a> or <a
 * href="#send_invoice">send</a> the invoice to your customers.</p>
 */
export async function postInvoices<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a preview invoice
 * <p>At any time, you can preview the upcoming invoice for a subscription or subscription schedule. This will show you all
 * the charges that are pending, including subscription renewal charges, invoice item charges, etc. It will also show you
 * any discounts that are applicable to the invoice.</p>
 *
 * <p>You can also preview the effects of creating or updating a
 * subscription or subscription schedule, including a preview of any prorations that will take place. To ensure that the
 * actual proration is calculated exactly the same as the previewed proration, you should pass the
 * <code>subscription_details.proration_date</code> parameter when doing the actual subscription update.</p>
 *
 * <p>The
 * recommended way to get only the prorations being previewed on the invoice is to consider line items where
 * <code>parent.subscription_item_details.proration</code> is <code>true</code>.</p>
 *
 * <p>Note that when you are viewing an
 * upcoming invoice, you are simply viewing a preview – the invoice has not yet been created. As such, the upcoming invoice
 * will not show up in invoice listing calls, and you cannot use the API to pay or edit the invoice. If you want to change
 * the amount that your customer will be billed, you can add, remove, or update pending invoice items, or update the
 * customer’s discount.</p>
 *
 * <p>Note: Currency conversion calculations use the latest exchange rates. Exchange rates may
 * vary between the time of the preview and the time of the actual invoice creation. <a
 * href="https://docs.stripe.com/currencies/conversions">Learn more</a></p>
 */
export async function postInvoicesCreatePreview<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/create_preview',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Search invoices
 * <p>Search for invoices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search
 * Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal
 * operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be
 * up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export async function getInvoicesSearch<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    limit?: number;
    page?: string;
    query: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Invoice[];
        has_more: boolean;
        next_page?: string | null;
        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        object: 'search_result';
        /**
         * The total number of objects that match the query, only accurate up to 10,000.
         */
        total_count?: number;
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/search',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'limit', 'page', 'query'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a draft invoice
 * <p>Permanently deletes a one-off invoice draft. This cannot be undone. Attempts to delete invoices that are no longer in
 * a draft state will fail; once an invoice has been finalized or if an invoice is for a subscription, it must be <a
 * href="#void_invoice">voided</a>.</p>
 */
export async function deleteInvoicesInvoice<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedInvoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an invoice
 * <p>Retrieves the invoice with the given ID.</p>
 */
export async function getInvoicesInvoice<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an invoice
 * <p>Draft invoices are fully editable. Once an invoice is <a
 * href="/docs/billing/invoices/workflow#finalized">finalized</a>,
 * monetary values, as well as
 * <code>collection_method</code>, become uneditable.</p>
 *
 * <p>If you would like to stop the Stripe Billing engine from
 * automatically finalizing, reattempting payments on,
 * sending reminders for, or <a
 * href="/docs/billing/invoices/reconciliation">automatically reconciling</a> invoices,
 * pass
 * <code>auto_advance=false</code>.</p>
 */
export async function postInvoicesInvoice<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Bulk add invoice line items
 * <p>Adds multiple line items to an invoice. This is only possible when an invoice is still a draft.</p>
 */
export async function postInvoicesInvoiceAddLines<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/add_lines',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Attach a payment to an Invoice
 * <p>Attaches a PaymentIntent or an Out of Band Payment to the invoice, adding it to the list of
 * <code>payments</code>.</p>
 *
 * <p>For the PaymentIntent, when the PaymentIntent’s status changes to <code>succeeded</code>,
 * the payment is credited
 * to the invoice, increasing its <code>amount_paid</code>. When the invoice is fully paid,
 * the
 * invoice’s status becomes <code>paid</code>.</p>
 *
 * <p>If the PaymentIntent’s status is already <code>succeeded</code>
 * when it’s attached, it’s
 * credited to the invoice immediately.</p>
 *
 * <p>See: <a
 * href="/docs/invoicing/partial-payments">Partial payments</a> to learn more.</p>
 */
export async function postInvoicesInvoiceAttachPayment<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/attach_payment',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Finalize an invoice
 * <p>Stripe automatically finalizes drafts before sending and attempting payment on invoices. However, if you’d like to
 * finalize a draft invoice manually, you can do so using this method.</p>
 */
export async function postInvoicesInvoiceFinalize<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/finalize',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an invoice's line items
 * <p>When retrieving an invoice, you’ll get a <strong>lines</strong> property containing the total count of line items and
 * the first handful of those items. There is also a URL where you can retrieve the full (paginated) list of line
 * items.</p>
 */
export async function getInvoicesInvoiceLines<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    invoice: string;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: LineItem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/lines',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an invoice's line item
 * <p>Updates an invoice’s line item. Some fields, such as <code>tax_amounts</code>, only live on the invoice line item,
 * so
 * they can only be updated through this endpoint. Other fields, such as <code>amount</code>, live on both the invoice
 * item
 * and the invoice line item, so updates on this endpoint will propagate to the invoice item as well.
 * Updating an invoice’s
 * line item is only possible before the invoice is finalized.</p>
 */
export async function postInvoicesInvoiceLinesLineItemId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
    line_item_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, LineItem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/lines/{line_item_id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Mark an invoice as uncollectible
 * <p>Marking an invoice as uncollectible is useful for keeping track of bad debts that can be written off for accounting
 * purposes.</p>
 */
export async function postInvoicesInvoiceMarkUncollectible<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/mark_uncollectible',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Pay an invoice
 * <p>Stripe automatically creates and then attempts to collect payment on invoices for customers on subscriptions
 * according to your <a href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However,
 * if you’d like to attempt payment on an invoice out of the normal collection schedule or for some other reason, you can
 * do so.</p>
 */
export async function postInvoicesInvoicePay<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/pay',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Bulk remove invoice line items
 * <p>Removes multiple line items from an invoice. This is only possible when an invoice is still a draft.</p>
 */
export async function postInvoicesInvoiceRemoveLines<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/remove_lines',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Send an invoice for manual payment
 * <p>Stripe will automatically send invoices to customers according to your <a
 * href="https://dashboard.stripe.com/account/billing/automatic">subscriptions settings</a>. However, if you’d like to
 * manually send an invoice to your customer out of the normal schedule, you can do so. When sending invoices that have
 * already been paid, there will be no reference to the payment in the email.</p>
 *
 * <p>Requests made in test-mode result in
 * no emails being sent, despite sending an <code>invoice.sent</code> event.</p>
 */
export async function postInvoicesInvoiceSend<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/send',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Bulk update invoice line items
 * <p>Updates multiple line items on an invoice. This is only possible when an invoice is still a draft.</p>
 */
export async function postInvoicesInvoiceUpdateLines<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/update_lines',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Void an invoice
 * <p>Mark a finalized invoice as void. This cannot be undone. Voiding an invoice is similar to <a
 * href="#delete_invoice">deletion</a>, however it only applies to finalized invoices and maintains a papertrail where the
 * invoice can still be found.</p>
 *
 * <p>Consult with local regulations to determine whether and how an invoice might be
 * amended, canceled, or voided in the jurisdiction you’re doing business in. You might need to <a
 * href="#create_invoice">issue another invoice</a> or <a href="#create_credit_note">credit note</a> instead. Stripe
 * recommends that you consult with your legal counsel for advice specific to your business.</p>
 */
export async function postInvoicesInvoiceVoid<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invoice: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Invoice> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/invoices/{invoice}/void',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all authorizations
 * <p>Returns a list of Issuing <code>Authorization</code> objects. The objects are sorted in descending order by creation
 * date, with the most recently created object appearing first.</p>
 */
export async function getIssuingAuthorizations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card?: string;
    cardholder?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'closed' | 'expired' | 'pending' | 'reversed';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingAuthorization[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/authorizations',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'card',
      'cardholder',
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an authorization
 * <p>Retrieves an Issuing <code>Authorization</code> object.</p>
 */
export async function getIssuingAuthorizationsAuthorization<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/authorizations/{authorization}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an authorization
 * <p>Updates the specified Issuing <code>Authorization</code> object by setting the values of the parameters passed. Any
 * parameters not provided will be left unchanged.</p>
 */
export async function postIssuingAuthorizationsAuthorization<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/authorizations/{authorization}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Approve an authorization
 * <p>[Deprecated] Approves a pending Issuing <code>Authorization</code> object. This request should be made within the
 * timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real-time authorization</a> flow.
 * This
 * method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond
 * directly to the webhook request to approve an authorization</a>.</p>
 * @deprecated
 */
export async function postIssuingAuthorizationsAuthorizationApprove<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/authorizations/{authorization}/approve',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Decline an authorization
 * <p>[Deprecated] Declines a pending Issuing <code>Authorization</code> object. This request should be made within the
 * timeout window of the <a href="/docs/issuing/controls/real-time-authorizations">real time authorization</a> flow.
 * This
 * method is deprecated. Instead, <a href="/docs/issuing/controls/real-time-authorizations#authorization-handling">respond
 * directly to the webhook request to decline an authorization</a>.</p>
 * @deprecated
 */
export async function postIssuingAuthorizationsAuthorizationDecline<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/authorizations/{authorization}/decline',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all cardholders
 * <p>Returns a list of Issuing <code>Cardholder</code> objects. The objects are sorted in descending order by creation
 * date, with the most recently created object appearing first.</p>
 */
export async function getIssuingCardholders<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    email?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    phone_number?: string;
    starting_after?: string;
    status?: 'active' | 'blocked' | 'inactive';
    type?: 'company' | 'individual';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingCardholder[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cardholders',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'email',
      'ending_before',
      'expand',
      'limit',
      'phone_number',
      'starting_after',
      'status',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a cardholder
 * <p>Creates a new Issuing <code>Cardholder</code> object that can be issued cards.</p>
 */
export async function postIssuingCardholders<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCardholder> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cardholders',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a cardholder
 * <p>Retrieves an Issuing <code>Cardholder</code> object.</p>
 */
export async function getIssuingCardholdersCardholder<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    cardholder: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCardholder> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cardholders/{cardholder}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a cardholder
 * <p>Updates the specified Issuing <code>Cardholder</code> object by setting the values of the parameters passed. Any
 * parameters not provided will be left unchanged.</p>
 */
export async function postIssuingCardholdersCardholder<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    cardholder: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCardholder> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cardholders/{cardholder}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all cards
 * <p>Returns a list of Issuing <code>Card</code> objects. The objects are sorted in descending order by creation date,
 * with the most recently created object appearing first.</p>
 */
export async function getIssuingCards<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    cardholder?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    exp_month?: number;
    exp_year?: number;
    expand?: string[];
    last4?: string;
    limit?: number;
    personalization_design?: string;
    starting_after?: string;
    status?: 'active' | 'canceled' | 'inactive';
    type?: 'physical' | 'virtual';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingCard[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cards',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'cardholder',
      'created',
      'ending_before',
      'exp_month',
      'exp_year',
      'expand',
      'last4',
      'limit',
      'personalization_design',
      'starting_after',
      'status',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a card
 * <p>Creates an Issuing <code>Card</code> object.</p>
 */
export async function postIssuingCards<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cards',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a card
 * <p>Retrieves an Issuing <code>Card</code> object.</p>
 */
export async function getIssuingCardsCard<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cards/{card}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a card
 * <p>Updates the specified Issuing <code>Card</code> object by setting the values of the parameters passed. Any parameters
 * not provided will be left unchanged.</p>
 */
export async function postIssuingCardsCard<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/cards/{card}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all disputes
 * <p>Returns a list of Issuing <code>Dispute</code> objects. The objects are sorted in descending order by creation date,
 * with the most recently created object appearing first.</p>
 */
export async function getIssuingDisputes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'expired' | 'lost' | 'submitted' | 'unsubmitted' | 'won';
    transaction?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingDispute[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/disputes',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
      'transaction',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a dispute
 * <p>Creates an Issuing <code>Dispute</code> object. Individual pieces of evidence within the <code>evidence</code> object
 * are optional at this point. Stripe only validates that required evidence is present during submission. Refer to <a
 * href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a> for more details
 * about evidence requirements.</p>
 */
export async function postIssuingDisputes<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingDispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/disputes',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a dispute
 * <p>Retrieves an Issuing <code>Dispute</code> object.</p>
 */
export async function getIssuingDisputesDispute<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    dispute: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingDispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/disputes/{dispute}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a dispute
 * <p>Updates the specified Issuing <code>Dispute</code> object by setting the values of the parameters passed. Any
 * parameters not provided will be left unchanged. Properties on the <code>evidence</code> object can be unset by passing
 * in an empty string.</p>
 */
export async function postIssuingDisputesDispute<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    dispute: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingDispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/disputes/{dispute}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Submit a dispute
 * <p>Submits an Issuing <code>Dispute</code> to the card network. Stripe validates that all evidence fields required for
 * the dispute’s reason are present. For more details, see <a
 * href="/docs/issuing/purchases/disputes#dispute-reasons-and-evidence">Dispute reasons and evidence</a>.</p>
 */
export async function postIssuingDisputesDisputeSubmit<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    dispute: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingDispute> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/disputes/{dispute}/submit',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all personalization designs
 * <p>Returns a list of personalization design objects. The objects are sorted in descending order by creation date, with
 * the most recently created object appearing first.</p>
 */
export async function getIssuingPersonalizationDesigns<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    lookup_keys?: string[];
    preferences?: {
      is_default?: boolean;
      is_platform_default?: boolean;
    };
    starting_after?: string;
    status?: 'active' | 'inactive' | 'rejected' | 'review';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingPersonalizationDesign[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/personalization_designs',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'lookup_keys',
      'preferences',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a personalization design
 * <p>Creates a personalization design object.</p>
 */
export async function postIssuingPersonalizationDesigns<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingPersonalizationDesign>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/personalization_designs',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a personalization design
 * <p>Retrieves a personalization design object.</p>
 */
export async function getIssuingPersonalizationDesignsPersonalizationDesign<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    personalization_design: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingPersonalizationDesign>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/personalization_designs/{personalization_design}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a personalization design
 * <p>Updates a card personalization object.</p>
 */
export async function postIssuingPersonalizationDesignsPersonalizationDesign<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    personalization_design: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingPersonalizationDesign>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/personalization_designs/{personalization_design}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all physical bundles
 * <p>Returns a list of physical bundle objects. The objects are sorted in descending order by creation date, with the most
 * recently created object appearing first.</p>
 */
export async function getIssuingPhysicalBundles<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'active' | 'inactive' | 'review';
    type?: 'custom' | 'standard';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingPhysicalBundle[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/physical_bundles',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a physical bundle
 * <p>Retrieves a physical bundle object.</p>
 */
export async function getIssuingPhysicalBundlesPhysicalBundle<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    physical_bundle: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingPhysicalBundle>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/physical_bundles/{physical_bundle}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a settlement
 * <p>Retrieves an Issuing <code>Settlement</code> object.</p>
 */
export async function getIssuingSettlementsSettlement<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    settlement: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingSettlement> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/settlements/{settlement}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a settlement
 * <p>Updates the specified Issuing <code>Settlement</code> object by setting the values of the parameters passed. Any
 * parameters not provided will be left unchanged.</p>
 */
export async function postIssuingSettlementsSettlement<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    settlement: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingSettlement> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/settlements/{settlement}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all issuing tokens for card
 * <p>Lists all Issuing <code>Token</code> objects for a given card.</p>
 */
export async function getIssuingTokens<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'active' | 'deleted' | 'requested' | 'suspended';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingToken[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/tokens',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'card',
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an issuing token
 * <p>Retrieves an Issuing <code>Token</code> object.</p>
 */
export async function getIssuingTokensToken<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    token: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingToken> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/tokens/{token}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a token status
 * <p>Attempts to update the specified Issuing <code>Token</code> object to the status specified.</p>
 */
export async function postIssuingTokensToken<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    token: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingToken> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/tokens/{token}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all transactions
 * <p>Returns a list of Issuing <code>Transaction</code> objects. The objects are sorted in descending order by creation
 * date, with the most recently created object appearing first.</p>
 */
export async function getIssuingTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card?: string;
    cardholder?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    type?: 'capture' | 'refund';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: IssuingTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'card',
      'cardholder',
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a transaction
 * <p>Retrieves an Issuing <code>Transaction</code> object.</p>
 */
export async function getIssuingTransactionsTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/transactions/{transaction}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a transaction
 * <p>Updates the specified Issuing <code>Transaction</code> object by setting the values of the parameters passed. Any
 * parameters not provided will be left unchanged.</p>
 */
export async function postIssuingTransactionsTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/issuing/transactions/{transaction}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Session
 * <p>To launch the Financial Connections authorization flow, create a <code>Session</code>. The session’s
 * <code>client_secret</code> can be used to launch the flow using Stripe.js.</p>
 */
export async function postLinkAccountSessions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/link_account_sessions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Session
 * <p>Retrieves the details of a Financial Connections <code>Session</code></p>
 */
export async function getLinkAccountSessionsSession<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    session: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsSession>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/link_account_sessions/{session}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List Accounts
 * <p>Returns a list of Financial Connections <code>Account</code> objects.</p>
 */
export async function getLinkedAccounts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account_holder?: {
      account?: string;
      customer?: string;
    };
    ending_before?: string;
    expand?: string[];
    limit?: number;
    session?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: FinancialConnectionsAccount[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/linked_accounts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'account_holder',
      'ending_before',
      'expand',
      'limit',
      'session',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an Account
 * <p>Retrieves the details of an Financial Connections <code>Account</code>.</p>
 */
export async function getLinkedAccountsAccount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/linked_accounts/{account}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Disconnect an Account
 * <p>Disables your access to a Financial Connections <code>Account</code>. You will no longer be able to access data
 * associated with the account (e.g. balances, transactions).</p>
 */
export async function postLinkedAccountsAccountDisconnect<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/linked_accounts/{account}/disconnect',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List Account Owners
 * <p>Lists all owners for a given <code>Account</code></p>
 */
export async function getLinkedAccountsAccountOwners<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    ownership: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: FinancialConnectionsAccountOwner[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/linked_accounts/{account}/owners',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'ownership',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Refresh Account data
 * <p>Refreshes the data associated with a Financial Connections <code>Account</code>.</p>
 */
export async function postLinkedAccountsAccountRefresh<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, FinancialConnectionsAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/linked_accounts/{account}/refresh',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Mandate
 * <p>Retrieves a Mandate object.</p>
 */
export async function getMandatesMandate<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    mandate: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Mandate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/mandates/{mandate}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all PaymentIntents
 * <p>Returns a list of PaymentIntents.</p>
 */
export async function getPaymentIntents<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PaymentIntent[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'customer',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a PaymentIntent
 * <p>Creates a PaymentIntent object.</p>
 *
 * <p>After the PaymentIntent is created, attach a payment method and <a
 * href="/docs/api/payment_intents/confirm">confirm</a>
 * to continue the payment. Learn more about <a
 * href="/docs/payments/payment-intents">the available payment flows
 * with the Payment Intents API</a>.</p>
 *
 * <p>When you use
 * <code>confirm=true</code> during creation, it’s equivalent to creating
 * and confirming the PaymentIntent in the same
 * call. You can use any parameters
 * available in the <a href="/docs/api/payment_intents/confirm">confirm API</a> when you
 * supply
 * <code>confirm=true</code>.</p>
 */
export async function postPaymentIntents<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Search PaymentIntents
 * <p>Search for PaymentIntents you’ve previously created using Stripe’s <a
 * href="/docs/search#search-query-language">Search Query Language</a>.
 * Don’t use search in read-after-write flows where
 * strict consistency is necessary. Under normal operating
 * conditions, data is searchable in less than a minute.
 * Occasionally, propagation of new or updated data can be up
 * to an hour behind during outages. Search functionality is not
 * available to merchants in India.</p>
 */
export async function getPaymentIntentsSearch<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    limit?: number;
    page?: string;
    query: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PaymentIntent[];
        has_more: boolean;
        next_page?: string | null;
        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        object: 'search_result';
        /**
         * The total number of objects that match the query, only accurate up to 10,000.
         */
        total_count?: number;
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/search',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'limit', 'page', 'query'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a PaymentIntent
 * <p>Retrieves the details of a PaymentIntent that has previously been created. </p>
 *
 * <p>You can retrieve a PaymentIntent
 * client-side using a publishable key when the <code>client_secret</code> is in the query string. </p>
 *
 * <p>If you retrieve
 * a PaymentIntent with a publishable key, it only returns a subset of properties. Refer to the <a
 * href="#payment_intent_object">payment intent</a> object reference for more details.</p>
 */
export async function getPaymentIntentsIntent<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_secret?: string;
    expand?: string[];
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['client_secret', 'expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a PaymentIntent
 * <p>Updates properties on a PaymentIntent object without confirming.</p>
 *
 * <p>Depending on which properties you update,
 * you might need to confirm the
 * PaymentIntent again. For example, updating the <code>payment_method</code>
 * always requires
 * you to confirm the PaymentIntent again. If you prefer to
 * update and confirm at the same time, we recommend updating
 * properties through
 * the <a href="/docs/api/payment_intents/confirm">confirm API</a> instead.</p>
 */
export async function postPaymentIntentsIntent<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Reconcile a customer_balance PaymentIntent
 * <p>Manually reconcile the remaining amount for a <code>customer_balance</code> PaymentIntent.</p>
 */
export async function postPaymentIntentsIntentApplyCustomerBalance<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}/apply_customer_balance',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a PaymentIntent
 * <p>You can cancel a PaymentIntent object when it’s in one of these statuses: <code>requires_payment_method</code>,
 * <code>requires_capture</code>, <code>requires_confirmation</code>, <code>requires_action</code> or, <a
 * href="/docs/payments/intents">in rare cases</a>, <code>processing</code>. </p>
 *
 * <p>After it’s canceled, no additional
 * charges are made by the PaymentIntent and any operations on the PaymentIntent fail with an error. For PaymentIntents
 * with a <code>status</code> of <code>requires_capture</code>, the remaining <code>amount_capturable</code> is
 * automatically refunded. </p>
 *
 * <p>You can’t cancel the PaymentIntent for a Checkout Session. <a
 * href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
 */
export async function postPaymentIntentsIntentCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Capture a PaymentIntent
 * <p>Capture the funds of an existing uncaptured PaymentIntent when its status is
 * <code>requires_capture</code>.</p>
 *
 * <p>Uncaptured PaymentIntents are cancelled a set number of days (7 by default) after
 * their creation.</p>
 *
 * <p>Learn more about <a href="/docs/payments/capture-later">separate authorization and
 * capture</a>.</p>
 */
export async function postPaymentIntentsIntentCapture<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}/capture',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Confirm a PaymentIntent
 * <p>Confirm that your customer intends to pay with current or provided
 * payment method. Upon confirmation, the
 * PaymentIntent will attempt to initiate
 * a payment.
 * If the selected payment method requires additional authentication
 * steps, the
 * PaymentIntent will transition to the <code>requires_action</code> status and
 * suggest additional actions via
 * <code>next_action</code>. If payment fails,
 * the PaymentIntent transitions to the <code>requires_payment_method</code>
 * status or the
 * <code>canceled</code> status if the confirmation limit is reached. If
 * payment succeeds, the PaymentIntent
 * will transition to the <code>succeeded</code>
 * status (or <code>requires_capture</code>, if <code>capture_method</code>
 * is set to <code>manual</code>).
 * If the <code>confirmation_method</code> is <code>automatic</code>, payment may be
 * attempted
 * using our <a href="/docs/stripe-js/reference#stripe-handle-card-payment">client SDKs</a>
 * and the
 * PaymentIntent’s <a href="#payment_intent_object-client_secret">client_secret</a>.
 * After <code>next_action</code>s are
 * handled by the client, no additional
 * confirmation is required to complete the payment.
 * If the
 * <code>confirmation_method</code> is <code>manual</code>, all payment attempts must be
 * initiated using a secret key.
 * If
 * any actions are required for the payment, the PaymentIntent will
 * return to the <code>requires_confirmation</code>
 * state
 * after those actions are completed. Your server needs to then
 * explicitly re-confirm the PaymentIntent to initiate
 * the next payment
 * attempt.
 * There is a variable upper limit on how many times a PaymentIntent can be confirmed.
 * After this
 * limit is reached, any further calls to this endpoint will
 * transition the PaymentIntent to the <code>canceled</code>
 * state.</p>
 */
export async function postPaymentIntentsIntentConfirm<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}/confirm',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Increment an authorization
 * <p>Perform an incremental authorization on an eligible
 * <a href="/docs/api/payment_intents/object">PaymentIntent</a>. To
 * be eligible, the
 * PaymentIntent’s status must be <code>requires_capture</code> and
 * <a
 * href="/docs/api/charges/object#charge_object-payment_method_details-card_present-incremental_authorization_supported">incremental_authorization_supported</a>
 * must
 * be <code>true</code>.</p>
 *
 * <p>Incremental authorizations attempt to increase the authorized amount on
 * your customer’s
 * card to the new, higher <code>amount</code> provided. Similar to the
 * initial authorization, incremental authorizations
 * can be declined. A
 * single PaymentIntent can call this endpoint multiple times to further
 * increase the authorized
 * amount.</p>
 *
 * <p>If the incremental authorization succeeds, the PaymentIntent object
 * returns with the updated
 * <a
 * href="/docs/api/payment_intents/object#payment_intent_object-amount">amount</a>.
 * If the incremental authorization fails,
 * a
 * <a href="/docs/error-codes#card-declined">card_declined</a> error returns, and no other
 * fields on the PaymentIntent or
 * Charge update. The PaymentIntent
 * object remains capturable for the previously authorized amount.</p>
 *
 * <p>Each
 * PaymentIntent can have a maximum of 10 incremental authorization attempts, including declines.
 * After it’s captured, a
 * PaymentIntent can no longer be incremented.</p>
 *
 * <p>Learn more about <a
 * href="/docs/terminal/features/incremental-authorizations">incremental authorizations</a>.</p>
 */
export async function postPaymentIntentsIntentIncrementAuthorization<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}/increment_authorization',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Verify microdeposits on a PaymentIntent
 * <p>Verifies microdeposits on a PaymentIntent object.</p>
 */
export async function postPaymentIntentsIntentVerifyMicrodeposits<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_intents/{intent}/verify_microdeposits',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all payment links
 * <p>Returns a list of your payment links.</p>
 */
export async function getPaymentLinks<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PaymentLink[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_links',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a payment link
 * <p>Creates a payment link.</p>
 */
export async function postPaymentLinks<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_links',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve payment link
 * <p>Retrieve a payment link.</p>
 */
export async function getPaymentLinksPaymentLink<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    payment_link: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_links/{payment_link}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a payment link
 * <p>Updates a payment link.</p>
 */
export async function postPaymentLinksPaymentLink<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payment_link: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentLink> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_links/{payment_link}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a payment link's line items
 * <p>When retrieving a payment link, there is an includable <strong>line_items</strong> property containing the first
 * handful of those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export async function getPaymentLinksPaymentLinkLineItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payment_link: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Item[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_links/{payment_link}/line_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List payment method configurations
 * <p>List payment method configurations</p>
 */
export async function getPaymentMethodConfigurations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    application?: string | '';
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PaymentMethodConfiguration[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_configurations',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'application',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a payment method configuration
 * <p>Creates a payment method configuration</p>
 */
export async function postPaymentMethodConfigurations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentMethodConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_configurations',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve payment method configuration
 * <p>Retrieve payment method configuration</p>
 */
export async function getPaymentMethodConfigurationsConfiguration<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    configuration: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentMethodConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_configurations/{configuration}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update payment method configuration
 * <p>Update payment method configuration</p>
 */
export async function postPaymentMethodConfigurationsConfiguration<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    configuration: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentMethodConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_configurations/{configuration}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List payment method domains
 * <p>Lists the details of existing payment method domains.</p>
 */
export async function getPaymentMethodDomains<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    domain_name?: string;
    enabled?: boolean;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PaymentMethodDomain[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_domains',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'domain_name',
      'enabled',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a payment method domain
 * <p>Creates a payment method domain.</p>
 */
export async function postPaymentMethodDomains<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentMethodDomain>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_domains',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a payment method domain
 * <p>Retrieves the details of an existing payment method domain.</p>
 */
export async function getPaymentMethodDomainsPaymentMethodDomain<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    payment_method_domain: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentMethodDomain>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_domains/{payment_method_domain}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a payment method domain
 * <p>Updates an existing payment method domain.</p>
 */
export async function postPaymentMethodDomainsPaymentMethodDomain<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payment_method_domain: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentMethodDomain>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_domains/{payment_method_domain}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Validate an existing payment method domain
 * <p>Some payment methods might require additional steps to register a domain. If the requirements weren’t satisfied when
 * the domain was created, the payment method will be inactive on the domain.
 * The payment method doesn’t appear in Elements
 * or Embedded Checkout for this domain until it is active.</p>
 *
 * <p>To activate a payment method on an existing payment
 * method domain, complete the required registration steps specific to the payment method, and then validate the payment
 * method domain with this endpoint.</p>
 *
 * <p>Related guides: <a
 * href="/docs/payments/payment-methods/pmd-registration">Payment method domains</a>.</p>
 */
export async function postPaymentMethodDomainsPaymentMethodDomainValidate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payment_method_domain: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, PaymentMethodDomain>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_method_domains/{payment_method_domain}/validate',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List PaymentMethods
 * <p>Returns a list of PaymentMethods for Treasury flows. If you want to list the PaymentMethods attached to a Customer
 * for payments, you should use the <a href="/docs/api/payment_methods/customer_list">List a Customer’s PaymentMethods</a>
 * API instead.</p>
 */
export async function getPaymentMethods<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    type?:
      | 'acss_debit'
      | 'affirm'
      | 'afterpay_clearpay'
      | 'alipay'
      | 'alma'
      | 'amazon_pay'
      | 'au_becs_debit'
      | 'bacs_debit'
      | 'bancontact'
      | 'billie'
      | 'blik'
      | 'boleto'
      | 'card'
      | 'cashapp'
      | 'customer_balance'
      | 'eps'
      | 'fpx'
      | 'giropay'
      | 'grabpay'
      | 'ideal'
      | 'kakao_pay'
      | 'klarna'
      | 'konbini'
      | 'kr_card'
      | 'link'
      | 'mobilepay'
      | 'multibanco'
      | 'naver_pay'
      | 'nz_bank_account'
      | 'oxxo'
      | 'p24'
      | 'pay_by_bank'
      | 'payco'
      | 'paynow'
      | 'paypal'
      | 'pix'
      | 'promptpay'
      | 'revolut_pay'
      | 'samsung_pay'
      | 'satispay'
      | 'sepa_debit'
      | 'sofort'
      | 'swish'
      | 'twint'
      | 'us_bank_account'
      | 'wechat_pay'
      | 'zip';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PaymentMethod[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_methods',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'customer',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Shares a PaymentMethod
 * <p>Creates a PaymentMethod object. Read the <a href="/docs/stripe-js/reference#stripe-create-payment-method">Stripe.js
 * reference</a> to learn how to create PaymentMethods via Stripe.js.</p>
 *
 * <p>Instead of creating a PaymentMethod directly,
 * we recommend using the <a href="/docs/payments/accept-a-payment">PaymentIntents</a> API to accept a payment immediately
 * or the <a href="/docs/payments/save-and-reuse">SetupIntent</a> API to collect payment method details ahead of a future
 * payment.</p>
 */
export async function postPaymentMethods<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentMethod> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_methods',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a PaymentMethod
 * <p>Retrieves a PaymentMethod object attached to the StripeAccount. To retrieve a payment method attached to a Customer,
 * you should use <a href="/docs/api/payment_methods/customer">Retrieve a Customer’s PaymentMethods</a></p>
 */
export async function getPaymentMethodsPaymentMethod<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    payment_method: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentMethod> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_methods/{payment_method}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a PaymentMethod
 * <p>Updates a PaymentMethod object. A PaymentMethod must be attached a customer to be updated.</p>
 */
export async function postPaymentMethodsPaymentMethod<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payment_method: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentMethod> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_methods/{payment_method}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Attach a PaymentMethod to a Customer
 * <p>Attaches a PaymentMethod object to a Customer.</p>
 *
 * <p>To attach a new PaymentMethod to a customer for future
 * payments, we recommend you use a <a href="/docs/api/setup_intents">SetupIntent</a>
 * or a PaymentIntent with <a
 * href="/docs/api/payment_intents/create#create_payment_intent-setup_future_usage">setup_future_usage</a>.
 * These
 * approaches will perform any necessary steps to set up the PaymentMethod for future payments. Using the
 * <code>/v1/payment_methods/:id/attach</code>
 * endpoint without first using a SetupIntent or PaymentIntent with
 * <code>setup_future_usage</code> does not optimize the PaymentMethod for
 * future use, which makes later declines and
 * payment friction more likely.
 * See <a href="/docs/payments/payment-intents#future-usage">Optimizing cards for future
 * payments</a> for more information about setting up
 * future payments.</p>
 *
 * <p>To use this PaymentMethod as the default for
 * invoice or subscription payments,
 * set <a
 * href="/docs/api/customers/update#update_customer-invoice_settings-default_payment_method"><code>invoice_settings.default_payment_method</code></a>,
 * on
 * the Customer to the PaymentMethod’s ID.</p>
 */
export async function postPaymentMethodsPaymentMethodAttach<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payment_method: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentMethod> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_methods/{payment_method}/attach',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Detach a PaymentMethod from a Customer
 * <p>Detaches a PaymentMethod object from a Customer. After a PaymentMethod is detached, it can no longer be used for a
 * payment or re-attached to a Customer.</p>
 */
export async function postPaymentMethodsPaymentMethodDetach<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payment_method: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PaymentMethod> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payment_methods/{payment_method}/detach',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all payouts
 * <p>Returns a list of existing payouts sent to third-party bank accounts or payouts that Stripe sent to you. The payouts
 * return in sorted order, with the most recently created payouts appearing first.</p>
 */
export async function getPayouts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    arrival_date?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    destination?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Payout[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/payouts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'arrival_date',
      'created',
      'destination',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a payout
 * <p>To send funds to your own bank account, create a new payout object. Your <a href="#balance">Stripe balance</a> must
 * cover the payout amount. If it doesn’t, you receive an “Insufficient Funds” error.</p>
 *
 * <p>If your API key is in test
 * mode, money won’t actually be sent, though every other action occurs as if you’re in live mode.</p>
 *
 * <p>If you create a
 * manual payout on a Stripe account that uses multiple payment source types, you need to specify the source type balance
 * that the payout draws from. The <a href="#balance_object">balance object</a> details available and pending amounts by
 * source type.</p>
 */
export async function postPayouts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Payout> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/payouts',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a payout
 * <p>Retrieves the details of an existing payout. Supply the unique payout ID from either a payout creation request or the
 * payout list. Stripe returns the corresponding payout information.</p>
 */
export async function getPayoutsPayout<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    payout: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Payout> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/payouts/{payout}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a payout
 * <p>Updates the specified payout by setting the values of the parameters you pass. We don’t change parameters that you
 * don’t provide. This request only accepts the metadata as arguments.</p>
 */
export async function postPayoutsPayout<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payout: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Payout> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/payouts/{payout}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a payout
 * <p>You can cancel a previously created payout if its status is <code>pending</code>. Stripe refunds the funds to your
 * available balance. You can’t cancel automatic Stripe payouts.</p>
 */
export async function postPayoutsPayoutCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payout: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Payout> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/payouts/{payout}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Reverse a payout
 * <p>Reverses a payout by debiting the destination bank account. At this time, you can only reverse payouts for connected
 * accounts to US bank accounts. If the payout is manual and in the <code>pending</code> status, use
 * <code>/v1/payouts/:id/cancel</code> instead.</p>
 *
 * <p>By requesting a reversal through
 * <code>/v1/payouts/:id/reverse</code>, you confirm that the authorized signatory of the selected bank account authorizes
 * the debit on the bank account and that no other authorization is required.</p>
 */
export async function postPayoutsPayoutReverse<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    payout: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Payout> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/payouts/{payout}/reverse',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all plans
 * <p>Returns a list of your plans.</p>
 */
export async function getPlans<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    product?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Plan[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/plans',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'created',
      'ending_before',
      'expand',
      'limit',
      'product',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a plan
 * <p>You can now model subscriptions more flexibly using the <a href="#prices">Prices API</a>. It replaces the Plans API
 * and is backwards compatible to simplify your migration.</p>
 */
export async function postPlans<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Plan> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/plans',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a plan
 * <p>Deleting plans means new subscribers can’t be added. Existing subscribers aren’t affected.</p>
 */
export async function deletePlansPlan<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    plan: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedPlan> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/plans/{plan}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a plan
 * <p>Retrieves the plan with the given ID.</p>
 */
export async function getPlansPlan<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    plan: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Plan> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/plans/{plan}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a plan
 * <p>Updates the specified plan by setting the values of the parameters passed. Any parameters not provided are left
 * unchanged. By design, you cannot change a plan’s ID, amount, currency, or billing cycle.</p>
 */
export async function postPlansPlan<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    plan: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Plan> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/plans/{plan}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all prices
 * <p>Returns a list of your active prices, excluding <a href="/docs/products-prices/pricing-models#inline-pricing">inline
 * prices</a>. For the list of inactive prices, set <code>active</code> to false.</p>
 */
export async function getPrices<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    currency?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    lookup_keys?: string[];
    product?: string;
    recurring?: {
      interval?: 'day' | 'month' | 'week' | 'year';
      meter?: string;
      usage_type?: 'licensed' | 'metered';
    };
    starting_after?: string;
    type?: 'one_time' | 'recurring';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Price[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/prices',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'created',
      'currency',
      'ending_before',
      'expand',
      'limit',
      'lookup_keys',
      'product',
      'recurring',
      'starting_after',
      'type',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a price
 * <p>Creates a new <a href="https://docs.stripe.com/api/prices">Price</a> for an existing <a
 * href="https://docs.stripe.com/api/products">Product</a>. The Price can be recurring or one-time.</p>
 */
export async function postPrices<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Price> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/prices',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Search prices
 * <p>Search for prices you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search Query
 * Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal
 * operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be
 * up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export async function getPricesSearch<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    limit?: number;
    page?: string;
    query: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Price[];
        has_more: boolean;
        next_page?: string | null;
        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        object: 'search_result';
        /**
         * The total number of objects that match the query, only accurate up to 10,000.
         */
        total_count?: number;
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/prices/search',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'limit', 'page', 'query'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a price
 * <p>Retrieves the price with the given ID.</p>
 */
export async function getPricesPrice<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    price: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Price> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/prices/{price}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a price
 * <p>Updates the specified price by setting the values of the parameters passed. Any parameters not provided are left
 * unchanged.</p>
 */
export async function postPricesPrice<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    price: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Price> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/prices/{price}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all products
 * <p>Returns a list of your products. The products are returned sorted by creation date, with the most recently created
 * products appearing first.</p>
 */
export async function getProducts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    ids?: string[];
    limit?: number;
    shippable?: boolean;
    starting_after?: string;
    url?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Product[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'created',
      'ending_before',
      'expand',
      'ids',
      'limit',
      'shippable',
      'starting_after',
      'url',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a product
 * <p>Creates a new product object.</p>
 */
export async function postProducts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Product> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Search products
 * <p>Search for products you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search
 * Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal
 * operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be
 * up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export async function getProductsSearch<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    limit?: number;
    page?: string;
    query: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Product[];
        has_more: boolean;
        next_page?: string | null;
        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        object: 'search_result';
        /**
         * The total number of objects that match the query, only accurate up to 10,000.
         */
        total_count?: number;
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/search',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'limit', 'page', 'query'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a product
 * <p>Delete a product. Deleting a product is only possible if it has no prices associated with it. Additionally, deleting
 * a product with <code>type=good</code> is only possible if it has no SKUs associated with it.</p>
 */
export async function deleteProductsId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedProduct> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a product
 * <p>Retrieves the details of an existing product. Supply the unique product ID from either a product creation request or
 * the product list, and Stripe will return the corresponding product information.</p>
 */
export async function getProductsId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Product> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a product
 * <p>Updates the specific product by setting the values of the parameters passed. Any parameters not provided will be left
 * unchanged.</p>
 */
export async function postProductsId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Product> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all features attached to a product
 * <p>Retrieve a list of features for a product</p>
 */
export async function getProductsProductFeatures<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    product: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ProductFeature[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/{product}/features',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Attach a feature to a product
 * <p>Creates a product_feature, which represents a feature attachment to a product</p>
 */
export async function postProductsProductFeatures<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    product: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ProductFeature> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/{product}/features',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Remove a feature from a product
 * <p>Deletes the feature attachment to a product</p>
 */
export async function deleteProductsProductFeaturesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
    product: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedProductFeature>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/{product}/features/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a product_feature
 * <p>Retrieves a product_feature, which represents a feature attachment to a product</p>
 */
export async function getProductsProductFeaturesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
    product: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ProductFeature> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/products/{product}/features/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all promotion codes
 * <p>Returns a list of your promotion codes.</p>
 */
export async function getPromotionCodes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    code?: string;
    coupon?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: PromotionCode[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/promotion_codes',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'code',
      'coupon',
      'created',
      'customer',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a promotion code
 * <p>A promotion code points to a coupon. You can optionally restrict the code to a specific customer, redemption limit,
 * and expiration date.</p>
 */
export async function postPromotionCodes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PromotionCode> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/promotion_codes',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a promotion code
 * <p>Retrieves the promotion code with the given ID. In order to retrieve a promotion code by the customer-facing
 * <code>code</code> use <a href="/docs/api/promotion_codes/list">list</a> with the desired <code>code</code>.</p>
 */
export async function getPromotionCodesPromotionCode<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    promotion_code: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PromotionCode> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/promotion_codes/{promotion_code}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a promotion code
 * <p>Updates the specified promotion code by setting the values of the parameters passed. Most fields are, by design, not
 * editable.</p>
 */
export async function postPromotionCodesPromotionCode<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    promotion_code: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, PromotionCode> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/promotion_codes/{promotion_code}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all quotes
 * <p>Returns a list of your quotes.</p>
 */
export async function getQuotes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'accepted' | 'canceled' | 'draft' | 'open';
    test_clock?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Quote[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/quotes',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'customer',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
      'test_clock',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a quote
 * <p>A quote models prices and services for a customer. Default options for <code>header</code>, <code>description</code>,
 * <code>footer</code>, and <code>expires_at</code> can be set in the dashboard via the <a
 * href="https://dashboard.stripe.com/settings/billing/quote">quote template</a>.</p>
 */
export async function postQuotes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Quote> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/quotes',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a quote
 * <p>Retrieves the quote with the given ID.</p>
 */
export async function getQuotesQuote<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    quote: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Quote> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a quote
 * <p>A quote models prices and services for a customer.</p>
 */
export async function postQuotesQuote<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    quote: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Quote> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Accept a quote
 * <p>Accepts the specified quote.</p>
 */
export async function postQuotesQuoteAccept<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    quote: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Quote> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}/accept',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a quote
 * <p>Cancels the quote.</p>
 */
export async function postQuotesQuoteCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    quote: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Quote> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a quote's upfront line items
 * <p>When retrieving a quote, there is an includable <a
 * href="https://stripe.com/docs/api/quotes/object#quote_object-computed-upfront-line_items"><strong>computed.upfront.line_items</strong></a>
 * property containing the first handful of those items. There is also a URL where you can retrieve the full (paginated)
 * list of upfront line items.</p>
 */
export async function getQuotesQuoteComputedUpfrontLineItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    quote: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Item[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}/computed_upfront_line_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Finalize a quote
 * <p>Finalizes the quote.</p>
 */
export async function postQuotesQuoteFinalize<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    quote: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Quote> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}/finalize',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a quote's line items
 * <p>When retrieving a quote, there is an includable <strong>line_items</strong> property containing the first handful of
 * those items. There is also a URL where you can retrieve the full (paginated) list of line items.</p>
 */
export async function getQuotesQuoteLineItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    quote: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Item[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}/line_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Download quote PDF
 * <p>Download the PDF for a finalized quote. Explanation for special handling can be found <a
 * href="https://docs.stripe.com/quotes/overview#quote_pdf">here</a></p>
 */
export async function getQuotesQuotePdf<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    quote: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, unknown> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/quotes/{quote}/pdf',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all early fraud warnings
 * <p>Returns a list of early fraud warnings.</p>
 */
export async function getRadarEarlyFraudWarnings<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payment_intent?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: RadarEarlyFraudWarning[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/early_fraud_warnings',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'charge',
      'created',
      'ending_before',
      'expand',
      'limit',
      'payment_intent',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an early fraud warning
 * <p>Retrieves the details of an early fraud warning that has previously been created. </p>
 *
 * <p>Please refer to the <a
 * href="#early_fraud_warning_object">early fraud warning</a> object reference for more details.</p>
 */
export async function getRadarEarlyFraudWarningsEarlyFraudWarning<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    early_fraud_warning: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, RadarEarlyFraudWarning>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/early_fraud_warnings/{early_fraud_warning}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all value list items
 * <p>Returns a list of <code>ValueListItem</code> objects. The objects are sorted in descending order by creation date,
 * with the most recently created object appearing first.</p>
 */
export async function getRadarValueListItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    value?: string;
    value_list: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: RadarValueListItem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_list_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'value',
      'value_list',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a value list item
 * <p>Creates a new <code>ValueListItem</code> object, which is added to the specified parent value list.</p>
 */
export async function postRadarValueListItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, RadarValueListItem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_list_items',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a value list item
 * <p>Deletes a <code>ValueListItem</code> object, removing it from its parent value list.</p>
 */
export async function deleteRadarValueListItemsItem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    item: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedRadarValueListItem>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_list_items/{item}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a value list item
 * <p>Retrieves a <code>ValueListItem</code> object.</p>
 */
export async function getRadarValueListItemsItem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    item: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, RadarValueListItem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_list_items/{item}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all value lists
 * <p>Returns a list of <code>ValueList</code> objects. The objects are sorted in descending order by creation date, with
 * the most recently created object appearing first.</p>
 */
export async function getRadarValueLists<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    alias?: string;
    contains?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: RadarValueList[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_lists',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'alias',
      'contains',
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a value list
 * <p>Creates a new <code>ValueList</code> object, which can then be referenced in rules.</p>
 */
export async function postRadarValueLists<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, RadarValueList> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_lists',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a value list
 * <p>Deletes a <code>ValueList</code> object, also deleting any items contained within the value list. To be deleted, a
 * value list must not be referenced in any rules.</p>
 */
export async function deleteRadarValueListsValueList<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    value_list: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedRadarValueList>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_lists/{value_list}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a value list
 * <p>Retrieves a <code>ValueList</code> object.</p>
 */
export async function getRadarValueListsValueList<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    value_list: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, RadarValueList> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_lists/{value_list}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a value list
 * <p>Updates a <code>ValueList</code> object by setting the values of the parameters passed. Any parameters not provided
 * will be left unchanged. Note that <code>item_type</code> is immutable.</p>
 */
export async function postRadarValueListsValueList<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    value_list: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, RadarValueList> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/radar/value_lists/{value_list}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all refunds
 * <p>Returns a list of all refunds you created. We return the refunds in sorted order, with the most recent refunds
 * appearing first. The 10 most recent refunds are always available by default on the Charge object.</p>
 */
export async function getRefunds<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    charge?: string;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payment_intent?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Refund[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/refunds',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'charge',
      'created',
      'ending_before',
      'expand',
      'limit',
      'payment_intent',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create customer balance refund
 * <p>When you create a new refund, you must specify a Charge or a PaymentIntent object on which to create
 * it.</p>
 *
 * <p>Creating a new refund will refund a charge that has previously been created but not yet refunded.
 * Funds will
 * be refunded to the credit or debit card that was originally charged.</p>
 *
 * <p>You can optionally refund only part of a
 * charge.
 * You can do so multiple times, until the entire charge has been refunded.</p>
 *
 * <p>Once entirely refunded, a
 * charge can’t be refunded again.
 * This method will raise an error when called on an already-refunded charge,
 * or when
 * trying to refund more money than is left on a charge.</p>
 */
export async function postRefunds<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/refunds',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a refund
 * <p>Retrieves the details of an existing refund.</p>
 */
export async function getRefundsRefund<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    refund: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/refunds/{refund}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a refund
 * <p>Updates the refund that you specify by setting the values of the passed parameters. Any parameters that you don’t
 * provide remain unchanged.</p>
 *
 * <p>This request only accepts <code>metadata</code> as an argument.</p>
 */
export async function postRefundsRefund<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    refund: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/refunds/{refund}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a refund
 * <p>Cancels a refund with a status of <code>requires_action</code>.</p>
 *
 * <p>You can’t cancel refunds in other states.
 * Only refunds for payment methods that require customer action can enter the <code>requires_action</code> state.</p>
 */
export async function postRefundsRefundCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    refund: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/refunds/{refund}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Report Runs
 * <p>Returns a list of Report Runs, with the most recent appearing first.</p>
 */
export async function getReportingReportRuns<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ReportingReportRun[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/reporting/report_runs',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Report Run
 * <p>Creates a new object and begin running the report. (Certain report types require a <a
 * href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
 */
export async function postReportingReportRuns<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ReportingReportRun> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/reporting/report_runs',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Report Run
 * <p>Retrieves the details of an existing Report Run.</p>
 */
export async function getReportingReportRunsReportRun<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    report_run: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ReportingReportRun> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/reporting/report_runs/{report_run}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Report Types
 * <p>Returns a full list of Report Types.</p>
 */
export async function getReportingReportTypes<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ReportingReportType[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/reporting/report_types',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Report Type
 * <p>Retrieves the details of a Report Type. (Certain report types require a <a
 * href="https://stripe.com/docs/keys#test-live-modes">live-mode API key</a>.)</p>
 */
export async function getReportingReportTypesReportType<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    report_type: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, ReportingReportType>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/reporting/report_types/{report_type}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all open reviews
 * <p>Returns a list of <code>Review</code> objects that have <code>open</code> set to <code>true</code>. The objects are
 * sorted in descending order by creation date, with the most recently created object appearing first.</p>
 */
export async function getReviews<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Review[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/reviews',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a review
 * <p>Retrieves a <code>Review</code> object.</p>
 */
export async function getReviewsReview<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    review: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Review> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/reviews/{review}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Approve a review
 * <p>Approves a <code>Review</code> object, closing it and removing it from the list of reviews.</p>
 */
export async function postReviewsReviewApprove<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    review: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Review> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/reviews/{review}/approve',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all SetupAttempts
 * <p>Returns a list of SetupAttempts that associate with a provided SetupIntent.</p>
 */
export async function getSetupAttempts<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    setup_intent: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: SetupAttempt[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_attempts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'setup_intent',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all SetupIntents
 * <p>Returns a list of SetupIntents.</p>
 */
export async function getSetupIntents<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    attach_to_self?: boolean;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    payment_method?: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: SetupIntent[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_intents',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'attach_to_self',
      'created',
      'customer',
      'ending_before',
      'expand',
      'limit',
      'payment_method',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a SetupIntent
 * <p>Creates a SetupIntent object.</p>
 *
 * <p>After you create the SetupIntent, attach a payment method and <a
 * href="/docs/api/setup_intents/confirm">confirm</a>
 * it to collect any required permissions to charge the payment method
 * later.</p>
 */
export async function postSetupIntents<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SetupIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_intents',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a SetupIntent
 * <p>Retrieves the details of a SetupIntent that has previously been created. </p>
 *
 * <p>Client-side retrieval using a
 * publishable key is allowed when the <code>client_secret</code> is provided in the query string. </p>
 *
 * <p>When retrieved
 * with a publishable key, only a subset of properties will be returned. Please refer to the <a
 * href="#setup_intent_object">SetupIntent</a> object reference for more details.</p>
 */
export async function getSetupIntentsIntent<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_secret?: string;
    expand?: string[];
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SetupIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_intents/{intent}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['client_secret', 'expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a SetupIntent
 * <p>Updates a SetupIntent object.</p>
 */
export async function postSetupIntentsIntent<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SetupIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_intents/{intent}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a SetupIntent
 * <p>You can cancel a SetupIntent object when it’s in one of these statuses: <code>requires_payment_method</code>,
 * <code>requires_confirmation</code>, or <code>requires_action</code>. </p>
 *
 * <p>After you cancel it, setup is abandoned
 * and any operations on the SetupIntent fail with an error. You can’t cancel the SetupIntent for a Checkout Session. <a
 * href="/docs/api/checkout/sessions/expire">Expire the Checkout Session</a> instead.</p>
 */
export async function postSetupIntentsIntentCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SetupIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_intents/{intent}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Confirm a SetupIntent
 * <p>Confirm that your customer intends to set up the current or
 * provided payment method. For example, you would confirm a
 * SetupIntent
 * when a customer hits the “Save” button on a payment method management
 * page on your website.</p>
 *
 * <p>If the
 * selected payment method does not require any additional
 * steps from the customer, the SetupIntent will transition to
 * the
 * <code>succeeded</code> status.</p>
 *
 * <p>Otherwise, it will transition to the <code>requires_action</code> status
 * and
 * suggest additional actions via <code>next_action</code>. If setup fails,
 * the SetupIntent will transition to
 * the
 * <code>requires_payment_method</code> status or the <code>canceled</code> status if the
 * confirmation limit is
 * reached.</p>
 */
export async function postSetupIntentsIntentConfirm<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SetupIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_intents/{intent}/confirm',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Verify microdeposits on a SetupIntent
 * <p>Verifies microdeposits on a SetupIntent object.</p>
 */
export async function postSetupIntentsIntentVerifyMicrodeposits<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    intent: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SetupIntent> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/setup_intents/{intent}/verify_microdeposits',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all shipping rates
 * <p>Returns a list of your shipping rates.</p>
 */
export async function getShippingRates<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    currency?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ShippingRate[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/shipping_rates',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'created',
      'currency',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a shipping rate
 * <p>Creates a new shipping rate object.</p>
 */
export async function postShippingRates<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ShippingRate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/shipping_rates',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a shipping rate
 * <p>Returns the shipping rate object with the given ID.</p>
 */
export async function getShippingRatesShippingRateToken<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    shipping_rate_token: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ShippingRate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/shipping_rates/{shipping_rate_token}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a shipping rate
 * <p>Updates an existing shipping rate object.</p>
 */
export async function postShippingRatesShippingRateToken<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    shipping_rate_token: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ShippingRate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/shipping_rates/{shipping_rate_token}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update an existing Sigma Query
 * <p>Update an existing Sigma query that previously exists</p>
 */
export async function postSigmaSavedQueriesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SigmaSigmaApiQuery> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/sigma/saved_queries/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all scheduled query runs
 * <p>Returns a list of scheduled query runs.</p>
 */
export async function getSigmaScheduledQueryRuns<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: ScheduledQueryRun[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/sigma/scheduled_query_runs',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a scheduled query run
 * <p>Retrieves the details of an scheduled query run.</p>
 */
export async function getSigmaScheduledQueryRunsScheduledQueryRun<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    scheduled_query_run: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ScheduledQueryRun> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/sigma/scheduled_query_runs/{scheduled_query_run}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Shares a source
 * <p>Creates a new source object.</p>
 */
export async function postSources<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Source> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/sources',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a source
 * <p>Retrieves an existing source object. Supply the unique source ID from a source creation request and Stripe will
 * return the corresponding up-to-date source object information.</p>
 */
export async function getSourcesSource<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_secret?: string;
    expand?: string[];
    source: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Source> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/sources/{source}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['client_secret', 'expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a source
 * <p>Updates the specified source by setting the values of the parameters passed. Any parameters not provided will be left
 * unchanged.</p>
 *
 * <p>This request accepts the <code>metadata</code> and <code>owner</code> as arguments. It is also
 * possible to update type specific information for selected payment methods. Please refer to our <a
 * href="/docs/sources">payment method guides</a> for more detail.</p>
 */
export async function postSourcesSource<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    source: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Source> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/sources/{source}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Source MandateNotification
 * <p>Retrieves a new Source MandateNotification.</p>
 */
export async function getSourcesSourceMandateNotificationsMandateNotification<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    mandate_notification: string;
    source: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, SourceMandateNotification>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/sources/{source}/mandate_notifications/{mandate_notification}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>List source transactions for a given source.</p>
 */
export async function getSourcesSourceSourceTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    source: string;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: SourceTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/sources/{source}/source_transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a source transaction
 * <p>Retrieve an existing source transaction object. Supply the unique source ID from a source creation request and the
 * source transaction ID and Stripe will return the corresponding up-to-date source object information.</p>
 */
export async function getSourcesSourceSourceTransactionsSourceTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    source: string;
    source_transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SourceTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/sources/{source}/source_transactions/{source_transaction}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * <p>Verify a given source.</p>
 */
export async function postSourcesSourceVerify<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    source: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Source> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/sources/{source}/verify',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all subscription items
 * <p>Returns a list of your subscription items for a given subscription.</p>
 */
export async function getSubscriptionItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    subscription: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: SubscriptionItem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'subscription',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a subscription item
 * <p>Adds a new item to an existing subscription. No existing items will be changed or replaced.</p>
 */
export async function postSubscriptionItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SubscriptionItem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_items',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a subscription item
 * <p>Deletes an item from the subscription. Removing a subscription item from a subscription will not cancel the
 * subscription.</p>
 */
export async function deleteSubscriptionItemsItem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    item: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedSubscriptionItem>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_items/{item}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a subscription item
 * <p>Retrieves the subscription item with the given ID.</p>
 */
export async function getSubscriptionItemsItem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    item: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SubscriptionItem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_items/{item}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a subscription item
 * <p>Updates the plan or quantity of an item on a current subscription.</p>
 */
export async function postSubscriptionItemsItem<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    item: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, SubscriptionItem> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_items/{item}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all schedules
 * <p>Retrieves the list of your subscription schedules.</p>
 */
export async function getSubscriptionSchedules<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    canceled_at?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    completed_at?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    released_at?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    scheduled?: boolean;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: SubscriptionSchedule[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_schedules',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'canceled_at',
      'completed_at',
      'created',
      'customer',
      'ending_before',
      'expand',
      'limit',
      'released_at',
      'scheduled',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a schedule
 * <p>Creates a new subscription schedule object. Each customer can have up to 500 active or scheduled subscriptions.</p>
 */
export async function postSubscriptionSchedules<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, SubscriptionSchedule>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_schedules',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a schedule
 * <p>Retrieves the details of an existing subscription schedule. You only need to supply the unique subscription schedule
 * identifier that was returned upon subscription schedule creation.</p>
 */
export async function getSubscriptionSchedulesSchedule<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    schedule: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, SubscriptionSchedule>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_schedules/{schedule}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a schedule
 * <p>Updates an existing subscription schedule.</p>
 */
export async function postSubscriptionSchedulesSchedule<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    schedule: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, SubscriptionSchedule>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_schedules/{schedule}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a schedule
 * <p>Cancels a subscription schedule and its associated subscription immediately (if the subscription schedule has an
 * active subscription). A subscription schedule can only be canceled if its status is <code>not_started</code> or
 * <code>active</code>.</p>
 */
export async function postSubscriptionSchedulesScheduleCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    schedule: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, SubscriptionSchedule>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_schedules/{schedule}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Release a schedule
 * <p>Releases the subscription schedule immediately, which will stop scheduling of its phases, but leave any existing
 * subscription in place. A schedule can only be released if its status is <code>not_started</code> or <code>active</code>.
 * If the subscription schedule is currently associated with a subscription, releasing it will remove its
 * <code>subscription</code> property and set the subscription’s ID to the <code>released_subscription</code> property.</p>
 */
export async function postSubscriptionSchedulesScheduleRelease<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    schedule: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, SubscriptionSchedule>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscription_schedules/{schedule}/release',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List subscriptions
 * <p>By default, returns a list of subscriptions that have not been canceled. In order to list canceled subscriptions,
 * specify <code>status=canceled</code>.</p>
 */
export async function getSubscriptions<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    automatic_tax?: {
      enabled: boolean;
    };
    collection_method?: 'charge_automatically' | 'send_invoice';
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    current_period_end?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    current_period_start?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    price?: string;
    starting_after?: string;
    status?:
      | 'active'
      | 'all'
      | 'canceled'
      | 'ended'
      | 'incomplete'
      | 'incomplete_expired'
      | 'past_due'
      | 'paused'
      | 'trialing'
      | 'unpaid';
    test_clock?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Subscription[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'automatic_tax',
      'collection_method',
      'created',
      'current_period_end',
      'current_period_start',
      'customer',
      'ending_before',
      'expand',
      'limit',
      'price',
      'starting_after',
      'status',
      'test_clock',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a subscription
 * <p>Creates a new subscription on an existing customer. Each customer can have up to 500 active or scheduled
 * subscriptions.</p>
 *
 * <p>When you create a subscription with <code>collection_method=charge_automatically</code>, the
 * first invoice is finalized as part of the request.
 * The <code>payment_behavior</code> parameter determines the exact
 * behavior of the initial payment.</p>
 *
 * <p>To start subscriptions where the first invoice always begins in a
 * <code>draft</code> status, use <a href="/docs/billing/subscriptions/subscription-schedules#managing">subscription
 * schedules</a> instead.
 * Schedules provide the flexibility to model more complex billing configurations that change over
 * time.</p>
 */
export async function postSubscriptions<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Search subscriptions
 * <p>Search for subscriptions you’ve previously created using Stripe’s <a href="/docs/search#search-query-language">Search
 * Query Language</a>.
 * Don’t use search in read-after-write flows where strict consistency is necessary. Under normal
 * operating
 * conditions, data is searchable in less than a minute. Occasionally, propagation of new or updated data can be
 * up
 * to an hour behind during outages. Search functionality is not available to merchants in India.</p>
 */
export async function getSubscriptionsSearch<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    limit?: number;
    page?: string;
    query: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Subscription[];
        has_more: boolean;
        next_page?: string | null;
        /**
         * String representing the object's type. Objects of the same type share the same value.
         */
        object: 'search_result';
        /**
         * The total number of objects that match the query, only accurate up to 10,000.
         */
        total_count?: number;
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions/search',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand', 'limit', 'page', 'query'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a subscription
 * <p>Cancels a customer’s subscription immediately. The customer won’t be charged again for the subscription. After it’s
 * canceled, you can no longer update the subscription or its <a href="/metadata">metadata</a>.</p>
 *
 * <p>Any pending invoice
 * items that you’ve created are still charged at the end of the period, unless manually <a
 * href="#delete_invoiceitem">deleted</a>. If you’ve set the subscription to cancel at the end of the period, any pending
 * prorations are also left in place and collected at the end of the period. But if the subscription is set to cancel
 * immediately, pending prorations are removed if <code>invoice_now</code> and <code>prorate</code> are both set to
 * true.</p>
 *
 * <p>By default, upon subscription cancellation, Stripe stops automatic collection of all finalized invoices
 * for the customer. This is intended to prevent unexpected payment attempts after the customer has canceled a
 * subscription. However, you can resume automatic collection of the invoices manually after subscription cancellation to
 * have us proceed. Or, you could check for unpaid invoices before allowing the customer to cancel the subscription at
 * all.</p>
 */
export async function deleteSubscriptionsSubscriptionExposedId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions/{subscription_exposed_id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a subscription
 * <p>Retrieves the subscription with the given ID.</p>
 */
export async function getSubscriptionsSubscriptionExposedId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions/{subscription_exposed_id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a subscription
 * <p>Updates an existing subscription to match the specified parameters.
 * When changing prices or quantities, we optionally
 * prorate the price we charge next month to make up for any price changes.
 * To preview how the proration is calculated, use
 * the <a href="/docs/api/invoices/create_preview">create preview</a> endpoint.</p>
 *
 * <p>By default, we prorate subscription
 * changes. For example, if a customer signs up on May 1 for a <currency>100</currency> price, they’ll be billed
 * <currency>100</currency> immediately. If on May 15 they switch to a <currency>200</currency> price, then on June 1
 * they’ll be billed <currency>250</currency> (<currency>200</currency> for a renewal of her subscription, plus a
 * <currency>50</currency> prorating adjustment for half of the previous month’s <currency>100</currency> difference).
 * Similarly, a downgrade generates a credit that is applied to the next invoice. We also prorate when you make quantity
 * changes.</p>
 *
 * <p>Switching prices does not normally change the billing date or generate an immediate charge
 * unless:</p>
 *
 * <ul>
 * <li>The billing interval is changed (for example, from monthly to yearly).</li>
 * <li>The subscription
 * moves from free to paid.</li>
 * <li>A trial starts or ends.</li>
 * </ul>
 *
 * <p>In these cases, we apply a credit for the
 * unused time on the previous price, immediately charge the customer using the new price, and reset the billing date.
 * Learn about how <a href="/docs/billing/subscriptions/upgrade-downgrade#immediate-payment">Stripe immediately attempts
 * payment for subscription changes</a>.</p>
 *
 * <p>If you want to charge for an upgrade immediately, pass
 * <code>proration_behavior</code> as <code>always_invoice</code> to create prorations, automatically invoice the customer
 * for those proration adjustments, and attempt to collect payment. If you pass <code>create_prorations</code>, the
 * prorations are created but not automatically invoiced. If you want to bill the customer for the prorations before the
 * subscription’s renewal date, you need to manually <a href="/docs/api/invoices/create">invoice the
 * customer</a>.</p>
 *
 * <p>If you don’t want to prorate, set the <code>proration_behavior</code> option to <code>none</code>.
 * With this option, the customer is billed <currency>100</currency> on May 1 and <currency>200</currency> on June 1.
 * Similarly, if you set <code>proration_behavior</code> to <code>none</code> when switching between different billing
 * intervals (for example, from monthly to yearly), we don’t generate any credits for the old subscription’s unused time.
 * We still reset the billing date and bill immediately for the new subscription.</p>
 *
 * <p>Updating the quantity on a
 * subscription many times in an hour may result in <a href="/docs/rate-limits">rate limiting</a>. If you need to bill for
 * a frequently changing quantity, consider integrating <a href="/docs/billing/subscriptions/usage-based">usage-based
 * billing</a> instead.</p>
 */
export async function postSubscriptionsSubscriptionExposedId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions/{subscription_exposed_id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a subscription discount
 * <p>Removes the currently applied discount on a subscription.</p>
 */
export async function deleteSubscriptionsSubscriptionExposedIdDiscount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    subscription_exposed_id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedDiscount> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions/{subscription_exposed_id}/discount',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Resume a subscription
 * <p>Initiates resumption of a paused subscription, optionally resetting the billing cycle anchor and creating prorations.
 * If a resumption invoice is generated, it must be paid or marked uncollectible before the subscription will be unpaused.
 * If payment succeeds the subscription will become <code>active</code>, and if payment fails the subscription will be
 * <code>past_due</code>. The resumption invoice will void automatically if not paid by the expiration date.</p>
 */
export async function postSubscriptionsSubscriptionResume<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    subscription: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Subscription> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/subscriptions/{subscription}/resume',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Tax Calculation
 * <p>Calculates tax based on the input and returns a Tax <code>Calculation</code> object.</p>
 */
export async function postTaxCalculations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxCalculation> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/calculations',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Tax Calculation
 * <p>Retrieves a Tax <code>Calculation</code> object, if the calculation hasn’t expired.</p>
 */
export async function getTaxCalculationsCalculation<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    calculation: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxCalculation> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/calculations/{calculation}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a calculation's line items
 * <p>Retrieves the line items of a tax calculation as a collection, if the calculation hasn’t expired.</p>
 */
export async function getTaxCalculationsCalculationLineItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    calculation: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TaxCalculationLineItem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/calculations/{calculation}/line_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List registrations
 * <p>Returns a list of Tax <code>Registration</code> objects.</p>
 */
export async function getTaxRegistrations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'active' | 'all' | 'expired' | 'scheduled';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: TaxRegistration[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/registrations',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a registration
 * <p>Creates a new Tax <code>Registration</code> object.</p>
 */
export async function postTaxRegistrations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxRegistration> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/registrations',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a registration
 * <p>Returns a Tax <code>Registration</code> object.</p>
 */
export async function getTaxRegistrationsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxRegistration> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/registrations/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a registration
 * <p>Updates an existing Tax <code>Registration</code> object.</p>
 *
 * <p>A registration cannot be deleted after it has been
 * created. If you wish to end a registration you may do so by setting <code>expires_at</code>.</p>
 */
export async function postTaxRegistrationsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxRegistration> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/registrations/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve settings
 * <p>Retrieves Tax <code>Settings</code> for a merchant.</p>
 */
export async function getTaxSettings<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxSettings> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/settings',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update settings
 * <p>Updates Tax <code>Settings</code> parameters used in tax calculations. All parameters are editable but none can be
 * removed once set.</p>
 */
export async function postTaxSettings<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxSettings> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/settings',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a transaction from a calculation
 * <p>Creates a Tax Transaction from a calculation, if that calculation hasn’t expired. Calculations expire after 90
 * days.</p>
 */
export async function postTaxTransactionsCreateFromCalculation<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/transactions/create_from_calculation',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a reversal transaction
 * <p>Partially or fully reverses a previously created <code>Transaction</code>.</p>
 */
export async function postTaxTransactionsCreateReversal<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/transactions/create_reversal',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a transaction
 * <p>Retrieves a Tax <code>Transaction</code> object.</p>
 */
export async function getTaxTransactionsTransaction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/transactions/{transaction}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a transaction's line items
 * <p>Retrieves the line items of a committed standalone transaction as a collection.</p>
 */
export async function getTaxTransactionsTransactionLineItems<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TaxTransactionLineItem[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax/transactions/{transaction}/line_items',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all tax codes
 * <p>A list of <a href="https://stripe.com/docs/tax/tax-categories">all tax codes available</a> to add to Products in
 * order to allow specific tax calculations.</p>
 */
export async function getTaxCodes<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: TaxCode[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_codes',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a tax code
 * <p>Retrieves the details of an existing tax code. Supply the unique tax code ID and Stripe will return the corresponding
 * tax code information.</p>
 */
export async function getTaxCodesId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxCode> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_codes/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all tax IDs
 * <p>Returns a list of tax IDs.</p>
 */
export async function getTaxIds<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    owner?: {
      account?: string;
      customer?: string;
      type: 'account' | 'application' | 'customer' | 'self';
    };
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TaxId[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_ids',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'limit',
      'owner',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a tax ID
 * <p>Creates a new account or customer <code>tax_id</code> object.</p>
 */
export async function postTaxIds<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, TaxId> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/tax_ids',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a tax ID
 * <p>Deletes an existing account or customer <code>tax_id</code> object.</p>
 */
export async function deleteTaxIdsId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, DeletedTaxId> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_ids/{id}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a tax ID
 * <p>Retrieves an account or customer <code>tax_id</code> object.</p>
 */
export async function getTaxIdsId<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, TaxId> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/tax_ids/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all tax rates
 * <p>Returns a list of your tax rates. Tax rates are returned sorted by creation date, with the most recently created tax
 * rates appearing first.</p>
 */
export async function getTaxRates<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    active?: boolean;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    inclusive?: boolean;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: TaxRate[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_rates',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'active',
      'created',
      'ending_before',
      'expand',
      'inclusive',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a tax rate
 * <p>Creates a new tax rate.</p>
 */
export async function postTaxRates<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxRate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_rates',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a tax rate
 * <p>Retrieves a tax rate with the given ID</p>
 */
export async function getTaxRatesTaxRate<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    tax_rate: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxRate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_rates/{tax_rate}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a tax rate
 * <p>Updates an existing tax rate.</p>
 */
export async function postTaxRatesTaxRate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    tax_rate: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TaxRate> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/tax_rates/{tax_rate}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Configurations
 * <p>Returns a list of <code>Configuration</code> objects.</p>
 */
export async function getTerminalConfigurations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    is_account_default?: boolean;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: TerminalConfiguration[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/configurations',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'is_account_default',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Configuration
 * <p>Creates a new <code>Configuration</code> object.</p>
 */
export async function postTerminalConfigurations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/configurations',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a Configuration
 * <p>Deletes a <code>Configuration</code> object.</p>
 */
export async function deleteTerminalConfigurationsConfiguration<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    configuration: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedTerminalConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/configurations/{configuration}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Configuration
 * <p>Retrieves a <code>Configuration</code> object.</p>
 */
export async function getTerminalConfigurationsConfiguration<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    configuration: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalConfiguration | DeletedTerminalConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/configurations/{configuration}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a Configuration
 * <p>Updates a new <code>Configuration</code> object.</p>
 */
export async function postTerminalConfigurationsConfiguration<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    configuration: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalConfiguration | DeletedTerminalConfiguration>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/configurations/{configuration}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Connection Token
 * <p>To connect to a reader the Stripe Terminal SDK needs to retrieve a short-lived connection token from Stripe, proxied
 * through your server. On your backend, add an endpoint that creates and returns a connection token.</p>
 */
export async function postTerminalConnectionTokens<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalConnectionToken>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/connection_tokens',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Locations
 * <p>Returns a list of <code>Location</code> objects.</p>
 */
export async function getTerminalLocations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: TerminalLocation[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/locations',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Location
 * <p>Creates a new <code>Location</code> object.
 * For further details, including which address fields are required in each
 * country, see the <a href="/docs/terminal/fleet/locations">Manage locations</a> guide.</p>
 */
export async function postTerminalLocations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalLocation> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/locations',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a Location
 * <p>Deletes a <code>Location</code> object.</p>
 */
export async function deleteTerminalLocationsLocation<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    location: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedTerminalLocation>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/locations/{location}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Location
 * <p>Retrieves a <code>Location</code> object.</p>
 */
export async function getTerminalLocationsLocation<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    location: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalLocation | DeletedTerminalLocation>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/locations/{location}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a Location
 * <p>Updates a <code>Location</code> object by setting the values of the parameters passed. Any parameters not provided
 * will be left unchanged.</p>
 */
export async function postTerminalLocationsLocation<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    location: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalLocation | DeletedTerminalLocation>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/locations/{location}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Readers
 * <p>Returns a list of <code>Reader</code> objects.</p>
 */
export async function getTerminalReaders<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    device_type?:
      | 'bbpos_chipper2x'
      | 'bbpos_wisepad3'
      | 'bbpos_wisepos_e'
      | 'mobile_phone_reader'
      | 'simulated_stripe_s700'
      | 'simulated_wisepos_e'
      | 'stripe_m2'
      | 'stripe_s700'
      | 'verifone_P400';
    ending_before?: string;
    expand?: string[];
    limit?: number;
    location?: string;
    serial_number?: string;
    starting_after?: string;
    status?: 'offline' | 'online';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * A list of readers
         */
        data: TerminalReader[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'device_type',
      'ending_before',
      'expand',
      'limit',
      'location',
      'serial_number',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a Reader
 * <p>Creates a new <code>Reader</code> object.</p>
 */
export async function postTerminalReaders<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a Reader
 * <p>Deletes a <code>Reader</code> object.</p>
 */
export async function deleteTerminalReadersReader<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedTerminalReader>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Reader
 * <p>Retrieves a <code>Reader</code> object.</p>
 */
export async function getTerminalReadersReader<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalReader | DeletedTerminalReader>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a Reader
 * <p>Updates a <code>Reader</code> object by setting the values of the parameters passed. Any parameters not provided will
 * be left unchanged.</p>
 */
export async function postTerminalReadersReader<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TerminalReader | DeletedTerminalReader>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel the current reader action
 * <p>Cancels the current reader action.</p>
 */
export async function postTerminalReadersReaderCancelAction<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}/cancel_action',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Collect inputs using a Reader
 * <p>Initiates an input collection flow on a Reader.</p>
 */
export async function postTerminalReadersReaderCollectInputs<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}/collect_inputs',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Hand-off a PaymentIntent to a Reader
 * <p>Initiates a payment flow on a Reader.</p>
 */
export async function postTerminalReadersReaderProcessPaymentIntent<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}/process_payment_intent',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Hand-off a SetupIntent to a Reader
 * <p>Initiates a setup intent flow on a Reader.</p>
 */
export async function postTerminalReadersReaderProcessSetupIntent<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}/process_setup_intent',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Refund a Charge or a PaymentIntent in-person
 * <p>Initiates a refund on a Reader</p>
 */
export async function postTerminalReadersReaderRefundPayment<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}/refund_payment',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Set reader display
 * <p>Sets reader display to show cart details.</p>
 */
export async function postTerminalReadersReaderSetReaderDisplay<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/terminal/readers/{reader}/set_reader_display',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a test Confirmation Token
 * <p>Creates a test mode Confirmation Token server side for your integration tests.</p>
 */
export async function postTestHelpersConfirmationTokens<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, ConfirmationToken> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/confirmation_tokens',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Fund a test mode cash balance
 * <p>Create an incoming testmode bank transfer</p>
 */
export async function postTestHelpersCustomersCustomerFundCashBalance<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    customer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, CustomerCashBalanceTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/customers/{customer}/fund_cash_balance',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a test-mode authorization
 * <p>Create a test-mode authorization.</p>
 */
export async function postTestHelpersIssuingAuthorizations<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/authorizations',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Capture a test-mode authorization
 * <p>Capture a test-mode authorization.</p>
 */
export async function postTestHelpersIssuingAuthorizationsAuthorizationCapture<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/authorizations/{authorization}/capture',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Expire a test-mode authorization
 * <p>Expire a test-mode Authorization.</p>
 */
export async function postTestHelpersIssuingAuthorizationsAuthorizationExpire<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/authorizations/{authorization}/expire',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Finalize a test-mode authorization's amount
 * <p>Finalize the amount on an Authorization prior to capture, when the initial authorization was for an estimated
 * amount.</p>
 */
export async function postTestHelpersIssuingAuthorizationsAuthorizationFinalizeAmount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/authorizations/{authorization}/finalize_amount',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Respond to fraud challenge
 * <p>Respond to a fraud challenge on a testmode Issuing authorization, simulating either a confirmation of fraud or a
 * correction of legitimacy.</p>
 */
export async function postTestHelpersIssuingAuthorizationsAuthorizationFraudChallengesRespond<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/authorizations/{authorization}/fraud_challenges/respond',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Increment a test-mode authorization
 * <p>Increment a test-mode Authorization.</p>
 */
export async function postTestHelpersIssuingAuthorizationsAuthorizationIncrement<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/authorizations/{authorization}/increment',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Reverse a test-mode authorization
 * <p>Reverse a test-mode Authorization.</p>
 */
export async function postTestHelpersIssuingAuthorizationsAuthorizationReverse<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    authorization: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingAuthorization>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/authorizations/{authorization}/reverse',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Deliver a testmode card
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>delivered</code>.</p>
 */
export async function postTestHelpersIssuingCardsCardShippingDeliver<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/cards/{card}/shipping/deliver',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Fail a testmode card
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>failure</code>.</p>
 */
export async function postTestHelpersIssuingCardsCardShippingFail<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/cards/{card}/shipping/fail',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Return a testmode card
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>returned</code>.</p>
 */
export async function postTestHelpersIssuingCardsCardShippingReturn<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/cards/{card}/shipping/return',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Ship a testmode card
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>shipped</code>.</p>
 */
export async function postTestHelpersIssuingCardsCardShippingShip<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/cards/{card}/shipping/ship',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Submit a testmode card
 * <p>Updates the shipping status of the specified Issuing <code>Card</code> object to <code>submitted</code>. This method
 * requires Stripe Version ‘2024-09-30.acacia’ or later.</p>
 */
export async function postTestHelpersIssuingCardsCardShippingSubmit<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingCard> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/cards/{card}/shipping/submit',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Activate a testmode personalization design
 * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>active</code>.</p>
 */
export async function postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignActivate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    personalization_design: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingPersonalizationDesign>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/activate',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Deactivate a testmode personalization design
 * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>inactive</code>.</p>
 */
export async function postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignDeactivate<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    personalization_design: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingPersonalizationDesign>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/deactivate',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Reject a testmode personalization design
 * <p>Updates the <code>status</code> of the specified testmode personalization design object to <code>rejected</code>.</p>
 */
export async function postTestHelpersIssuingPersonalizationDesignsPersonalizationDesignReject<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    personalization_design: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, IssuingPersonalizationDesign>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/personalization_designs/{personalization_design}/reject',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a test-mode settlement
 * <p>Allows the user to create an Issuing settlement.</p>
 */
export async function postTestHelpersIssuingSettlements<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingSettlement> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/settlements',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Complete a test-mode settlement
 * <p>Allows the user to mark an Issuing settlement as complete.</p>
 */
export async function postTestHelpersIssuingSettlementsSettlementComplete<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    settlement: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingSettlement> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/settlements/{settlement}/complete',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a test-mode force capture
 * <p>Allows the user to capture an arbitrary amount, also known as a forced capture.</p>
 */
export async function postTestHelpersIssuingTransactionsCreateForceCapture<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/transactions/create_force_capture',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a test-mode unlinked refund
 * <p>Allows the user to refund an arbitrary amount, also known as a unlinked refund.</p>
 */
export async function postTestHelpersIssuingTransactionsCreateUnlinkedRefund<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/transactions/create_unlinked_refund',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Refund a test-mode transaction
 * <p>Refund a test-mode Transaction.</p>
 */
export async function postTestHelpersIssuingTransactionsTransactionRefund<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    transaction: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, IssuingTransaction> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/issuing/transactions/{transaction}/refund',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Expire a pending refund.
 * <p>Expire a refund with a status of <code>requires_action</code>.</p>
 */
export async function postTestHelpersRefundsRefundExpire<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    refund: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Refund> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/refunds/{refund}/expire',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Simulate presenting a payment method
 * <p>Presents a payment method on a simulated reader. Can be used to simulate accepting a payment, saving a card or
 * refunding a transaction.</p>
 */
export async function postTestHelpersTerminalReadersReaderPresentPaymentMethod<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/terminal/readers/{reader}/present_payment_method',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Simulate a successful input collection
 * <p>Use this endpoint to trigger a successful input collection on a simulated reader.</p>
 */
export async function postTestHelpersTerminalReadersReaderSucceedInputCollection<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/terminal/readers/{reader}/succeed_input_collection',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Simulate an input collection timeout
 * <p>Use this endpoint to complete an input collection with a timeout error on a simulated reader.</p>
 */
export async function postTestHelpersTerminalReadersReaderTimeoutInputCollection<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    reader: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TerminalReader> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/terminal/readers/{reader}/timeout_input_collection',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all test clocks
 * <p>Returns a list of your test clocks.</p>
 */
export async function getTestHelpersTestClocks<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: TestHelpersTestClock[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/test_clocks',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a test clock
 * <p>Creates a new test clock that can be attached to new customers and quotes.</p>
 */
export async function postTestHelpersTestClocks<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TestHelpersTestClock>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/test_clocks',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a test clock
 * <p>Deletes a test clock.</p>
 */
export async function deleteTestHelpersTestClocksTestClock<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    test_clock: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedTestHelpersTestClock>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/test_clocks/{test_clock}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a test clock
 * <p>Retrieves a test clock.</p>
 */
export async function getTestHelpersTestClocksTestClock<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    test_clock: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TestHelpersTestClock>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/test_clocks/{test_clock}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Advance a test clock
 * <p>Starts advancing a test clock to a specified time in the future. Advancement is done when status changes to
 * <code>Ready</code>.</p>
 */
export async function postTestHelpersTestClocksTestClockAdvance<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    test_clock: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TestHelpersTestClock>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/test_clocks/{test_clock}/advance',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Fail an InboundTransfer
 * <p>Transitions a test mode created InboundTransfer to the <code>failed</code> status. The InboundTransfer must already
 * be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryInboundTransfersIdFail<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryInboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/inbound_transfers/{id}/fail',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Return an InboundTransfer
 * <p>Marks the test mode InboundTransfer object as returned and links the InboundTransfer to a ReceivedDebit. The
 * InboundTransfer must already be in the <code>succeeded</code> state.</p>
 */
export async function postTestHelpersTreasuryInboundTransfersIdReturn<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryInboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/inbound_transfers/{id}/return',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Succeed an InboundTransfer
 * <p>Transitions a test mode created InboundTransfer to the <code>succeeded</code> status. The InboundTransfer must
 * already be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryInboundTransfersIdSucceed<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryInboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/inbound_transfers/{id}/succeed',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Update an OutboundPayment
 * <p>Updates a test mode created OutboundPayment with tracking details. The OutboundPayment must not be cancelable, and
 * cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
 */
export async function postTestHelpersTreasuryOutboundPaymentsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundPayment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_payments/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Fail an OutboundPayment
 * <p>Transitions a test mode created OutboundPayment to the <code>failed</code> status. The OutboundPayment must already
 * be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryOutboundPaymentsIdFail<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundPayment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_payments/{id}/fail',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Post an OutboundPayment
 * <p>Transitions a test mode created OutboundPayment to the <code>posted</code> status. The OutboundPayment must already
 * be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryOutboundPaymentsIdPost<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundPayment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_payments/{id}/post',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Return an OutboundPayment
 * <p>Transitions a test mode created OutboundPayment to the <code>returned</code> status. The OutboundPayment must already
 * be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryOutboundPaymentsIdReturn<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundPayment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_payments/{id}/return',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Update an OutboundTransfer
 * <p>Updates a test mode created OutboundTransfer with tracking details. The OutboundTransfer must not be cancelable, and
 * cannot be in the <code>canceled</code> or <code>failed</code> states.</p>
 */
export async function postTestHelpersTreasuryOutboundTransfersOutboundTransfer<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    outbound_transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Fail an OutboundTransfer
 * <p>Transitions a test mode created OutboundTransfer to the <code>failed</code> status. The OutboundTransfer must already
 * be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryOutboundTransfersOutboundTransferFail<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    outbound_transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/fail',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Post an OutboundTransfer
 * <p>Transitions a test mode created OutboundTransfer to the <code>posted</code> status. The OutboundTransfer must already
 * be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryOutboundTransfersOutboundTransferPost<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    outbound_transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/post',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Return an OutboundTransfer
 * <p>Transitions a test mode created OutboundTransfer to the <code>returned</code> status. The OutboundTransfer must
 * already be in the <code>processing</code> state.</p>
 */
export async function postTestHelpersTreasuryOutboundTransfersOutboundTransferReturn<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    outbound_transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/outbound_transfers/{outbound_transfer}/return',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Create a ReceivedCredit
 * <p>Use this endpoint to simulate a test mode ReceivedCredit initiated by a third party. In live mode, you can’t directly
 * create ReceivedCredits initiated by third parties.</p>
 */
export async function postTestHelpersTreasuryReceivedCredits<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryReceivedCredit>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/received_credits',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Test mode: Create a ReceivedDebit
 * <p>Use this endpoint to simulate a test mode ReceivedDebit initiated by a third party. In live mode, you can’t directly
 * create ReceivedDebits initiated by third parties.</p>
 */
export async function postTestHelpersTreasuryReceivedDebits<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryReceivedDebit>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/test_helpers/treasury/received_debits',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a CVC update token
 * <p>Creates a single-use token that represents a bank account’s details.
 * You can use this token with any v1 API method in
 * place of a bank account dictionary. You can only use this token once. To do so, attach it to a <a
 * href="#accounts">connected account</a> where <a
 * href="/api/accounts/object#account_object-controller-requirement_collection">controller.requirement_collection</a> is
 * <code>application</code>, which includes Custom accounts.</p>
 */
export async function postTokens<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Token> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/tokens',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a token
 * <p>Retrieves the token with the given ID.</p>
 */
export async function getTokensToken<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    token: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Token> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/tokens/{token}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all top-ups
 * <p>Returns a list of top-ups.</p>
 */
export async function getTopups<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    amount?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    status?: 'canceled' | 'failed' | 'pending' | 'succeeded';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: Topup[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/topups',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'amount',
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a top-up
 * <p>Top up the balance of an account</p>
 */
export async function postTopups<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Topup> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/topups',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a top-up
 * <p>Retrieves the details of a top-up that has previously been created. Supply the unique top-up ID that was returned
 * from your previous request, and Stripe will return the corresponding top-up information.</p>
 */
export async function getTopupsTopup<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    topup: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Topup> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/topups/{topup}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a top-up
 * <p>Updates the metadata of a top-up. Other top-up details are not editable by design.</p>
 */
export async function postTopupsTopup<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    topup: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Topup> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/topups/{topup}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel a top-up
 * <p>Cancels a top-up. Only pending top-ups can be canceled.</p>
 */
export async function postTopupsTopupCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    topup: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<r.StatusResponse<200, Topup> | r.StatusResponse<'default', Error>> {
  const req = await ctx.createRequest({
    path: '/v1/topups/{topup}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all transfers
 * <p>Returns a list of existing transfers sent to connected accounts. The transfers are returned in sorted order, with the
 * most recently created transfers appearing first.</p>
 */
export async function getTransfers<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    destination?: string;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
    transfer_group?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: Transfer[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'destination',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
      'transfer_group',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a transfer
 * <p>To send funds from your Stripe account to a connected account, you create a new transfer object. Your <a
 * href="#balance">Stripe balance</a> must be able to cover the transfer amount, or you’ll receive an “Insufficient Funds”
 * error.</p>
 */
export async function postTransfers<FetcherData extends r.BaseFetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Transfer> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all reversals
 * <p>You can see a list of the reversals belonging to a specific transfer. Note that the 10 most recent reversals are
 * always available by default on the transfer object. If you need more than those 10, you can use this API method and the
 * <code>limit</code> and <code>starting_after</code> parameters to page through additional reversals.</p>
 */
export async function getTransfersIdReversals<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    id: string;
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TransferReversal[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers/{id}/reversals',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a transfer reversal
 * <p>When you create a new reversal, you must specify a transfer to create it on.</p>
 *
 * <p>When reversing transfers, you
 * can optionally reverse part of the transfer. You can do so as many times as you wish until the entire transfer has been
 * reversed.</p>
 *
 * <p>Once entirely reversed, a transfer can’t be reversed again. This method will return an error when
 * called on an already-reversed transfer, or when trying to reverse more money than is left on a transfer.</p>
 */
export async function postTransfersIdReversals<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TransferReversal> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers/{id}/reversals',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a transfer
 * <p>Retrieves the details of an existing transfer. Supply the unique transfer ID from either a transfer creation request
 * or the transfer list, and Stripe will return the corresponding transfer information.</p>
 */
export async function getTransfersTransfer<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Transfer> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers/{transfer}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a transfer
 * <p>Updates the specified transfer by setting the values of the parameters passed. Any parameters not provided will be
 * left unchanged.</p>
 *
 * <p>This request accepts only metadata as an argument.</p>
 */
export async function postTransfersTransfer<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, Transfer> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers/{transfer}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a reversal
 * <p>By default, you can see the 10 most recent reversals stored directly on the transfer object, but you can also
 * retrieve details about a specific reversal stored on the transfer.</p>
 */
export async function getTransfersTransferReversalsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
    transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TransferReversal> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers/{transfer}/reversals/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a reversal
 * <p>Updates the specified reversal by setting the values of the parameters passed. Any parameters not provided will be
 * left unchanged.</p>
 *
 * <p>This request only accepts metadata and description as arguments.</p>
 */
export async function postTransfersTransferReversalsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
    transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, TransferReversal> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/transfers/{transfer}/reversals/{id}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all CreditReversals
 * <p>Returns a list of CreditReversals.</p>
 */
export async function getTreasuryCreditReversals<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    received_credit?: string;
    starting_after?: string;
    status?: 'canceled' | 'posted' | 'processing';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryCreditReversal[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/credit_reversals',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'received_credit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a CreditReversal
 * <p>Reverses a ReceivedCredit and creates a CreditReversal object.</p>
 */
export async function postTreasuryCreditReversals<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryCreditReversal>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/credit_reversals',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a CreditReversal
 * <p>Retrieves the details of an existing CreditReversal by passing the unique CreditReversal ID from either the
 * CreditReversal creation request or CreditReversal list</p>
 */
export async function getTreasuryCreditReversalsCreditReversal<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    credit_reversal: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryCreditReversal>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/credit_reversals/{credit_reversal}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all DebitReversals
 * <p>Returns a list of DebitReversals.</p>
 */
export async function getTreasuryDebitReversals<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    received_debit?: string;
    resolution?: 'lost' | 'won';
    starting_after?: string;
    status?: 'canceled' | 'completed' | 'processing';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryDebitReversal[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/debit_reversals',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'received_debit',
      'resolution',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a DebitReversal
 * <p>Reverses a ReceivedDebit and creates a DebitReversal object.</p>
 */
export async function postTreasuryDebitReversals<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryDebitReversal>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/debit_reversals',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a DebitReversal
 * <p>Retrieves a DebitReversal object.</p>
 */
export async function getTreasuryDebitReversalsDebitReversal<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    debit_reversal: string;
    expand?: string[];
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryDebitReversal>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/debit_reversals/{debit_reversal}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all FinancialAccounts
 * <p>Returns a list of FinancialAccounts.</p>
 */
export async function getTreasuryFinancialAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: TreasuryFinancialAccount[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/financial_accounts',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'limit',
      'starting_after',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a FinancialAccount
 * <p>Creates a new FinancialAccount. Each connected account can have up to three FinancialAccounts by default.</p>
 */
export async function postTreasuryFinancialAccounts<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryFinancialAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/financial_accounts',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a FinancialAccount
 * <p>Retrieves the details of a FinancialAccount.</p>
 */
export async function getTreasuryFinancialAccountsFinancialAccount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    financial_account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryFinancialAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/financial_accounts/{financial_account}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a FinancialAccount
 * <p>Updates the details of a FinancialAccount.</p>
 */
export async function postTreasuryFinancialAccountsFinancialAccount<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    financial_account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryFinancialAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/financial_accounts/{financial_account}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Close a FinancialAccount
 * <p>Closes a FinancialAccount. A FinancialAccount can only be closed if it has a zero balance, has no pending
 * InboundTransfers, and has canceled all attached Issuing cards.</p>
 */
export async function postTreasuryFinancialAccountsFinancialAccountClose<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    financial_account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryFinancialAccount>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/financial_accounts/{financial_account}/close',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve FinancialAccount Features
 * <p>Retrieves Features information associated with the FinancialAccount.</p>
 */
export async function getTreasuryFinancialAccountsFinancialAccountFeatures<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    financial_account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryFinancialAccountFeatures>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/financial_accounts/{financial_account}/features',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update FinancialAccount Features
 * <p>Updates the Features associated with a FinancialAccount.</p>
 */
export async function postTreasuryFinancialAccountsFinancialAccountFeatures<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    financial_account: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryFinancialAccountFeatures>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/financial_accounts/{financial_account}/features',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all InboundTransfers
 * <p>Returns a list of InboundTransfers sent from the specified FinancialAccount.</p>
 */
export async function getTreasuryInboundTransfers<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    starting_after?: string;
    status?: 'canceled' | 'failed' | 'processing' | 'succeeded';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryInboundTransfer[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/inbound_transfers',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an InboundTransfer
 * <p>Creates an InboundTransfer.</p>
 */
export async function postTreasuryInboundTransfers<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryInboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/inbound_transfers',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an InboundTransfer
 * <p>Retrieves the details of an existing InboundTransfer.</p>
 */
export async function getTreasuryInboundTransfersId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryInboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/inbound_transfers/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel an InboundTransfer
 * <p>Cancels an InboundTransfer.</p>
 */
export async function postTreasuryInboundTransfersInboundTransferCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    inbound_transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryInboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/inbound_transfers/{inbound_transfer}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all OutboundPayments
 * <p>Returns a list of OutboundPayments sent from the specified FinancialAccount.</p>
 */
export async function getTreasuryOutboundPayments<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    customer?: string;
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    starting_after?: string;
    status?: 'canceled' | 'failed' | 'posted' | 'processing' | 'returned';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryOutboundPayment[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_payments',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'customer',
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an OutboundPayment
 * <p>Creates an OutboundPayment.</p>
 */
export async function postTreasuryOutboundPayments<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundPayment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_payments',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an OutboundPayment
 * <p>Retrieves the details of an existing OutboundPayment by passing the unique OutboundPayment ID from either the
 * OutboundPayment creation request or OutboundPayment list.</p>
 */
export async function getTreasuryOutboundPaymentsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundPayment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_payments/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel an OutboundPayment
 * <p>Cancel an OutboundPayment.</p>
 */
export async function postTreasuryOutboundPaymentsIdCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundPayment>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_payments/{id}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all OutboundTransfers
 * <p>Returns a list of OutboundTransfers sent from the specified FinancialAccount.</p>
 */
export async function getTreasuryOutboundTransfers<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    starting_after?: string;
    status?: 'canceled' | 'failed' | 'posted' | 'processing' | 'returned';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryOutboundTransfer[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_transfers',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create an OutboundTransfer
 * <p>Creates an OutboundTransfer.</p>
 */
export async function postTreasuryOutboundTransfers<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_transfers',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve an OutboundTransfer
 * <p>Retrieves the details of an existing OutboundTransfer by passing the unique OutboundTransfer ID from either the
 * OutboundTransfer creation request or OutboundTransfer list.</p>
 */
export async function getTreasuryOutboundTransfersOutboundTransfer<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    outbound_transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_transfers/{outbound_transfer}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Cancel an OutboundTransfer
 * <p>An OutboundTransfer can be canceled if the funds have not yet been paid out.</p>
 */
export async function postTreasuryOutboundTransfersOutboundTransferCancel<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    outbound_transfer: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryOutboundTransfer>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/outbound_transfers/{outbound_transfer}/cancel',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all ReceivedCredits
 * <p>Returns a list of ReceivedCredits.</p>
 */
export async function getTreasuryReceivedCredits<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    linked_flows?: {
      source_flow_type:
        | 'credit_reversal'
        | 'other'
        | 'outbound_payment'
        | 'outbound_transfer'
        | 'payout';
    };
    starting_after?: string;
    status?: 'failed' | 'succeeded';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryReceivedCredit[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/received_credits',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'linked_flows',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a ReceivedCredit
 * <p>Retrieves the details of an existing ReceivedCredit by passing the unique ReceivedCredit ID from the ReceivedCredit
 * list.</p>
 */
export async function getTreasuryReceivedCreditsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryReceivedCredit>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/received_credits/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all ReceivedDebits
 * <p>Returns a list of ReceivedDebits.</p>
 */
export async function getTreasuryReceivedDebits<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    starting_after?: string;
    status?: 'failed' | 'succeeded';
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryReceivedDebit[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/received_debits',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'starting_after',
      'status',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a ReceivedDebit
 * <p>Retrieves the details of an existing ReceivedDebit by passing the unique ReceivedDebit ID from the ReceivedDebit
 * list</p>
 */
export async function getTreasuryReceivedDebitsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryReceivedDebit>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/received_debits/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all TransactionEntries
 * <p>Retrieves a list of TransactionEntry objects.</p>
 */
export async function getTreasuryTransactionEntries<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    effective_at?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    order_by?: 'created' | 'effective_at';
    starting_after?: string;
    transaction?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryTransactionEntry[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/transaction_entries',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'effective_at',
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'order_by',
      'starting_after',
      'transaction',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a TransactionEntry
 * <p>Retrieves a TransactionEntry object.</p>
 */
export async function getTreasuryTransactionEntriesId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryTransactionEntry>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/transaction_entries/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all Transactions
 * <p>Retrieves a list of Transaction objects.</p>
 */
export async function getTreasuryTransactions<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    created?:
      | {
          gt?: number;
          gte?: number;
          lt?: number;
          lte?: number;
        }
      | number;
    ending_before?: string;
    expand?: string[];
    financial_account: string;
    limit?: number;
    order_by?: 'created' | 'posted_at';
    starting_after?: string;
    status?: 'open' | 'posted' | 'void';
    status_transitions?: {
      posted_at?:
        | {
            gt?: number;
            gte?: number;
            lt?: number;
            lte?: number;
          }
        | number;
    };
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        /**
         * Details about each object.
         */
        data: TreasuryTransaction[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/transactions',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: [
      'created',
      'ending_before',
      'expand',
      'financial_account',
      'limit',
      'order_by',
      'starting_after',
      'status',
      'status_transitions',
    ],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a Transaction
 * <p>Retrieves the details of an existing Transaction.</p>
 */
export async function getTreasuryTransactionsId<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    id: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, TreasuryTransaction>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/treasury/transactions/{id}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * List all webhook endpoints
 * <p>Returns a list of your webhook endpoints.</p>
 */
export async function getWebhookEndpoints<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ending_before?: string;
    expand?: string[];
    limit?: number;
    starting_after?: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<
      200,
      {
        data: WebhookEndpoint[];
        /**
         * True if this list has another page of items after this one that can be fetched.
         */
        has_more: boolean;
        /**
         * String representing the object's type. Objects of the same type share the same value. Always has the value `list`.
         */
        object: 'list';
        /**
         * The URL where this list can be accessed.
         */
        url: string;
      }
    >
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/webhook_endpoints',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['ending_before', 'expand', 'limit', 'starting_after'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Create a webhook endpoint
 * <p>A webhook endpoint must have a <code>url</code> and a list of <code>enabled_events</code>. You may optionally specify
 * the Boolean <code>connect</code> parameter. If set to true, then a Connect webhook endpoint that notifies the specified
 * <code>url</code> about events from all connected accounts is created; otherwise an account webhook endpoint that
 * notifies the specified <code>url</code> only about events from your account is created. You can also create webhook
 * endpoints in the <a href="https://dashboard.stripe.com/account/webhooks">webhooks settings</a> section of the
 * Dashboard.</p>
 */
export async function postWebhookEndpoints<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, WebhookEndpoint> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/webhook_endpoints',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Delete a webhook endpoint
 * <p>You can also delete webhook endpoints via the <a href="https://dashboard.stripe.com/account/webhooks">webhook
 * endpoint management</a> page of the Stripe dashboard.</p>
 */
export async function deleteWebhookEndpointsWebhookEndpoint<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    webhook_endpoint: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  | r.StatusResponse<200, DeletedWebhookEndpoint>
  | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/webhook_endpoints/{webhook_endpoint}',
    params,
    method: r.HttpMethod.DELETE,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Retrieve a webhook endpoint
 * <p>Retrieves the webhook endpoint with the given ID.</p>
 */
export async function getWebhookEndpointsWebhookEndpoint<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    expand?: string[];
    webhook_endpoint: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, WebhookEndpoint> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/webhook_endpoints/{webhook_endpoint}',
    params,
    method: r.HttpMethod.GET,
    body,
    queryParams: ['expand'],
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
/**
 * Update a webhook endpoint
 * <p>Updates the webhook endpoint. You may edit the <code>url</code>, the list of <code>enabled_events</code>, and the
 * status of your endpoint.</p>
 */
export async function postWebhookEndpointsWebhookEndpoint<
  FetcherData extends r.BaseFetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    webhook_endpoint: string;
  },
  body: unknown,
  opts?: FetcherData,
): Promise<
  r.StatusResponse<200, WebhookEndpoint> | r.StatusResponse<'default', Error>
> {
  const req = await ctx.createRequest({
    path: '/v1/webhook_endpoints/{webhook_endpoint}',
    params,
    method: r.HttpMethod.POST,
    body,
    auth: ['basicAuth', 'bearerAuth'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {}, true);
}
