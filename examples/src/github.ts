import * as r from '@typoas/runtime';
/**
 * Simple User
 * Simple User
 *
 */
export type SimpleUser = {
  name?: string | null;
  email?: string | null;
  /**
   * @example "octocat"
   *
   */
  login: string;
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDQ6VXNlcjE="
   *
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   *
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   *
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   *
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   *
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   *
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   *
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   *
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   *
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   *
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   *
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   *
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   *
   */
  received_events_url: string;
  /**
   * @example "User"
   *
   */
  type: string;
  site_admin: boolean;
  /**
   * @example "\"2020-07-09T00:17:55Z\""
   *
   */
  starred_at?: string;
} | null;
/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 *
 */
export type Integration = {
  /**
   * Unique identifier of the GitHub app
   * @example 37
   *
   */
  id: number;
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   *
   */
  slug?: string;
  /**
   * @example "MDExOkludGVncmF0aW9uMQ=="
   *
   */
  node_id: string;
  owner: SimpleUser | null;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   *
   */
  name: string;
  /**
   * @example "The description of the app."
   *
   */
  description: string | null;
  /**
   * @example "https://example.com"
   *
   */
  external_url: string;
  /**
   * @example "https://github.com/apps/super-ci"
   *
   */
  html_url: string;
  /**
   * @example "2017-07-08T16:18:44-04:00"
   *
   */
  created_at: Date;
  /**
   * @example "2017-07-08T16:18:44-04:00"
   *
   */
  updated_at: Date;
  /**
   * The set of permissions for the GitHub app
   * @example
   * {
   *   "issues": "read",
   *   "deployments": "write"
   * }
   *
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
  } & {
    [key: string]: string;
  };
  /**
   * The list of events for the GitHub app
   * @example
   * [
   *   "label",
   *   "deployment"
   * ]
   *
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   * @example 5
   *
   */
  installations_count?: number;
  /**
   * @example "\"Iv1.25b5d1e65ffc4022\""
   *
   */
  client_id?: string;
  /**
   * @example "\"1d4b2097ac622ba702d19de498f005747a8b21d3\""
   *
   */
  client_secret?: string;
  /**
   * @example "\"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b\""
   *
   */
  webhook_secret?: string | null;
  /**
   * @example "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n\""
   *
   */
  pem?: string;
} | null;
/**
 * Basic Error
 * Basic Error
 *
 */
export type BasicError = {
  message?: string;
  documentation_url?: string;
  url?: string;
  status?: string;
};
/**
 * Validation Error Simple
 * Validation Error Simple
 *
 */
export type ValidationErrorSimple = {
  message: string;
  documentation_url: string;
  errors?: string[];
};
/**
 * The URL to which the payloads will be delivered.
 * @example "https://example.com/webhook"
 *
 */
export type WebhookConfigUrl = string;
/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 * @example "\"json\""
 *
 */
export type WebhookConfigContentType = string;
/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 * @example "\"********\""
 *
 */
export type WebhookConfigSecret = string;
export type WebhookConfigInsecureSsl = string | number;
/**
 * Webhook Configuration
 * Configuration object of the webhook
 *
 */
export type WebhookConfig = {
  url?: WebhookConfigUrl;
  content_type?: WebhookConfigContentType;
  secret?: WebhookConfigSecret;
  insecure_ssl?: WebhookConfigInsecureSsl;
};
/**
 * Simple webhook delivery
 * Delivery made by a webhook, without request and response information.
 *
 */
export type HookDeliveryItem = {
  /**
   * Unique identifier of the webhook delivery.
   * @example 42
   *
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   *
   */
  guid: string;
  /**
   * Time when the webhook delivery occurred.
   * @example "2021-05-12T20:33:44Z"
   *
   */
  delivered_at: Date;
  /**
   * Whether the webhook delivery is a redelivery.
   *
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   *
   */
  duration: number;
  /**
   * Describes the response returned after attempting the delivery.
   * @example "failed to connect"
   *
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   *
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   *
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   *
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @example 123
   *
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @example 123
   *
   */
  repository_id: number | null;
};
/**
 * Scim Error
 * Scim Error
 *
 */
export type ScimError = {
  message?: string | null;
  documentation_url?: string | null;
  detail?: string | null;
  status?: number;
  scimType?: string | null;
  schemas?: string[];
};
/**
 * Validation Error
 * Validation Error
 *
 */
export type ValidationError = {
  message: string;
  documentation_url: string;
  errors?: {
    resource?: string;
    field?: string;
    message?: string;
    code: string;
    index?: number;
    value?: (string | null) | (number | null) | (string[] | null);
  }[];
};
/**
 * Webhook delivery
 * Delivery made by a webhook.
 *
 */
export type HookDelivery = {
  /**
   * Unique identifier of the delivery.
   * @example 42
   *
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   *
   */
  guid: string;
  /**
   * Time when the delivery was delivered.
   * @example "2021-05-12T20:33:44Z"
   *
   */
  delivered_at: Date;
  /**
   * Whether the delivery is a redelivery.
   *
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   *
   */
  duration: number;
  /**
   * Description of the status of the attempted delivery
   * @example "failed to connect"
   *
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   *
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   *
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   *
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @example 123
   *
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @example 123
   *
   */
  repository_id: number | null;
  request: {
    /**
     * The request headers sent with the webhook delivery.
     *
     */
    headers: {
      [key: string]: any;
    } | null;
    /**
     * The webhook payload.
     *
     */
    payload: {
      [key: string]: any;
    } | null;
  };
  response: {
    /**
     * The response headers received when the delivery was made.
     *
     */
    headers: {
      [key: string]: any;
    } | null;
    /**
     * The response payload received.
     *
     */
    payload: string | null;
  };
};
/**
 * Enterprise
 * An enterprise account
 *
 */
export type Enterprise = {
  /**
   * A short description of the enterprise.
   *
   */
  description?: string | null;
  /**
   * @example "https://github.com/enterprises/octo-business"
   *
   */
  html_url: string;
  /**
   * The enterprise's website URL.
   *
   */
  website_url?: string | null;
  /**
   * Unique identifier of the enterprise
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   *
   */
  node_id: string;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   *
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   *
   */
  slug: string;
  /**
   * @example "2019-01-26T19:01:12Z"
   *
   */
  created_at: Date | null;
  /**
   * @example "2019-01-26T19:14:43Z"
   *
   */
  updated_at: Date | null;
  avatar_url: string;
};
/**
 * App Permissions
 * The permissions granted to the user-to-server access token.
 * @example
 * {
 *   "contents": "read",
 *   "issues": "read",
 *   "deployments": "write",
 *   "single_file": "read"
 * }
 *
 */
export type AppPermissions = {
  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts. Can be one of: `read` or `write`.
   *
   */
  actions?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation. Can be one of: `read` or `write`.
   *
   */
  administration?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for checks on code. Can be one of: `read` or `write`.
   *
   */
  checks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for notification of content references and creation content attachments. Can be one of: `read` or `write`.
   *
   */
  content_references?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges. Can be one of: `read` or `write`.
   *
   */
  contents?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for deployments and deployment statuses. Can be one of: `read` or `write`.
   *
   */
  deployments?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for managing repository environments. Can be one of: `read` or `write`.
   *
   */
  environments?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones. Can be one of: `read` or `write`.
   *
   */
  issues?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata. Can be one of: `read` or `write`.
   *
   */
  metadata?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for packages published to GitHub Packages. Can be one of: `read` or `write`.
   *
   */
  packages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds. Can be one of: `read` or `write`.
   *
   */
  pages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges. Can be one of: `read` or `write`.
   *
   */
  pull_requests?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository. Can be one of: `read` or `write`.
   *
   */
  repository_hooks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   *
   */
  repository_projects?: 'read' | 'write' | 'admin';
  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts. Can be one of: `read` or `write`.
   *
   */
  secret_scanning_alerts?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage repository secrets. Can be one of: `read` or `write`.
   *
   */
  secrets?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts. Can be one of: `read` or `write`.
   *
   */
  security_events?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage just a single file. Can be one of: `read` or `write`.
   *
   */
  single_file?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for commit statuses. Can be one of: `read` or `write`.
   *
   */
  statuses?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to retrieve Dependabot alerts. Can be one of: `read`.
   *
   */
  vulnerability_alerts?: 'read';
  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files. Can be one of: `write`.
   *
   */
  workflows?: 'write';
  /**
   * The level of permission to grant the access token for organization teams and members. Can be one of: `read` or `write`.
   *
   */
  members?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage access to an organization. Can be one of: `read` or `write`.
   *
   */
  organization_administration?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization. Can be one of: `read` or `write`.
   *
   */
  organization_hooks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for viewing an organization's plan. Can be one of: `read`.
   *
   */
  organization_plan?: 'read';
  /**
   * The level of permission to grant the access token to manage organization projects, columns, and cards. Can be one of: `read`, `write`, or `admin`.
   *
   */
  organization_projects?: 'read' | 'write' | 'admin';
  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages. Can be one of: `read` or `write`.
   *
   */
  organization_packages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage organization secrets. Can be one of: `read` or `write`.
   *
   */
  organization_secrets?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization. Can be one of: `read` or `write`.
   *
   */
  organization_self_hosted_runners?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization. Can be one of: `read` or `write`.
   *
   */
  organization_user_blocking?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage team discussions and related comments. Can be one of: `read` or `write`.
   *
   */
  team_discussions?: 'read' | 'write';
};
/**
 * Installation
 * Installation
 *
 */
export type Installation = {
  /**
   * The ID of the installation.
   * @example 1
   *
   */
  id: number;
  account: (SimpleUser | Enterprise) | null;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   *
   */
  repository_selection: 'all' | 'selected';
  /**
   * @example "https://api.github.com/installations/1/access_tokens"
   *
   */
  access_tokens_url: string;
  /**
   * @example "https://api.github.com/installation/repositories"
   *
   */
  repositories_url: string;
  /**
   * @example "https://github.com/organizations/github/settings/installations/1"
   *
   */
  html_url: string;
  /**
   * @example 1
   *
   */
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   *
   */
  target_id: number;
  /**
   * @example "Organization"
   *
   */
  target_type: string;
  permissions: AppPermissions;
  events: string[];
  created_at: Date;
  updated_at: Date;
  /**
   * @example "config.yaml"
   *
   */
  single_file_name: string | null;
  /**
   * @example true
   *
   */
  has_multiple_single_files?: boolean;
  /**
   * @example
   * [
   *   "config.yml",
   *   ".github/issue_TEMPLATE.md"
   * ]
   *
   */
  single_file_paths?: string[];
  /**
   * @example "github-actions"
   *
   */
  app_slug: string;
  suspended_by: SimpleUser | null;
  suspended_at: Date | null;
  /**
   * @example "\"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com\""
   *
   */
  contact_email?: string | null;
};
/**
 * License Simple
 * License Simple
 *
 */
export type LicenseSimple = {
  /**
   * @example "mit"
   *
   */
  key: string;
  /**
   * @example "MIT License"
   *
   */
  name: string;
  /**
   * @example "https://api.github.com/licenses/mit"
   *
   */
  url: string | null;
  /**
   * @example "MIT"
   *
   */
  spdx_id: string | null;
  /**
   * @example "MDc6TGljZW5zZW1pdA=="
   *
   */
  node_id: string;
  html_url?: string;
};
/**
 * Repository
 * A git repository
 *
 */
export type Repository = {
  /**
   * Unique identifier of the repository
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   *
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   *
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   *
   */
  full_name: string;
  license: LicenseSimple | null;
  organization?: SimpleUser | null;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   *
   */
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   *
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   *
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   *
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   *
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   *
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   *
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   *
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   *
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   *
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   *
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   *
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   *
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   *
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   *
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   *
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   *
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   *
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   *
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   *
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   *
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   *
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   *
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   *
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   *
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   *
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   *
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   *
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   *
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   *
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   *
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   *
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   *
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   *
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   *
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   *
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   *
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   *
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   *
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   *
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   *
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   *
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   *
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   *
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   *
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   *
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   *
   */
  forks_count: number;
  /**
   * @example 80
   *
   */
  stargazers_count: number;
  /**
   * @example 80
   *
   */
  watchers_count: number;
  /**
   * @example 108
   *
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   *
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   *
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   *
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   *
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @defaultValue "public"
   *
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   *
   */
  pushed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  created_at: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   *
   */
  updated_at: Date | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @example true
   * @defaultValue true
   *
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      push?: boolean;
      pull?: boolean;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @example true
   * @defaultValue true
   *
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   *
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   *
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   * @example true
   * @defaultValue true
   *
   */
  allow_merge_commit?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /**
   * @example "\"2020-07-09T00:17:42Z\""
   *
   */
  starred_at?: string;
};
/**
 * Installation Token
 * Authentication token for a GitHub App installed on a user or org.
 *
 */
export type InstallationToken = {
  token: string;
  expires_at: string;
  permissions?: AppPermissions;
  repository_selection?: 'all' | 'selected';
  repositories?: Repository[];
  /**
   * @example "README.md"
   *
   */
  single_file?: string;
  /**
   * @example true
   *
   */
  has_multiple_single_files?: boolean;
  /**
   * @example
   * [
   *   "config.yml",
   *   ".github/issue_TEMPLATE.md"
   * ]
   *
   */
  single_file_paths?: string[];
};
/**
 * Application Grant
 * The authorization associated with an OAuth Access.
 *
 */
export type ApplicationGrant = {
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "https://api.github.com/applications/grants/1"
   *
   */
  url: string;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  /**
   * @example "2011-09-06T17:26:27Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-09-06T20:39:23Z"
   *
   */
  updated_at: Date;
  /**
   * @example
   * [
   *   "public_repo"
   * ]
   *
   */
  scopes: string[];
  user?: SimpleUser | null;
};
/**
 * Scoped Installation
 *
 */
export type ScopedInstallation = {
  permissions: AppPermissions;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   *
   */
  repository_selection: 'all' | 'selected';
  /**
   * @example "config.yaml"
   *
   */
  single_file_name: string | null;
  /**
   * @example true
   *
   */
  has_multiple_single_files?: boolean;
  /**
   * @example
   * [
   *   "config.yml",
   *   ".github/issue_TEMPLATE.md"
   * ]
   *
   */
  single_file_paths?: string[];
  /**
   * @example "https://api.github.com/users/octocat/repos"
   *
   */
  repositories_url: string;
  account: SimpleUser;
};
/**
 * Authorization
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 *
 */
export type Authorization = {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   *
   */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  hashed_token: string | null;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string | null;
  note_url: string | null;
  updated_at: Date;
  created_at: Date;
  fingerprint: string | null;
  user?: SimpleUser | null;
  installation?: ScopedInstallation | null;
};
/**
 * Code Of Conduct
 * Code Of Conduct
 *
 */
export type CodeOfConduct = {
  /**
   * @example "contributor_covenant"
   *
   */
  key: string;
  /**
   * @example "Contributor Covenant"
   *
   */
  name: string;
  /**
   * @example "https://api.github.com/codes_of_conduct/contributor_covenant"
   *
   */
  url: string;
  /**
   * @example "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant][homepage], version 1.4, available at [http://contributor-covenant.org/version/1/4][version]\n\n[homepage]: http://contributor-covenant.org\n[version]: http://contributor-covenant.org/version/1/4/\n"
   *
   */
  body?: string;
  html_url: string | null;
};
/**
 * The policy that controls the organizations in the enterprise that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
 *
 */
export type EnabledOrganizations = 'all' | 'none' | 'selected';
/**
 * The permissions policy that controls the actions that are allowed to run. Can be one of: `all`, `local_only`, or `selected`.
 *
 */
export type AllowedActions = 'all' | 'local_only' | 'selected';
/**
 * The API URL to use to get or set the actions that are allowed to run, when `allowed_actions` is set to `selected`.
 *
 */
export type SelectedActionsUrl = string;
export type ActionsEnterprisePermissions = {
  enabled_organizations: EnabledOrganizations;
  /**
   * The API URL to use to get or set the selected organizations that are allowed to run GitHub Actions, when `enabled_organizations` is set to `selected`.
   *
   */
  selected_organizations_url?: string;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};
/**
 * Organization Simple
 * Organization Simple
 *
 */
export type OrganizationSimple = {
  /**
   * @example "github"
   *
   */
  login: string;
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDEyOk9yZ2FuaXphdGlvbjE="
   *
   */
  node_id: string;
  /**
   * @example "https://api.github.com/orgs/github"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/github/repos"
   *
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/orgs/github/events"
   *
   */
  events_url: string;
  /**
   * @example "https://api.github.com/orgs/github/hooks"
   *
   */
  hooks_url: string;
  /**
   * @example "https://api.github.com/orgs/github/issues"
   *
   */
  issues_url: string;
  /**
   * @example "https://api.github.com/orgs/github/members{/member}"
   *
   */
  members_url: string;
  /**
   * @example "https://api.github.com/orgs/github/public_members{/member}"
   *
   */
  public_members_url: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   *
   */
  avatar_url: string;
  /**
   * @example "A great organization"
   *
   */
  description: string | null;
};
export type SelectedActions = {
  /**
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
   *
   */
  github_owned_allowed?: boolean;
  /**
   * Whether actions in GitHub Marketplace from verified creators are allowed. Set to `true` to allow all GitHub Marketplace actions by verified creators.
   *
   */
  verified_allowed?: boolean;
  /**
   * Specifies a list of string-matching patterns to allow specific action(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`."
   *
   */
  patterns_allowed?: string[];
};
export type RunnerGroupsEnterprise = {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  selected_organizations_url?: string;
  runners_url: string;
  allows_public_repositories: boolean;
};
/**
 * Self hosted runners
 * A self hosted runner
 *
 */
export type Runner = {
  /**
   * The id of the runner.
   * @example 5
   *
   */
  id: number;
  /**
   * The name of the runner.
   * @example "iMac"
   *
   */
  name: string;
  /**
   * The Operating System of the runner.
   * @example "macos"
   *
   */
  os: string;
  /**
   * The status of the runner.
   * @example "online"
   *
   */
  status: string;
  busy: boolean;
  labels: {
    /**
     * Unique identifier of the label.
     *
     */
    id?: number;
    /**
     * Name of the label.
     *
     */
    name?: string;
    /**
     * The type of label. Read-only labels are applied automatically when the runner is configured.
     *
     */
    type?: 'read-only' | 'custom';
  }[];
};
/**
 * Runner Application
 * Runner Application
 *
 */
export type RunnerApplication = {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;
  /**
   * A short lived bearer token used to download the runner, if needed.
   *
   */
  temp_download_token?: string;
  sha256_checksum?: string;
};
/**
 * Authentication Token
 * Authentication Token
 *
 */
export type AuthenticationToken = {
  /**
   * The token used for authentication
   * @example "v1.1f699f1069f60xxx"
   *
   */
  token: string;
  /**
   * The time this token expires
   * @example "2016-07-11T22:14:10Z"
   *
   */
  expires_at: Date;
  /**
   * @example
   * {
   *   "issues": "read",
   *   "deployments": "write"
   * }
   *
   */
  permissions?: any;
  /**
   * The repositories this token has access to
   *
   */
  repositories?: Repository[];
  /**
   * @example "config.yaml"
   *
   */
  single_file?: string | null;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   *
   */
  repository_selection?: 'all' | 'selected';
};
export type AuditLogEvent = {
  /**
   * The time the audit log event occurred, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   *
   */
  '@timestamp'?: number;
  /**
   * The name of the action that was performed, for example `user.login` or `repo.create`.
   *
   */
  action?: string;
  active?: boolean;
  active_was?: boolean;
  /**
   * The actor who performed the action.
   *
   */
  actor?: string;
  /**
   * The id of the actor who performed the action.
   *
   */
  actor_id?: number;
  actor_location?: {
    country_name?: string;
  };
  data?: {
    [key: string]: any;
  };
  org_id?: number;
  /**
   * The username of the account being blocked.
   *
   */
  blocked_user?: string;
  business?: string;
  config?: any[];
  config_was?: any[];
  content_type?: string;
  /**
   * The time the audit log event was recorded, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   *
   */
  created_at?: number;
  deploy_key_fingerprint?: string;
  /**
   * A unique identifier for an audit event.
   *
   */
  _document_id?: string;
  emoji?: string;
  events?: any[];
  events_were?: any[];
  explanation?: string;
  fingerprint?: string;
  hook_id?: number;
  limited_availability?: boolean;
  message?: string;
  name?: string;
  old_user?: string;
  openssh_public_key?: string;
  org?: string;
  previous_visibility?: string;
  read_only?: boolean;
  /**
   * The name of the repository.
   *
   */
  repo?: string;
  /**
   * The name of the repository.
   *
   */
  repository?: string;
  repository_public?: boolean;
  target_login?: string;
  team?: string;
  /**
   * The type of protocol (for example, HTTP or SSH) used to transfer Git data.
   *
   */
  transport_protocol?: number;
  /**
   * A human readable name for the protocol (for example, HTTP or SSH) used to transfer Git data.
   *
   */
  transport_protocol_name?: string;
  /**
   * The user that was affected by the action performed (if available).
   *
   */
  user?: string;
  /**
   * The repository visibility, for example `public` or `private`.
   *
   */
  visibility?: string;
};
export type ActionsBillingUsage = {
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   *
   */
  total_minutes_used: number;
  /**
   * The total paid GitHub Actions minutes used.
   *
   */
  total_paid_minutes_used: number;
  /**
   * The amount of free GitHub Actions minutes available.
   *
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on Ubuntu runner machines.
     *
     */
    UBUNTU?: number;
    /**
     * Total minutes used on macOS runner machines.
     *
     */
    MACOS?: number;
    /**
     * Total minutes used on Windows runner machines.
     *
     */
    WINDOWS?: number;
  };
};
export type PackagesBillingUsage = {
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   *
   */
  total_gigabytes_bandwidth_used: number;
  /**
   * Total paid storage space (GB) for GitHuub Packages.
   *
   */
  total_paid_gigabytes_bandwidth_used: number;
  /**
   * Free storage space (GB) for GitHub Packages.
   *
   */
  included_gigabytes_bandwidth: number;
};
export type CombinedBillingUsage = {
  /**
   * Numbers of days left in billing cycle.
   *
   */
  days_left_in_billing_cycle: number;
  /**
   * Estimated storage space (GB) used in billing cycle.
   *
   */
  estimated_paid_storage_for_month: number;
  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   *
   */
  estimated_storage_for_month: number;
};
/**
 * Actor
 * Actor
 *
 */
export type Actor = {
  id: number;
  login: string;
  display_login?: string;
  gravatar_id: string | null;
  url: string;
  avatar_url: string;
};
/**
 * Label
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 *
 */
export type Label = {
  /**
   * @example 208045946
   *
   */
  id: number;
  /**
   * @example "MDU6TGFiZWwyMDgwNDU5NDY="
   *
   */
  node_id: string;
  /**
   * URL for the label
   * @example "https://api.github.com/repositories/42/labels/bug"
   *
   */
  url: string;
  /**
   * The name of the label.
   * @example "bug"
   *
   */
  name: string;
  /**
   * @example "Something isn't working"
   *
   */
  description: string | null;
  /**
   * 6-character hex code, without the leading #, identifying the color
   * @example "FFFFFF"
   *
   */
  color: string;
  /**
   * @example true
   *
   */
  default: boolean;
};
/**
 * Milestone
 * A collection of related issues and pull requests.
 *
 */
export type Milestone = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   *
   */
  url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   *
   */
  labels_url: string;
  /**
   * @example 1002604
   *
   */
  id: number;
  /**
   * @example "MDk6TWlsZXN0b25lMTAwMjYwNA=="
   *
   */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   *
   */
  number: number;
  /**
   * The state of the milestone.
   * @example "open"
   * @defaultValue "open"
   *
   */
  state: 'open' | 'closed';
  /**
   * The title of the milestone.
   * @example "v1.0"
   *
   */
  title: string;
  /**
   * @example "Tracking milestone for version 1.0"
   *
   */
  description: string | null;
  creator: SimpleUser | null;
  /**
   * @example 4
   *
   */
  open_issues: number;
  /**
   * @example 8
   *
   */
  closed_issues: number;
  /**
   * @example "2011-04-10T20:09:31Z"
   *
   */
  created_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   *
   */
  updated_at: Date;
  /**
   * @example "2013-02-12T13:22:01Z"
   *
   */
  closed_at: Date | null;
  /**
   * @example "2012-10-09T23:39:01Z"
   *
   */
  due_on: Date | null;
};
/**
 * author_association
 * How the author is associated with the repository.
 * @example "OWNER"
 *
 */
export type Author_association =
  | 'COLLABORATOR'
  | 'CONTRIBUTOR'
  | 'FIRST_TIMER'
  | 'FIRST_TIME_CONTRIBUTOR'
  | 'MANNEQUIN'
  | 'MEMBER'
  | 'NONE'
  | 'OWNER';
/**
 * Issue Simple
 * Issue Simple
 *
 */
export type IssueSimple = {
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDU6SXNzdWUx"
   *
   */
  node_id: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   *
   */
  repository_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/labels{/name}"
   *
   */
  labels_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   *
   */
  comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/events"
   *
   */
  events_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/issues/1347"
   *
   */
  html_url: string;
  /**
   * @example 1347
   *
   */
  number: number;
  /**
   * @example "open"
   *
   */
  state: string;
  /**
   * @example "Found a bug"
   *
   */
  title: string;
  /**
   * @example "I'm having a problem with this."
   *
   */
  body?: string;
  user: SimpleUser | null;
  labels: Label[];
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  milestone: Milestone | null;
  /**
   * @example true
   *
   */
  locked: boolean;
  /**
   * @example "too heated"
   *
   */
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    merged_at?: Date | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  closed_at: Date | null;
  /**
   * @example "2011-04-22T13:33:48Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-04-22T13:33:48Z"
   *
   */
  updated_at: Date;
  author_association: Author_association;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  repository?: Repository;
  performed_via_github_app?: Integration | null;
};
/**
 * Reaction Rollup
 *
 */
export type ReactionRollup = {
  url: string;
  total_count: number;
  '+1': number;
  '-1': number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
};
/**
 * Issue Comment
 * Comments provide a way for people to collaborate on an issue.
 *
 */
export type IssueComment = {
  /**
   * Unique identifier of the issue comment
   * @example 42
   *
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   *
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   *
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: SimpleUser | null;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  updated_at: Date;
  issue_url: string;
  author_association: Author_association;
  performed_via_github_app?: Integration | null;
  reactions?: ReactionRollup;
};
/**
 * Event
 * Event
 *
 */
export type Event = {
  id: string;
  type: string | null;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org?: Actor;
  payload: {
    action?: string;
    issue?: IssueSimple;
    comment?: IssueComment;
    pages?: {
      page_name?: string;
      title?: string;
      summary?: string | null;
      action?: string;
      sha?: string;
      html_url?: string;
    }[];
  };
  public: boolean;
  created_at: Date | null;
};
/**
 * Link With Type
 * Hypermedia Link with Type
 *
 */
export type LinkWithType = {
  href: string;
  type: string;
};
/**
 * Feed
 * Feed
 *
 */
export type Feed = {
  /**
   * @example "https://github.com/timeline"
   *
   */
  timeline_url: string;
  /**
   * @example "https://github.com/{user}"
   *
   */
  user_url: string;
  /**
   * @example "https://github.com/octocat"
   *
   */
  current_user_public_url?: string;
  /**
   * @example "https://github.com/octocat.private?token=abc123"
   *
   */
  current_user_url?: string;
  /**
   * @example "https://github.com/octocat.private.actor?token=abc123"
   *
   */
  current_user_actor_url?: string;
  /**
   * @example "https://github.com/octocat-org"
   *
   */
  current_user_organization_url?: string;
  /**
   * @example
   * [
   *   "https://github.com/organizations/github/octocat.private.atom?token=abc123"
   * ]
   *
   */
  current_user_organization_urls?: string[];
  /**
   * @example "https://github.com/security-advisories"
   *
   */
  security_advisories_url?: string;
  _links: {
    timeline: LinkWithType;
    user: LinkWithType;
    security_advisories?: LinkWithType;
    current_user?: LinkWithType;
    current_user_public?: LinkWithType;
    current_user_actor?: LinkWithType;
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
  };
};
/**
 * Base Gist
 * Base Gist
 *
 */
export type BaseGist = {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [key: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
    };
  };
  public: boolean;
  created_at: Date;
  updated_at: Date;
  description: string | null;
  comments: number;
  user: SimpleUser | null;
  comments_url: string;
  owner?: SimpleUser | null;
  truncated?: boolean;
  forks?: any[];
  history?: any[];
};
/**
 * Public User
 * Public User
 *
 */
export type PublicUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  email: string | null;
  hireable: boolean | null;
  bio: string | null;
  twitter_username?: string | null;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: Date;
  updated_at: Date;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  suspended_at?: Date | null;
  /**
   * @example 1
   *
   */
  private_gists?: number;
  /**
   * @example 2
   *
   */
  total_private_repos?: number;
  /**
   * @example 2
   *
   */
  owned_private_repos?: number;
  /**
   * @example 1
   *
   */
  disk_usage?: number;
  /**
   * @example 3
   *
   */
  collaborators?: number;
};
/**
 * Gist History
 * Gist History
 *
 */
export type GistHistory = {
  user?: SimpleUser;
  version?: string;
  committed_at?: Date;
  change_status?: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  url?: string;
};
/**
 * Gist Simple
 * Gist Simple
 *
 */
export type GistSimple = {
  /**
   * @deprecated
   *
   */
  forks?:
    | {
        id?: string;
        url?: string;
        user?: PublicUser;
        created_at?: Date;
        updated_at?: Date;
      }[]
    | null;
  /**
   * @deprecated
   *
   */
  history?: GistHistory[] | null;
  /**
   * Gist
   * Gist
   *
   */
  fork_of?: {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: {
      [key: string]: {
        filename?: string;
        type?: string;
        language?: string;
        raw_url?: string;
        size?: number;
      };
    };
    public: boolean;
    created_at: Date;
    updated_at: Date;
    description: string | null;
    comments: number;
    user: SimpleUser | null;
    comments_url: string;
    owner?: SimpleUser | null;
    truncated?: boolean;
    forks?: any[];
    history?: any[];
  } | null;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [key: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
    } | null;
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string | null;
  comments?: number;
  user?: string | null;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
};
/**
 * Gist Comment
 * A comment made to a gist.
 *
 */
export type GistComment = {
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDExOkdpc3RDb21tZW50MQ=="
   *
   */
  node_id: string;
  /**
   * @example "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1"
   *
   */
  url: string;
  /**
   * The comment text.
   * @example "Body of the attachment"
   *
   */
  body: string;
  user: SimpleUser | null;
  /**
   * @example "2011-04-18T23:23:56Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-04-18T23:23:56Z"
   *
   */
  updated_at: Date;
  author_association: Author_association;
};
/**
 * Gist Commit
 * Gist Commit
 *
 */
export type GistCommit = {
  /**
   * @example "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f"
   *
   */
  url: string;
  /**
   * @example "57a7f021a713b1c5a6a199b54cc514735d2d462f"
   *
   */
  version: string;
  user: SimpleUser | null;
  change_status: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  /**
   * @example "2010-04-14T02:15:15Z"
   *
   */
  committed_at: Date;
};
/**
 * Gitignore Template
 * Gitignore Template
 *
 */
export type GitignoreTemplate = {
  /**
   * @example "C"
   *
   */
  name: string;
  /**
   * @example "# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n"
   *
   */
  source: string;
};
/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 *
 */
export type Issue = {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   * @example "https://api.github.com/repositories/42/issues/1"
   *
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   *
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   *
   */
  state: string;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   *
   */
  title: string;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   *
   */
  body?: string | null;
  user: SimpleUser | null;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example
   * [
   *   "bug",
   *   "registration"
   * ]
   *
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  milestone: Milestone | null;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    merged_at?: Date | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  closed_at: Date | null;
  created_at: Date;
  updated_at: Date;
  closed_by?: SimpleUser | null;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  repository?: Repository;
  performed_via_github_app?: Integration | null;
  author_association: Author_association;
  reactions?: ReactionRollup;
};
/**
 * License
 * License
 *
 */
export type License = {
  /**
   * @example "mit"
   *
   */
  key: string;
  /**
   * @example "MIT License"
   *
   */
  name: string;
  /**
   * @example "MIT"
   *
   */
  spdx_id: string | null;
  /**
   * @example "https://api.github.com/licenses/mit"
   *
   */
  url: string | null;
  /**
   * @example "MDc6TGljZW5zZW1pdA=="
   *
   */
  node_id: string;
  /**
   * @example "http://choosealicense.com/licenses/mit/"
   *
   */
  html_url: string;
  /**
   * @example "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty."
   *
   */
  description: string;
  /**
   * @example "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders."
   *
   */
  implementation: string;
  /**
   * @example
   * [
   *   "commercial-use",
   *   "modifications",
   *   "distribution",
   *   "sublicense",
   *   "private-use"
   * ]
   *
   */
  permissions: string[];
  /**
   * @example
   * [
   *   "include-copyright"
   * ]
   *
   */
  conditions: string[];
  /**
   * @example
   * [
   *   "no-liability"
   * ]
   *
   */
  limitations: string[];
  /**
   * @example "\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
   *
   */
  body: string;
  /**
   * @example true
   *
   */
  featured: boolean;
};
/**
 * Marketplace Listing Plan
 * Marketplace Listing Plan
 *
 */
export type MarketplaceListingPlan = {
  /**
   * @example "https://api.github.com/marketplace_listing/plans/1313"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/marketplace_listing/plans/1313/accounts"
   *
   */
  accounts_url: string;
  /**
   * @example 1313
   *
   */
  id: number;
  /**
   * @example 3
   *
   */
  number: number;
  /**
   * @example "Pro"
   *
   */
  name: string;
  /**
   * @example "A professional-grade CI solution"
   *
   */
  description: string;
  /**
   * @example 1099
   *
   */
  monthly_price_in_cents: number;
  /**
   * @example 11870
   *
   */
  yearly_price_in_cents: number;
  /**
   * @example "flat-rate"
   *
   */
  price_model: string;
  /**
   * @example true
   *
   */
  has_free_trial: boolean;
  unit_name: string | null;
  /**
   * @example "published"
   *
   */
  state: string;
  /**
   * @example
   * [
   *   "Up to 25 private repositories",
   *   "11 concurrent builds"
   * ]
   *
   */
  bullets: string[];
};
/**
 * Marketplace Purchase
 * Marketplace Purchase
 *
 */
export type MarketplacePurchase = {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email?: string;
  email?: string | null;
  marketplace_pending_change?: {
    is_installed?: boolean;
    effective_date?: string;
    unit_count?: number | null;
    id?: number;
    plan?: MarketplaceListingPlan;
  } | null;
  marketplace_purchase: {
    billing_cycle?: string;
    next_billing_date?: string | null;
    is_installed?: boolean;
    unit_count?: number | null;
    on_free_trial?: boolean;
    free_trial_ends_on?: string | null;
    updated_at?: string;
    plan?: MarketplaceListingPlan;
  };
};
/**
 * Api Overview
 * Api Overview
 *
 */
export type ApiOverview = {
  /**
   * @example true
   *
   */
  verifiable_password_authentication: boolean;
  ssh_key_fingerprints?: {
    SHA256_RSA?: string;
    SHA256_DSA?: string;
  };
  /**
   * @example
   * [
   *   "127.0.0.1/32"
   * ]
   *
   */
  hooks?: string[];
  /**
   * @example
   * [
   *   "127.0.0.1/32"
   * ]
   *
   */
  web?: string[];
  /**
   * @example
   * [
   *   "127.0.0.1/32"
   * ]
   *
   */
  api?: string[];
  /**
   * @example
   * [
   *   "127.0.0.1/32"
   * ]
   *
   */
  git?: string[];
  /**
   * @example
   * [
   *   "13.65.0.0/16",
   *   "157.55.204.33/32",
   *   "2a01:111:f403:f90c::/62"
   * ]
   *
   */
  packages?: string[];
  /**
   * @example
   * [
   *   "192.30.252.153/32",
   *   "192.30.252.154/32"
   * ]
   *
   */
  pages?: string[];
  /**
   * @example
   * [
   *   "54.158.161.132",
   *   "54.226.70.38"
   * ]
   *
   */
  importer?: string[];
  /**
   * @example
   * [
   *   "13.64.0.0/16",
   *   "13.65.0.0/16"
   * ]
   *
   */
  actions?: string[];
  /**
   * @example
   * [
   *   "192.168.7.15/32",
   *   "192.168.7.16/32"
   * ]
   *
   */
  dependabot?: string[];
};
/**
 * Minimal Repository
 * Minimal Repository
 *
 */
export type MinimalRepository = {
  /**
   * @example 1296269
   *
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   *
   */
  node_id: string;
  /**
   * @example "Hello-World"
   *
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   *
   */
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   *
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   *
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   *
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   *
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   *
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   *
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   *
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   *
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   *
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   *
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   *
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   *
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   *
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   *
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   *
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   *
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   *
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   *
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   *
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   *
   */
  git_tags_url: string;
  git_url?: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   *
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   *
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   *
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   *
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   *
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   *
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   *
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   *
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   *
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   *
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   *
   */
  releases_url: string;
  ssh_url?: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   *
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   *
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   *
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   *
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   *
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   *
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   *
   */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   *
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   *
   */
  pushed_at?: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  created_at?: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   *
   */
  updated_at?: Date | null;
  permissions?: {
    admin?: boolean;
    push?: boolean;
    pull?: boolean;
    maintain?: boolean;
    triage?: boolean;
  };
  template_repository?: Repository | null;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  forks?: number;
  open_issues?: number;
  watchers?: number;
};
/**
 * Thread
 * Thread
 *
 */
export type Thread = {
  id: string;
  repository: MinimalRepository;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string | null;
  url: string;
  /**
   * @example "https://api.github.com/notifications/threads/2/subscription"
   *
   */
  subscription_url: string;
};
/**
 * Thread Subscription
 * Thread Subscription
 *
 */
export type ThreadSubscription = {
  /**
   * @example true
   *
   */
  subscribed: boolean;
  ignored: boolean;
  reason: string | null;
  /**
   * @example "2012-10-06T21:34:12Z"
   *
   */
  created_at: Date | null;
  /**
   * @example "https://api.github.com/notifications/threads/1/subscription"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/notifications/threads/1"
   *
   */
  thread_url?: string;
  /**
   * @example "https://api.github.com/repos/1"
   *
   */
  repository_url?: string;
};
/**
 * Organization Full
 * Organization Full
 *
 */
export type OrganizationFull = {
  /**
   * @example "github"
   *
   */
  login: string;
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDEyOk9yZ2FuaXphdGlvbjE="
   *
   */
  node_id: string;
  /**
   * @example "https://api.github.com/orgs/github"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/github/repos"
   *
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/orgs/github/events"
   *
   */
  events_url: string;
  /**
   * @example "https://api.github.com/orgs/github/hooks"
   *
   */
  hooks_url: string;
  /**
   * @example "https://api.github.com/orgs/github/issues"
   *
   */
  issues_url: string;
  /**
   * @example "https://api.github.com/orgs/github/members{/member}"
   *
   */
  members_url: string;
  /**
   * @example "https://api.github.com/orgs/github/public_members{/member}"
   *
   */
  public_members_url: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   *
   */
  avatar_url: string;
  /**
   * @example "A great organization"
   *
   */
  description: string | null;
  /**
   * @example "github"
   *
   */
  name?: string;
  /**
   * @example "GitHub"
   *
   */
  company?: string;
  /**
   * @example "https://github.com/blog"
   *
   */
  blog?: string;
  /**
   * @example "San Francisco"
   *
   */
  location?: string;
  /**
   * @example "octocat@github.com"
   *
   */
  email?: string;
  /**
   * @example "github"
   *
   */
  twitter_username?: string | null;
  /**
   * @example true
   *
   */
  is_verified?: boolean;
  /**
   * @example true
   *
   */
  has_organization_projects: boolean;
  /**
   * @example true
   *
   */
  has_repository_projects: boolean;
  /**
   * @example 2
   *
   */
  public_repos: number;
  /**
   * @example 1
   *
   */
  public_gists: number;
  /**
   * @example 20
   *
   */
  followers: number;
  following: number;
  /**
   * @example "https://github.com/octocat"
   *
   */
  html_url: string;
  /**
   * @example "2008-01-14T04:33:35Z"
   *
   */
  created_at: Date;
  /**
   * @example "Organization"
   *
   */
  type: string;
  /**
   * @example 100
   *
   */
  total_private_repos?: number;
  /**
   * @example 100
   *
   */
  owned_private_repos?: number;
  /**
   * @example 81
   *
   */
  private_gists?: number | null;
  /**
   * @example 10000
   *
   */
  disk_usage?: number | null;
  /**
   * @example 8
   *
   */
  collaborators?: number | null;
  /**
   * @example "org@example.com"
   *
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;
  /**
   * @example true
   *
   */
  members_can_create_repositories?: boolean | null;
  /**
   * @example true
   *
   */
  two_factor_requirement_enabled?: boolean | null;
  /**
   * @example "all"
   *
   */
  members_allowed_repository_creation_type?: string;
  /**
   * @example true
   *
   */
  members_can_create_public_repositories?: boolean;
  /**
   * @example true
   *
   */
  members_can_create_private_repositories?: boolean;
  /**
   * @example true
   *
   */
  members_can_create_internal_repositories?: boolean;
  /**
   * @example true
   *
   */
  members_can_create_pages?: boolean;
  /**
   * @example true
   *
   */
  members_can_create_public_pages?: boolean;
  /**
   * @example true
   *
   */
  members_can_create_private_pages?: boolean;
  updated_at: Date;
};
/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions. Can be one of: `all`, `none`, or `selected`.
 *
 */
export type EnabledRepositories = 'all' | 'none' | 'selected';
export type ActionsOrganizationPermissions = {
  enabled_repositories: EnabledRepositories;
  /**
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   *
   */
  selected_repositories_url?: string;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};
export type RunnerGroupsOrg = {
  id: number;
  name: string;
  visibility: string;
  default: boolean;
  /**
   * Link to the selected repositories resource for this runner group. Not present unless visibility was set to `selected`
   *
   */
  selected_repositories_url?: string;
  runners_url: string;
  inherited: boolean;
  inherited_allows_public_repositories?: boolean;
  allows_public_repositories: boolean;
};
/**
 * Actions Secret for an Organization
 * Secrets for GitHub Actions for an organization.
 *
 */
export type OrganizationActionsSecret = {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   *
   */
  name: string;
  created_at: Date;
  updated_at: Date;
  /**
   * Visibility of a secret
   *
   */
  visibility: 'all' | 'private' | 'selected';
  /**
   * @example "https://api.github.com/organizations/org/secrets/my_secret/repositories"
   *
   */
  selected_repositories_url?: string;
};
/**
 * ActionsPublicKey
 * The public key used for setting Actions Secrets.
 *
 */
export type ActionsPublicKey = {
  /**
   * The identifier for the key.
   * @example "1234567"
   *
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   *
   */
  key: string;
  /**
   * @example 2
   *
   */
  id?: number;
  /**
   * @example "https://api.github.com/user/keys/2"
   *
   */
  url?: string;
  /**
   * @example "ssh-rsa AAAAB3NzaC1yc2EAAA"
   *
   */
  title?: string;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  created_at?: string;
};
/**
 * Empty Object
 * An object without any properties.
 *
 */
export type EmptyObject = any;
/**
 * Credential Authorization
 * Credential Authorization
 *
 */
export type CredentialAuthorization = {
  /**
   * User login that owns the underlying credential.
   * @example "monalisa"
   *
   */
  login: string;
  /**
   * Unique identifier for the credential.
   * @example 1
   *
   */
  credential_id: number;
  /**
   * Human-readable description of the credential type.
   * @example "SSH Key"
   *
   */
  credential_type: string;
  /**
   * Last eight characters of the credential. Only included in responses with credential_type of personal access token.
   * @example "12345678"
   *
   */
  token_last_eight?: string;
  /**
   * Date when the credential was authorized for use.
   * @example "2011-01-26T19:06:43Z"
   *
   */
  credential_authorized_at: Date;
  /**
   * List of oauth scopes the token has been granted.
   * @example
   * [
   *   "user",
   *   "repo"
   * ]
   *
   */
  scopes?: string[];
  /**
   * Unique string to distinguish the credential. Only included in responses with credential_type of SSH Key.
   * @example "jklmnop12345678"
   *
   */
  fingerprint?: string;
  /**
   * Date when the credential was last accessed. May be null if it was never accessed
   * @example "2011-01-26T19:06:43Z"
   *
   */
  credential_accessed_at?: Date | null;
  /**
   * @example 12345678
   *
   */
  authorized_credential_id?: number | null;
  /**
   * The title given to the ssh key. This will only be present when the credential is an ssh key.
   * @example "my ssh key"
   *
   */
  authorized_credential_title?: string | null;
  /**
   * The note given to the token. This will only be present when the credential is a token.
   * @example "my token"
   *
   */
  authorized_credential_note?: string | null;
};
/**
 * Organization Invitation
 * Organization Invitation
 *
 */
export type OrganizationInvitation = {
  id: number;
  login: string | null;
  email: string | null;
  role: string;
  created_at: string;
  failed_at?: string | null;
  failed_reason?: string | null;
  inviter: SimpleUser;
  team_count: number;
  /**
   * @example "\"MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x\""
   *
   */
  node_id: string;
  /**
   * @example "\"https://api.github.com/organizations/16/invitations/1/teams\""
   *
   */
  invitation_teams_url: string;
};
/**
 * Org Hook
 * Org Hook
 *
 */
export type OrgHook = {
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "https://api.github.com/orgs/octocat/hooks/1"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/octocat/hooks/1/pings"
   *
   */
  ping_url: string;
  /**
   * @example "https://api.github.com/orgs/octocat/hooks/1/deliveries"
   *
   */
  deliveries_url?: string;
  /**
   * @example "web"
   *
   */
  name: string;
  /**
   * @example
   * [
   *   "push",
   *   "pull_request"
   * ]
   *
   */
  events: string[];
  /**
   * @example true
   *
   */
  active: boolean;
  config: {
    /**
     * @example "\"http://example.com/2\""
     *
     */
    url?: string;
    /**
     * @example "\"0\""
     *
     */
    insecure_ssl?: string;
    /**
     * @example "\"form\""
     *
     */
    content_type?: string;
    /**
     * @example "\"********\""
     *
     */
    secret?: string;
  };
  /**
   * @example "2011-09-06T20:39:23Z"
   *
   */
  updated_at: Date;
  /**
   * @example "2011-09-06T17:26:27Z"
   *
   */
  created_at: Date;
  type: string;
};
/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect. Can be one of: `existing_users`, `contributors_only`, `collaborators_only`.
 * @example "collaborators_only"
 *
 */
export type InteractionGroup =
  | 'existing_users'
  | 'contributors_only'
  | 'collaborators_only';
/**
 * Interaction Limits
 * Interaction limit settings.
 *
 */
export type InteractionLimitResponse = {
  limit: InteractionGroup;
  /**
   * @example "repository"
   *
   */
  origin: string;
  /**
   * @example "2018-08-17T04:18:39Z"
   *
   */
  expires_at: Date;
};
/**
 * The duration of the interaction restriction. Can be one of: `one_day`, `three_days`, `one_week`, `one_month`, `six_months`. Default: `one_day`.
 * @example "one_month"
 *
 */
export type InteractionExpiry =
  | 'one_day'
  | 'three_days'
  | 'one_week'
  | 'one_month'
  | 'six_months';
/**
 * Interaction Restrictions
 * Limit interactions to a specific type of user for a specified duration
 *
 */
export type InteractionLimit = {
  limit: InteractionGroup;
  expiry?: InteractionExpiry;
};
/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 *
 */
export type TeamSimple = {
  /**
   * Unique identifier of the team
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDQ6VGVhbTE="
   *
   */
  node_id: string;
  /**
   * URL for the team
   * @example "https://api.github.com/organizations/1/team/1"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/members{/member}"
   *
   */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   *
   */
  name: string;
  /**
   * Description of the team
   * @example "A great team."
   *
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   *
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   *
   */
  privacy?: string;
  /**
   * @example "https://github.com/orgs/rails/teams/core"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/repos"
   *
   */
  repositories_url: string;
  /**
   * @example "justice-league"
   *
   */
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   *
   */
  ldap_dn?: string;
} | null;
/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 *
 */
export type Team = {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  url: string;
  /**
   * @example "https://github.com/orgs/rails/teams/core"
   *
   */
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: TeamSimple | null;
};
/**
 * Org Membership
 * Org Membership
 *
 */
export type OrgMembership = {
  /**
   * @example "https://api.github.com/orgs/octocat/memberships/defunkt"
   *
   */
  url: string;
  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   * @example "active"
   *
   */
  state: 'active' | 'pending';
  /**
   * The user's membership type in the organization.
   * @example "admin"
   *
   */
  role: 'admin' | 'member' | 'billing_manager';
  /**
   * @example "https://api.github.com/orgs/octocat"
   *
   */
  organization_url: string;
  organization: OrganizationSimple;
  user: SimpleUser | null;
  permissions?: {
    can_create_repository: boolean;
  };
};
/**
 * Migration
 * A migration.
 *
 */
export type Migration = {
  /**
   * @example 79
   *
   */
  id: number;
  owner: SimpleUser | null;
  /**
   * @example "0b989ba4-242f-11e5-81e1-c7b6966d2516"
   *
   */
  guid: string;
  /**
   * @example "pending"
   *
   */
  state: string;
  /**
   * @example true
   *
   */
  lock_repositories: boolean;
  exclude_attachments: boolean;
  repositories: Repository[];
  /**
   * @example "https://api.github.com/orgs/octo-org/migrations/79"
   *
   */
  url: string;
  /**
   * @example "2015-07-06T15:33:38-07:00"
   *
   */
  created_at: Date;
  /**
   * @example "2015-07-06T15:33:38-07:00"
   *
   */
  updated_at: Date;
  node_id: string;
  archive_url?: string;
  exclude?: any[];
};
/**
 * Package
 * A software package
 *
 */
export type Package = {
  /**
   * Unique identifier of the package.
   * @example 1
   *
   */
  id: number;
  /**
   * The name of the package.
   * @example "super-linter"
   *
   */
  name: string;
  /**
   * @example "docker"
   *
   */
  package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  /**
   * @example "https://api.github.com/orgs/github/packages/container/super-linter"
   *
   */
  url: string;
  /**
   * @example "https://github.com/orgs/github/packages/container/package/super-linter"
   *
   */
  html_url: string;
  /**
   * The number of versions of the package.
   * @example 1
   *
   */
  version_count: number;
  /**
   * @example "private"
   *
   */
  visibility: 'private' | 'public';
  owner?: SimpleUser | null;
  repository?: MinimalRepository | null;
  created_at: Date;
  updated_at: Date;
};
/**
 * Package Version
 * A version of a software package
 *
 */
export type PackageVersion = {
  /**
   * Unique identifier of the package version.
   * @example 1
   *
   */
  id: number;
  /**
   * The name of the package version.
   * @example "latest"
   *
   */
  name: string;
  /**
   * @example "https://api.github.com/orgs/github/packages/container/super-linter/versions/786068"
   *
   */
  url: string;
  /**
   * @example "https://github.com/orgs/github/packages/container/package/super-linter"
   *
   */
  package_html_url: string;
  /**
   * @example "https://github.com/orgs/github/packages/container/super-linter/786068"
   *
   */
  html_url?: string;
  /**
   * @example "MIT"
   *
   */
  license?: string;
  description?: string;
  /**
   * @example "2011-04-10T20:09:31Z"
   *
   */
  created_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   *
   */
  updated_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   *
   */
  deleted_at?: Date;
  /**
   * Package Version Metadata
   *
   */
  metadata?: {
    /**
     * @example "docker"
     *
     */
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    /**
     * Container Metadata
     *
     */
    container?: {
      tags: any[];
    };
    /**
     * Docker Metadata
     *
     */
    docker?: {
      tag?: any[];
    };
  };
};
/**
 * Project
 * Projects are a way to organize columns and cards of work.
 *
 */
export type Project = {
  /**
   * @example "https://api.github.com/repos/api-playground/projects-test"
   *
   */
  owner_url: string;
  /**
   * @example "https://api.github.com/projects/1002604"
   *
   */
  url: string;
  /**
   * @example "https://github.com/api-playground/projects-test/projects/12"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/projects/1002604/columns"
   *
   */
  columns_url: string;
  /**
   * @example 1002604
   *
   */
  id: number;
  /**
   * @example "MDc6UHJvamVjdDEwMDI2MDQ="
   *
   */
  node_id: string;
  /**
   * Name of the project
   * @example "Week One Sprint"
   *
   */
  name: string;
  /**
   * Body of the project
   * @example "This project represents the sprint of the first week in January"
   *
   */
  body: string | null;
  /**
   * @example 1
   *
   */
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   * @example "open"
   *
   */
  state: string;
  creator: SimpleUser | null;
  /**
   * @example "2011-04-10T20:09:31Z"
   *
   */
  created_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   *
   */
  updated_at: Date;
  /**
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   *
   */
  organization_permission?: 'read' | 'write' | 'admin' | 'none';
  /**
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   *
   */
  private?: boolean;
};
/**
 * GroupMapping
 * External Groups to be mapped to a team for membership
 *
 */
export type GroupMapping = {
  /**
   * Array of groups to be mapped to this team
   * @example
   * [
   *   {
   *     "group_id": "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa",
   *     "group_name": "saml-azuread-test",
   *     "group_description": "A group of Developers working on AzureAD SAML SSO"
   *   },
   *   {
   *     "group_id": "2bb2bb2b-bb22-22bb-2bb2-bb2bbb2bb2b2",
   *     "group_name": "saml-azuread-test2",
   *     "group_description": "Another group of Developers working on AzureAD SAML SSO"
   *   }
   * ]
   *
   */
  groups?: {
    /**
     * The ID of the group
     * @example "111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa"
     *
     */
    group_id: string;
    /**
     * The name of the group
     * @example "saml-azuread-test"
     *
     */
    group_name: string;
    /**
     * a description of the group
     * @example "A group of Developers working on AzureAD SAML SSO"
     *
     */
    group_description: string;
    /**
     * synchronization status for this group mapping
     * @example "unsynced"
     *
     */
    status?: string;
    /**
     * the time of the last sync for this group-mapping
     * @example "2019-06-03 22:27:15:000 -700"
     *
     */
    synced_at?: string | null;
  }[];
};
/**
 * Full Team
 * Groups of organization members that gives permissions on specified repositories.
 *
 */
export type TeamFull = {
  /**
   * Unique identifier of the team
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDQ6VGVhbTE="
   *
   */
  node_id: string;
  /**
   * URL for the team
   * @example "https://api.github.com/organizations/1/team/1"
   *
   */
  url: string;
  /**
   * @example "https://github.com/orgs/rails/teams/core"
   *
   */
  html_url: string;
  /**
   * Name of the team
   * @example "Developers"
   *
   */
  name: string;
  /**
   * @example "justice-league"
   *
   */
  slug: string;
  /**
   * @example "A great team."
   *
   */
  description: string | null;
  /**
   * The level of privacy this team should have
   * @example "closed"
   *
   */
  privacy?: 'closed' | 'secret';
  /**
   * Permission that the team will have for its repositories
   * @example "push"
   *
   */
  permission: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/members{/member}"
   *
   */
  members_url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/repos"
   *
   */
  repositories_url: string;
  parent?: TeamSimple | null;
  /**
   * @example 3
   *
   */
  members_count: number;
  /**
   * @example 10
   *
   */
  repos_count: number;
  /**
   * @example "2017-07-14T16:53:42Z"
   *
   */
  created_at: Date;
  /**
   * @example "2017-08-17T12:37:15Z"
   *
   */
  updated_at: Date;
  organization: OrganizationFull;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   *
   */
  ldap_dn?: string;
};
/**
 * Team Discussion
 * A team discussion is a persistent record of a free-form conversation within a team.
 *
 */
export type TeamDiscussion = {
  author: SimpleUser | null;
  /**
   * The main text of the discussion.
   * @example "Please suggest improvements to our workflow in comments."
   *
   */
  body: string;
  /**
   * @example "<p>Hi! This is an area for us to collaborate as a team</p>"
   *
   */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   *
   */
  body_version: string;
  comments_count: number;
  /**
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1/comments"
   *
   */
  comments_url: string;
  /**
   * @example "2018-01-25T18:56:31Z"
   *
   */
  created_at: Date;
  last_edited_at: Date | null;
  /**
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1"
   *
   */
  html_url: string;
  /**
   * @example "MDE0OlRlYW1EaXNjdXNzaW9uMQ=="
   *
   */
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   * @example 42
   *
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   * @example true
   *
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization administrators.
   * @example true
   *
   */
  private: boolean;
  /**
   * @example "https://api.github.com/organizations/1/team/2343027"
   *
   */
  team_url: string;
  /**
   * The title of the discussion.
   * @example "How can we improve our workflow?"
   *
   */
  title: string;
  /**
   * @example "2018-01-25T18:56:31Z"
   *
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1"
   *
   */
  url: string;
  reactions?: ReactionRollup;
};
/**
 * Team Discussion Comment
 * A reply to a discussion within a team.
 *
 */
export type TeamDiscussionComment = {
  author: SimpleUser | null;
  /**
   * The main text of the comment.
   * @example "I agree with this suggestion."
   *
   */
  body: string;
  /**
   * @example "<p>Do you like apples?</p>"
   *
   */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   *
   */
  body_version: string;
  /**
   * @example "2018-01-15T23:53:58Z"
   *
   */
  created_at: Date;
  last_edited_at: Date | null;
  /**
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1"
   *
   */
  discussion_url: string;
  /**
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1"
   *
   */
  html_url: string;
  /**
   * @example "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE="
   *
   */
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   * @example 42
   *
   */
  number: number;
  /**
   * @example "2018-01-15T23:53:58Z"
   *
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1"
   *
   */
  url: string;
  reactions?: ReactionRollup;
};
/**
 * Reaction
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 *
 */
export type Reaction = {
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDg6UmVhY3Rpb24x"
   *
   */
  node_id: string;
  user: SimpleUser | null;
  /**
   * The reaction to use
   * @example "heart"
   *
   */
  content:
    | '+1'
    | '-1'
    | 'laugh'
    | 'confused'
    | 'heart'
    | 'hooray'
    | 'rocket'
    | 'eyes';
  /**
   * @example "2016-05-20T20:09:31Z"
   *
   */
  created_at: Date;
};
/**
 * Team Membership
 * Team Membership
 *
 */
export type TeamMembership = {
  url: string;
  /**
   * The role of the user in the team.
   * @example "member"
   * @defaultValue "member"
   *
   */
  role: 'member' | 'maintainer';
  /**
   * The state of the user's membership in the team.
   *
   */
  state: 'active' | 'pending';
};
/**
 * Team Project
 * A team's access to a project.
 *
 */
export type TeamProject = {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string | null;
  number: number;
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The organization permission for this project. Only present when owner is an organization.
   *
   */
  organization_permission?: string;
  /**
   * Whether the project is private or not. Only present when owner is an organization.
   *
   */
  private?: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
};
/**
 * Team Repository
 * A team's access to a repository.
 *
 */
export type TeamRepository = {
  /**
   * Unique identifier of the repository
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   *
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   *
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   *
   */
  full_name: string;
  license: LicenseSimple | null;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUser | null;
  /**
   * Whether the repository is private or public.
   *
   */
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   *
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   *
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   *
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   *
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   *
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   *
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   *
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   *
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   *
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   *
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   *
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   *
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   *
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   *
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   *
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   *
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   *
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   *
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   *
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   *
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   *
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   *
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   *
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   *
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   *
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   *
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   *
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   *
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   *
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   *
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   *
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   *
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   *
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   *
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   *
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   *
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   *
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   *
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   *
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   *
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   *
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   *
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   *
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   *
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   *
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   *
   */
  forks_count: number;
  /**
   * @example 80
   *
   */
  stargazers_count: number;
  /**
   * @example 80
   *
   */
  watchers_count: number;
  /**
   * @example 108
   *
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   *
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   *
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @example true
   * @defaultValue true
   *
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   *
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   *
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @defaultValue "public"
   *
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   *
   */
  pushed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  created_at: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   *
   */
  updated_at: Date | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @example true
   * @defaultValue true
   *
   */
  allow_rebase_merge?: boolean;
  template_repository?: Repository | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @example true
   * @defaultValue true
   *
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   *
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   *
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   * @example true
   * @defaultValue true
   *
   */
  allow_merge_commit?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
};
/**
 * Project Card
 * Project cards represent a scope of work.
 *
 */
export type ProjectCard = {
  /**
   * @example "https://api.github.com/projects/columns/cards/1478"
   *
   */
  url: string;
  /**
   * The project card's ID
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDExOlByb2plY3RDYXJkMTQ3OA=="
   *
   */
  node_id: string;
  /**
   * @example "Add payload for delete Project column"
   *
   */
  note: string | null;
  creator: SimpleUser | null;
  /**
   * @example "2016-09-05T14:21:06Z"
   *
   */
  created_at: Date;
  /**
   * @example "2016-09-05T14:20:22Z"
   *
   */
  updated_at: Date;
  /**
   * Whether or not the card is archived
   *
   */
  archived?: boolean;
  column_name?: string;
  project_id?: string;
  /**
   * @example "https://api.github.com/projects/columns/367"
   *
   */
  column_url: string;
  /**
   * @example "https://api.github.com/repos/api-playground/projects-test/issues/3"
   *
   */
  content_url?: string;
  /**
   * @example "https://api.github.com/projects/120"
   *
   */
  project_url: string;
};
/**
 * Project Column
 * Project columns contain cards of work.
 *
 */
export type ProjectColumn = {
  /**
   * @example "https://api.github.com/projects/columns/367"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/projects/120"
   *
   */
  project_url: string;
  /**
   * @example "https://api.github.com/projects/columns/367/cards"
   *
   */
  cards_url: string;
  /**
   * The unique identifier of the project column
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDEzOlByb2plY3RDb2x1bW4zNjc="
   *
   */
  node_id: string;
  /**
   * Name of the project column
   * @example "Remaining tasks"
   *
   */
  name: string;
  /**
   * @example "2016-09-05T14:18:44Z"
   *
   */
  created_at: Date;
  /**
   * @example "2016-09-05T14:22:28Z"
   *
   */
  updated_at: Date;
};
/**
 * Repository Collaborator Permission
 * Repository Collaborator Permission
 *
 */
export type RepositoryCollaboratorPermission = {
  permission: string;
  user: SimpleUser | null;
};
/**
 * Rate Limit
 *
 */
export type RateLimit = {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
};
/**
 * Rate Limit Overview
 * Rate Limit Overview
 *
 */
export type RateLimitOverview = {
  resources: {
    core: RateLimit;
    graphql?: RateLimit;
    search: RateLimit;
    source_import?: RateLimit;
    integration_manifest?: RateLimit;
    code_scanning_upload?: RateLimit;
  };
  rate: RateLimit;
};
/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 *
 */
export type CodeOfConductSimple = {
  /**
   * @example "https://api.github.com/repos/github/docs/community/code_of_conduct"
   *
   */
  url: string;
  /**
   * @example "citizen_code_of_conduct"
   *
   */
  key: string;
  /**
   * @example "Citizen Code of Conduct"
   *
   */
  name: string;
  /**
   * @example "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
   *
   */
  html_url: string | null;
};
/**
 * Full Repository
 * Full Repository
 *
 */
export type FullRepository = {
  /**
   * @example 1296269
   *
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   *
   */
  node_id: string;
  /**
   * @example "Hello-World"
   *
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   *
   */
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   *
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   *
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   *
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   *
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   *
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   *
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   *
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   *
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   *
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   *
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   *
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   *
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   *
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   *
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   *
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   *
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   *
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   *
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   *
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   *
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   *
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   *
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   *
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   *
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   *
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   *
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   *
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   *
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   *
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   *
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   *
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   *
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   *
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   *
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   *
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   *
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   *
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   *
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   *
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   *
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   *
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   *
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   *
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   *
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   *
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   *
   */
  forks_count: number;
  /**
   * @example 80
   *
   */
  stargazers_count: number;
  /**
   * @example 80
   *
   */
  watchers_count: number;
  /**
   * @example 108
   *
   */
  size: number;
  /**
   * @example "master"
   *
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * @example true
   *
   */
  is_template?: boolean;
  /**
   * @example
   * [
   *   "octocat",
   *   "atom",
   *   "electron",
   *   "API"
   * ]
   *
   */
  topics?: string[];
  /**
   * @example true
   *
   */
  has_issues: boolean;
  /**
   * @example true
   *
   */
  has_projects: boolean;
  /**
   * @example true
   *
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * @example true
   *
   */
  has_downloads: boolean;
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   *
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @example "public"
   *
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   *
   */
  pushed_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:14:43Z"
   *
   */
  updated_at: Date;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  /**
   * @example true
   *
   */
  allow_rebase_merge?: boolean;
  template_repository?: Repository | null;
  temp_clone_token?: string | null;
  /**
   * @example true
   *
   */
  allow_squash_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  /**
   * @example true
   *
   */
  allow_merge_commit?: boolean;
  /**
   * @example 42
   *
   */
  subscribers_count: number;
  network_count: number;
  license: LicenseSimple | null;
  organization?: SimpleUser | null;
  parent?: Repository;
  source?: Repository;
  forks: number;
  master_branch?: string;
  open_issues: number;
  watchers: number;
  /**
   * Whether anonymous git access is allowed.
   * @defaultValue true
   *
   */
  anonymous_access_enabled?: boolean;
  code_of_conduct?: CodeOfConductSimple;
  security_and_analysis?: {
    advanced_security?: {
      status?: 'enabled' | 'disabled';
    };
    secret_scanning?: {
      status?: 'enabled' | 'disabled';
    };
  } | null;
};
/**
 * Artifact
 * An artifact
 *
 */
export type Artifact = {
  /**
   * @example 5
   *
   */
  id: number;
  /**
   * @example "MDEwOkNoZWNrU3VpdGU1"
   *
   */
  node_id: string;
  /**
   * The name of the artifact.
   * @example "AdventureWorks.Framework"
   *
   */
  name: string;
  /**
   * The size in bytes of the artifact.
   * @example 12345
   *
   */
  size_in_bytes: number;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip"
   *
   */
  archive_download_url: string;
  /**
   * Whether or not the artifact has expired.
   *
   */
  expired: boolean;
  created_at: Date | null;
  expires_at: Date | null;
  updated_at: Date | null;
};
/**
 * Job
 * Information of a job execution in a workflow run
 *
 */
export type Job = {
  /**
   * The id of the job.
   * @example 21
   *
   */
  id: number;
  /**
   * The id of the associated workflow run.
   * @example 5
   *
   */
  run_id: number;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5"
   *
   */
  run_url: string;
  /**
   * @example "MDg6Q2hlY2tSdW40"
   *
   */
  node_id: string;
  /**
   * The SHA of the commit that is being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   *
   */
  head_sha: string;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/jobs/21"
   *
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/runs/4"
   *
   */
  html_url: string | null;
  /**
   * The phase of the lifecycle that the job is currently in.
   * @example "queued"
   *
   */
  status: 'queued' | 'in_progress' | 'completed';
  /**
   * The outcome of the job.
   * @example "success"
   *
   */
  conclusion: string | null;
  /**
   * The time that the job started, in ISO 8601 format.
   * @example "2019-08-08T08:00:00-07:00"
   *
   */
  started_at: Date;
  /**
   * The time that the job finished, in ISO 8601 format.
   * @example "2019-08-08T08:00:00-07:00"
   *
   */
  completed_at: Date | null;
  /**
   * The name of the job.
   * @example "test-coverage"
   *
   */
  name: string;
  /**
   * Steps in this job.
   *
   */
  steps?: {
    /**
     * The phase of the lifecycle that the job is currently in.
     * @example "queued"
     *
     */
    status: 'queued' | 'in_progress' | 'completed';
    /**
     * The outcome of the job.
     * @example "success"
     *
     */
    conclusion: string | null;
    /**
     * The name of the job.
     * @example "test-coverage"
     *
     */
    name: string;
    /**
     * @example 1
     *
     */
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     * @example "2019-08-08T08:00:00-07:00"
     *
     */
    started_at?: Date | null;
    /**
     * The time that the job finished, in ISO 8601 format.
     * @example "2019-08-08T08:00:00-07:00"
     *
     */
    completed_at?: Date | null;
  }[];
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-runs/4"
   *
   */
  check_run_url: string;
};
/**
 * Whether GitHub Actions is enabled on the repository.
 *
 */
export type ActionsEnabled = boolean;
export type ActionsRepositoryPermissions = {
  enabled: ActionsEnabled;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};
/**
 * Pull Request Minimal
 *
 */
export type PullRequestMinimal = {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
};
/**
 * Simple Commit
 * Simple Commit
 *
 */
export type SimpleCommit = {
  id: string;
  tree_id: string;
  message: string;
  timestamp: Date;
  author: {
    name: string;
    email: string;
  } | null;
  committer: {
    name: string;
    email: string;
  } | null;
};
/**
 * Workflow Run
 * An invocation of a workflow
 *
 */
export type WorkflowRun = {
  /**
   * The ID of the workflow run.
   * @example 5
   *
   */
  id: number;
  /**
   * The name of the workflow run.
   * @example "Build"
   *
   */
  name?: string | null;
  /**
   * @example "MDEwOkNoZWNrU3VpdGU1"
   *
   */
  node_id: string;
  /**
   * The ID of the associated check suite.
   * @example 42
   *
   */
  check_suite_id?: number;
  /**
   * The node ID of the associated check suite.
   * @example "MDEwOkNoZWNrU3VpdGU0Mg=="
   *
   */
  check_suite_node_id?: string;
  /**
   * @example "master"
   *
   */
  head_branch: string | null;
  /**
   * The SHA of the head commit that points to the version of the worflow being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   *
   */
  head_sha: string;
  /**
   * The auto incrementing run number for the workflow run.
   * @example 106
   *
   */
  run_number: number;
  /**
   * @example "push"
   *
   */
  event: string;
  /**
   * @example "completed"
   *
   */
  status: string | null;
  /**
   * @example "neutral"
   *
   */
  conclusion: string | null;
  /**
   * The ID of the parent workflow.
   * @example 5
   *
   */
  workflow_id: number;
  /**
   * The URL to the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5"
   *
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/suites/4"
   *
   */
  html_url: string;
  pull_requests: PullRequestMinimal[] | null;
  created_at: Date;
  updated_at: Date;
  /**
   * The URL to the jobs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
   *
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
   *
   */
  logs_url: string;
  /**
   * The URL to the associated check suite.
   * @example "https://api.github.com/repos/github/hello-world/check-suites/12"
   *
   */
  check_suite_url: string;
  /**
   * The URL to the artifacts for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
   *
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
   *
   */
  cancel_url: string;
  /**
   * The URL to rerun the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
   *
   */
  rerun_url: string;
  /**
   * The URL to the workflow.
   * @example "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
   *
   */
  workflow_url: string;
  head_commit: SimpleCommit | null;
  repository: MinimalRepository;
  head_repository: MinimalRepository;
  /**
   * @example 5
   *
   */
  head_repository_id?: number;
};
/**
 * Environment Approval
 * An entry in the reviews log for environment deployments
 *
 */
export type EnvironmentApprovals = {
  /**
   * The list of environments that were approved or rejected
   *
   */
  environments: {
    /**
     * The id of the environment.
     * @example 56780428
     *
     */
    id?: number;
    /**
     * @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg="
     *
     */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     *
     */
    name?: string;
    /**
     * @example "https://api.github.com/repos/github/hello-world/environments/staging"
     *
     */
    url?: string;
    /**
     * @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
     *
     */
    html_url?: string;
    /**
     * The time that the environment was created, in ISO 8601 format.
     * @example "2020-11-23T22:00:40Z"
     *
     */
    created_at?: Date;
    /**
     * The time that the environment was last updated, in ISO 8601 format.
     * @example "2020-11-23T22:00:40Z"
     *
     */
    updated_at?: Date;
  }[];
  /**
   * Whether deployment to the environment(s) was approved or rejected
   * @example "approved"
   *
   */
  state: 'approved' | 'rejected';
  user: SimpleUser;
  /**
   * The comment submitted with the deployment review
   * @example "Ship it!"
   *
   */
  comment: string;
};
/**
 * The type of reviewer. Must be one of: `User` or `Team`
 * @example "User"
 *
 */
export type DeploymentReviewerType = 'User' | 'Team';
/**
 * Pending Deployment
 * Details of a deployment that is waiting for protection rules to pass
 *
 */
export type PendingDeployment = {
  environment: {
    /**
     * The id of the environment.
     * @example 56780428
     *
     */
    id?: number;
    /**
     * @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg="
     *
     */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     *
     */
    name?: string;
    /**
     * @example "https://api.github.com/repos/github/hello-world/environments/staging"
     *
     */
    url?: string;
    /**
     * @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
     *
     */
    html_url?: string;
  };
  /**
   * The set duration of the wait timer
   * @example 30
   *
   */
  wait_timer: number;
  /**
   * The time that the wait timer began.
   * @example "2020-11-23T22:00:40Z"
   *
   */
  wait_timer_started_at: Date | null;
  /**
   * Whether the currently authenticated user can approve the deployment
   * @example true
   *
   */
  current_user_can_approve: boolean;
  /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   *
   */
  reviewers: {
    type?: DeploymentReviewerType;
    reviewer?: SimpleUser | Team;
  }[];
};
/**
 * Deployment
 * A request for a specific ref(branch,sha,tag) to be deployed
 *
 */
export type Deployment = {
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   *
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDEwOkRlcGxveW1lbnQx"
   *
   */
  node_id: string;
  /**
   * @example "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d"
   *
   */
  sha: string;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   * @example "topic-branch"
   *
   */
  ref: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   *
   */
  task: string;
  payload:
    | {
        [key: string]: any;
      }
    | string;
  /**
   * @example "staging"
   *
   */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   *
   */
  environment: string;
  /**
   * @example "Deploy request from hubot"
   *
   */
  description: string | null;
  creator: SimpleUser | null;
  /**
   * @example "2012-07-20T01:19:13Z"
   *
   */
  created_at: Date;
  /**
   * @example "2012-07-20T01:19:13Z"
   *
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   *
   */
  statuses_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   *
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   *
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   *
   */
  production_environment?: boolean;
  performed_via_github_app?: Integration | null;
};
/**
 * Workflow Run Usage
 * Workflow Run Usage
 *
 */
export type WorkflowRunUsage = {
  billable: {
    UBUNTU?: {
      total_ms: number;
      jobs: number;
    };
    MACOS?: {
      total_ms: number;
      jobs: number;
    };
    WINDOWS?: {
      total_ms: number;
      jobs: number;
    };
  };
  run_duration_ms?: number;
};
/**
 * Actions Secret
 * Set secrets for GitHub Actions.
 *
 */
export type ActionsSecret = {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   *
   */
  name: string;
  created_at: Date;
  updated_at: Date;
};
/**
 * Workflow
 * A GitHub Actions workflow
 *
 */
export type Workflow = {
  /**
   * @example 5
   *
   */
  id: number;
  /**
   * @example "MDg6V29ya2Zsb3cxMg=="
   *
   */
  node_id: string;
  /**
   * @example "CI"
   *
   */
  name: string;
  /**
   * @example "ruby.yaml"
   *
   */
  path: string;
  /**
   * @example "active"
   *
   */
  state:
    | 'active'
    | 'deleted'
    | 'disabled_fork'
    | 'disabled_inactivity'
    | 'disabled_manually';
  /**
   * @example "2019-12-06T14:20:20.000Z"
   *
   */
  created_at: Date;
  /**
   * @example "2019-12-06T14:20:20.000Z"
   *
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/actions/setup-ruby/workflows/5"
   *
   */
  url: string;
  /**
   * @example "https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml"
   *
   */
  html_url: string;
  /**
   * @example "https://github.com/actions/setup-ruby/workflows/CI/badge.svg"
   *
   */
  badge_url: string;
  /**
   * @example "2019-12-06T14:20:20.000Z"
   *
   */
  deleted_at?: Date;
};
/**
 * Workflow Usage
 * Workflow Usage
 *
 */
export type WorkflowUsage = {
  billable: {
    UBUNTU?: {
      total_ms?: number;
    };
    MACOS?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
};
/**
 * Autolink reference
 * An autolink reference.
 *
 */
export type Autolink = {
  /**
   * @example 3
   *
   */
  id: number;
  /**
   * The prefix of a key that is linkified.
   * @example "TICKET-"
   *
   */
  key_prefix: string;
  /**
   * A template for the target URL that is generated if a key was found.
   * @example "https://example.com/TICKET?query=<num>"
   *
   */
  url_template: string;
};
/**
 * Protected Branch Admin Enforced
 * Protected Branch Admin Enforced
 *
 */
export type ProtectedBranchAdminEnforced = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
   *
   */
  url: string;
  /**
   * @example true
   *
   */
  enabled: boolean;
};
/**
 * Protected Branch Pull Request Review
 * Protected Branch Pull Request Review
 *
 */
export type ProtectedBranchPullRequestReview = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions"
   *
   */
  url?: string;
  dismissal_restrictions?: {
    /**
     * The list of users with review dismissal access.
     *
     */
    users?: SimpleUser[];
    /**
     * The list of teams with review dismissal access.
     *
     */
    teams?: Team[];
    /**
     * @example "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions\""
     *
     */
    url?: string;
    /**
     * @example "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users\""
     *
     */
    users_url?: string;
    /**
     * @example "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams\""
     *
     */
    teams_url?: string;
  };
  /**
   * @example true
   *
   */
  dismiss_stale_reviews: boolean;
  /**
   * @example true
   *
   */
  require_code_owner_reviews: boolean;
  /**
   * @example 2
   *
   */
  required_approving_review_count?: number;
};
/**
 * Branch Restriction Policy
 * Branch Restriction Policy
 *
 */
export type BranchRestrictionPolicy = {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login?: string;
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
  }[];
  teams: {
    id?: number;
    node_id?: string;
    url?: string;
    html_url?: string;
    name?: string;
    slug?: string;
    description?: string | null;
    privacy?: string;
    permission?: string;
    members_url?: string;
    repositories_url?: string;
    parent?: string | null;
  }[];
  apps: {
    id?: number;
    slug?: string;
    node_id?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      url?: string;
      repos_url?: string;
      events_url?: string;
      hooks_url?: string;
      issues_url?: string;
      members_url?: string;
      public_members_url?: string;
      avatar_url?: string;
      description?: string;
      /**
       * @example "\"\""
       *
       */
      gravatar_id?: string;
      /**
       * @example "\"https://github.com/testorg-ea8ec76d71c3af4b\""
       *
       */
      html_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers\""
       *
       */
      followers_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}\""
       *
       */
      following_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}\""
       *
       */
      gists_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}\""
       *
       */
      starred_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions\""
       *
       */
      subscriptions_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs\""
       *
       */
      organizations_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events\""
       *
       */
      received_events_url?: string;
      /**
       * @example "\"Organization\""
       *
       */
      type?: string;
      site_admin?: boolean;
    };
    name?: string;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      metadata?: string;
      contents?: string;
      issues?: string;
      single_file?: string;
    };
    events?: string[];
  }[];
};
/**
 * Branch Protection
 * Branch Protection
 *
 */
export type BranchProtection = {
  url?: string;
  enabled?: boolean;
  required_status_checks?: {
    url?: string;
    enforcement_level?: string;
    contexts: string[];
    contexts_url?: string;
    strict?: boolean;
  };
  enforce_admins?: ProtectedBranchAdminEnforced;
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  restrictions?: BranchRestrictionPolicy;
  required_linear_history?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  allow_deletions?: {
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  /**
   * @example "\"branch/with/protection\""
   *
   */
  name?: string;
  /**
   * @example "\"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection\""
   *
   */
  protection_url?: string;
  required_signatures?: {
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     *
     */
    url: string;
    /**
     * @example true
     *
     */
    enabled: boolean;
  };
};
/**
 * Short Branch
 * Short Branch
 *
 */
export type ShortBranch = {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
  protection?: BranchProtection;
  protection_url?: string;
};
/**
 * Git User
 * Metaproperties for Git author/committer information.
 *
 */
export type GitUser = {
  /**
   * @example "\"Chris Wanstrath\""
   *
   */
  name?: string;
  /**
   * @example "\"chris@ozmm.org\""
   *
   */
  email?: string;
  /**
   * @example "\"2007-10-29T02:42:39.000-07:00\""
   *
   */
  date?: string;
};
/**
 * Verification
 *
 */
export type Verification = {
  verified: boolean;
  reason: string;
  payload: string | null;
  signature: string | null;
};
/**
 * Commit
 * Commit
 *
 */
export type Commit = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  url: string;
  /**
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  sha: string;
  /**
   * @example "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ=="
   *
   */
  node_id: string;
  /**
   * @example "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
   *
   */
  comments_url: string;
  commit: {
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
     *
     */
    url: string;
    author: GitUser | null;
    committer: GitUser | null;
    /**
     * @example "Fix all the bugs"
     *
     */
    message: string;
    comment_count: number;
    tree: {
      /**
       * @example "827efc6d56897b048c772eb4087f854f46256132"
       *
       */
      sha: string;
      /**
       * @example "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
       *
       */
      url: string;
    };
    verification?: Verification;
  };
  author: SimpleUser | null;
  committer: SimpleUser | null;
  parents: {
    /**
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    sha: string;
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    url: string;
    /**
     * @example "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    html_url?: string;
  }[];
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  files?: {
    filename?: string;
    additions?: number;
    deletions?: number;
    changes?: number;
    status?: string;
    raw_url?: string;
    blob_url?: string;
    patch?: string;
    /**
     * @example "\"1e8e60ce9733d5283f7836fa602b6365a66b2567\""
     *
     */
    sha?: string;
    /**
     * @example "\"https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573\""
     *
     */
    contents_url?: string;
    /**
     * @example "\"subdir/before_name.txt\""
     *
     */
    previous_filename?: string;
  }[];
};
/**
 * Branch With Protection
 * Branch With Protection
 *
 */
export type BranchWithProtection = {
  name: string;
  commit: Commit;
  _links: {
    html: string;
    self: string;
  };
  protected: boolean;
  protection: BranchProtection;
  protection_url: string;
  /**
   * @example "\"mas*\""
   *
   */
  pattern?: string;
  /**
   * @example 1
   *
   */
  required_approving_review_count?: number;
};
/**
 * Status Check Policy
 * Status Check Policy
 *
 */
export type StatusCheckPolicy = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
   *
   */
  url: string;
  /**
   * @example true
   *
   */
  strict: boolean;
  /**
   * @example
   * [
   *   "continuous-integration/travis-ci"
   * ]
   *
   */
  contexts: string[];
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
   *
   */
  contexts_url: string;
};
/**
 * Protected Branch
 * Branch protections protect branches
 *
 */
export type ProtectedBranch = {
  url: string;
  required_status_checks?: StatusCheckPolicy;
  required_pull_request_reviews?: {
    url: string;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    dismissal_restrictions?: {
      url: string;
      users_url: string;
      teams_url: string;
      users: SimpleUser[];
      teams: Team[];
    };
  };
  required_signatures?: {
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     *
     */
    url: string;
    /**
     * @example true
     *
     */
    enabled: boolean;
  };
  enforce_admins?: {
    url: string;
    enabled: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  restrictions?: BranchRestrictionPolicy;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
};
/**
 * Deployment
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 *
 */
export type DeploymentSimple = {
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   *
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDEwOkRlcGxveW1lbnQx"
   *
   */
  node_id: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   *
   */
  task: string;
  /**
   * @example "staging"
   *
   */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   *
   */
  environment: string;
  /**
   * @example "Deploy request from hubot"
   *
   */
  description: string | null;
  /**
   * @example "2012-07-20T01:19:13Z"
   *
   */
  created_at: Date;
  /**
   * @example "2012-07-20T01:19:13Z"
   *
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   *
   */
  statuses_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   *
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   *
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   *
   */
  production_environment?: boolean;
  performed_via_github_app?: Integration | null;
};
/**
 * CheckRun
 * A check performed on the code of a given code change
 *
 */
export type CheckRun = {
  /**
   * The id of the check.
   * @example 21
   *
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   *
   */
  head_sha: string;
  /**
   * @example "MDg6Q2hlY2tSdW40"
   *
   */
  node_id: string;
  /**
   * @example "42"
   *
   */
  external_id: string | null;
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-runs/4"
   *
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/runs/4"
   *
   */
  html_url: string | null;
  /**
   * @example "https://example.com"
   *
   */
  details_url: string | null;
  /**
   * The phase of the lifecycle that the check is currently in.
   * @example "queued"
   *
   */
  status: 'queued' | 'in_progress' | 'completed';
  /**
   * @example "neutral"
   *
   */
  conclusion:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
      )
    | null;
  /**
   * @example "2018-05-04T01:14:52Z"
   *
   */
  started_at: Date | null;
  /**
   * @example "2018-05-04T01:14:52Z"
   *
   */
  completed_at: Date | null;
  output: {
    title: string | null;
    summary: string | null;
    text: string | null;
    annotations_count: number;
    annotations_url: string;
  };
  /**
   * The name of the check.
   * @example "test-coverage"
   *
   */
  name: string;
  check_suite: {
    id: number;
  } | null;
  app: Integration | null;
  pull_requests: any;
  deployment?: DeploymentSimple;
};
/**
 * Check Annotation
 * Check Annotation
 *
 */
export type CheckAnnotation = {
  /**
   * @example "README.md"
   *
   */
  path: string;
  /**
   * @example 2
   *
   */
  start_line: number;
  /**
   * @example 2
   *
   */
  end_line: number;
  /**
   * @example 5
   *
   */
  start_column: number | null;
  /**
   * @example 10
   *
   */
  end_column: number | null;
  /**
   * @example "warning"
   *
   */
  annotation_level: string | null;
  /**
   * @example "Spell Checker"
   *
   */
  title: string | null;
  /**
   * @example "Check your spelling for 'banaas'."
   *
   */
  message: string | null;
  /**
   * @example "Do you mean 'bananas' or 'banana'?"
   *
   */
  raw_details: string | null;
  blob_href: string;
};
/**
 * CheckSuite
 * A suite of checks performed on the code of a given code change
 *
 */
export type CheckSuite = {
  /**
   * @example 5
   *
   */
  id: number;
  /**
   * @example "MDEwOkNoZWNrU3VpdGU1"
   *
   */
  node_id: string;
  /**
   * @example "master"
   *
   */
  head_branch: string | null;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   *
   */
  head_sha: string;
  /**
   * @example "completed"
   *
   */
  status: ('queued' | 'in_progress' | 'completed') | null;
  /**
   * @example "neutral"
   *
   */
  conclusion:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
      )
    | null;
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-suites/5"
   *
   */
  url: string | null;
  /**
   * @example "146e867f55c26428e5f9fade55a9bbf5e95a7912"
   *
   */
  before: string | null;
  /**
   * @example "d6fde92930d4715a2b49857d24b940956b26d2d3"
   *
   */
  after: string | null;
  pull_requests: PullRequestMinimal[] | null;
  app: Integration | null;
  repository: MinimalRepository;
  created_at: Date | null;
  updated_at: Date | null;
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
};
/**
 * Check Suite Preference
 * Check suite configuration preferences for a repository.
 *
 */
export type CheckSuitePreference = {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  repository: MinimalRepository;
};
/**
 * The name of the tool used to generate the code scanning analysis.
 *
 */
export type CodeScanningAnalysisToolName = string;
/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 *
 */
export type CodeScanningAnalysisToolGuid = string | null;
/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 *
 */
export type CodeScanningRef = string;
/**
 * State of a code scanning alert.
 *
 */
export type CodeScanningAlertState = 'open' | 'closed' | 'dismissed' | 'fixed';
/**
 * The security alert number.
 *
 */
export type AlertNumber = number;
/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 */
export type AlertCreatedAt = Date;
/**
 * The REST API URL of the alert resource.
 *
 */
export type AlertUrl = string;
/**
 * The GitHub URL of the alert resource.
 *
 */
export type AlertHtmlUrl = string;
/**
 * The REST API URL for fetching the list of instances for an alert.
 *
 */
export type AlertInstancesUrl = string;
/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 */
export type CodeScanningAlertDismissedAt = Date | null;
/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
 *
 */
export type CodeScanningAlertDismissedReason =
  | (null | 'false positive' | "won't fix" | 'used in tests')
  | null;
export type CodeScanningAlertRuleSummary = {
  /**
   * A unique identifier for the rule used to detect the alert.
   *
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   *
   */
  name?: string;
  /**
   * The severity of the alert.
   *
   */
  severity?: ('none' | 'note' | 'warning' | 'error') | null;
  /**
   * A short description of the rule used to detect the alert.
   *
   */
  description?: string;
};
/**
 * The version of the tool used to generate the code scanning analysis.
 *
 */
export type CodeScanningAnalysisToolVersion = string | null;
export type CodeScanningAnalysisTool = {
  name?: CodeScanningAnalysisToolName;
  version?: CodeScanningAnalysisToolVersion;
  guid?: CodeScanningAnalysisToolGuid;
};
/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 *
 */
export type CodeScanningAnalysisAnalysisKey = string;
/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 *
 */
export type CodeScanningAlertEnvironment = string;
/**
 * Describe a region within a file for the alert.
 *
 */
export type CodeScanningAlertLocation = {
  path?: string;
  start_line?: number;
  end_line?: number;
  start_column?: number;
  end_column?: number;
};
/**
 * A classification of the file. For example to identify it as generated.
 *
 */
export type CodeScanningAlertClassification =
  | ('source' | 'generated' | 'test' | 'library')
  | null;
export type CodeScanningAlertInstance = {
  ref?: CodeScanningRef;
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  environment?: CodeScanningAlertEnvironment;
  state?: CodeScanningAlertState;
  commit_sha?: string;
  message?: {
    text?: string;
  };
  location?: CodeScanningAlertLocation;
  html_url?: string;
  /**
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   *
   */
  classifications?: CodeScanningAlertClassification[];
};
export type CodeScanningAlertItems = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  dismissed_by: SimpleUser;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
};
export type CodeScanningAlertRule = {
  /**
   * A unique identifier for the rule used to detect the alert.
   *
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   *
   */
  name?: string;
  /**
   * The severity of the alert.
   *
   */
  severity?: ('none' | 'note' | 'warning' | 'error') | null;
  /**
   * The security severity of the alert.
   *
   */
  security_severity_level?: ('low' | 'medium' | 'high' | 'critical') | null;
  /**
   * A short description of the rule used to detect the alert.
   *
   */
  description?: string;
  /**
   * description of the rule used to detect the alert.
   *
   */
  full_description?: string;
  /**
   * A set of tags applicable for the rule.
   *
   */
  tags?: string[] | null;
  /**
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   *
   */
  help?: string | null;
};
export type CodeScanningAlert = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  /**
   * @deprecated
   *
   */
  instances?: any;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  dismissed_by: SimpleUser;
  dismissed_at: CodeScanningAlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
};
/**
 * Sets the state of the code scanning alert. Can be one of `open` or `dismissed`. You must provide `dismissed_reason` when you set the state to `dismissed`.
 *
 */
export type CodeScanningAlertSetState = 'open' | 'dismissed';
/**
 * An identifier for the upload.
 * @example "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
 *
 */
export type CodeScanningAnalysisSarifId = string;
/**
 * The SHA of the commit to which the analysis you are uploading relates.
 *
 */
export type CodeScanningAnalysisCommitSha = string;
/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 *
 */
export type CodeScanningAnalysisEnvironment = string;
/**
 * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 *
 */
export type CodeScanningAnalysisCategory = string;
/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 *
 */
export type CodeScanningAnalysisCreatedAt = Date;
/**
 * The REST API URL of the analysis resource.
 *
 */
export type CodeScanningAnalysisUrl = string;
export type CodeScanningAnalysis = {
  ref: CodeScanningRef;
  commit_sha: CodeScanningAnalysisCommitSha;
  analysis_key: CodeScanningAnalysisAnalysisKey;
  environment: CodeScanningAnalysisEnvironment;
  category?: CodeScanningAnalysisCategory;
  /**
   * @example "error reading field xyz"
   *
   */
  error: string;
  created_at: CodeScanningAnalysisCreatedAt;
  /**
   * The total number of results in the analysis.
   *
   */
  results_count: number;
  /**
   * The total number of rules used in the analysis.
   *
   */
  rules_count: number;
  /**
   * Unique identifier for this analysis.
   *
   */
  id: number;
  url: CodeScanningAnalysisUrl;
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  deletable: boolean;
  /**
   * Warning generated when processing the analysis
   * @example "123 results were ignored"
   *
   */
  warning: string;
  tool_name?: string;
};
/**
 * Analysis deletion
 * Successful deletion of a code scanning analysis
 *
 */
export type CodeScanningAnalysisDeletion = {
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   *
   */
  next_analysis_url: string | null;
  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   *
   */
  confirm_delete_url: string | null;
};
/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
 *
 */
export type CodeScanningAnalysisSarifFile = string;
export type CodeScanningSarifsReceipt = {
  id?: CodeScanningAnalysisSarifId;
  /**
   * The REST API URL for checking the status of the upload.
   *
   */
  url?: string;
};
export type CodeScanningSarifsStatus = {
  /**
   * `pending` files have not yet been processed, while `complete` means all results in the SARIF have been stored.
   *
   */
  processing_status?: 'pending' | 'complete';
  /**
   * The REST API URL for getting the analyses associated with the upload.
   *
   */
  analyses_url?: string | null;
};
/**
 * Collaborator
 * Collaborator
 *
 */
export type Collaborator = {
  /**
   * @example "octocat"
   *
   */
  login: string;
  /**
   * @example 1
   *
   */
  id: number;
  email?: string | null;
  name?: string | null;
  /**
   * @example "MDQ6VXNlcjE="
   *
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   *
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   *
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   *
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   *
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   *
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   *
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   *
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   *
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   *
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   *
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   *
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   *
   */
  received_events_url: string;
  /**
   * @example "User"
   *
   */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    push: boolean;
    admin: boolean;
  };
};
/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 *
 */
export type RepositoryInvitation = {
  /**
   * Unique identifier of the repository invitation.
   * @example 42
   *
   */
  id: number;
  repository: MinimalRepository;
  invitee: SimpleUser | null;
  inviter: SimpleUser | null;
  /**
   * The permission associated with the invitation.
   * @example "read"
   *
   */
  permissions: 'read' | 'write' | 'admin' | 'triage' | 'maintain';
  /**
   * @example "2016-06-13T14:52:50-05:00"
   *
   */
  created_at: Date;
  /**
   * Whether or not the invitation has expired
   *
   */
  expired?: boolean;
  /**
   * URL for the repository invitation
   * @example "https://api.github.com/user/repository-invitations/1"
   *
   */
  url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/invitations"
   *
   */
  html_url: string;
  node_id: string;
};
/**
 * Commit Comment
 * Commit Comment
 *
 */
export type CommitComment = {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string | null;
  position: number | null;
  line: number | null;
  commit_id: string;
  user: SimpleUser | null;
  created_at: Date;
  updated_at: Date;
  author_association: Author_association;
  reactions?: ReactionRollup;
};
/**
 * Branch Short
 * Branch Short
 *
 */
export type BranchShort = {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
};
/**
 * Link
 * Hypermedia Link
 *
 */
export type Link = {
  href: string;
};
/**
 * Auto merge
 * The status of auto merging a pull request.
 *
 */
export type Auto_merge = {
  enabled_by: SimpleUser;
  /**
   * The merge method to use.
   *
   */
  merge_method: 'merge' | 'squash' | 'rebase';
  /**
   * Title for the merge commit message.
   *
   */
  commit_title: string;
  /**
   * Commit message for the merge commit.
   *
   */
  commit_message: string;
} | null;
/**
 * Pull Request Simple
 * Pull Request Simple
 *
 */
export type PullRequestSimple = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   *
   */
  url: string;
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDExOlB1bGxSZXF1ZXN0MQ=="
   *
   */
  node_id: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   *
   */
  html_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   *
   */
  diff_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   *
   */
  patch_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   *
   */
  issue_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   *
   */
  commits_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   *
   */
  review_comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
   *
   */
  review_comment_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   *
   */
  comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  statuses_url: string;
  /**
   * @example 1347
   *
   */
  number: number;
  /**
   * @example "open"
   *
   */
  state: string;
  /**
   * @example true
   *
   */
  locked: boolean;
  /**
   * @example "new-feature"
   *
   */
  title: string;
  user: SimpleUser | null;
  /**
   * @example "Please pull these awesome changes"
   *
   */
  body: string | null;
  labels: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    description?: string;
    color?: string;
    default?: boolean;
  }[];
  milestone: Milestone | null;
  /**
   * @example "too heated"
   *
   */
  active_lock_reason?: string | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  updated_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  closed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  merged_at: Date | null;
  /**
   * @example "e5bd3914e2e596debea16f433f57875b5b90bcd6"
   *
   */
  merge_commit_sha: string | null;
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: Team[] | null;
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: SimpleUser | null;
  };
  base: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: SimpleUser | null;
  };
  _links: {
    comments: Link;
    commits: Link;
    statuses: Link;
    html: Link;
    issue: Link;
    review_comments: Link;
    review_comment: Link;
    self: Link;
  };
  author_association: Author_association;
  auto_merge: Auto_merge;
  /**
   * Indicates whether or not the pull request is a draft.
   *
   */
  draft?: boolean;
};
/**
 * Simple Commit Status
 *
 */
export type SimpleCommitStatus = {
  description: string | null;
  id: number;
  node_id: string;
  state: string;
  context: string;
  target_url: string;
  required?: boolean | null;
  avatar_url: string | null;
  url: string;
  created_at: Date;
  updated_at: Date;
};
/**
 * Combined Commit Status
 * Combined Commit Status
 *
 */
export type CombinedCommitStatus = {
  state: string;
  statuses: SimpleCommitStatus[];
  sha: string;
  total_count: number;
  repository: MinimalRepository;
  commit_url: string;
  url: string;
};
/**
 * Status
 * The status of a commit.
 *
 */
export type Status = {
  url: string;
  avatar_url: string | null;
  id: number;
  node_id: string;
  state: string;
  description: string;
  target_url: string;
  context: string;
  created_at: string;
  updated_at: string;
  creator: SimpleUser;
};
/**
 * Community Health File
 *
 */
export type CommunityHealthFile = {
  url: string;
  html_url: string;
};
/**
 * Community Profile
 * Community Profile
 *
 */
export type CommunityProfile = {
  /**
   * @example 100
   *
   */
  health_percentage: number;
  /**
   * @example "My first repository on GitHub!"
   *
   */
  description: string | null;
  /**
   * @example "example.com"
   *
   */
  documentation: string | null;
  files: {
    code_of_conduct: CodeOfConductSimple | null;
    code_of_conduct_file: CommunityHealthFile | null;
    license: LicenseSimple | null;
    contributing: CommunityHealthFile | null;
    readme: CommunityHealthFile | null;
    issue_template: CommunityHealthFile | null;
    pull_request_template: CommunityHealthFile | null;
  };
  /**
   * @example "2017-02-28T19:09:29Z"
   *
   */
  updated_at: Date | null;
  /**
   * @example true
   *
   */
  content_reports_enabled?: boolean;
};
/**
 * Diff Entry
 * Diff Entry
 *
 */
export type DiffEntry = {
  /**
   * @example "bbcd538c8e72b8c175046e27cc8f907076331401"
   *
   */
  sha: string;
  /**
   * @example "file1.txt"
   *
   */
  filename: string;
  /**
   * @example "added"
   *
   */
  status: string;
  /**
   * @example 103
   *
   */
  additions: number;
  /**
   * @example 21
   *
   */
  deletions: number;
  /**
   * @example 124
   *
   */
  changes: number;
  /**
   * @example "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   *
   */
  blob_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   *
   */
  raw_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  contents_url: string;
  /**
   * @example "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
   *
   */
  patch?: string;
  /**
   * @example "file.txt"
   *
   */
  previous_filename?: string;
};
/**
 * Commit Comparison
 * Commit Comparison
 *
 */
export type CommitComparison = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/master...topic"
   *
   */
  url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/master...topic"
   *
   */
  html_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17"
   *
   */
  permalink_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.diff"
   *
   */
  diff_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.patch"
   *
   */
  patch_url: string;
  base_commit: Commit;
  merge_base_commit: Commit;
  /**
   * @example "ahead"
   *
   */
  status: 'diverged' | 'ahead' | 'behind' | 'identical';
  /**
   * @example 4
   *
   */
  ahead_by: number;
  /**
   * @example 5
   *
   */
  behind_by: number;
  /**
   * @example 6
   *
   */
  total_commits: number;
  commits: Commit[];
  files?: DiffEntry[];
};
/**
 * ContentReferenceAttachment
 * Content Reference attachments allow you to provide context around URLs posted in comments
 *
 */
export type ContentReferenceAttachment = {
  /**
   * The ID of the attachment
   * @example 21
   *
   */
  id: number;
  /**
   * The title of the attachment
   * @example "Title of the attachment"
   *
   */
  title: string;
  /**
   * The body of the attachment
   * @example "Body of the attachment"
   *
   */
  body: string;
  /**
   * The node_id of the content attachment
   * @example "MDE3OkNvbnRlbnRBdHRhY2htZW50MjE="
   *
   */
  node_id?: string;
};
/**
 * Content Tree
 * Content Tree
 *
 */
export type ContentTree = {
  type: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  entries?: {
    type: string;
    size: number;
    name: string;
    path: string;
    content?: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
  }[];
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * Content Directory
 * A list of directory items
 *
 */
export type ContentDirectory = {
  type: string;
  size: number;
  name: string;
  path: string;
  content?: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
}[];
/**
 * Content File
 * Content File
 *
 */
export type ContentFile = {
  type: string;
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  /**
   * @example "\"actual/actual.md\""
   *
   */
  target?: string;
  /**
   * @example "\"git://example.com/defunkt/dotjs.git\""
   *
   */
  submodule_git_url?: string;
};
/**
 * Symlink Content
 * An object describing a symlink
 *
 */
export type ContentSymlink = {
  type: string;
  target: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * Symlink Content
 * An object describing a symlink
 *
 */
export type ContentSubmodule = {
  type: string;
  submodule_git_url: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * File Commit
 * File Commit
 *
 */
export type FileCommit = {
  content: {
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    url?: string;
    html_url?: string;
    git_url?: string;
    download_url?: string;
    type?: string;
    _links?: {
      self?: string;
      git?: string;
      html?: string;
    };
  } | null;
  commit: {
    sha?: string;
    node_id?: string;
    url?: string;
    html_url?: string;
    author?: {
      date?: string;
      name?: string;
      email?: string;
    };
    committer?: {
      date?: string;
      name?: string;
      email?: string;
    };
    message?: string;
    tree?: {
      url?: string;
      sha?: string;
    };
    parents?: {
      url?: string;
      html_url?: string;
      sha?: string;
    }[];
    verification?: {
      verified?: boolean;
      reason?: string;
      signature?: string | null;
      payload?: string | null;
    };
  };
};
/**
 * Contributor
 * Contributor
 *
 */
export type Contributor = {
  login?: string;
  id?: number;
  node_id?: string;
  avatar_url?: string;
  gravatar_id?: string | null;
  url?: string;
  html_url?: string;
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  starred_url?: string;
  subscriptions_url?: string;
  organizations_url?: string;
  repos_url?: string;
  events_url?: string;
  received_events_url?: string;
  type: string;
  site_admin?: boolean;
  contributions: number;
  email?: string;
  name?: string;
};
/**
 * Deployment Status
 * The status of a deployment.
 *
 */
export type DeploymentStatus = {
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/42/statuses/1"
   *
   */
  url: string;
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDE2OkRlcGxveW1lbnRTdGF0dXMx"
   *
   */
  node_id: string;
  /**
   * The state of the status.
   * @example "success"
   *
   */
  state:
    | 'error'
    | 'failure'
    | 'inactive'
    | 'pending'
    | 'success'
    | 'queued'
    | 'in_progress';
  creator: SimpleUser | null;
  /**
   * A short description of the status.
   * @example "Deployment finished successfully."
   *
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   * @example "production"
   *
   */
  environment?: string;
  /**
   * Deprecated: the URL to associate with this status.
   * @example "https://example.com/deployment/42/output"
   *
   */
  target_url: string;
  /**
   * @example "2012-07-20T01:19:13Z"
   *
   */
  created_at: Date;
  /**
   * @example "2012-07-20T01:19:13Z"
   *
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/42"
   *
   */
  deployment_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   *
   */
  repository_url: string;
  /**
   * The URL for accessing your environment.
   * @example "https://staging.example.com/"
   *
   */
  environment_url?: string;
  /**
   * The URL to associate with this status.
   * @example "https://example.com/deployment/42/output"
   *
   */
  log_url?: string;
  performed_via_github_app?: Integration | null;
};
/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 * @example 30
 *
 */
export type WaitTimer = number;
/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
 *
 */
export type Deployment_branch_policy = {
  /**
   * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
   *
   */
  protected_branches: boolean;
  /**
   * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
   *
   */
  custom_branch_policies: boolean;
} | null;
/**
 * Environment
 * Details of a deployment environment
 *
 */
export type Environment = {
  /**
   * The id of the environment.
   * @example 56780428
   *
   */
  id: number;
  /**
   * @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg="
   *
   */
  node_id: string;
  /**
   * The name of the environment.
   * @example "staging"
   *
   */
  name: string;
  /**
   * @example "https://api.github.com/repos/github/hello-world/environments/staging"
   *
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
   *
   */
  html_url: string;
  /**
   * The time that the environment was created, in ISO 8601 format.
   * @example "2020-11-23T22:00:40Z"
   *
   */
  created_at: Date;
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   * @example "2020-11-23T22:00:40Z"
   *
   */
  updated_at: Date;
  protection_rules?: (
    | {
        /**
         * @example 3515
         *
         */
        id: number;
        /**
         * @example "MDQ6R2F0ZTM1MTU="
         *
         */
        node_id: string;
        /**
         * @example "wait_timer"
         *
         */
        type: string;
        wait_timer?: WaitTimer;
      }
    | {
        /**
         * @example 3755
         *
         */
        id: number;
        /**
         * @example "MDQ6R2F0ZTM3NTU="
         *
         */
        node_id: string;
        /**
         * @example "required_reviewers"
         *
         */
        type: string;
        /**
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         *
         */
        reviewers?: {
          type?: DeploymentReviewerType;
          reviewer?: SimpleUser | Team;
        }[];
      }
    | {
        /**
         * @example 3515
         *
         */
        id: number;
        /**
         * @example "MDQ6R2F0ZTM1MTU="
         *
         */
        node_id: string;
        /**
         * @example "branch_policy"
         *
         */
        type: string;
      }
  )[];
  deployment_branch_policy?: Deployment_branch_policy;
};
/**
 * Short Blob
 * Short Blob
 *
 */
export type ShortBlob = {
  url: string;
  sha: string;
};
/**
 * Blob
 * Blob
 *
 */
export type Blob = {
  content: string;
  encoding: string;
  url: string;
  sha: string;
  size: number | null;
  node_id: string;
  highlighted_content?: string;
};
/**
 * Git Commit
 * Low-level Git commit operations within a repository
 *
 */
export type GitCommit = {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   *
   */
  sha: string;
  node_id: string;
  url: string;
  /**
   * Identifying information for the git-user
   *
   */
  author: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     *
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     *
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     *
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   *
   */
  committer: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     *
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     *
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     *
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   *
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
  };
  html_url: string;
};
/**
 * Git Reference
 * Git references within a repository
 *
 */
export type GitRef = {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    sha: string;
    url: string;
  };
};
/**
 * Git Tag
 * Metadata for a Git tag
 *
 */
export type GitTag = {
  /**
   * @example "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw=="
   *
   */
  node_id: string;
  /**
   * Name of the tag
   * @example "v0.0.1"
   *
   */
  tag: string;
  /**
   * @example "940bd336248efae0f9ee5bc7b2d5c985887b16ac"
   *
   */
  sha: string;
  /**
   * URL for the tag
   * @example "https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac"
   *
   */
  url: string;
  /**
   * Message describing the purpose of the tag
   * @example "Initial public release"
   *
   */
  message: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  object: {
    sha: string;
    type: string;
    url: string;
  };
  verification?: Verification;
};
/**
 * Git Tree
 * The hierarchy between files in a Git repository.
 *
 */
export type GitTree = {
  sha: string;
  url: string;
  truncated: boolean;
  /**
   * Objects specifying a tree structure
   * @example
   * [
   *   {
   *     "path": "file.rb",
   *     "mode": "100644",
   *     "type": "blob",
   *     "size": 30,
   *     "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
   *     "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132",
   *     "properties": {
   *       "path": {
   *         "type": "string"
   *       },
   *       "mode": {
   *         "type": "string"
   *       },
   *       "type": {
   *         "type": "string"
   *       },
   *       "size": {
   *         "type": "integer"
   *       },
   *       "sha": {
   *         "type": "string"
   *       },
   *       "url": {
   *         "type": "string"
   *       }
   *     },
   *     "required": [
   *       "path",
   *       "mode",
   *       "type",
   *       "sha",
   *       "url",
   *       "size"
   *     ]
   *   }
   * ]
   *
   */
  tree: {
    /**
     * @example "test/file.rb"
     *
     */
    path?: string;
    /**
     * @example "040000"
     *
     */
    mode?: string;
    /**
     * @example "tree"
     *
     */
    type?: string;
    /**
     * @example "23f6827669e43831def8a7ad935069c8bd418261"
     *
     */
    sha?: string;
    /**
     * @example 12
     *
     */
    size?: number;
    /**
     * @example "https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261"
     *
     */
    url?: string;
  }[];
};
/**
 * Hook Response
 *
 */
export type HookResponse = {
  code: number | null;
  status: string | null;
  message: string | null;
};
/**
 * Webhook
 * Webhooks for repositories.
 *
 */
export type Hook = {
  type: string;
  /**
   * Unique identifier of the webhook.
   * @example 42
   *
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   * @example "web"
   *
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   * @example true
   *
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   * @example
   * [
   *   "push",
   *   "pull_request"
   * ]
   *
   */
  events: string[];
  config: {
    /**
     * @example "\"foo@bar.com\""
     *
     */
    email?: string;
    /**
     * @example "\"foo\""
     *
     */
    password?: string;
    /**
     * @example "\"roomer\""
     *
     */
    room?: string;
    /**
     * @example "\"foo\""
     *
     */
    subdomain?: string;
    url?: WebhookConfigUrl;
    insecure_ssl?: WebhookConfigInsecureSsl;
    content_type?: WebhookConfigContentType;
    /**
     * @example "\"sha256\""
     *
     */
    digest?: string;
    secret?: WebhookConfigSecret;
    /**
     * @example "\"abc\""
     *
     */
    token?: string;
  };
  /**
   * @example "2011-09-06T20:39:23Z"
   *
   */
  updated_at: Date;
  /**
   * @example "2011-09-06T17:26:27Z"
   *
   */
  created_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/test"
   *
   */
  test_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/pings"
   *
   */
  ping_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries"
   *
   */
  deliveries_url?: string;
  last_response: HookResponse;
};
/**
 * Import
 * A repository import from an external source.
 *
 */
export type Import = {
  vcs: string | null;
  use_lfs?: boolean;
  /**
   * The URL of the originating repository.
   *
   */
  vcs_url: string;
  svc_root?: string;
  tfvc_project?: string;
  status:
    | 'auth'
    | 'error'
    | 'none'
    | 'detecting'
    | 'choose'
    | 'auth_failed'
    | 'importing'
    | 'mapping'
    | 'waiting_to_push'
    | 'pushing'
    | 'complete'
    | 'setup'
    | 'unknown'
    | 'detection_found_multiple'
    | 'detection_found_nothing'
    | 'detection_needs_auth';
  status_text?: string | null;
  failed_step?: string | null;
  error_message?: string | null;
  import_percent?: number | null;
  commit_count?: number | null;
  push_percent?: number | null;
  has_large_files?: boolean;
  large_files_size?: number;
  large_files_count?: number;
  project_choices?: {
    vcs?: string;
    tfvc_project?: string;
    human_name?: string;
  }[];
  message?: string;
  authors_count?: number | null;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root?: string;
};
/**
 * Porter Author
 * Porter Author
 *
 */
export type PorterAuthor = {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  url: string;
  import_url: string;
};
/**
 * Porter Large File
 * Porter Large File
 *
 */
export type PorterLargeFile = {
  ref_name: string;
  path: string;
  oid: string;
  size: number;
};
/**
 * Issue Event Label
 * Issue Event Label
 *
 */
export type IssueEventLabel = {
  name: string | null;
  color: string | null;
};
/**
 * Issue Event Dismissed Review
 *
 */
export type IssueEventDismissedReview = {
  state: string;
  review_id: number;
  dismissal_message: string | null;
  dismissal_commit_id?: string | null;
};
/**
 * Issue Event Milestone
 * Issue Event Milestone
 *
 */
export type IssueEventMilestone = {
  title: string;
};
/**
 * Issue Event Project Card
 * Issue Event Project Card
 *
 */
export type IssueEventProjectCard = {
  url: string;
  id: number;
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name?: string;
};
/**
 * Issue Event Rename
 * Issue Event Rename
 *
 */
export type IssueEventRename = {
  from: string;
  to: string;
};
/**
 * Issue Event
 * Issue Event
 *
 */
export type IssueEvent = {
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDEwOklzc3VlRXZlbnQx"
   *
   */
  node_id: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
   *
   */
  url: string;
  actor: SimpleUser | null;
  /**
   * @example "closed"
   *
   */
  event: string;
  /**
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  commit_id: string | null;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  commit_url: string | null;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  created_at: Date;
  issue?: IssueSimple;
  label?: IssueEventLabel;
  assignee?: SimpleUser | null;
  assigner?: SimpleUser | null;
  review_requester?: SimpleUser | null;
  requested_reviewer?: SimpleUser | null;
  requested_team?: Team;
  dismissed_review?: IssueEventDismissedReview;
  milestone?: IssueEventMilestone;
  project_card?: IssueEventProjectCard;
  rename?: IssueEventRename;
  author_association?: Author_association;
  lock_reason?: string | null;
  performed_via_github_app?: Integration | null;
};
/**
 * Labeled Issue Event
 * Labeled Issue Event
 *
 */
export type LabeledIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  label: {
    name: string;
    color: string;
  };
};
/**
 * Unlabeled Issue Event
 * Unlabeled Issue Event
 *
 */
export type UnlabeledIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  label: {
    name: string;
    color: string;
  };
};
/**
 * Assigned Issue Event
 * Assigned Issue Event
 *
 */
export type AssignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  assignee: SimpleUser;
  assigner: SimpleUser;
};
/**
 * Unassigned Issue Event
 * Unassigned Issue Event
 *
 */
export type UnassignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  assignee: SimpleUser;
  assigner: SimpleUser;
};
/**
 * Milestoned Issue Event
 * Milestoned Issue Event
 *
 */
export type MilestonedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  milestone: {
    title: string;
  };
};
/**
 * Demilestoned Issue Event
 * Demilestoned Issue Event
 *
 */
export type DemilestonedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  milestone: {
    title: string;
  };
};
/**
 * Renamed Issue Event
 * Renamed Issue Event
 *
 */
export type RenamedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  rename: {
    from: string;
    to: string;
  };
};
/**
 * Review Requested Issue Event
 * Review Requested Issue Event
 *
 */
export type ReviewRequestedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  review_requester: SimpleUser;
  requested_team?: Team;
  requested_reviewer?: SimpleUser;
};
/**
 * Review Request Removed Issue Event
 * Review Request Removed Issue Event
 *
 */
export type ReviewRequestRemovedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  review_requester: SimpleUser;
  requested_team?: Team;
  requested_reviewer?: SimpleUser;
};
/**
 * Review Dismissed Issue Event
 * Review Dismissed Issue Event
 *
 */
export type ReviewDismissedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  dismissed_review: {
    state: string;
    review_id: number;
    dismissal_message: string | null;
    dismissal_commit_id?: string;
  };
};
/**
 * Locked Issue Event
 * Locked Issue Event
 *
 */
export type LockedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  /**
   * @example "\"off-topic\""
   *
   */
  lock_reason: string | null;
};
/**
 * Added to Project Issue Event
 * Added to Project Issue Event
 *
 */
export type AddedToProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Moved Column in Project Issue Event
 * Moved Column in Project Issue Event
 *
 */
export type MovedColumnInProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Removed from Project Issue Event
 * Removed from Project Issue Event
 *
 */
export type RemovedFromProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Converted Note to Issue Issue Event
 * Converted Note to Issue Issue Event
 *
 */
export type ConvertedNoteToIssueIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Issue Event for Issue
 * Issue Event for Issue
 *
 */
export type IssueEventForIssue =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | AssignedIssueEvent
  | UnassignedIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent;
/**
 * Timeline Comment Event
 * Timeline Comment Event
 *
 */
export type TimelineCommentEvent = {
  event: string;
  actor: SimpleUser;
  /**
   * Unique identifier of the issue comment
   * @example 42
   *
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   *
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   *
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: SimpleUser;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  updated_at: Date;
  issue_url: string;
  author_association: Author_association;
  performed_via_github_app?: Integration;
  reactions?: ReactionRollup;
};
/**
 * Timeline Cross Referenced Event
 * Timeline Cross Referenced Event
 *
 */
export type TimelineCrossReferencedEvent = {
  event: string;
  actor?: SimpleUser;
  created_at: Date;
  updated_at: Date;
  source: {
    type?: string;
    issue?: IssueSimple;
  };
};
/**
 * Timeline Committed Event
 * Timeline Committed Event
 *
 */
export type TimelineCommittedEvent = {
  event?: string;
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   *
   */
  sha: string;
  node_id: string;
  url: string;
  /**
   * Identifying information for the git-user
   *
   */
  author: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     *
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     *
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     *
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   *
   */
  committer: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     *
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     *
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     *
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   *
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     *
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
  };
  html_url: string;
};
/**
 * Timeline Reviewed Event
 * Timeline Reviewed Event
 *
 */
export type TimelineReviewedEvent = {
  event: string;
  /**
   * Unique identifier of the review
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA="
   *
   */
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   * @example "This looks great."
   *
   */
  body: string | null;
  /**
   * @example "CHANGES_REQUESTED"
   *
   */
  state: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   *
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at?: Date;
  /**
   * A commit SHA for the review.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   *
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  author_association: Author_association;
};
/**
 * Pull Request Review Comment
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 *
 */
export type PullRequestReviewComment = {
  /**
   * URL for the pull request review comment
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   *
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   * @example 42
   *
   */
  pull_request_review_id: number | null;
  /**
   * The ID of the pull request review comment.
   * @example 1
   *
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   * @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
   *
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   * @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
   *
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   * @example "config/database.yaml"
   *
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies.
   * @example 1
   *
   */
  position: number;
  /**
   * The index of the original line in the diff to which the comment applies.
   * @example 4
   *
   */
  original_position: number;
  /**
   * The SHA of the commit to which the comment applies.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   * @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
   *
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   * @example 8
   *
   */
  in_reply_to_id?: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   * @example "We should probably include a check for null values here."
   *
   */
  body: string;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  updated_at: Date;
  /**
   * HTML URL for the pull request review comment.
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   *
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   *
   */
  pull_request_url: string;
  author_association: Author_association;
  _links: {
    self: {
      /**
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
       *
       */
      href: string;
    };
    html: {
      /**
       * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
       *
       */
      href: string;
    };
    pull_request: {
      /**
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
       *
       */
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   *
   */
  start_line?: number | null;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   *
   */
  original_start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @defaultValue "RIGHT"
   *
   */
  start_side?: ('LEFT' | 'RIGHT') | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   *
   */
  line?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   *
   */
  original_line?: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   * @defaultValue "RIGHT"
   *
   */
  side?: 'LEFT' | 'RIGHT';
  reactions?: ReactionRollup;
  /**
   * @example "\"<p>comment body</p>\""
   *
   */
  body_html?: string;
  /**
   * @example "\"comment body\""
   *
   */
  body_text?: string;
};
/**
 * Timeline Line Commented Event
 * Timeline Line Commented Event
 *
 */
export type TimelineLineCommentedEvent = {
  event?: string;
  node_id?: string;
  comments?: PullRequestReviewComment[];
};
/**
 * Timeline Commit Commented Event
 * Timeline Commit Commented Event
 *
 */
export type TimelineCommitCommentedEvent = {
  event?: string;
  node_id?: string;
  commit_id?: string;
  comments?: CommitComment[];
};
/**
 * Timeline Assigned Issue Event
 * Timeline Assigned Issue Event
 *
 */
export type TimelineAssignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  assignee: SimpleUser;
};
/**
 * Timeline Unassigned Issue Event
 * Timeline Unassigned Issue Event
 *
 */
export type TimelineUnassignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  assignee: SimpleUser;
};
/**
 * Timeline Event
 * Timeline Event
 *
 */
export type TimelineIssueEvents =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent
  | TimelineCommentEvent
  | TimelineCrossReferencedEvent
  | TimelineCommittedEvent
  | TimelineReviewedEvent
  | TimelineLineCommentedEvent
  | TimelineCommitCommentedEvent
  | TimelineAssignedIssueEvent
  | TimelineUnassignedIssueEvent;
/**
 * Deploy Key
 * An SSH key granting access to a single repository.
 *
 */
export type DeployKey = {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
};
/**
 * Language
 * Language
 *
 */
export type Language = {
  [key: string]: number;
};
/**
 * License Content
 * License Content
 *
 */
export type LicenseContent = {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string | null;
  git_url: string | null;
  download_url: string | null;
  type: string;
  content: string;
  encoding: string;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  license: LicenseSimple | null;
};
/**
 * Pages Source Hash
 *
 */
export type PagesSourceHash = {
  branch: string;
  path: string;
};
/**
 * Pages Https Certificate
 *
 */
export type PagesHttpsCertificate = {
  /**
   * @example "approved"
   *
   */
  state:
    | 'new'
    | 'authorization_created'
    | 'authorization_pending'
    | 'authorized'
    | 'authorization_revoked'
    | 'issued'
    | 'uploaded'
    | 'approved'
    | 'errored'
    | 'bad_authz'
    | 'destroy_pending'
    | 'dns_changed';
  /**
   * @example "Certificate is approved"
   *
   */
  description: string;
  /**
   * Array of the domain set and its alternate name (if it is configured)
   * @example
   * [
   *   "example.com",
   *   "www.example.com"
   * ]
   *
   */
  domains: any[];
  expires_at?: string;
};
/**
 * GitHub Pages
 * The configuration for GitHub Pages for a repository.
 *
 */
export type Page = {
  /**
   * The API address for accessing this Page resource.
   * @example "https://api.github.com/repos/github/hello-world/pages"
   *
   */
  url: string;
  /**
   * The status of the most recent build of the Page.
   * @example "built"
   *
   */
  status: ('built' | 'building' | 'errored') | null;
  /**
   * The Pages site's custom domain
   * @example "example.com"
   *
   */
  cname: string | null;
  /**
   * Whether the Page has a custom 404 page.
   *
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   * @example "https://example.com"
   *
   */
  html_url?: string;
  source?: PagesSourceHash;
  /**
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   * @example true
   *
   */
  public: boolean;
  https_certificate?: PagesHttpsCertificate;
  /**
   * Whether https is enabled on the domain
   * @example true
   *
   */
  https_enforced?: boolean;
};
/**
 * Page Build
 * Page Build
 *
 */
export type PageBuild = {
  url: string;
  status: string;
  error: {
    message: string | null;
  };
  pusher: SimpleUser | null;
  commit: string;
  duration: number;
  created_at: Date;
  updated_at: Date;
};
/**
 * Page Build Status
 * Page Build Status
 *
 */
export type PageBuildStatus = {
  /**
   * @example "https://api.github.com/repos/github/hello-world/pages/builds/latest"
   *
   */
  url: string;
  /**
   * @example "queued"
   *
   */
  status: string;
};
/**
 * Pages Health Check Status
 * Pages Health Check Status
 *
 */
export type PagesHealthCheck = {
  domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  };
  alt_domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  } | null;
};
/**
 * Pull Request
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 *
 */
export type PullRequest = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   *
   */
  url: string;
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDExOlB1bGxSZXF1ZXN0MQ=="
   *
   */
  node_id: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   *
   */
  html_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   *
   */
  diff_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   *
   */
  patch_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   *
   */
  issue_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   *
   */
  commits_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   *
   */
  review_comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
   *
   */
  review_comment_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   *
   */
  comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  statuses_url: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   * @example 42
   *
   */
  number: number;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   * @example "open"
   *
   */
  state: 'open' | 'closed';
  /**
   * @example true
   *
   */
  locked: boolean;
  /**
   * The title of the pull request.
   * @example "Amazing new feature"
   *
   */
  title: string;
  user: SimpleUser | null;
  /**
   * @example "Please pull these awesome changes"
   *
   */
  body: string | null;
  labels: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    description?: string | null;
    color?: string;
    default?: boolean;
  }[];
  milestone: Milestone | null;
  /**
   * @example "too heated"
   *
   */
  active_lock_reason?: string | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  updated_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  closed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   *
   */
  merged_at: Date | null;
  /**
   * @example "e5bd3914e2e596debea16f433f57875b5b90bcd6"
   *
   */
  merge_commit_sha: string | null;
  assignee: SimpleUser | null;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  head: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string | null;
      language: string | null;
      master_branch?: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string | null;
      open_issues: number;
      open_issues_count: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      license: {
        key: string;
        name: string;
        url: string | null;
        spdx_id: string | null;
        node_id: string;
      } | null;
      pushed_at: Date;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics?: string[];
      watchers: number;
      watchers_count: number;
      created_at: Date;
      updated_at: Date;
    } | null;
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  base: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      homepage: string | null;
      language: string | null;
      master_branch?: string;
      archived: boolean;
      disabled: boolean;
      mirror_url: string | null;
      open_issues: number;
      open_issues_count: number;
      permissions?: {
        admin: boolean;
        pull: boolean;
        push: boolean;
      };
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      license: LicenseSimple | null;
      pushed_at: Date;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics?: string[];
      watchers: number;
      watchers_count: number;
      created_at: Date;
      updated_at: Date;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  _links: {
    comments: Link;
    commits: Link;
    statuses: Link;
    html: Link;
    issue: Link;
    review_comments: Link;
    review_comment: Link;
    self: Link;
  };
  author_association: Author_association;
  auto_merge: Auto_merge;
  /**
   * Indicates whether or not the pull request is a draft.
   *
   */
  draft?: boolean;
  merged: boolean;
  /**
   * @example true
   *
   */
  mergeable: boolean | null;
  /**
   * @example true
   *
   */
  rebaseable?: boolean | null;
  /**
   * @example "clean"
   *
   */
  mergeable_state: string;
  merged_by: SimpleUser | null;
  /**
   * @example 10
   *
   */
  comments: number;
  review_comments: number;
  /**
   * Indicates whether maintainers can modify the pull request.
   * @example true
   *
   */
  maintainer_can_modify: boolean;
  /**
   * @example 3
   *
   */
  commits: number;
  /**
   * @example 100
   *
   */
  additions: number;
  /**
   * @example 3
   *
   */
  deletions: number;
  /**
   * @example 5
   *
   */
  changed_files: number;
};
/**
 * Pull Request Merge Result
 * Pull Request Merge Result
 *
 */
export type PullRequestMergeResult = {
  sha: string;
  merged: boolean;
  message: string;
};
/**
 * Pull Request Review Request
 * Pull Request Review Request
 *
 */
export type PullRequestReviewRequest = {
  users: SimpleUser[];
  teams: Team[];
};
/**
 * Pull Request Review
 * Pull Request Reviews are reviews on pull requests.
 *
 */
export type PullRequestReview = {
  /**
   * Unique identifier of the review
   * @example 42
   *
   */
  id: number;
  /**
   * @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA="
   *
   */
  node_id: string;
  user: SimpleUser | null;
  /**
   * The text of the review.
   * @example "This looks great."
   *
   */
  body: string;
  /**
   * @example "CHANGES_REQUESTED"
   *
   */
  state: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   *
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at?: Date;
  /**
   * A commit SHA for the review.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   *
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  author_association: Author_association;
};
/**
 * Legacy Review Comment
 * Legacy Review Comment
 *
 */
export type ReviewComment = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   *
   */
  url: string;
  /**
   * @example 42
   *
   */
  pull_request_review_id: number | null;
  /**
   * @example 10
   *
   */
  id: number;
  /**
   * @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
   *
   */
  node_id: string;
  /**
   * @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
   *
   */
  diff_hunk: string;
  /**
   * @example "file1.txt"
   *
   */
  path: string;
  /**
   * @example 1
   *
   */
  position: number | null;
  /**
   * @example 4
   *
   */
  original_position: number;
  /**
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   *
   */
  commit_id: string;
  /**
   * @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
   *
   */
  original_commit_id: string;
  /**
   * @example 8
   *
   */
  in_reply_to_id?: number;
  user: SimpleUser | null;
  /**
   * @example "Great stuff"
   *
   */
  body: string;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   *
   */
  updated_at: Date;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   *
   */
  pull_request_url: string;
  author_association: Author_association;
  _links: {
    self: Link;
    html: Link;
    pull_request: Link;
  };
  body_text?: string;
  body_html?: string;
  reactions?: ReactionRollup;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @defaultValue "RIGHT"
   *
   */
  side?: 'LEFT' | 'RIGHT';
  /**
   * The side of the first line of the range for a multi-line comment.
   * @defaultValue "RIGHT"
   *
   */
  start_side?: ('LEFT' | 'RIGHT') | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   *
   */
  line?: number;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   *
   */
  original_line?: number;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   *
   */
  start_line?: number | null;
  /**
   * The original first line of the range for a multi-line comment.
   * @example 2
   *
   */
  original_start_line?: number | null;
};
/**
 * Release Asset
 * Data related to a release.
 *
 */
export type ReleaseAsset = {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   * @example "Team Environment"
   *
   */
  name: string;
  label: string | null;
  /**
   * State of the release asset.
   *
   */
  state: 'uploaded' | 'open';
  content_type: string;
  size: number;
  download_count: number;
  created_at: Date;
  updated_at: Date;
  uploader: SimpleUser | null;
};
/**
 * Release
 * A release.
 *
 */
export type Release = {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string | null;
  zipball_url: string | null;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   * @example "v1.0.0"
   *
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   * @example "master"
   *
   */
  target_commitish: string;
  name: string | null;
  body?: string | null;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   *
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   *
   */
  prerelease: boolean;
  created_at: Date;
  published_at: Date | null;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html?: string;
  body_text?: string;
  mentions_count?: number;
  /**
   * The URL of the release discussion.
   *
   */
  discussion_url?: string;
  reactions?: ReactionRollup;
};
/**
 * Sets the state of the secret scanning alert. Can be either `open` or `resolved`. You must provide `resolution` when you set the state to `resolved`.
 *
 */
export type SecretScanningAlertState = 'open' | 'resolved';
/**
 * **Required when the `state` is `resolved`.** The reason for resolving the alert. Can be one of `false_positive`, `wont_fix`, `revoked`, or `used_in_tests`.
 *
 */
export type SecretScanningAlertResolution =
  | (null | 'false_positive' | 'wont_fix' | 'revoked' | 'used_in_tests')
  | null;
export type SecretScanningAlert = {
  number?: AlertNumber;
  created_at?: AlertCreatedAt;
  url?: AlertUrl;
  html_url?: AlertHtmlUrl;
  state?: SecretScanningAlertState;
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   *
   */
  resolved_at?: Date | null;
  resolved_by?: SimpleUser;
  /**
   * The type of secret that secret scanning detected.
   *
   */
  secret_type?: string;
  /**
   * The secret that was detected.
   *
   */
  secret?: string;
};
/**
 * Stargazer
 * Stargazer
 *
 */
export type Stargazer = {
  starred_at: Date;
  user: SimpleUser | null;
};
/**
 * Code Frequency Stat
 * Code Frequency Stat
 *
 */
export type CodeFrequencyStat = number[];
/**
 * Commit Activity
 * Commit Activity
 *
 */
export type CommitActivity = {
  /**
   * @example
   * [
   *   0,
   *   3,
   *   26,
   *   20,
   *   39,
   *   1,
   *   0
   * ]
   *
   */
  days: number[];
  /**
   * @example 89
   *
   */
  total: number;
  /**
   * @example 1336280400
   *
   */
  week: number;
};
/**
 * Contributor Activity
 * Contributor Activity
 *
 */
export type ContributorActivity = {
  author: SimpleUser | null;
  /**
   * @example 135
   *
   */
  total: number;
  /**
   * @example
   * [
   *   {
   *     "w": "1367712000",
   *     "a": 6898,
   *     "d": 77,
   *     "c": 10
   *   }
   * ]
   *
   */
  weeks: {
    w?: number;
    a?: number;
    d?: number;
    c?: number;
  }[];
};
/**
 * Participation Stats
 *
 */
export type ParticipationStats = {
  all: number[];
  owner: number[];
};
/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 *
 */
export type RepositorySubscription = {
  /**
   * Determines if notifications should be received from this repository.
   * @example true
   *
   */
  subscribed: boolean;
  /**
   * Determines if all notifications should be blocked from this repository.
   *
   */
  ignored: boolean;
  reason: string | null;
  /**
   * @example "2012-10-06T21:34:12Z"
   *
   */
  created_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/subscription"
   *
   */
  url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   *
   */
  repository_url: string;
};
/**
 * Tag
 * Tag
 *
 */
export type Tag = {
  /**
   * @example "v0.1"
   *
   */
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  /**
   * @example "https://github.com/octocat/Hello-World/zipball/v0.1"
   *
   */
  zipball_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/tarball/v0.1"
   *
   */
  tarball_url: string;
  node_id: string;
};
/**
 * Topic
 * A topic aggregates entities that are related to a subject.
 *
 */
export type Topic = {
  names: string[];
};
/**
 * Traffic
 *
 */
export type Traffic = {
  timestamp: Date;
  uniques: number;
  count: number;
};
/**
 * Clone Traffic
 * Clone Traffic
 *
 */
export type CloneTraffic = {
  /**
   * @example 173
   *
   */
  count: number;
  /**
   * @example 128
   *
   */
  uniques: number;
  clones: Traffic[];
};
/**
 * Content Traffic
 * Content Traffic
 *
 */
export type ContentTraffic = {
  /**
   * @example "/github/hubot"
   *
   */
  path: string;
  /**
   * @example "github/hubot: A customizable life embetterment robot."
   *
   */
  title: string;
  /**
   * @example 3542
   *
   */
  count: number;
  /**
   * @example 2225
   *
   */
  uniques: number;
};
/**
 * Referrer Traffic
 * Referrer Traffic
 *
 */
export type ReferrerTraffic = {
  /**
   * @example "Google"
   *
   */
  referrer: string;
  /**
   * @example 4
   *
   */
  count: number;
  /**
   * @example 3
   *
   */
  uniques: number;
};
/**
 * View Traffic
 * View Traffic
 *
 */
export type ViewTraffic = {
  /**
   * @example 14850
   *
   */
  count: number;
  /**
   * @example 3782
   *
   */
  uniques: number;
  views: Traffic[];
};
export type ScimGroupListEnterprise = {
  schemas: string[];
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: {
    schemas: string[];
    id: string;
    externalId?: string | null;
    displayName?: string;
    members?: {
      value?: string;
      $ref?: string;
      display?: string;
    }[];
    meta?: {
      resourceType?: string;
      created?: string;
      lastModified?: string;
      location?: string;
    };
  }[];
};
export type ScimEnterpriseGroup = {
  schemas: string[];
  id: string;
  externalId?: string | null;
  displayName?: string;
  members?: {
    value?: string;
    $ref?: string;
    display?: string;
  }[];
  meta?: {
    resourceType?: string;
    created?: string;
    lastModified?: string;
    location?: string;
  };
};
export type ScimUserListEnterprise = {
  schemas: string[];
  totalResults: number;
  itemsPerPage: number;
  startIndex: number;
  Resources: {
    schemas: string[];
    id: string;
    externalId?: string;
    userName?: string;
    name?: {
      givenName?: string;
      familyName?: string;
    };
    emails?: {
      value?: string;
      primary?: boolean;
      type?: string;
    }[];
    groups?: {
      value?: string;
    }[];
    active?: boolean;
    meta?: {
      resourceType?: string;
      created?: string;
      lastModified?: string;
      location?: string;
    };
  }[];
};
export type ScimEnterpriseUser = {
  schemas: string[];
  id: string;
  externalId?: string;
  userName?: string;
  name?: {
    givenName?: string;
    familyName?: string;
  };
  emails?: {
    value?: string;
    type?: string;
    primary?: boolean;
  }[];
  groups?: {
    value?: string;
  }[];
  active?: boolean;
  meta?: {
    resourceType?: string;
    created?: string;
    lastModified?: string;
    location?: string;
  };
};
/**
 * SCIM /Users
 * SCIM /Users provisioning endpoints
 *
 */
export type ScimUser = {
  /**
   * SCIM schema used.
   *
   */
  schemas: string[];
  /**
   * Unique identifier of an external identity
   * @example "1b78eada-9baa-11e6-9eb6-a431576d590e"
   *
   */
  id: string;
  /**
   * The ID of the User.
   * @example "a7b0f98395"
   *
   */
  externalId: string | null;
  /**
   * Configured by the admin. Could be an email, login, or username
   * @example "someone@example.com"
   *
   */
  userName: string | null;
  /**
   * The name of the user, suitable for display to end-users
   * @example "Jon Doe"
   *
   */
  displayName?: string | null;
  /**
   * @example
   * {
   *   "givenName": "Jane",
   *   "familyName": "User"
   * }
   *
   */
  name: {
    givenName: string | null;
    familyName: string | null;
    formatted?: string | null;
  };
  /**
   * user emails
   * @example
   * [
   *   {
   *     "value": "someone@example.com",
   *     "primary": true
   *   },
   *   {
   *     "value": "another@example.com",
   *     "primary": false
   *   }
   * ]
   *
   */
  emails: {
    value: string;
    primary?: boolean;
  }[];
  /**
   * The active status of the User.
   * @example true
   *
   */
  active: boolean;
  meta: {
    /**
     * @example "User"
     *
     */
    resourceType?: string;
    /**
     * @example "2019-01-24T22:45:36.000Z"
     *
     */
    created?: Date;
    /**
     * @example "2019-01-24T22:45:36.000Z"
     *
     */
    lastModified?: Date;
    /**
     * @example "https://api.github.com/scim/v2/organizations/myorg-123abc55141bfd8f/Users/c42772b5-2029-11e9-8543-9264a97dec8d"
     *
     */
    location?: string;
  };
  /**
   * The ID of the organization.
   *
   */
  organization_id?: number;
  /**
   * Set of operations to be performed
   * @example
   * [
   *   {
   *     "op": "replace",
   *     "value": {
   *       "active": false
   *     }
   *   }
   * ]
   *
   */
  operations?: {
    op: 'add' | 'remove' | 'replace';
    path?: string;
    value?: string | any | any[];
  }[];
  /**
   * associated groups
   *
   */
  groups?: any[];
};
/**
 * SCIM User List
 * SCIM User List
 *
 */
export type ScimUserList = {
  /**
   * SCIM schema used.
   *
   */
  schemas: string[];
  /**
   * @example 3
   *
   */
  totalResults: number;
  /**
   * @example 10
   *
   */
  itemsPerPage: number;
  /**
   * @example 1
   *
   */
  startIndex: number;
  Resources: ScimUser[];
};
/**
 * Search Result Text Matches
 *
 */
export type SearchResultTextMatches = {
  object_url?: string;
  object_type?: string | null;
  property?: string;
  fragment?: string;
  matches?: {
    text?: string;
    indices?: number[];
  }[];
}[];
/**
 * Code Search Result Item
 * Code Search Result Item
 *
 */
export type CodeSearchResultItem = {
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  repository: MinimalRepository;
  score: number;
  file_size?: number;
  language?: string | null;
  last_modified_at?: Date;
  /**
   * @example
   * [
   *   "73..77",
   *   "77..78"
   * ]
   *
   */
  line_numbers?: string[];
  text_matches?: SearchResultTextMatches;
};
/**
 * Commit Search Result Item
 * Commit Search Result Item
 *
 */
export type CommitSearchResultItem = {
  url: string;
  sha: string;
  html_url: string;
  comments_url: string;
  commit: {
    author: {
      name: string;
      email: string;
      date: Date;
    };
    committer: GitUser | null;
    comment_count: number;
    message: string;
    tree: {
      sha: string;
      url: string;
    };
    url: string;
    verification?: Verification;
  };
  author: SimpleUser | null;
  committer: GitUser | null;
  parents: {
    url?: string;
    html_url?: string;
    sha?: string;
  }[];
  repository: MinimalRepository;
  score: number;
  node_id: string;
  text_matches?: SearchResultTextMatches;
};
/**
 * Issue Search Result Item
 * Issue Search Result Item
 *
 */
export type IssueSearchResultItem = {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  locked: boolean;
  active_lock_reason?: string | null;
  assignees?: SimpleUser[] | null;
  user: SimpleUser | null;
  labels: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
    description?: string | null;
  }[];
  state: string;
  assignee: SimpleUser | null;
  milestone: Milestone | null;
  comments: number;
  created_at: Date;
  updated_at: Date;
  closed_at: Date | null;
  text_matches?: SearchResultTextMatches;
  pull_request?: {
    merged_at?: Date | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  body?: string;
  score: number;
  author_association: Author_association;
  draft?: boolean;
  repository?: Repository;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  performed_via_github_app?: Integration | null;
};
/**
 * Label Search Result Item
 * Label Search Result Item
 *
 */
export type LabelSearchResultItem = {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
  description: string | null;
  score: number;
  text_matches?: SearchResultTextMatches;
};
/**
 * Repo Search Result Item
 * Repo Search Result Item
 *
 */
export type RepoSearchResultItem = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: SimpleUser | null;
  private: boolean;
  html_url: string;
  description: string | null;
  fork: boolean;
  url: string;
  created_at: Date;
  updated_at: Date;
  pushed_at: Date;
  homepage: string | null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string | null;
  forks_count: number;
  open_issues_count: number;
  master_branch?: string;
  default_branch: string;
  score: number;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  forks: number;
  open_issues: number;
  watchers: number;
  topics?: string[];
  mirror_url: string | null;
  has_issues: boolean;
  has_projects: boolean;
  has_pages: boolean;
  has_wiki: boolean;
  has_downloads: boolean;
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   *
   */
  disabled: boolean;
  license: LicenseSimple | null;
  permissions?: {
    admin: boolean;
    pull: boolean;
    push: boolean;
  };
  text_matches?: SearchResultTextMatches;
  temp_clone_token?: string;
  allow_merge_commit?: boolean;
  allow_squash_merge?: boolean;
  allow_rebase_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
};
/**
 * Topic Search Result Item
 * Topic Search Result Item
 *
 */
export type TopicSearchResultItem = {
  name: string;
  display_name: string | null;
  short_description: string | null;
  description: string | null;
  created_by: string | null;
  released: string | null;
  created_at: Date;
  updated_at: Date;
  featured: boolean;
  curated: boolean;
  score: number;
  repository_count?: number | null;
  logo_url?: string | null;
  text_matches?: SearchResultTextMatches;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
};
/**
 * User Search Result Item
 * User Search Result Item
 *
 */
export type UserSearchResultItem = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  received_events_url: string;
  type: string;
  score: number;
  following_url: string;
  gists_url: string;
  starred_url: string;
  events_url: string;
  public_repos?: number;
  public_gists?: number;
  followers?: number;
  following?: number;
  created_at?: Date;
  updated_at?: Date;
  name?: string | null;
  bio?: string | null;
  email?: string | null;
  location?: string | null;
  site_admin: boolean;
  hireable?: boolean | null;
  text_matches?: SearchResultTextMatches;
  blog?: string | null;
  company?: string | null;
  suspended_at?: Date | null;
};
/**
 * Private User
 * Private User
 *
 */
export type PrivateUser = {
  /**
   * @example "octocat"
   *
   */
  login: string;
  /**
   * @example 1
   *
   */
  id: number;
  /**
   * @example "MDQ6VXNlcjE="
   *
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   *
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   *
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   *
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   *
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   *
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   *
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   *
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   *
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   *
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   *
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   *
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   *
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   *
   */
  received_events_url: string;
  /**
   * @example "User"
   *
   */
  type: string;
  site_admin: boolean;
  /**
   * @example "monalisa octocat"
   *
   */
  name: string | null;
  /**
   * @example "GitHub"
   *
   */
  company: string | null;
  /**
   * @example "https://github.com/blog"
   *
   */
  blog: string | null;
  /**
   * @example "San Francisco"
   *
   */
  location: string | null;
  /**
   * @example "octocat@github.com"
   *
   */
  email: string | null;
  hireable: boolean | null;
  /**
   * @example "There once was..."
   *
   */
  bio: string | null;
  /**
   * @example "monalisa"
   *
   */
  twitter_username?: string | null;
  /**
   * @example 2
   *
   */
  public_repos: number;
  /**
   * @example 1
   *
   */
  public_gists: number;
  /**
   * @example 20
   *
   */
  followers: number;
  following: number;
  /**
   * @example "2008-01-14T04:33:35Z"
   *
   */
  created_at: Date;
  /**
   * @example "2008-01-14T04:33:35Z"
   *
   */
  updated_at: Date;
  /**
   * @example 81
   *
   */
  private_gists: number;
  /**
   * @example 100
   *
   */
  total_private_repos: number;
  /**
   * @example 100
   *
   */
  owned_private_repos: number;
  /**
   * @example 10000
   *
   */
  disk_usage: number;
  /**
   * @example 8
   *
   */
  collaborators: number;
  /**
   * @example true
   *
   */
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  suspended_at?: Date | null;
  business_plus?: boolean;
  ldap_dn?: string;
};
/**
 * Email
 * Email
 *
 */
export type Email = {
  /**
   * @example "octocat@github.com"
   *
   */
  email: string;
  /**
   * @example true
   *
   */
  primary: boolean;
  /**
   * @example true
   *
   */
  verified: boolean;
  /**
   * @example "public"
   *
   */
  visibility: string | null;
};
/**
 * GPG Key
 * A unique encryption key
 *
 */
export type GpgKey = {
  /**
   * @example 3
   *
   */
  id: number;
  primary_key_id: number | null;
  /**
   * @example "3262EFF25BA0D270"
   *
   */
  key_id: string;
  /**
   * @example "xsBNBFayYZ..."
   *
   */
  public_key: string;
  /**
   * @example
   * [
   *   {
   *     "email": "mastahyeti@users.noreply.github.com",
   *     "verified": true
   *   }
   * ]
   *
   */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /**
   * @example
   * [
   *   {
   *     "id": 4,
   *     "primary_key_id": 3,
   *     "key_id": "4A595D4C72EE49C7",
   *     "public_key": "zsBNBFayYZ...",
   *     "emails": [],
   *     "subkeys": [],
   *     "can_sign": false,
   *     "can_encrypt_comms": true,
   *     "can_encrypt_storage": true,
   *     "can_certify": false,
   *     "created_at": "2016-03-24T11:31:04-06:00",
   *     "expires_at": null
   *   }
   * ]
   *
   */
  subkeys: {
    id?: number;
    primary_key_id?: number;
    key_id?: string;
    public_key?: string;
    emails?: any[];
    subkeys?: any[];
    can_sign?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_certify?: boolean;
    created_at?: string;
    expires_at?: string | null;
    raw_key?: string | null;
  }[];
  /**
   * @example true
   *
   */
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /**
   * @example true
   *
   */
  can_certify: boolean;
  /**
   * @example "2016-03-24T11:31:04-06:00"
   *
   */
  created_at: Date;
  expires_at: Date | null;
  raw_key: string | null;
};
/**
 * Key
 * Key
 *
 */
export type Key = {
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: Date;
  verified: boolean;
  read_only: boolean;
};
/**
 * Marketplace Account
 *
 */
export type MarketplaceAccount = {
  url: string;
  id: number;
  type: string;
  node_id?: string;
  login: string;
  email?: string | null;
  organization_billing_email?: string | null;
};
/**
 * User Marketplace Purchase
 * User Marketplace Purchase
 *
 */
export type UserMarketplacePurchase = {
  /**
   * @example "monthly"
   *
   */
  billing_cycle: string;
  /**
   * @example "2017-11-11T00:00:00Z"
   *
   */
  next_billing_date: Date | null;
  unit_count: number | null;
  /**
   * @example true
   *
   */
  on_free_trial: boolean;
  /**
   * @example "2017-11-11T00:00:00Z"
   *
   */
  free_trial_ends_on: Date | null;
  /**
   * @example "2017-11-02T01:12:12Z"
   *
   */
  updated_at: Date | null;
  account: MarketplaceAccount;
  plan: MarketplaceListingPlan;
};
/**
 * Starred Repository
 * Starred Repository
 *
 */
export type StarredRepository = {
  starred_at: Date;
  repo: Repository;
};
/**
 * Hovercard
 * Hovercard
 *
 */
export type Hovercard = {
  contexts: {
    message: string;
    octicon: string;
  }[];
};
/**
 * Key Simple
 * Key Simple
 *
 */
export type KeySimple = {
  id: number;
  key: string;
};
export class GithubClient {
  constructor(
    private server: r.BaseServerConfiguration,
    private http: r.HttpLibrary = new r.IsomorphicFetchHttpLibrary(),
    private resolver: r.SchemaRefResolver = new r.RefResolver(
      JSON.parse(
        '{"simple-user":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"},"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"avatar_url":{"type":"string","format":"uri"},"gravatar_id":{"type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"organizations_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"received_events_url":{"type":"string","format":"uri"},"type":{"type":"string"},"site_admin":{"type":"boolean"},"starred_at":{"type":"string"}}},"integration":{"type":"object","properties":{"id":{"type":"integer"},"slug":{"type":"string"},"node_id":{"type":"string"},"owner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"name":{"type":"string"},"description":{"type":"string"},"external_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"permissions":{"type":"object","properties":{"issues":{"type":"string"},"checks":{"type":"string"},"metadata":{"type":"string"},"contents":{"type":"string"},"deployments":{"type":"string"}},"additionalProperties":{"type":"string"}},"events":{"type":"array","items":{"type":"string"}},"installations_count":{"type":"integer"},"client_id":{"type":"string"},"client_secret":{"type":"string"},"webhook_secret":{"type":"string"},"pem":{"type":"string"}}},"basic-error":{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"url":{"type":"string"},"status":{"type":"string"}}},"validation-error-simple":{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"string"}}}},"webhook-config-url":{"type":"string","format":"uri"},"webhook-config-content-type":{"type":"string"},"webhook-config-secret":{"type":"string"},"webhook-config-insecure-ssl":{"oneOf":[{"type":"string"},{"type":"number"}]},"webhook-config":{"type":"object","properties":{"url":{"$ref":"#/components/schemas/webhook-config-url"},"content_type":{"$ref":"#/components/schemas/webhook-config-content-type"},"secret":{"$ref":"#/components/schemas/webhook-config-secret"},"insecure_ssl":{"$ref":"#/components/schemas/webhook-config-insecure-ssl"}}},"hook-delivery-item":{"type":"object","properties":{"id":{"type":"integer"},"guid":{"type":"string"},"delivered_at":{"type":"string","format":"date-time"},"redelivery":{"type":"boolean"},"duration":{"type":"number"},"status":{"type":"string"},"status_code":{"type":"integer"},"event":{"type":"string"},"action":{"type":"string"},"installation_id":{"type":"integer"},"repository_id":{"type":"integer"}}},"scim-error":{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"detail":{"type":"string"},"status":{"type":"integer"},"scimType":{"type":"string"},"schemas":{"type":"array","items":{"type":"string"}}}},"validation-error":{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"object","required":["code"],"properties":{"resource":{"type":"string"},"field":{"type":"string"},"message":{"type":"string"},"code":{"type":"string"},"index":{"type":"integer"},"value":{"oneOf":[{"type":"string","nullable":true},{"type":"integer","nullable":true},{"type":"array","nullable":true,"items":{"type":"string"}}]}}}}}},"hook-delivery":{"type":"object","properties":{"id":{"type":"integer"},"guid":{"type":"string"},"delivered_at":{"type":"string","format":"date-time"},"redelivery":{"type":"boolean"},"duration":{"type":"number"},"status":{"type":"string"},"status_code":{"type":"integer"},"event":{"type":"string"},"action":{"type":"string"},"installation_id":{"type":"integer"},"repository_id":{"type":"integer"},"request":{"type":"object","properties":{"headers":{"type":"object","additionalProperties":true},"payload":{"type":"object","additionalProperties":true}}},"response":{"type":"object","properties":{"headers":{"type":"object","additionalProperties":true},"payload":{"type":"string","additionalProperties":true}}}}},"enterprise":{"type":"object","properties":{"description":{"type":"string"},"html_url":{"type":"string","format":"uri"},"website_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"slug":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"avatar_url":{"type":"string","format":"uri"}}},"app-permissions":{"type":"object","properties":{"actions":{"type":"string"},"administration":{"type":"string"},"checks":{"type":"string"},"content_references":{"type":"string"},"contents":{"type":"string"},"deployments":{"type":"string"},"environments":{"type":"string"},"issues":{"type":"string"},"metadata":{"type":"string"},"packages":{"type":"string"},"pages":{"type":"string"},"pull_requests":{"type":"string"},"repository_hooks":{"type":"string"},"repository_projects":{"type":"string"},"secret_scanning_alerts":{"type":"string"},"secrets":{"type":"string"},"security_events":{"type":"string"},"single_file":{"type":"string"},"statuses":{"type":"string"},"vulnerability_alerts":{"type":"string"},"workflows":{"type":"string"},"members":{"type":"string"},"organization_administration":{"type":"string"},"organization_hooks":{"type":"string"},"organization_plan":{"type":"string"},"organization_projects":{"type":"string"},"organization_packages":{"type":"string"},"organization_secrets":{"type":"string"},"organization_self_hosted_runners":{"type":"string"},"organization_user_blocking":{"type":"string"},"team_discussions":{"type":"string"}}},"installation":{"type":"object","properties":{"id":{"type":"integer"},"account":{"anyOf":[{"$ref":"#/components/schemas/simple-user"},{"$ref":"#/components/schemas/enterprise"}]},"repository_selection":{"type":"string"},"access_tokens_url":{"type":"string","format":"uri"},"repositories_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"app_id":{"type":"integer"},"target_id":{"type":"integer"},"target_type":{"type":"string"},"permissions":{"$ref":"#/components/schemas/app-permissions"},"events":{"type":"array","items":{"type":"string"}},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"single_file_name":{"type":"string"},"has_multiple_single_files":{"type":"boolean"},"single_file_paths":{"type":"array","items":{"type":"string"}},"app_slug":{"type":"string"},"suspended_by":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"suspended_at":{"type":"string","format":"date-time"},"contact_email":{"type":"string"}}},"license-simple":{"type":"object","properties":{"key":{"type":"string"},"name":{"type":"string"},"url":{"type":"string","format":"uri"},"spdx_id":{"type":"string"},"node_id":{"type":"string"},"html_url":{"type":"string","format":"uri"}}},"repository":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"full_name":{"type":"string"},"license":{"allOf":[{"$ref":"#/components/schemas/license-simple"}]},"organization":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"forks":{"type":"integer"},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"pull":{"type":"boolean"},"triage":{"type":"boolean"},"push":{"type":"boolean"},"maintain":{"type":"boolean"}}},"owner":{"$ref":"#/components/schemas/simple-user"},"private":{"type":"boolean"},"html_url":{"type":"string","format":"uri"},"description":{"type":"string"},"fork":{"type":"boolean"},"url":{"type":"string","format":"uri"},"archive_url":{"type":"string"},"assignees_url":{"type":"string"},"blobs_url":{"type":"string"},"branches_url":{"type":"string"},"collaborators_url":{"type":"string"},"comments_url":{"type":"string"},"commits_url":{"type":"string"},"compare_url":{"type":"string"},"contents_url":{"type":"string"},"contributors_url":{"type":"string","format":"uri"},"deployments_url":{"type":"string","format":"uri"},"downloads_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"forks_url":{"type":"string","format":"uri"},"git_commits_url":{"type":"string"},"git_refs_url":{"type":"string"},"git_tags_url":{"type":"string"},"git_url":{"type":"string"},"issue_comment_url":{"type":"string"},"issue_events_url":{"type":"string"},"issues_url":{"type":"string"},"keys_url":{"type":"string"},"labels_url":{"type":"string"},"languages_url":{"type":"string","format":"uri"},"merges_url":{"type":"string","format":"uri"},"milestones_url":{"type":"string"},"notifications_url":{"type":"string"},"pulls_url":{"type":"string"},"releases_url":{"type":"string"},"ssh_url":{"type":"string"},"stargazers_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string"},"subscribers_url":{"type":"string","format":"uri"},"subscription_url":{"type":"string","format":"uri"},"tags_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"trees_url":{"type":"string"},"clone_url":{"type":"string"},"mirror_url":{"type":"string","format":"uri"},"hooks_url":{"type":"string","format":"uri"},"svn_url":{"type":"string","format":"uri"},"homepage":{"type":"string","format":"uri"},"language":{"type":"string"},"forks_count":{"type":"integer"},"stargazers_count":{"type":"integer"},"watchers_count":{"type":"integer"},"size":{"type":"integer"},"default_branch":{"type":"string"},"open_issues_count":{"type":"integer"},"is_template":{"type":"boolean"},"topics":{"type":"array","items":{"type":"string"}},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_pages":{"type":"boolean"},"has_downloads":{"type":"boolean"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"visibility":{"type":"string"},"pushed_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"allow_rebase_merge":{"type":"boolean"},"template_repository":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"full_name":{"type":"string"},"owner":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"avatar_url":{"type":"string"},"gravatar_id":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"followers_url":{"type":"string"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string"},"organizations_url":{"type":"string"},"repos_url":{"type":"string"},"events_url":{"type":"string"},"received_events_url":{"type":"string"},"type":{"type":"string"},"site_admin":{"type":"boolean"}}},"private":{"type":"boolean"},"html_url":{"type":"string"},"description":{"type":"string"},"fork":{"type":"boolean"},"url":{"type":"string"},"archive_url":{"type":"string"},"assignees_url":{"type":"string"},"blobs_url":{"type":"string"},"branches_url":{"type":"string"},"collaborators_url":{"type":"string"},"comments_url":{"type":"string"},"commits_url":{"type":"string"},"compare_url":{"type":"string"},"contents_url":{"type":"string"},"contributors_url":{"type":"string"},"deployments_url":{"type":"string"},"downloads_url":{"type":"string"},"events_url":{"type":"string"},"forks_url":{"type":"string"},"git_commits_url":{"type":"string"},"git_refs_url":{"type":"string"},"git_tags_url":{"type":"string"},"git_url":{"type":"string"},"issue_comment_url":{"type":"string"},"issue_events_url":{"type":"string"},"issues_url":{"type":"string"},"keys_url":{"type":"string"},"labels_url":{"type":"string"},"languages_url":{"type":"string"},"merges_url":{"type":"string"},"milestones_url":{"type":"string"},"notifications_url":{"type":"string"},"pulls_url":{"type":"string"},"releases_url":{"type":"string"},"ssh_url":{"type":"string"},"stargazers_url":{"type":"string"},"statuses_url":{"type":"string"},"subscribers_url":{"type":"string"},"subscription_url":{"type":"string"},"tags_url":{"type":"string"},"teams_url":{"type":"string"},"trees_url":{"type":"string"},"clone_url":{"type":"string"},"mirror_url":{"type":"string"},"hooks_url":{"type":"string"},"svn_url":{"type":"string"},"homepage":{"type":"string"},"language":{"type":"string"},"forks_count":{"type":"integer"},"stargazers_count":{"type":"integer"},"watchers_count":{"type":"integer"},"size":{"type":"integer"},"default_branch":{"type":"string"},"open_issues_count":{"type":"integer"},"is_template":{"type":"boolean"},"topics":{"type":"array","items":{"type":"string"}},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_pages":{"type":"boolean"},"has_downloads":{"type":"boolean"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"visibility":{"type":"string"},"pushed_at":{"type":"string"},"created_at":{"type":"string"},"updated_at":{"type":"string"},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"push":{"type":"boolean"},"pull":{"type":"boolean"}}},"allow_rebase_merge":{"type":"boolean"},"temp_clone_token":{"type":"string"},"allow_squash_merge":{"type":"boolean"},"allow_auto_merge":{"type":"boolean"},"delete_branch_on_merge":{"type":"boolean"},"allow_merge_commit":{"type":"boolean"},"subscribers_count":{"type":"integer"},"network_count":{"type":"integer"}}},"temp_clone_token":{"type":"string"},"allow_squash_merge":{"type":"boolean"},"allow_auto_merge":{"type":"boolean"},"delete_branch_on_merge":{"type":"boolean"},"allow_merge_commit":{"type":"boolean"},"subscribers_count":{"type":"integer"},"network_count":{"type":"integer"},"open_issues":{"type":"integer"},"watchers":{"type":"integer"},"master_branch":{"type":"string"},"starred_at":{"type":"string"}}},"installation-token":{"type":"object","properties":{"token":{"type":"string"},"expires_at":{"type":"string"},"permissions":{"$ref":"#/components/schemas/app-permissions"},"repository_selection":{"type":"string"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/repository"}},"single_file":{"type":"string"},"has_multiple_single_files":{"type":"boolean"},"single_file_paths":{"type":"array","items":{"type":"string"}}}},"application-grant":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string","format":"uri"},"app":{"type":"object","properties":{"client_id":{"type":"string"},"name":{"type":"string"},"url":{"type":"string","format":"uri"}}},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"scopes":{"type":"array","items":{"type":"string"}},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]}}},"scoped-installation":{"type":"object","properties":{"permissions":{"$ref":"#/components/schemas/app-permissions"},"repository_selection":{"type":"string"},"single_file_name":{"type":"string"},"has_multiple_single_files":{"type":"boolean"},"single_file_paths":{"type":"array","items":{"type":"string"}},"repositories_url":{"type":"string","format":"uri"},"account":{"$ref":"#/components/schemas/simple-user"}}},"authorization":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string","format":"uri"},"scopes":{"type":"array","items":{"type":"string"}},"token":{"type":"string"},"token_last_eight":{"type":"string"},"hashed_token":{"type":"string"},"app":{"type":"object","properties":{"client_id":{"type":"string"},"name":{"type":"string"},"url":{"type":"string","format":"uri"}}},"note":{"type":"string"},"note_url":{"type":"string","format":"uri"},"updated_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"fingerprint":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"installation":{"allOf":[{"$ref":"#/components/schemas/scoped-installation"}]}}},"code-of-conduct":{"type":"object","properties":{"key":{"type":"string"},"name":{"type":"string"},"url":{"type":"string","format":"uri"},"body":{"type":"string"},"html_url":{"type":"string","format":"uri"}}},"enabled-organizations":{"type":"string"},"allowed-actions":{"type":"string"},"selected-actions-url":{"type":"string"},"actions-enterprise-permissions":{"type":"object","properties":{"enabled_organizations":{"$ref":"#/components/schemas/enabled-organizations"},"selected_organizations_url":{"type":"string"},"allowed_actions":{"$ref":"#/components/schemas/allowed-actions"},"selected_actions_url":{"$ref":"#/components/schemas/selected-actions-url"}}},"organization-simple":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"hooks_url":{"type":"string"},"issues_url":{"type":"string"},"members_url":{"type":"string"},"public_members_url":{"type":"string"},"avatar_url":{"type":"string"},"description":{"type":"string"}}},"selected-actions":{"type":"object","properties":{"github_owned_allowed":{"type":"boolean"},"verified_allowed":{"type":"boolean"},"patterns_allowed":{"type":"array","items":{"type":"string"}}}},"runner-groups-enterprise":{"type":"object","properties":{"id":{"type":"number"},"name":{"type":"string"},"visibility":{"type":"string"},"default":{"type":"boolean"},"selected_organizations_url":{"type":"string"},"runners_url":{"type":"string"},"allows_public_repositories":{"type":"boolean"}}},"runner":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"},"os":{"type":"string"},"status":{"type":"string"},"busy":{"type":"boolean"},"labels":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer","description":"Unique identifier of the label."},"name":{"type":"string","description":"Name of the label."},"type":{"type":"string","description":"The type of label. Read-only labels are applied automatically when the runner is configured.","enum":["read-only","custom"]}}}}}},"runner-application":{"type":"object","properties":{"os":{"type":"string"},"architecture":{"type":"string"},"download_url":{"type":"string"},"filename":{"type":"string"},"temp_download_token":{"type":"string"},"sha256_checksum":{"type":"string"}}},"authentication-token":{"type":"object","properties":{"token":{"type":"string"},"expires_at":{"type":"string","format":"date-time"},"permissions":{"type":"object"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/repository"}},"single_file":{"type":"string"},"repository_selection":{"type":"string"}}},"audit-log-event":{"type":"object","properties":{"@timestamp":{"type":"integer"},"action":{"type":"string"},"active":{"type":"boolean"},"active_was":{"type":"boolean"},"actor":{"type":"string"},"actor_id":{"type":"integer"},"actor_location":{"type":"object","properties":{"country_name":{"type":"string"}}},"data":{"type":"object","additionalProperties":true},"org_id":{"type":"integer"},"blocked_user":{"type":"string"},"business":{"type":"string"},"config":{"type":"array"},"config_was":{"type":"array"},"content_type":{"type":"string"},"created_at":{"type":"integer"},"deploy_key_fingerprint":{"type":"string"},"_document_id":{"type":"string"},"emoji":{"type":"string"},"events":{"type":"array"},"events_were":{"type":"array"},"explanation":{"type":"string"},"fingerprint":{"type":"string"},"hook_id":{"type":"integer"},"limited_availability":{"type":"boolean"},"message":{"type":"string"},"name":{"type":"string"},"old_user":{"type":"string"},"openssh_public_key":{"type":"string"},"org":{"type":"string"},"previous_visibility":{"type":"string"},"read_only":{"type":"boolean"},"repo":{"type":"string"},"repository":{"type":"string"},"repository_public":{"type":"boolean"},"target_login":{"type":"string"},"team":{"type":"string"},"transport_protocol":{"type":"integer"},"transport_protocol_name":{"type":"string"},"user":{"type":"string"},"visibility":{"type":"string"}}},"actions-billing-usage":{"type":"object","properties":{"total_minutes_used":{"type":"integer"},"total_paid_minutes_used":{"type":"integer"},"included_minutes":{"type":"integer"},"minutes_used_breakdown":{"type":"object","properties":{"UBUNTU":{"type":"integer"},"MACOS":{"type":"integer"},"WINDOWS":{"type":"integer"}}}}},"packages-billing-usage":{"type":"object","properties":{"total_gigabytes_bandwidth_used":{"type":"integer"},"total_paid_gigabytes_bandwidth_used":{"type":"integer"},"included_gigabytes_bandwidth":{"type":"integer"}}},"combined-billing-usage":{"type":"object","properties":{"days_left_in_billing_cycle":{"type":"integer"},"estimated_paid_storage_for_month":{"type":"integer"},"estimated_storage_for_month":{"type":"integer"}}},"actor":{"type":"object","properties":{"id":{"type":"integer"},"login":{"type":"string"},"display_login":{"type":"string"},"gravatar_id":{"type":"string"},"url":{"type":"string","format":"uri"},"avatar_url":{"type":"string","format":"uri"}}},"label":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"name":{"type":"string"},"description":{"type":"string"},"color":{"type":"string"},"default":{"type":"boolean"}}},"milestone":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"labels_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"number":{"type":"integer"},"state":{"type":"string"},"title":{"type":"string"},"description":{"type":"string"},"creator":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"open_issues":{"type":"integer"},"closed_issues":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"closed_at":{"type":"string","format":"date-time"},"due_on":{"type":"string","format":"date-time"}}},"author_association":{"type":"string"},"issue-simple":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"},"labels_url":{"type":"string"},"comments_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"number":{"type":"integer"},"state":{"type":"string"},"title":{"type":"string"},"body":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"labels":{"type":"array","items":{"$ref":"#/components/schemas/label"}},"assignee":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"assignees":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"milestone":{"allOf":[{"$ref":"#/components/schemas/milestone"}]},"locked":{"type":"boolean"},"active_lock_reason":{"type":"string"},"comments":{"type":"integer"},"pull_request":{"type":"object","properties":{"merged_at":{"type":"string","format":"date-time"},"diff_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"patch_url":{"type":"string","format":"uri"},"url":{"type":"string","format":"uri"}}},"closed_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"author_association":{"$ref":"#/components/schemas/author_association"},"body_html":{"type":"string"},"body_text":{"type":"string"},"timeline_url":{"type":"string","format":"uri"},"repository":{"$ref":"#/components/schemas/repository"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]}}},"reaction-rollup":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"total_count":{"type":"integer"},"+1":{"type":"integer"},"-1":{"type":"integer"},"laugh":{"type":"integer"},"confused":{"type":"integer"},"heart":{"type":"integer"},"hooray":{"type":"integer"},"eyes":{"type":"integer"},"rocket":{"type":"integer"}}},"issue-comment":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"body":{"type":"string"},"body_text":{"type":"string"},"body_html":{"type":"string"},"html_url":{"type":"string","format":"uri"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"issue_url":{"type":"string","format":"uri"},"author_association":{"$ref":"#/components/schemas/author_association"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]},"reactions":{"$ref":"#/components/schemas/reaction-rollup"}}},"event":{"type":"object","properties":{"id":{"type":"string"},"type":{"type":"string"},"actor":{"$ref":"#/components/schemas/actor"},"repo":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"},"url":{"type":"string","format":"uri"}}},"org":{"$ref":"#/components/schemas/actor"},"payload":{"type":"object","properties":{"action":{"type":"string"},"issue":{"$ref":"#/components/schemas/issue-simple"},"comment":{"$ref":"#/components/schemas/issue-comment"},"pages":{"type":"array","items":{"type":"object","properties":{"page_name":{"type":"string"},"title":{"type":"string"},"summary":{"type":"string","nullable":true},"action":{"type":"string"},"sha":{"type":"string"},"html_url":{"type":"string"}}}}}},"public":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"}}},"link-with-type":{"type":"object","properties":{"href":{"type":"string"},"type":{"type":"string"}}},"feed":{"type":"object","properties":{"timeline_url":{"type":"string"},"user_url":{"type":"string"},"current_user_public_url":{"type":"string"},"current_user_url":{"type":"string"},"current_user_actor_url":{"type":"string"},"current_user_organization_url":{"type":"string"},"current_user_organization_urls":{"type":"array","items":{"type":"string","format":"uri"}},"security_advisories_url":{"type":"string"},"_links":{"type":"object","properties":{"timeline":{"$ref":"#/components/schemas/link-with-type"},"user":{"$ref":"#/components/schemas/link-with-type"},"security_advisories":{"$ref":"#/components/schemas/link-with-type"},"current_user":{"$ref":"#/components/schemas/link-with-type"},"current_user_public":{"$ref":"#/components/schemas/link-with-type"},"current_user_actor":{"$ref":"#/components/schemas/link-with-type"},"current_user_organization":{"$ref":"#/components/schemas/link-with-type"},"current_user_organizations":{"type":"array","items":{"$ref":"#/components/schemas/link-with-type"}}}}}},"base-gist":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"forks_url":{"type":"string","format":"uri"},"commits_url":{"type":"string","format":"uri"},"id":{"type":"string"},"node_id":{"type":"string"},"git_pull_url":{"type":"string","format":"uri"},"git_push_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"files":{"type":"object","additionalProperties":{"type":"object","properties":{"filename":{"type":"string"},"type":{"type":"string"},"language":{"type":"string"},"raw_url":{"type":"string"},"size":{"type":"integer"}}}},"public":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"description":{"type":"string"},"comments":{"type":"integer"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"comments_url":{"type":"string","format":"uri"},"owner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"truncated":{"type":"boolean"},"forks":{"type":"array","items":{}},"history":{"type":"array","items":{}}}},"public-user":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"avatar_url":{"type":"string","format":"uri"},"gravatar_id":{"type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"organizations_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"received_events_url":{"type":"string","format":"uri"},"type":{"type":"string"},"site_admin":{"type":"boolean"},"name":{"type":"string"},"company":{"type":"string"},"blog":{"type":"string"},"location":{"type":"string"},"email":{"type":"string","format":"email"},"hireable":{"type":"boolean"},"bio":{"type":"string"},"twitter_username":{"type":"string"},"public_repos":{"type":"integer"},"public_gists":{"type":"integer"},"followers":{"type":"integer"},"following":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"plan":{"type":"object","properties":{"collaborators":{"type":"integer"},"name":{"type":"string"},"space":{"type":"integer"},"private_repos":{"type":"integer"}}},"suspended_at":{"type":"string","format":"date-time"},"private_gists":{"type":"integer"},"total_private_repos":{"type":"integer"},"owned_private_repos":{"type":"integer"},"disk_usage":{"type":"integer"},"collaborators":{"type":"integer"}},"additionalProperties":false},"gist-history":{"type":"object","properties":{"user":{"$ref":"#/components/schemas/simple-user"},"version":{"type":"string"},"committed_at":{"type":"string","format":"date-time"},"change_status":{"type":"object","properties":{"total":{"type":"integer"},"additions":{"type":"integer"},"deletions":{"type":"integer"}}},"url":{"type":"string","format":"uri"}}},"gist-simple":{"type":"object","properties":{"forks":{"type":"array","items":{"type":"object","properties":{"id":{"type":"string"},"url":{"type":"string","format":"uri"},"user":{"$ref":"#/components/schemas/public-user"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}}},"history":{"type":"array","items":{"$ref":"#/components/schemas/gist-history"}},"fork_of":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"forks_url":{"type":"string","format":"uri"},"commits_url":{"type":"string","format":"uri"},"id":{"type":"string"},"node_id":{"type":"string"},"git_pull_url":{"type":"string","format":"uri"},"git_push_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"files":{"type":"object","additionalProperties":{"type":"object","properties":{"filename":{"type":"string"},"type":{"type":"string"},"language":{"type":"string"},"raw_url":{"type":"string"},"size":{"type":"integer"}}}},"public":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"description":{"type":"string"},"comments":{"type":"integer"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"comments_url":{"type":"string","format":"uri"},"owner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"truncated":{"type":"boolean"},"forks":{"type":"array","items":{}},"history":{"type":"array","items":{}}}},"url":{"type":"string"},"forks_url":{"type":"string"},"commits_url":{"type":"string"},"id":{"type":"string"},"node_id":{"type":"string"},"git_pull_url":{"type":"string"},"git_push_url":{"type":"string"},"html_url":{"type":"string"},"files":{"type":"object","additionalProperties":{"type":"object","properties":{"filename":{"type":"string"},"type":{"type":"string"},"language":{"type":"string"},"raw_url":{"type":"string"},"size":{"type":"integer"},"truncated":{"type":"boolean"},"content":{"type":"string"}}}},"public":{"type":"boolean"},"created_at":{"type":"string"},"updated_at":{"type":"string"},"description":{"type":"string"},"comments":{"type":"integer"},"user":{"type":"string"},"comments_url":{"type":"string"},"owner":{"$ref":"#/components/schemas/simple-user"},"truncated":{"type":"boolean"}}},"gist-comment":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"body":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"author_association":{"$ref":"#/components/schemas/author_association"}}},"gist-commit":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"version":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"change_status":{"type":"object","properties":{"total":{"type":"integer"},"additions":{"type":"integer"},"deletions":{"type":"integer"}}},"committed_at":{"type":"string","format":"date-time"}}},"gitignore-template":{"type":"object","properties":{"name":{"type":"string"},"source":{"type":"string"}}},"issue":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"},"labels_url":{"type":"string"},"comments_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"number":{"type":"integer"},"state":{"type":"string"},"title":{"type":"string"},"body":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"labels":{"type":"array","items":{"oneOf":[{"type":"string"},{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"name":{"type":"string"},"description":{"type":"string","nullable":true},"color":{"type":"string","nullable":true},"default":{"type":"boolean"}}}]}},"assignee":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"assignees":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"milestone":{"allOf":[{"$ref":"#/components/schemas/milestone"}]},"locked":{"type":"boolean"},"active_lock_reason":{"type":"string"},"comments":{"type":"integer"},"pull_request":{"type":"object","properties":{"merged_at":{"type":"string","format":"date-time"},"diff_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"patch_url":{"type":"string","format":"uri"},"url":{"type":"string","format":"uri"}}},"closed_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"closed_by":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"body_html":{"type":"string"},"body_text":{"type":"string"},"timeline_url":{"type":"string","format":"uri"},"repository":{"$ref":"#/components/schemas/repository"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]},"author_association":{"$ref":"#/components/schemas/author_association"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"}}},"license":{"type":"object","properties":{"key":{"type":"string"},"name":{"type":"string"},"spdx_id":{"type":"string"},"url":{"type":"string","format":"uri"},"node_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"description":{"type":"string"},"implementation":{"type":"string"},"permissions":{"type":"array","items":{"type":"string"}},"conditions":{"type":"array","items":{"type":"string"}},"limitations":{"type":"array","items":{"type":"string"}},"body":{"type":"string"},"featured":{"type":"boolean"}}},"marketplace-listing-plan":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"accounts_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"number":{"type":"integer"},"name":{"type":"string"},"description":{"type":"string"},"monthly_price_in_cents":{"type":"integer"},"yearly_price_in_cents":{"type":"integer"},"price_model":{"type":"string"},"has_free_trial":{"type":"boolean"},"unit_name":{"type":"string"},"state":{"type":"string"},"bullets":{"type":"array","items":{"type":"string"}}}},"marketplace-purchase":{"type":"object","properties":{"url":{"type":"string"},"type":{"type":"string"},"id":{"type":"integer"},"login":{"type":"string"},"organization_billing_email":{"type":"string"},"email":{"type":"string"},"marketplace_pending_change":{"type":"object","properties":{"is_installed":{"type":"boolean"},"effective_date":{"type":"string"},"unit_count":{"type":"integer"},"id":{"type":"integer"},"plan":{"$ref":"#/components/schemas/marketplace-listing-plan"}}},"marketplace_purchase":{"type":"object","properties":{"billing_cycle":{"type":"string"},"next_billing_date":{"type":"string"},"is_installed":{"type":"boolean"},"unit_count":{"type":"integer"},"on_free_trial":{"type":"boolean"},"free_trial_ends_on":{"type":"string"},"updated_at":{"type":"string"},"plan":{"$ref":"#/components/schemas/marketplace-listing-plan"}}}}},"api-overview":{"type":"object","properties":{"verifiable_password_authentication":{"type":"boolean"},"ssh_key_fingerprints":{"type":"object","properties":{"SHA256_RSA":{"type":"string"},"SHA256_DSA":{"type":"string"}}},"hooks":{"type":"array","items":{"type":"string"}},"web":{"type":"array","items":{"type":"string"}},"api":{"type":"array","items":{"type":"string"}},"git":{"type":"array","items":{"type":"string"}},"packages":{"type":"array","items":{"type":"string"}},"pages":{"type":"array","items":{"type":"string"}},"importer":{"type":"array","items":{"type":"string"}},"actions":{"type":"array","items":{"type":"string"}},"dependabot":{"type":"array","items":{"type":"string"}}}},"minimal-repository":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"full_name":{"type":"string"},"owner":{"$ref":"#/components/schemas/simple-user"},"private":{"type":"boolean"},"html_url":{"type":"string","format":"uri"},"description":{"type":"string"},"fork":{"type":"boolean"},"url":{"type":"string","format":"uri"},"archive_url":{"type":"string"},"assignees_url":{"type":"string"},"blobs_url":{"type":"string"},"branches_url":{"type":"string"},"collaborators_url":{"type":"string"},"comments_url":{"type":"string"},"commits_url":{"type":"string"},"compare_url":{"type":"string"},"contents_url":{"type":"string"},"contributors_url":{"type":"string","format":"uri"},"deployments_url":{"type":"string","format":"uri"},"downloads_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"forks_url":{"type":"string","format":"uri"},"git_commits_url":{"type":"string"},"git_refs_url":{"type":"string"},"git_tags_url":{"type":"string"},"git_url":{"type":"string"},"issue_comment_url":{"type":"string"},"issue_events_url":{"type":"string"},"issues_url":{"type":"string"},"keys_url":{"type":"string"},"labels_url":{"type":"string"},"languages_url":{"type":"string","format":"uri"},"merges_url":{"type":"string","format":"uri"},"milestones_url":{"type":"string"},"notifications_url":{"type":"string"},"pulls_url":{"type":"string"},"releases_url":{"type":"string"},"ssh_url":{"type":"string"},"stargazers_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string"},"subscribers_url":{"type":"string","format":"uri"},"subscription_url":{"type":"string","format":"uri"},"tags_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"trees_url":{"type":"string"},"clone_url":{"type":"string"},"mirror_url":{"type":"string"},"hooks_url":{"type":"string","format":"uri"},"svn_url":{"type":"string"},"homepage":{"type":"string"},"language":{"type":"string"},"forks_count":{"type":"integer"},"stargazers_count":{"type":"integer"},"watchers_count":{"type":"integer"},"size":{"type":"integer"},"default_branch":{"type":"string"},"open_issues_count":{"type":"integer"},"is_template":{"type":"boolean"},"topics":{"type":"array","items":{"type":"string"}},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_pages":{"type":"boolean"},"has_downloads":{"type":"boolean"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"visibility":{"type":"string"},"pushed_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"push":{"type":"boolean"},"pull":{"type":"boolean"},"maintain":{"type":"boolean"},"triage":{"type":"boolean"}}},"template_repository":{"type":"object","allOf":[{"$ref":"#/components/schemas/repository"}]},"temp_clone_token":{"type":"string"},"delete_branch_on_merge":{"type":"boolean"},"subscribers_count":{"type":"integer"},"network_count":{"type":"integer"},"code_of_conduct":{"$ref":"#/components/schemas/code-of-conduct"},"license":{"type":"object","properties":{"key":{"type":"string"},"name":{"type":"string"},"spdx_id":{"type":"string"},"url":{"type":"string"},"node_id":{"type":"string"}}},"forks":{"type":"integer"},"open_issues":{"type":"integer"},"watchers":{"type":"integer"}}},"thread":{"type":"object","properties":{"id":{"type":"string"},"repository":{"$ref":"#/components/schemas/minimal-repository"},"subject":{"type":"object","properties":{"title":{"type":"string"},"url":{"type":"string"},"latest_comment_url":{"type":"string"},"type":{"type":"string"}}},"reason":{"type":"string"},"unread":{"type":"boolean"},"updated_at":{"type":"string"},"last_read_at":{"type":"string"},"url":{"type":"string"},"subscription_url":{"type":"string"}}},"thread-subscription":{"type":"object","properties":{"subscribed":{"type":"boolean"},"ignored":{"type":"boolean"},"reason":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"url":{"type":"string","format":"uri"},"thread_url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"}}},"organization-full":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"hooks_url":{"type":"string"},"issues_url":{"type":"string"},"members_url":{"type":"string"},"public_members_url":{"type":"string"},"avatar_url":{"type":"string"},"description":{"type":"string"},"name":{"type":"string"},"company":{"type":"string"},"blog":{"type":"string","format":"uri"},"location":{"type":"string"},"email":{"type":"string","format":"email"},"twitter_username":{"type":"string"},"is_verified":{"type":"boolean"},"has_organization_projects":{"type":"boolean"},"has_repository_projects":{"type":"boolean"},"public_repos":{"type":"integer"},"public_gists":{"type":"integer"},"followers":{"type":"integer"},"following":{"type":"integer"},"html_url":{"type":"string","format":"uri"},"created_at":{"type":"string","format":"date-time"},"type":{"type":"string"},"total_private_repos":{"type":"integer"},"owned_private_repos":{"type":"integer"},"private_gists":{"type":"integer"},"disk_usage":{"type":"integer"},"collaborators":{"type":"integer"},"billing_email":{"type":"string","format":"email"},"plan":{"type":"object","properties":{"name":{"type":"string"},"space":{"type":"integer"},"private_repos":{"type":"integer"},"filled_seats":{"type":"integer"},"seats":{"type":"integer"}}},"default_repository_permission":{"type":"string"},"members_can_create_repositories":{"type":"boolean"},"two_factor_requirement_enabled":{"type":"boolean"},"members_allowed_repository_creation_type":{"type":"string"},"members_can_create_public_repositories":{"type":"boolean"},"members_can_create_private_repositories":{"type":"boolean"},"members_can_create_internal_repositories":{"type":"boolean"},"members_can_create_pages":{"type":"boolean"},"members_can_create_public_pages":{"type":"boolean"},"members_can_create_private_pages":{"type":"boolean"},"updated_at":{"type":"string","format":"date-time"}}},"enabled-repositories":{"type":"string"},"actions-organization-permissions":{"type":"object","properties":{"enabled_repositories":{"$ref":"#/components/schemas/enabled-repositories"},"selected_repositories_url":{"type":"string"},"allowed_actions":{"$ref":"#/components/schemas/allowed-actions"},"selected_actions_url":{"$ref":"#/components/schemas/selected-actions-url"}}},"runner-groups-org":{"type":"object","properties":{"id":{"type":"number"},"name":{"type":"string"},"visibility":{"type":"string"},"default":{"type":"boolean"},"selected_repositories_url":{"type":"string"},"runners_url":{"type":"string"},"inherited":{"type":"boolean"},"inherited_allows_public_repositories":{"type":"boolean"},"allows_public_repositories":{"type":"boolean"}}},"organization-actions-secret":{"type":"object","properties":{"name":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"visibility":{"type":"string"},"selected_repositories_url":{"type":"string","format":"uri"}}},"actions-public-key":{"type":"object","properties":{"key_id":{"type":"string"},"key":{"type":"string"},"id":{"type":"integer"},"url":{"type":"string"},"title":{"type":"string"},"created_at":{"type":"string"}}},"empty-object":{"type":"object","properties":{},"additionalProperties":false},"credential-authorization":{"type":"object","properties":{"login":{"type":"string"},"credential_id":{"type":"integer"},"credential_type":{"type":"string"},"token_last_eight":{"type":"string"},"credential_authorized_at":{"type":"string","format":"date-time"},"scopes":{"type":"array","items":{"type":"string"}},"fingerprint":{"type":"string"},"credential_accessed_at":{"type":"string","format":"date-time"},"authorized_credential_id":{"type":"integer"},"authorized_credential_title":{"type":"string"},"authorized_credential_note":{"type":"string"}}},"organization-invitation":{"type":"object","properties":{"id":{"type":"integer"},"login":{"type":"string"},"email":{"type":"string"},"role":{"type":"string"},"created_at":{"type":"string"},"failed_at":{"type":"string"},"failed_reason":{"type":"string"},"inviter":{"$ref":"#/components/schemas/simple-user"},"team_count":{"type":"integer"},"node_id":{"type":"string"},"invitation_teams_url":{"type":"string"}}},"org-hook":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string","format":"uri"},"ping_url":{"type":"string","format":"uri"},"deliveries_url":{"type":"string","format":"uri"},"name":{"type":"string"},"events":{"type":"array","items":{"type":"string"}},"active":{"type":"boolean"},"config":{"type":"object","properties":{"url":{"type":"string"},"insecure_ssl":{"type":"string"},"content_type":{"type":"string"},"secret":{"type":"string"}}},"updated_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"type":{"type":"string"}}},"interaction-group":{"type":"string"},"interaction-limit-response":{"type":"object","properties":{"limit":{"$ref":"#/components/schemas/interaction-group"},"origin":{"type":"string"},"expires_at":{"type":"string","format":"date-time"}}},"interaction-expiry":{"type":"string"},"interaction-limit":{"type":"object","properties":{"limit":{"$ref":"#/components/schemas/interaction-group"},"expiry":{"$ref":"#/components/schemas/interaction-expiry"}}},"team-simple":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"members_url":{"type":"string"},"name":{"type":"string"},"description":{"type":"string"},"permission":{"type":"string"},"privacy":{"type":"string"},"html_url":{"type":"string","format":"uri"},"repositories_url":{"type":"string","format":"uri"},"slug":{"type":"string"},"ldap_dn":{"type":"string"}}},"team":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"slug":{"type":"string"},"description":{"type":"string"},"privacy":{"type":"string"},"permission":{"type":"string"},"permissions":{"type":"object","properties":{"pull":{"type":"boolean"},"triage":{"type":"boolean"},"push":{"type":"boolean"},"maintain":{"type":"boolean"},"admin":{"type":"boolean"}}},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"members_url":{"type":"string"},"repositories_url":{"type":"string","format":"uri"},"parent":{"allOf":[{"$ref":"#/components/schemas/team-simple"}]}}},"org-membership":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"state":{"type":"string"},"role":{"type":"string"},"organization_url":{"type":"string","format":"uri"},"organization":{"$ref":"#/components/schemas/organization-simple"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"permissions":{"type":"object","properties":{"can_create_repository":{"type":"boolean"}}}}},"migration":{"type":"object","properties":{"id":{"type":"integer"},"owner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"guid":{"type":"string"},"state":{"type":"string"},"lock_repositories":{"type":"boolean"},"exclude_attachments":{"type":"boolean"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/repository"}},"url":{"type":"string","format":"uri"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"node_id":{"type":"string"},"archive_url":{"type":"string","format":"uri"},"exclude":{"type":"array","items":{}}}},"package":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"},"package_type":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"version_count":{"type":"integer"},"visibility":{"type":"string"},"owner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"repository":{"allOf":[{"$ref":"#/components/schemas/minimal-repository"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"package-version":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"},"url":{"type":"string"},"package_html_url":{"type":"string"},"html_url":{"type":"string"},"license":{"type":"string"},"description":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"deleted_at":{"type":"string","format":"date-time"},"metadata":{"type":"object","properties":{"package_type":{"type":"string"},"container":{"type":"object","properties":{"tags":{"type":"array"}}},"docker":{"type":"object","properties":{"tag":{"type":"array"}}}}}}},"project":{"type":"object","properties":{"owner_url":{"type":"string","format":"uri"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"columns_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"body":{"type":"string"},"number":{"type":"integer"},"state":{"type":"string"},"creator":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"organization_permission":{"type":"string"},"private":{"type":"boolean"}}},"group-mapping":{"type":"object","properties":{"groups":{"type":"array","items":{"type":"object","required":["group_id","group_name","group_description"],"properties":{"group_id":{"description":"The ID of the group","example":"111a1a11-aaa1-1aaa-11a1-a1a1a1a1a1aa","type":"string"},"group_name":{"description":"The name of the group","example":"saml-azuread-test","type":"string"},"group_description":{"description":"a description of the group","example":"A group of Developers working on AzureAD SAML SSO","type":"string"},"status":{"description":"synchronization status for this group mapping","example":"unsynced","type":"string"},"synced_at":{"description":"the time of the last sync for this group-mapping","example":"2019-06-03 22:27:15:000 -700","type":"string","nullable":true}}}}}},"team-full":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"name":{"type":"string"},"slug":{"type":"string"},"description":{"type":"string"},"privacy":{"type":"string"},"permission":{"type":"string"},"members_url":{"type":"string"},"repositories_url":{"type":"string","format":"uri"},"parent":{"allOf":[{"$ref":"#/components/schemas/team-simple"}]},"members_count":{"type":"integer"},"repos_count":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"organization":{"$ref":"#/components/schemas/organization-full"},"ldap_dn":{"type":"string"}}},"team-discussion":{"type":"object","properties":{"author":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"body":{"type":"string"},"body_html":{"type":"string"},"body_version":{"type":"string"},"comments_count":{"type":"integer"},"comments_url":{"type":"string","format":"uri"},"created_at":{"type":"string","format":"date-time"},"last_edited_at":{"type":"string","format":"date-time"},"html_url":{"type":"string","format":"uri"},"node_id":{"type":"string"},"number":{"type":"integer"},"pinned":{"type":"boolean"},"private":{"type":"boolean"},"team_url":{"type":"string","format":"uri"},"title":{"type":"string"},"updated_at":{"type":"string","format":"date-time"},"url":{"type":"string","format":"uri"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"}}},"team-discussion-comment":{"type":"object","properties":{"author":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"body":{"type":"string"},"body_html":{"type":"string"},"body_version":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"last_edited_at":{"type":"string","format":"date-time"},"discussion_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"node_id":{"type":"string"},"number":{"type":"integer"},"updated_at":{"type":"string","format":"date-time"},"url":{"type":"string","format":"uri"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"}}},"reaction":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"content":{"type":"string"},"created_at":{"type":"string","format":"date-time"}}},"team-membership":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"role":{"type":"string"},"state":{"type":"string"}}},"team-project":{"type":"object","properties":{"owner_url":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"columns_url":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"body":{"type":"string"},"number":{"type":"integer"},"state":{"type":"string"},"creator":{"$ref":"#/components/schemas/simple-user"},"created_at":{"type":"string"},"updated_at":{"type":"string"},"organization_permission":{"type":"string"},"private":{"type":"boolean"},"permissions":{"type":"object","properties":{"read":{"type":"boolean"},"write":{"type":"boolean"},"admin":{"type":"boolean"}}}}},"team-repository":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"full_name":{"type":"string"},"license":{"allOf":[{"$ref":"#/components/schemas/license-simple"}]},"forks":{"type":"integer"},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"pull":{"type":"boolean"},"triage":{"type":"boolean"},"push":{"type":"boolean"},"maintain":{"type":"boolean"}}},"owner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"private":{"type":"boolean"},"html_url":{"type":"string","format":"uri"},"description":{"type":"string"},"fork":{"type":"boolean"},"url":{"type":"string","format":"uri"},"archive_url":{"type":"string"},"assignees_url":{"type":"string"},"blobs_url":{"type":"string"},"branches_url":{"type":"string"},"collaborators_url":{"type":"string"},"comments_url":{"type":"string"},"commits_url":{"type":"string"},"compare_url":{"type":"string"},"contents_url":{"type":"string"},"contributors_url":{"type":"string","format":"uri"},"deployments_url":{"type":"string","format":"uri"},"downloads_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"forks_url":{"type":"string","format":"uri"},"git_commits_url":{"type":"string"},"git_refs_url":{"type":"string"},"git_tags_url":{"type":"string"},"git_url":{"type":"string"},"issue_comment_url":{"type":"string"},"issue_events_url":{"type":"string"},"issues_url":{"type":"string"},"keys_url":{"type":"string"},"labels_url":{"type":"string"},"languages_url":{"type":"string","format":"uri"},"merges_url":{"type":"string","format":"uri"},"milestones_url":{"type":"string"},"notifications_url":{"type":"string"},"pulls_url":{"type":"string"},"releases_url":{"type":"string"},"ssh_url":{"type":"string"},"stargazers_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string"},"subscribers_url":{"type":"string","format":"uri"},"subscription_url":{"type":"string","format":"uri"},"tags_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"trees_url":{"type":"string"},"clone_url":{"type":"string"},"mirror_url":{"type":"string","format":"uri"},"hooks_url":{"type":"string","format":"uri"},"svn_url":{"type":"string","format":"uri"},"homepage":{"type":"string","format":"uri"},"language":{"type":"string"},"forks_count":{"type":"integer"},"stargazers_count":{"type":"integer"},"watchers_count":{"type":"integer"},"size":{"type":"integer"},"default_branch":{"type":"string"},"open_issues_count":{"type":"integer"},"is_template":{"type":"boolean"},"topics":{"type":"array","items":{"type":"string"}},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_pages":{"type":"boolean"},"has_downloads":{"type":"boolean"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"visibility":{"type":"string"},"pushed_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"allow_rebase_merge":{"type":"boolean"},"template_repository":{"type":"object","allOf":[{"$ref":"#/components/schemas/repository"}]},"temp_clone_token":{"type":"string"},"allow_squash_merge":{"type":"boolean"},"allow_auto_merge":{"type":"boolean"},"delete_branch_on_merge":{"type":"boolean"},"allow_merge_commit":{"type":"boolean"},"subscribers_count":{"type":"integer"},"network_count":{"type":"integer"},"open_issues":{"type":"integer"},"watchers":{"type":"integer"},"master_branch":{"type":"string"}}},"project-card":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"note":{"type":"string"},"creator":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"archived":{"type":"boolean"},"column_name":{"type":"string"},"project_id":{"type":"string"},"column_url":{"type":"string","format":"uri"},"content_url":{"type":"string","format":"uri"},"project_url":{"type":"string","format":"uri"}}},"project-column":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"project_url":{"type":"string","format":"uri"},"cards_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"repository-collaborator-permission":{"type":"object","properties":{"permission":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]}}},"rate-limit":{"type":"object","properties":{"limit":{"type":"integer"},"remaining":{"type":"integer"},"reset":{"type":"integer"},"used":{"type":"integer"}}},"rate-limit-overview":{"type":"object","properties":{"resources":{"type":"object","properties":{"core":{"$ref":"#/components/schemas/rate-limit"},"graphql":{"$ref":"#/components/schemas/rate-limit"},"search":{"$ref":"#/components/schemas/rate-limit"},"source_import":{"$ref":"#/components/schemas/rate-limit"},"integration_manifest":{"$ref":"#/components/schemas/rate-limit"},"code_scanning_upload":{"$ref":"#/components/schemas/rate-limit"}}},"rate":{"$ref":"#/components/schemas/rate-limit"}}},"code-of-conduct-simple":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"key":{"type":"string"},"name":{"type":"string"},"html_url":{"type":"string","format":"uri"}}},"full-repository":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"full_name":{"type":"string"},"owner":{"$ref":"#/components/schemas/simple-user"},"private":{"type":"boolean"},"html_url":{"type":"string","format":"uri"},"description":{"type":"string"},"fork":{"type":"boolean"},"url":{"type":"string","format":"uri"},"archive_url":{"type":"string"},"assignees_url":{"type":"string"},"blobs_url":{"type":"string"},"branches_url":{"type":"string"},"collaborators_url":{"type":"string"},"comments_url":{"type":"string"},"commits_url":{"type":"string"},"compare_url":{"type":"string"},"contents_url":{"type":"string"},"contributors_url":{"type":"string","format":"uri"},"deployments_url":{"type":"string","format":"uri"},"downloads_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"forks_url":{"type":"string","format":"uri"},"git_commits_url":{"type":"string"},"git_refs_url":{"type":"string"},"git_tags_url":{"type":"string"},"git_url":{"type":"string"},"issue_comment_url":{"type":"string"},"issue_events_url":{"type":"string"},"issues_url":{"type":"string"},"keys_url":{"type":"string"},"labels_url":{"type":"string"},"languages_url":{"type":"string","format":"uri"},"merges_url":{"type":"string","format":"uri"},"milestones_url":{"type":"string"},"notifications_url":{"type":"string"},"pulls_url":{"type":"string"},"releases_url":{"type":"string"},"ssh_url":{"type":"string"},"stargazers_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string"},"subscribers_url":{"type":"string","format":"uri"},"subscription_url":{"type":"string","format":"uri"},"tags_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"trees_url":{"type":"string"},"clone_url":{"type":"string"},"mirror_url":{"type":"string","format":"uri"},"hooks_url":{"type":"string","format":"uri"},"svn_url":{"type":"string","format":"uri"},"homepage":{"type":"string","format":"uri"},"language":{"type":"string"},"forks_count":{"type":"integer"},"stargazers_count":{"type":"integer"},"watchers_count":{"type":"integer"},"size":{"type":"integer"},"default_branch":{"type":"string"},"open_issues_count":{"type":"integer"},"is_template":{"type":"boolean"},"topics":{"type":"array","items":{"type":"string"}},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_pages":{"type":"boolean"},"has_downloads":{"type":"boolean"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"visibility":{"type":"string"},"pushed_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"pull":{"type":"boolean"},"push":{"type":"boolean"}}},"allow_rebase_merge":{"type":"boolean"},"template_repository":{"type":"object","allOf":[{"$ref":"#/components/schemas/repository"}]},"temp_clone_token":{"type":"string"},"allow_squash_merge":{"type":"boolean"},"allow_auto_merge":{"type":"boolean"},"delete_branch_on_merge":{"type":"boolean"},"allow_merge_commit":{"type":"boolean"},"subscribers_count":{"type":"integer"},"network_count":{"type":"integer"},"license":{"allOf":[{"$ref":"#/components/schemas/license-simple"}]},"organization":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"parent":{"$ref":"#/components/schemas/repository"},"source":{"$ref":"#/components/schemas/repository"},"forks":{"type":"integer"},"master_branch":{"type":"string"},"open_issues":{"type":"integer"},"watchers":{"type":"integer"},"anonymous_access_enabled":{"type":"boolean"},"code_of_conduct":{"$ref":"#/components/schemas/code-of-conduct-simple"},"security_and_analysis":{"type":"object","properties":{"advanced_security":{"type":"object","properties":{"status":{"type":"string"}}},"secret_scanning":{"type":"object","properties":{"status":{"type":"string"}}}}}}},"artifact":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"size_in_bytes":{"type":"integer"},"url":{"type":"string"},"archive_download_url":{"type":"string"},"expired":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"},"expires_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"job":{"type":"object","properties":{"id":{"type":"integer"},"run_id":{"type":"integer"},"run_url":{"type":"string"},"node_id":{"type":"string"},"head_sha":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"status":{"type":"string"},"conclusion":{"type":"string"},"started_at":{"format":"date-time","type":"string"},"completed_at":{"format":"date-time","type":"string"},"name":{"type":"string"},"steps":{"type":"array","items":{"type":"object","required":["name","status","conclusion","number"],"properties":{"status":{"description":"The phase of the lifecycle that the job is currently in.","example":"queued","type":"string","enum":["queued","in_progress","completed"]},"conclusion":{"description":"The outcome of the job.","example":"success","type":"string","nullable":true},"name":{"description":"The name of the job.","example":"test-coverage","type":"string"},"number":{"type":"integer","example":1},"started_at":{"description":"The time that the step started, in ISO 8601 format.","example":"2019-08-08T08:00:00-07:00","format":"date-time","type":"string","nullable":true},"completed_at":{"description":"The time that the job finished, in ISO 8601 format.","example":"2019-08-08T08:00:00-07:00","format":"date-time","type":"string","nullable":true}}}},"check_run_url":{"type":"string"}}},"actions-enabled":{"type":"boolean"},"actions-repository-permissions":{"type":"object","properties":{"enabled":{"$ref":"#/components/schemas/actions-enabled"},"allowed_actions":{"$ref":"#/components/schemas/allowed-actions"},"selected_actions_url":{"$ref":"#/components/schemas/selected-actions-url"}}},"pull-request-minimal":{"type":"object","properties":{"id":{"type":"integer"},"number":{"type":"integer"},"url":{"type":"string"},"head":{"type":"object","properties":{"ref":{"type":"string"},"sha":{"type":"string"},"repo":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string"},"name":{"type":"string"}}}}},"base":{"type":"object","properties":{"ref":{"type":"string"},"sha":{"type":"string"},"repo":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string"},"name":{"type":"string"}}}}}}},"simple-commit":{"type":"object","properties":{"id":{"type":"string"},"tree_id":{"type":"string"},"message":{"type":"string"},"timestamp":{"type":"string","format":"date-time"},"author":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"}}},"committer":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"}}}}},"workflow-run":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"},"node_id":{"type":"string"},"check_suite_id":{"type":"integer"},"check_suite_node_id":{"type":"string"},"head_branch":{"type":"string"},"head_sha":{"type":"string"},"run_number":{"type":"integer"},"event":{"type":"string"},"status":{"type":"string"},"conclusion":{"type":"string"},"workflow_id":{"type":"integer"},"url":{"type":"string"},"html_url":{"type":"string"},"pull_requests":{"type":"array","items":{"$ref":"#/components/schemas/pull-request-minimal"}},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"jobs_url":{"type":"string"},"logs_url":{"type":"string"},"check_suite_url":{"type":"string"},"artifacts_url":{"type":"string"},"cancel_url":{"type":"string"},"rerun_url":{"type":"string"},"workflow_url":{"type":"string"},"head_commit":{"allOf":[{"$ref":"#/components/schemas/simple-commit"}]},"repository":{"$ref":"#/components/schemas/minimal-repository"},"head_repository":{"$ref":"#/components/schemas/minimal-repository"},"head_repository_id":{"type":"integer"}}},"environment-approvals":{"type":"object","properties":{"environments":{"type":"array","items":{"type":"object","properties":{"id":{"description":"The id of the environment.","example":56780428,"type":"integer"},"node_id":{"type":"string","example":"MDExOkVudmlyb25tZW50NTY3ODA0Mjg="},"name":{"description":"The name of the environment.","example":"staging","type":"string"},"url":{"type":"string","example":"https://api.github.com/repos/github/hello-world/environments/staging"},"html_url":{"type":"string","example":"https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"},"created_at":{"description":"The time that the environment was created, in ISO 8601 format.","example":"2020-11-23T22:00:40Z","format":"date-time","type":"string"},"updated_at":{"description":"The time that the environment was last updated, in ISO 8601 format.","example":"2020-11-23T22:00:40Z","format":"date-time","type":"string"}}}},"state":{"type":"string"},"user":{"$ref":"#/components/schemas/simple-user"},"comment":{"type":"string"}}},"deployment-reviewer-type":{"type":"string"},"pending-deployment":{"type":"object","properties":{"environment":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"}}},"wait_timer":{"type":"integer"},"wait_timer_started_at":{"format":"date-time","type":"string"},"current_user_can_approve":{"type":"boolean"},"reviewers":{"type":"array","items":{"type":"object","properties":{"type":{"$ref":"#/components/schemas/deployment-reviewer-type"},"reviewer":{"anyOf":[{"$ref":"#/components/schemas/simple-user"},{"$ref":"#/components/schemas/team"}]}}}}}},"deployment":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"sha":{"type":"string"},"ref":{"type":"string"},"task":{"type":"string"},"payload":{"oneOf":[{"type":"object","additionalProperties":true},{"type":"string"}]},"original_environment":{"type":"string"},"environment":{"type":"string"},"description":{"type":"string"},"creator":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"statuses_url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"},"transient_environment":{"type":"boolean"},"production_environment":{"type":"boolean"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]}}},"workflow-run-usage":{"type":"object","properties":{"billable":{"type":"object","properties":{"UBUNTU":{"type":"object","properties":{"total_ms":{"type":"integer"},"jobs":{"type":"integer"}}},"MACOS":{"type":"object","properties":{"total_ms":{"type":"integer"},"jobs":{"type":"integer"}}},"WINDOWS":{"type":"object","properties":{"total_ms":{"type":"integer"},"jobs":{"type":"integer"}}}}},"run_duration_ms":{"type":"integer"}}},"actions-secret":{"type":"object","properties":{"name":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"workflow":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"path":{"type":"string"},"state":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"url":{"type":"string"},"html_url":{"type":"string"},"badge_url":{"type":"string"},"deleted_at":{"type":"string","format":"date-time"}}},"workflow-usage":{"type":"object","properties":{"billable":{"type":"object","properties":{"UBUNTU":{"type":"object","properties":{"total_ms":{"type":"integer"}}},"MACOS":{"type":"object","properties":{"total_ms":{"type":"integer"}}},"WINDOWS":{"type":"object","properties":{"total_ms":{"type":"integer"}}}}}}},"autolink":{"type":"object","properties":{"id":{"type":"integer"},"key_prefix":{"type":"string"},"url_template":{"type":"string"}}},"protected-branch-admin-enforced":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"enabled":{"type":"boolean"}}},"protected-branch-pull-request-review":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"dismissal_restrictions":{"type":"object","properties":{"users":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"teams":{"type":"array","items":{"$ref":"#/components/schemas/team"}},"url":{"type":"string"},"users_url":{"type":"string"},"teams_url":{"type":"string"}}},"dismiss_stale_reviews":{"type":"boolean"},"require_code_owner_reviews":{"type":"boolean"},"required_approving_review_count":{"type":"integer"}}},"branch-restriction-policy":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"users_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"apps_url":{"type":"string","format":"uri"},"users":{"type":"array","items":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"avatar_url":{"type":"string"},"gravatar_id":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"followers_url":{"type":"string"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string"},"organizations_url":{"type":"string"},"repos_url":{"type":"string"},"events_url":{"type":"string"},"received_events_url":{"type":"string"},"type":{"type":"string"},"site_admin":{"type":"boolean"}}}},"teams":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"name":{"type":"string"},"slug":{"type":"string"},"description":{"type":"string","nullable":true},"privacy":{"type":"string"},"permission":{"type":"string"},"members_url":{"type":"string"},"repositories_url":{"type":"string"},"parent":{"type":"string","nullable":true}}}},"apps":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer"},"slug":{"type":"string"},"node_id":{"type":"string"},"owner":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"repos_url":{"type":"string"},"events_url":{"type":"string"},"hooks_url":{"type":"string"},"issues_url":{"type":"string"},"members_url":{"type":"string"},"public_members_url":{"type":"string"},"avatar_url":{"type":"string"},"description":{"type":"string"},"gravatar_id":{"type":"string","example":"\\"\\""},"html_url":{"type":"string","example":"\\"https://github.com/testorg-ea8ec76d71c3af4b\\""},"followers_url":{"type":"string","example":"\\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers\\""},"following_url":{"type":"string","example":"\\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}\\""},"gists_url":{"type":"string","example":"\\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}\\""},"starred_url":{"type":"string","example":"\\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}\\""},"subscriptions_url":{"type":"string","example":"\\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions\\""},"organizations_url":{"type":"string","example":"\\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs\\""},"received_events_url":{"type":"string","example":"\\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events\\""},"type":{"type":"string","example":"\\"Organization\\""},"site_admin":{"type":"boolean","example":false}}},"name":{"type":"string"},"description":{"type":"string"},"external_url":{"type":"string"},"html_url":{"type":"string"},"created_at":{"type":"string"},"updated_at":{"type":"string"},"permissions":{"type":"object","properties":{"metadata":{"type":"string"},"contents":{"type":"string"},"issues":{"type":"string"},"single_file":{"type":"string"}}},"events":{"type":"array","items":{"type":"string"}}}}}}},"branch-protection":{"type":"object","properties":{"url":{"type":"string"},"enabled":{"type":"boolean"},"required_status_checks":{"type":"object","properties":{"url":{"type":"string"},"enforcement_level":{"type":"string"},"contexts":{"type":"array","items":{"type":"string"}},"contexts_url":{"type":"string"},"strict":{"type":"boolean"}}},"enforce_admins":{"$ref":"#/components/schemas/protected-branch-admin-enforced"},"required_pull_request_reviews":{"$ref":"#/components/schemas/protected-branch-pull-request-review"},"restrictions":{"$ref":"#/components/schemas/branch-restriction-policy"},"required_linear_history":{"type":"object","properties":{"enabled":{"type":"boolean"}}},"allow_force_pushes":{"type":"object","properties":{"enabled":{"type":"boolean"}}},"allow_deletions":{"type":"object","properties":{"enabled":{"type":"boolean"}}},"required_conversation_resolution":{"type":"object","properties":{"enabled":{"type":"boolean"}}},"name":{"type":"string"},"protection_url":{"type":"string"},"required_signatures":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"enabled":{"type":"boolean"}}}}},"short-branch":{"type":"object","properties":{"name":{"type":"string"},"commit":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string","format":"uri"}}},"protected":{"type":"boolean"},"protection":{"$ref":"#/components/schemas/branch-protection"},"protection_url":{"type":"string","format":"uri"}}},"git-user":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"},"date":{"type":"string"}}},"verification":{"type":"object","properties":{"verified":{"type":"boolean"},"reason":{"type":"string"},"payload":{"type":"string"},"signature":{"type":"string"}}},"commit":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"sha":{"type":"string"},"node_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"comments_url":{"type":"string","format":"uri"},"commit":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"author":{"allOf":[{"$ref":"#/components/schemas/git-user"}]},"committer":{"allOf":[{"$ref":"#/components/schemas/git-user"}]},"message":{"type":"string"},"comment_count":{"type":"integer"},"tree":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string","format":"uri"}}},"verification":{"$ref":"#/components/schemas/verification"}}},"author":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"committer":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"parents":{"type":"array","items":{"type":"object","properties":{"sha":{"type":"string","example":"7638417db6d59f3c431d3e1f261cc637155684cd"},"url":{"type":"string","format":"uri","example":"https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"},"html_url":{"type":"string","format":"uri","example":"https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"}},"required":["sha","url"]}},"stats":{"type":"object","properties":{"additions":{"type":"integer"},"deletions":{"type":"integer"},"total":{"type":"integer"}}},"files":{"type":"array","items":{"type":"object","properties":{"filename":{"type":"string"},"additions":{"type":"integer"},"deletions":{"type":"integer"},"changes":{"type":"integer"},"status":{"type":"string"},"raw_url":{"type":"string"},"blob_url":{"type":"string"},"patch":{"type":"string"},"sha":{"type":"string","example":"\\"1e8e60ce9733d5283f7836fa602b6365a66b2567\\""},"contents_url":{"type":"string","example":"\\"https://api.github.com/repos/owner-3d68404b07d25daeb2d4a6bf/AAA_Public_Repo/contents/geometry.js?ref=c3956841a7cb7e8ba4a6fd923568d86958f01573\\""},"previous_filename":{"type":"string","example":"\\"subdir/before_name.txt\\""}}}}}},"branch-with-protection":{"type":"object","properties":{"name":{"type":"string"},"commit":{"$ref":"#/components/schemas/commit"},"_links":{"type":"object","properties":{"html":{"type":"string"},"self":{"type":"string","format":"uri"}}},"protected":{"type":"boolean"},"protection":{"$ref":"#/components/schemas/branch-protection"},"protection_url":{"type":"string","format":"uri"},"pattern":{"type":"string"},"required_approving_review_count":{"type":"integer"}}},"status-check-policy":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"strict":{"type":"boolean"},"contexts":{"type":"array","items":{"type":"string"}},"contexts_url":{"type":"string","format":"uri"}}},"protected-branch":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"required_status_checks":{"$ref":"#/components/schemas/status-check-policy"},"required_pull_request_reviews":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"dismiss_stale_reviews":{"type":"boolean"},"require_code_owner_reviews":{"type":"boolean"},"required_approving_review_count":{"type":"integer"},"dismissal_restrictions":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"users_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"users":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"teams":{"type":"array","items":{"$ref":"#/components/schemas/team"}}}}}},"required_signatures":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"enabled":{"type":"boolean"}}},"enforce_admins":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"enabled":{"type":"boolean"}},"additionalProperties":false},"required_linear_history":{"type":"object","properties":{"enabled":{"type":"boolean"}},"additionalProperties":false},"allow_force_pushes":{"type":"object","properties":{"enabled":{"type":"boolean"}},"additionalProperties":false},"allow_deletions":{"type":"object","properties":{"enabled":{"type":"boolean"}},"additionalProperties":false},"restrictions":{"$ref":"#/components/schemas/branch-restriction-policy"},"required_conversation_resolution":{"type":"object","properties":{"enabled":{"type":"boolean"}},"additionalProperties":false}}},"deployment-simple":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"task":{"type":"string"},"original_environment":{"type":"string"},"environment":{"type":"string"},"description":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"statuses_url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"},"transient_environment":{"type":"boolean"},"production_environment":{"type":"boolean"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]}}},"check-run":{"type":"object","properties":{"id":{"type":"integer"},"head_sha":{"type":"string"},"node_id":{"type":"string"},"external_id":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"details_url":{"type":"string"},"status":{"type":"string"},"conclusion":{"type":"string"},"started_at":{"type":"string","format":"date-time"},"completed_at":{"type":"string","format":"date-time"},"output":{"type":"object","properties":{"title":{"type":"string"},"summary":{"type":"string"},"text":{"type":"string"},"annotations_count":{"type":"integer"},"annotations_url":{"type":"string","format":"uri"}}},"name":{"type":"string"},"check_suite":{"type":"object","properties":{"id":{"type":"integer"}}},"app":{"allOf":[{"$ref":"#/components/schemas/integration"}]},"pull_requests":{"items":{"$ref":"#/components/schemas/pull-request-minimal"}},"deployment":{"$ref":"#/components/schemas/deployment-simple"}}},"check-annotation":{"type":"object","properties":{"path":{"type":"string"},"start_line":{"type":"integer"},"end_line":{"type":"integer"},"start_column":{"type":"integer"},"end_column":{"type":"integer"},"annotation_level":{"type":"string"},"title":{"type":"string"},"message":{"type":"string"},"raw_details":{"type":"string"},"blob_href":{"type":"string"}}},"check-suite":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"head_branch":{"type":"string"},"head_sha":{"type":"string"},"status":{"type":"string"},"conclusion":{"type":"string"},"url":{"type":"string"},"before":{"type":"string"},"after":{"type":"string"},"pull_requests":{"type":"array","items":{"$ref":"#/components/schemas/pull-request-minimal"}},"app":{"allOf":[{"$ref":"#/components/schemas/integration"}]},"repository":{"$ref":"#/components/schemas/minimal-repository"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"head_commit":{"$ref":"#/components/schemas/simple-commit"},"latest_check_runs_count":{"type":"integer"},"check_runs_url":{"type":"string"}}},"check-suite-preference":{"type":"object","properties":{"preferences":{"type":"object","properties":{"auto_trigger_checks":{"type":"array","items":{"type":"object","properties":{"app_id":{"type":"integer"},"setting":{"type":"boolean"}},"required":["app_id","setting"]}}}},"repository":{"$ref":"#/components/schemas/minimal-repository"}}},"code-scanning-analysis-tool-name":{"type":"string"},"code-scanning-analysis-tool-guid":{"type":"string"},"code-scanning-ref":{"type":"string"},"code-scanning-alert-state":{"type":"string"},"alert-number":{"type":"integer"},"alert-created-at":{"type":"string","format":"date-time"},"alert-url":{"type":"string","format":"uri"},"alert-html-url":{"type":"string","format":"uri"},"alert-instances-url":{"type":"string","format":"uri"},"code-scanning-alert-dismissed-at":{"type":"string","format":"date-time"},"code-scanning-alert-dismissed-reason":{"type":"string"},"code-scanning-alert-rule-summary":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"severity":{"type":"string"},"description":{"type":"string"}}},"code-scanning-analysis-tool-version":{"type":"string"},"code-scanning-analysis-tool":{"type":"object","properties":{"name":{"$ref":"#/components/schemas/code-scanning-analysis-tool-name"},"version":{"$ref":"#/components/schemas/code-scanning-analysis-tool-version"},"guid":{"$ref":"#/components/schemas/code-scanning-analysis-tool-guid"}}},"code-scanning-analysis-analysis-key":{"type":"string"},"code-scanning-alert-environment":{"type":"string"},"code-scanning-alert-location":{"type":"object","properties":{"path":{"type":"string"},"start_line":{"type":"integer"},"end_line":{"type":"integer"},"start_column":{"type":"integer"},"end_column":{"type":"integer"}}},"code-scanning-alert-classification":{"type":"string"},"code-scanning-alert-instance":{"type":"object","properties":{"ref":{"$ref":"#/components/schemas/code-scanning-ref"},"analysis_key":{"$ref":"#/components/schemas/code-scanning-analysis-analysis-key"},"environment":{"$ref":"#/components/schemas/code-scanning-alert-environment"},"state":{"$ref":"#/components/schemas/code-scanning-alert-state"},"commit_sha":{"type":"string"},"message":{"type":"object","properties":{"text":{"type":"string"}}},"location":{"$ref":"#/components/schemas/code-scanning-alert-location"},"html_url":{"type":"string"},"classifications":{"type":"array","items":{"$ref":"#/components/schemas/code-scanning-alert-classification"}}}},"code-scanning-alert-items":{"type":"object","properties":{"number":{"$ref":"#/components/schemas/alert-number"},"created_at":{"$ref":"#/components/schemas/alert-created-at"},"url":{"$ref":"#/components/schemas/alert-url"},"html_url":{"$ref":"#/components/schemas/alert-html-url"},"instances_url":{"$ref":"#/components/schemas/alert-instances-url"},"state":{"$ref":"#/components/schemas/code-scanning-alert-state"},"dismissed_by":{"$ref":"#/components/schemas/simple-user"},"dismissed_at":{"$ref":"#/components/schemas/code-scanning-alert-dismissed-at"},"dismissed_reason":{"$ref":"#/components/schemas/code-scanning-alert-dismissed-reason"},"rule":{"$ref":"#/components/schemas/code-scanning-alert-rule-summary"},"tool":{"$ref":"#/components/schemas/code-scanning-analysis-tool"},"most_recent_instance":{"$ref":"#/components/schemas/code-scanning-alert-instance"}}},"code-scanning-alert-rule":{"type":"object","properties":{"id":{"type":"string"},"name":{"type":"string"},"severity":{"type":"string"},"security_severity_level":{"type":"string"},"description":{"type":"string"},"full_description":{"type":"string"},"tags":{"type":"array","items":{"type":"string"}},"help":{"type":"string"}}},"code-scanning-alert":{"type":"object","properties":{"number":{"$ref":"#/components/schemas/alert-number"},"created_at":{"$ref":"#/components/schemas/alert-created-at"},"url":{"$ref":"#/components/schemas/alert-url"},"html_url":{"$ref":"#/components/schemas/alert-html-url"},"instances":{},"instances_url":{"$ref":"#/components/schemas/alert-instances-url"},"state":{"$ref":"#/components/schemas/code-scanning-alert-state"},"dismissed_by":{"$ref":"#/components/schemas/simple-user"},"dismissed_at":{"$ref":"#/components/schemas/code-scanning-alert-dismissed-at"},"dismissed_reason":{"$ref":"#/components/schemas/code-scanning-alert-dismissed-reason"},"rule":{"$ref":"#/components/schemas/code-scanning-alert-rule"},"tool":{"$ref":"#/components/schemas/code-scanning-analysis-tool"},"most_recent_instance":{"$ref":"#/components/schemas/code-scanning-alert-instance"}}},"code-scanning-alert-set-state":{"type":"string"},"code-scanning-analysis-sarif-id":{"type":"string"},"code-scanning-analysis-commit-sha":{"type":"string"},"code-scanning-analysis-environment":{"type":"string"},"code-scanning-analysis-category":{"type":"string"},"code-scanning-analysis-created-at":{"type":"string","format":"date-time"},"code-scanning-analysis-url":{"type":"string","format":"uri"},"code-scanning-analysis":{"type":"object","properties":{"ref":{"$ref":"#/components/schemas/code-scanning-ref"},"commit_sha":{"$ref":"#/components/schemas/code-scanning-analysis-commit-sha"},"analysis_key":{"$ref":"#/components/schemas/code-scanning-analysis-analysis-key"},"environment":{"$ref":"#/components/schemas/code-scanning-analysis-environment"},"category":{"$ref":"#/components/schemas/code-scanning-analysis-category"},"error":{"type":"string"},"created_at":{"$ref":"#/components/schemas/code-scanning-analysis-created-at"},"results_count":{"type":"integer"},"rules_count":{"type":"integer"},"id":{"type":"integer"},"url":{"$ref":"#/components/schemas/code-scanning-analysis-url"},"sarif_id":{"$ref":"#/components/schemas/code-scanning-analysis-sarif-id"},"tool":{"$ref":"#/components/schemas/code-scanning-analysis-tool"},"deletable":{"type":"boolean"},"warning":{"type":"string"},"tool_name":{"type":"string"}}},"code-scanning-analysis-deletion":{"type":"object","properties":{"next_analysis_url":{"type":"string","format":"uri"},"confirm_delete_url":{"type":"string","format":"uri"}}},"code-scanning-analysis-sarif-file":{"type":"string"},"code-scanning-sarifs-receipt":{"type":"object","properties":{"id":{"$ref":"#/components/schemas/code-scanning-analysis-sarif-id"},"url":{"type":"string","format":"uri"}}},"code-scanning-sarifs-status":{"type":"object","properties":{"processing_status":{"type":"string"},"analyses_url":{"type":"string","format":"uri"}}},"collaborator":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"email":{"type":"string"},"name":{"type":"string"},"node_id":{"type":"string"},"avatar_url":{"type":"string","format":"uri"},"gravatar_id":{"type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"organizations_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"received_events_url":{"type":"string","format":"uri"},"type":{"type":"string"},"site_admin":{"type":"boolean"},"permissions":{"type":"object","properties":{"pull":{"type":"boolean"},"push":{"type":"boolean"},"admin":{"type":"boolean"}}}}},"repository-invitation":{"type":"object","properties":{"id":{"type":"integer"},"repository":{"$ref":"#/components/schemas/minimal-repository"},"invitee":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"inviter":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"permissions":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"expired":{"type":"boolean"},"url":{"type":"string"},"html_url":{"type":"string"},"node_id":{"type":"string"}}},"commit-comment":{"type":"object","properties":{"html_url":{"type":"string","format":"uri"},"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"body":{"type":"string"},"path":{"type":"string"},"position":{"type":"integer"},"line":{"type":"integer"},"commit_id":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"author_association":{"$ref":"#/components/schemas/author_association"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"}}},"branch-short":{"type":"object","properties":{"name":{"type":"string"},"commit":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string"}}},"protected":{"type":"boolean"}}},"link":{"type":"object","properties":{"href":{"type":"string"}}},"auto_merge":{"type":"object","properties":{"enabled_by":{"$ref":"#/components/schemas/simple-user"},"merge_method":{"type":"string"},"commit_title":{"type":"string"},"commit_message":{"type":"string"}}},"pull-request-simple":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"diff_url":{"type":"string","format":"uri"},"patch_url":{"type":"string","format":"uri"},"issue_url":{"type":"string","format":"uri"},"commits_url":{"type":"string","format":"uri"},"review_comments_url":{"type":"string","format":"uri"},"review_comment_url":{"type":"string"},"comments_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string","format":"uri"},"number":{"type":"integer"},"state":{"type":"string"},"locked":{"type":"boolean"},"title":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"body":{"type":"string"},"labels":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"node_id":{"type":"string"},"url":{"type":"string"},"name":{"type":"string"},"description":{"type":"string"},"color":{"type":"string"},"default":{"type":"boolean"}}}},"milestone":{"allOf":[{"$ref":"#/components/schemas/milestone"}]},"active_lock_reason":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"closed_at":{"type":"string","format":"date-time"},"merged_at":{"type":"string","format":"date-time"},"merge_commit_sha":{"type":"string"},"assignee":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"assignees":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"requested_reviewers":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"requested_teams":{"type":"array","items":{"$ref":"#/components/schemas/team"}},"head":{"type":"object","properties":{"label":{"type":"string"},"ref":{"type":"string"},"repo":{"$ref":"#/components/schemas/repository"},"sha":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]}}},"base":{"type":"object","properties":{"label":{"type":"string"},"ref":{"type":"string"},"repo":{"$ref":"#/components/schemas/repository"},"sha":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]}}},"_links":{"type":"object","properties":{"comments":{"$ref":"#/components/schemas/link"},"commits":{"$ref":"#/components/schemas/link"},"statuses":{"$ref":"#/components/schemas/link"},"html":{"$ref":"#/components/schemas/link"},"issue":{"$ref":"#/components/schemas/link"},"review_comments":{"$ref":"#/components/schemas/link"},"review_comment":{"$ref":"#/components/schemas/link"},"self":{"$ref":"#/components/schemas/link"}}},"author_association":{"$ref":"#/components/schemas/author_association"},"auto_merge":{"$ref":"#/components/schemas/auto_merge"},"draft":{"type":"boolean"}}},"simple-commit-status":{"type":"object","properties":{"description":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"state":{"type":"string"},"context":{"type":"string"},"target_url":{"type":"string","format":"uri"},"required":{"type":"boolean"},"avatar_url":{"type":"string","format":"uri"},"url":{"type":"string","format":"uri"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"combined-commit-status":{"type":"object","properties":{"state":{"type":"string"},"statuses":{"type":"array","items":{"$ref":"#/components/schemas/simple-commit-status"}},"sha":{"type":"string"},"total_count":{"type":"integer"},"repository":{"$ref":"#/components/schemas/minimal-repository"},"commit_url":{"type":"string","format":"uri"},"url":{"type":"string","format":"uri"}}},"status":{"type":"object","properties":{"url":{"type":"string"},"avatar_url":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"state":{"type":"string"},"description":{"type":"string"},"target_url":{"type":"string"},"context":{"type":"string"},"created_at":{"type":"string"},"updated_at":{"type":"string"},"creator":{"$ref":"#/components/schemas/simple-user"}}},"community-health-file":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"}}},"community-profile":{"type":"object","properties":{"health_percentage":{"type":"integer"},"description":{"type":"string"},"documentation":{"type":"string"},"files":{"type":"object","properties":{"code_of_conduct":{"allOf":[{"$ref":"#/components/schemas/code-of-conduct-simple"}]},"code_of_conduct_file":{"allOf":[{"$ref":"#/components/schemas/community-health-file"}]},"license":{"allOf":[{"$ref":"#/components/schemas/license-simple"}]},"contributing":{"allOf":[{"$ref":"#/components/schemas/community-health-file"}]},"readme":{"allOf":[{"$ref":"#/components/schemas/community-health-file"}]},"issue_template":{"allOf":[{"$ref":"#/components/schemas/community-health-file"}]},"pull_request_template":{"allOf":[{"$ref":"#/components/schemas/community-health-file"}]}}},"updated_at":{"type":"string","format":"date-time"},"content_reports_enabled":{"type":"boolean"}}},"diff-entry":{"type":"object","properties":{"sha":{"type":"string"},"filename":{"type":"string"},"status":{"type":"string"},"additions":{"type":"integer"},"deletions":{"type":"integer"},"changes":{"type":"integer"},"blob_url":{"type":"string","format":"uri"},"raw_url":{"type":"string","format":"uri"},"contents_url":{"type":"string","format":"uri"},"patch":{"type":"string"},"previous_filename":{"type":"string"}}},"commit-comparison":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"permalink_url":{"type":"string","format":"uri"},"diff_url":{"type":"string","format":"uri"},"patch_url":{"type":"string","format":"uri"},"base_commit":{"$ref":"#/components/schemas/commit"},"merge_base_commit":{"$ref":"#/components/schemas/commit"},"status":{"type":"string"},"ahead_by":{"type":"integer"},"behind_by":{"type":"integer"},"total_commits":{"type":"integer"},"commits":{"type":"array","items":{"$ref":"#/components/schemas/commit"}},"files":{"type":"array","items":{"$ref":"#/components/schemas/diff-entry"}}}},"content-reference-attachment":{"type":"object","properties":{"id":{"type":"integer"},"title":{"type":"string"},"body":{"type":"string"},"node_id":{"type":"string"}}},"content-tree":{"type":"object","properties":{"type":{"type":"string"},"size":{"type":"integer"},"name":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"download_url":{"type":"string","format":"uri"},"entries":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"size":{"type":"integer"},"name":{"type":"string"},"path":{"type":"string"},"content":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri","nullable":true},"html_url":{"type":"string","format":"uri","nullable":true},"download_url":{"type":"string","format":"uri","nullable":true},"_links":{"type":"object","properties":{"git":{"type":"string","format":"uri","nullable":true},"html":{"type":"string","format":"uri","nullable":true},"self":{"type":"string","format":"uri"}},"required":["git","html","self"]}},"required":["_links","git_url","html_url","download_url","name","path","sha","size","type","url"]}},"_links":{"type":"object","properties":{"git":{"type":"string","format":"uri"},"html":{"type":"string","format":"uri"},"self":{"type":"string","format":"uri"}}}}},"content-directory":{"type":"array","items":{"type":"object","properties":{"type":{"type":"string"},"size":{"type":"integer"},"name":{"type":"string"},"path":{"type":"string"},"content":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri","nullable":true},"html_url":{"type":"string","format":"uri","nullable":true},"download_url":{"type":"string","format":"uri","nullable":true},"_links":{"type":"object","properties":{"git":{"type":"string","format":"uri","nullable":true},"html":{"type":"string","format":"uri","nullable":true},"self":{"type":"string","format":"uri"}},"required":["git","html","self"]}},"required":["_links","git_url","html_url","download_url","name","path","sha","size","type","url"]}},"content-file":{"type":"object","properties":{"type":{"type":"string"},"encoding":{"type":"string"},"size":{"type":"integer"},"name":{"type":"string"},"path":{"type":"string"},"content":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"download_url":{"type":"string","format":"uri"},"_links":{"type":"object","properties":{"git":{"type":"string","format":"uri"},"html":{"type":"string","format":"uri"},"self":{"type":"string","format":"uri"}}},"target":{"type":"string"},"submodule_git_url":{"type":"string"}}},"content-symlink":{"type":"object","properties":{"type":{"type":"string"},"target":{"type":"string"},"size":{"type":"integer"},"name":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"download_url":{"type":"string","format":"uri"},"_links":{"type":"object","properties":{"git":{"type":"string","format":"uri"},"html":{"type":"string","format":"uri"},"self":{"type":"string","format":"uri"}}}}},"content-submodule":{"type":"object","properties":{"type":{"type":"string"},"submodule_git_url":{"type":"string","format":"uri"},"size":{"type":"integer"},"name":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"download_url":{"type":"string","format":"uri"},"_links":{"type":"object","properties":{"git":{"type":"string","format":"uri"},"html":{"type":"string","format":"uri"},"self":{"type":"string","format":"uri"}}}}},"file-commit":{"type":"object","properties":{"content":{"type":"object","properties":{"name":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"size":{"type":"integer"},"url":{"type":"string"},"html_url":{"type":"string"},"git_url":{"type":"string"},"download_url":{"type":"string"},"type":{"type":"string"},"_links":{"type":"object","properties":{"self":{"type":"string"},"git":{"type":"string"},"html":{"type":"string"}}}}},"commit":{"type":"object","properties":{"sha":{"type":"string"},"node_id":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"author":{"type":"object","properties":{"date":{"type":"string"},"name":{"type":"string"},"email":{"type":"string"}}},"committer":{"type":"object","properties":{"date":{"type":"string"},"name":{"type":"string"},"email":{"type":"string"}}},"message":{"type":"string"},"tree":{"type":"object","properties":{"url":{"type":"string"},"sha":{"type":"string"}}},"parents":{"type":"array","items":{"type":"object","properties":{"url":{"type":"string"},"html_url":{"type":"string"},"sha":{"type":"string"}}}},"verification":{"type":"object","properties":{"verified":{"type":"boolean"},"reason":{"type":"string"},"signature":{"type":"string"},"payload":{"type":"string"}}}}}}},"contributor":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"avatar_url":{"type":"string","format":"uri"},"gravatar_id":{"type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"organizations_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"received_events_url":{"type":"string","format":"uri"},"type":{"type":"string"},"site_admin":{"type":"boolean"},"contributions":{"type":"integer"},"email":{"type":"string"},"name":{"type":"string"}}},"deployment-status":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"state":{"type":"string"},"creator":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"description":{"type":"string"},"environment":{"type":"string"},"target_url":{"type":"string","format":"uri"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"deployment_url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"},"environment_url":{"type":"string","format":"uri"},"log_url":{"type":"string","format":"uri"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]}}},"wait-timer":{"type":"integer"},"deployment_branch_policy":{"type":"object","properties":{"protected_branches":{"type":"boolean"},"custom_branch_policies":{"type":"boolean"}}},"environment":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"url":{"type":"string"},"html_url":{"type":"string"},"created_at":{"format":"date-time","type":"string"},"updated_at":{"format":"date-time","type":"string"},"protection_rules":{"type":"array","items":{"anyOf":[{"type":"object","properties":{"id":{"type":"integer","example":3515},"node_id":{"type":"string","example":"MDQ6R2F0ZTM1MTU="},"type":{"type":"string","example":"wait_timer"},"wait_timer":{"$ref":"#/components/schemas/wait-timer"}},"required":["id","node_id","type"]},{"type":"object","properties":{"id":{"type":"integer","example":3755},"node_id":{"type":"string","example":"MDQ6R2F0ZTM3NTU="},"type":{"type":"string","example":"required_reviewers"},"reviewers":{"type":"array","description":"The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.","items":{"type":"object","properties":{"type":{"$ref":"#/components/schemas/deployment-reviewer-type"},"reviewer":{"anyOf":[{"$ref":"#/components/schemas/simple-user"},{"$ref":"#/components/schemas/team"}]}}}}},"required":["id","node_id","type"]},{"type":"object","properties":{"id":{"type":"integer","example":3515},"node_id":{"type":"string","example":"MDQ6R2F0ZTM1MTU="},"type":{"type":"string","example":"branch_policy"}},"required":["id","node_id","type"]}]}},"deployment_branch_policy":{"$ref":"#/components/schemas/deployment_branch_policy"}}},"short-blob":{"type":"object","properties":{"url":{"type":"string"},"sha":{"type":"string"}}},"blob":{"type":"object","properties":{"content":{"type":"string"},"encoding":{"type":"string"},"url":{"type":"string","format":"uri"},"sha":{"type":"string"},"size":{"type":"integer"},"node_id":{"type":"string"},"highlighted_content":{"type":"string"}}},"git-commit":{"type":"object","properties":{"sha":{"type":"string"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"author":{"type":"object","properties":{"date":{"format":"date-time","type":"string"},"email":{"type":"string"},"name":{"type":"string"}}},"committer":{"type":"object","properties":{"date":{"format":"date-time","type":"string"},"email":{"type":"string"},"name":{"type":"string"}}},"message":{"type":"string"},"tree":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string","format":"uri"}}},"parents":{"type":"array","items":{"type":"object","properties":{"sha":{"description":"SHA for the commit","example":"7638417db6d59f3c431d3e1f261cc637155684cd","type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"}},"required":["sha","url","html_url"]}},"verification":{"type":"object","properties":{"verified":{"type":"boolean"},"reason":{"type":"string"},"signature":{"type":"string"},"payload":{"type":"string"}}},"html_url":{"type":"string","format":"uri"}}},"git-ref":{"type":"object","properties":{"ref":{"type":"string"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"object":{"type":"object","properties":{"type":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"}}}}},"git-tag":{"type":"object","properties":{"node_id":{"type":"string"},"tag":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"message":{"type":"string"},"tagger":{"type":"object","properties":{"date":{"type":"string"},"email":{"type":"string"},"name":{"type":"string"}}},"object":{"type":"object","properties":{"sha":{"type":"string"},"type":{"type":"string"},"url":{"type":"string","format":"uri"}}},"verification":{"$ref":"#/components/schemas/verification"}}},"git-tree":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"truncated":{"type":"boolean"},"tree":{"type":"array","items":{"type":"object","properties":{"path":{"type":"string","example":"test/file.rb"},"mode":{"type":"string","example":"040000"},"type":{"type":"string","example":"tree"},"sha":{"type":"string","example":"23f6827669e43831def8a7ad935069c8bd418261"},"size":{"type":"integer","example":12},"url":{"type":"string","example":"https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261"}}}}}},"hook-response":{"type":"object","properties":{"code":{"type":"integer"},"status":{"type":"string"},"message":{"type":"string"}}},"hook":{"type":"object","properties":{"type":{"type":"string"},"id":{"type":"integer"},"name":{"type":"string"},"active":{"type":"boolean"},"events":{"type":"array","items":{"type":"string"}},"config":{"type":"object","properties":{"email":{"type":"string"},"password":{"type":"string"},"room":{"type":"string"},"subdomain":{"type":"string"},"url":{"$ref":"#/components/schemas/webhook-config-url"},"insecure_ssl":{"$ref":"#/components/schemas/webhook-config-insecure-ssl"},"content_type":{"$ref":"#/components/schemas/webhook-config-content-type"},"digest":{"type":"string"},"secret":{"$ref":"#/components/schemas/webhook-config-secret"},"token":{"type":"string"}}},"updated_at":{"type":"string","format":"date-time"},"created_at":{"type":"string","format":"date-time"},"url":{"type":"string","format":"uri"},"test_url":{"type":"string","format":"uri"},"ping_url":{"type":"string","format":"uri"},"deliveries_url":{"type":"string","format":"uri"},"last_response":{"$ref":"#/components/schemas/hook-response"}}},"import":{"type":"object","properties":{"vcs":{"type":"string"},"use_lfs":{"type":"boolean"},"vcs_url":{"type":"string"},"svc_root":{"type":"string"},"tfvc_project":{"type":"string"},"status":{"type":"string"},"status_text":{"type":"string"},"failed_step":{"type":"string"},"error_message":{"type":"string"},"import_percent":{"type":"integer"},"commit_count":{"type":"integer"},"push_percent":{"type":"integer"},"has_large_files":{"type":"boolean"},"large_files_size":{"type":"integer"},"large_files_count":{"type":"integer"},"project_choices":{"type":"array","items":{"type":"object","properties":{"vcs":{"type":"string"},"tfvc_project":{"type":"string"},"human_name":{"type":"string"}}}},"message":{"type":"string"},"authors_count":{"type":"integer"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"authors_url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"},"svn_root":{"type":"string"}}},"porter-author":{"type":"object","properties":{"id":{"type":"integer"},"remote_id":{"type":"string"},"remote_name":{"type":"string"},"email":{"type":"string"},"name":{"type":"string"},"url":{"type":"string","format":"uri"},"import_url":{"type":"string","format":"uri"}}},"porter-large-file":{"type":"object","properties":{"ref_name":{"type":"string"},"path":{"type":"string"},"oid":{"type":"string"},"size":{"type":"integer"}}},"issue-event-label":{"type":"object","properties":{"name":{"type":"string"},"color":{"type":"string"}}},"issue-event-dismissed-review":{"type":"object","properties":{"state":{"type":"string"},"review_id":{"type":"integer"},"dismissal_message":{"type":"string"},"dismissal_commit_id":{"type":"string"}}},"issue-event-milestone":{"type":"object","properties":{"title":{"type":"string"}}},"issue-event-project-card":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"project_url":{"type":"string","format":"uri"},"project_id":{"type":"integer"},"column_name":{"type":"string"},"previous_column_name":{"type":"string"}}},"issue-event-rename":{"type":"object","properties":{"from":{"type":"string"},"to":{"type":"string"}}},"issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"actor":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"issue":{"$ref":"#/components/schemas/issue-simple"},"label":{"$ref":"#/components/schemas/issue-event-label"},"assignee":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"assigner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"review_requester":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"requested_reviewer":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"requested_team":{"$ref":"#/components/schemas/team"},"dismissed_review":{"$ref":"#/components/schemas/issue-event-dismissed-review"},"milestone":{"$ref":"#/components/schemas/issue-event-milestone"},"project_card":{"$ref":"#/components/schemas/issue-event-project-card"},"rename":{"$ref":"#/components/schemas/issue-event-rename"},"author_association":{"$ref":"#/components/schemas/author_association"},"lock_reason":{"type":"string"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]}}},"labeled-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"label":{"type":"object","properties":{"name":{"type":"string"},"color":{"type":"string"}}}}},"unlabeled-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"label":{"type":"object","properties":{"name":{"type":"string"},"color":{"type":"string"}}}}},"assigned-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"assignee":{"$ref":"#/components/schemas/simple-user"},"assigner":{"$ref":"#/components/schemas/simple-user"}}},"unassigned-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"assignee":{"$ref":"#/components/schemas/simple-user"},"assigner":{"$ref":"#/components/schemas/simple-user"}}},"milestoned-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"milestone":{"type":"object","properties":{"title":{"type":"string"}}}}},"demilestoned-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"milestone":{"type":"object","properties":{"title":{"type":"string"}}}}},"renamed-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"rename":{"type":"object","properties":{"from":{"type":"string"},"to":{"type":"string"}}}}},"review-requested-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"review_requester":{"$ref":"#/components/schemas/simple-user"},"requested_team":{"$ref":"#/components/schemas/team"},"requested_reviewer":{"$ref":"#/components/schemas/simple-user"}}},"review-request-removed-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"review_requester":{"$ref":"#/components/schemas/simple-user"},"requested_team":{"$ref":"#/components/schemas/team"},"requested_reviewer":{"$ref":"#/components/schemas/simple-user"}}},"review-dismissed-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"dismissed_review":{"type":"object","properties":{"state":{"type":"string"},"review_id":{"type":"integer"},"dismissal_message":{"type":"string"},"dismissal_commit_id":{"type":"string"}}}}},"locked-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"lock_reason":{"type":"string"}}},"added-to-project-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"project_card":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string","format":"uri"},"project_id":{"type":"integer"},"project_url":{"type":"string","format":"uri"},"column_name":{"type":"string"},"previous_column_name":{"type":"string"}}}}},"moved-column-in-project-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"project_card":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string","format":"uri"},"project_id":{"type":"integer"},"project_url":{"type":"string","format":"uri"},"column_name":{"type":"string"},"previous_column_name":{"type":"string"}}}}},"removed-from-project-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"project_card":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string","format":"uri"},"project_id":{"type":"integer"},"project_url":{"type":"string","format":"uri"},"column_name":{"type":"string"},"previous_column_name":{"type":"string"}}}}},"converted-note-to-issue-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"project_card":{"type":"object","properties":{"id":{"type":"integer"},"url":{"type":"string","format":"uri"},"project_id":{"type":"integer"},"project_url":{"type":"string","format":"uri"},"column_name":{"type":"string"},"previous_column_name":{"type":"string"}}}}},"issue-event-for-issue":{"anyOf":[{"$ref":"#/components/schemas/labeled-issue-event"},{"$ref":"#/components/schemas/unlabeled-issue-event"},{"$ref":"#/components/schemas/assigned-issue-event"},{"$ref":"#/components/schemas/unassigned-issue-event"},{"$ref":"#/components/schemas/milestoned-issue-event"},{"$ref":"#/components/schemas/demilestoned-issue-event"},{"$ref":"#/components/schemas/renamed-issue-event"},{"$ref":"#/components/schemas/review-requested-issue-event"},{"$ref":"#/components/schemas/review-request-removed-issue-event"},{"$ref":"#/components/schemas/review-dismissed-issue-event"},{"$ref":"#/components/schemas/locked-issue-event"},{"$ref":"#/components/schemas/added-to-project-issue-event"},{"$ref":"#/components/schemas/moved-column-in-project-issue-event"},{"$ref":"#/components/schemas/removed-from-project-issue-event"},{"$ref":"#/components/schemas/converted-note-to-issue-issue-event"}]},"timeline-comment-event":{"type":"object","properties":{"event":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"body":{"type":"string"},"body_text":{"type":"string"},"body_html":{"type":"string"},"html_url":{"type":"string","format":"uri"},"user":{"$ref":"#/components/schemas/simple-user"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"issue_url":{"type":"string","format":"uri"},"author_association":{"$ref":"#/components/schemas/author_association"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"}}},"timeline-cross-referenced-event":{"type":"object","properties":{"event":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"source":{"type":"object","properties":{"type":{"type":"string"},"issue":{"$ref":"#/components/schemas/issue-simple"}}}}},"timeline-committed-event":{"type":"object","properties":{"event":{"type":"string"},"sha":{"type":"string"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"author":{"type":"object","properties":{"date":{"format":"date-time","type":"string"},"email":{"type":"string"},"name":{"type":"string"}}},"committer":{"type":"object","properties":{"date":{"format":"date-time","type":"string"},"email":{"type":"string"},"name":{"type":"string"}}},"message":{"type":"string"},"tree":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string","format":"uri"}}},"parents":{"type":"array","items":{"type":"object","properties":{"sha":{"description":"SHA for the commit","example":"7638417db6d59f3c431d3e1f261cc637155684cd","type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"}},"required":["sha","url","html_url"]}},"verification":{"type":"object","properties":{"verified":{"type":"boolean"},"reason":{"type":"string"},"signature":{"type":"string"},"payload":{"type":"string"}}},"html_url":{"type":"string","format":"uri"}}},"timeline-reviewed-event":{"type":"object","properties":{"event":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"user":{"$ref":"#/components/schemas/simple-user"},"body":{"type":"string"},"state":{"type":"string"},"html_url":{"type":"string","format":"uri"},"pull_request_url":{"type":"string","format":"uri"},"_links":{"type":"object","properties":{"html":{"type":"object","properties":{"href":{"type":"string"}}},"pull_request":{"type":"object","properties":{"href":{"type":"string"}}}}},"submitted_at":{"type":"string","format":"date-time"},"commit_id":{"type":"string"},"body_html":{"type":"string"},"body_text":{"type":"string"},"author_association":{"$ref":"#/components/schemas/author_association"}}},"pull-request-review-comment":{"type":"object","properties":{"url":{"type":"string"},"pull_request_review_id":{"type":"integer"},"id":{"type":"integer"},"node_id":{"type":"string"},"diff_hunk":{"type":"string"},"path":{"type":"string"},"position":{"type":"integer"},"original_position":{"type":"integer"},"commit_id":{"type":"string"},"original_commit_id":{"type":"string"},"in_reply_to_id":{"type":"integer"},"user":{"$ref":"#/components/schemas/simple-user"},"body":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"html_url":{"type":"string","format":"uri"},"pull_request_url":{"type":"string","format":"uri"},"author_association":{"$ref":"#/components/schemas/author_association"},"_links":{"type":"object","properties":{"self":{"type":"object","properties":{"href":{"type":"string","format":"uri"}}},"html":{"type":"object","properties":{"href":{"type":"string","format":"uri"}}},"pull_request":{"type":"object","properties":{"href":{"type":"string","format":"uri"}}}}},"start_line":{"type":"integer"},"original_start_line":{"type":"integer"},"start_side":{"type":"string"},"line":{"type":"integer"},"original_line":{"type":"integer"},"side":{"type":"string"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"},"body_html":{"type":"string"},"body_text":{"type":"string"}}},"timeline-line-commented-event":{"type":"object","properties":{"event":{"type":"string"},"node_id":{"type":"string"},"comments":{"type":"array","items":{"$ref":"#/components/schemas/pull-request-review-comment"}}}},"timeline-commit-commented-event":{"type":"object","properties":{"event":{"type":"string"},"node_id":{"type":"string"},"commit_id":{"type":"string"},"comments":{"type":"array","items":{"$ref":"#/components/schemas/commit-comment"}}}},"timeline-assigned-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"assignee":{"$ref":"#/components/schemas/simple-user"}}},"timeline-unassigned-issue-event":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string"},"actor":{"$ref":"#/components/schemas/simple-user"},"event":{"type":"string"},"commit_id":{"type":"string"},"commit_url":{"type":"string"},"created_at":{"type":"string"},"performed_via_github_app":{"$ref":"#/components/schemas/integration"},"assignee":{"$ref":"#/components/schemas/simple-user"}}},"timeline-issue-events":{"type":"object","anyOf":[{"$ref":"#/components/schemas/labeled-issue-event"},{"$ref":"#/components/schemas/unlabeled-issue-event"},{"$ref":"#/components/schemas/milestoned-issue-event"},{"$ref":"#/components/schemas/demilestoned-issue-event"},{"$ref":"#/components/schemas/renamed-issue-event"},{"$ref":"#/components/schemas/review-requested-issue-event"},{"$ref":"#/components/schemas/review-request-removed-issue-event"},{"$ref":"#/components/schemas/review-dismissed-issue-event"},{"$ref":"#/components/schemas/locked-issue-event"},{"$ref":"#/components/schemas/added-to-project-issue-event"},{"$ref":"#/components/schemas/moved-column-in-project-issue-event"},{"$ref":"#/components/schemas/removed-from-project-issue-event"},{"$ref":"#/components/schemas/converted-note-to-issue-issue-event"},{"$ref":"#/components/schemas/timeline-comment-event"},{"$ref":"#/components/schemas/timeline-cross-referenced-event"},{"$ref":"#/components/schemas/timeline-committed-event"},{"$ref":"#/components/schemas/timeline-reviewed-event"},{"$ref":"#/components/schemas/timeline-line-commented-event"},{"$ref":"#/components/schemas/timeline-commit-commented-event"},{"$ref":"#/components/schemas/timeline-assigned-issue-event"},{"$ref":"#/components/schemas/timeline-unassigned-issue-event"}]},"deploy-key":{"type":"object","properties":{"id":{"type":"integer"},"key":{"type":"string"},"url":{"type":"string"},"title":{"type":"string"},"verified":{"type":"boolean"},"created_at":{"type":"string"},"read_only":{"type":"boolean"}}},"language":{"type":"object","additionalProperties":{"type":"integer"}},"license-content":{"type":"object","properties":{"name":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"size":{"type":"integer"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri"},"download_url":{"type":"string","format":"uri"},"type":{"type":"string"},"content":{"type":"string"},"encoding":{"type":"string"},"_links":{"type":"object","properties":{"git":{"type":"string","format":"uri"},"html":{"type":"string","format":"uri"},"self":{"type":"string","format":"uri"}}},"license":{"allOf":[{"$ref":"#/components/schemas/license-simple"}]}}},"pages-source-hash":{"type":"object","properties":{"branch":{"type":"string"},"path":{"type":"string"}}},"pages-https-certificate":{"type":"object","properties":{"state":{"type":"string"},"description":{"type":"string"},"domains":{"type":"array"},"expires_at":{"type":"string","format":"date"}}},"page":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"status":{"type":"string"},"cname":{"type":"string"},"custom_404":{"type":"boolean"},"html_url":{"type":"string","format":"uri"},"source":{"$ref":"#/components/schemas/pages-source-hash"},"public":{"type":"boolean"},"https_certificate":{"$ref":"#/components/schemas/pages-https-certificate"},"https_enforced":{"type":"boolean"}}},"page-build":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"status":{"type":"string"},"error":{"type":"object","properties":{"message":{"type":"string"}}},"pusher":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"commit":{"type":"string"},"duration":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"page-build-status":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"status":{"type":"string"}}},"pages-health-check":{"type":"object","properties":{"domain":{"type":"object","properties":{"host":{"type":"string"},"uri":{"type":"string"},"nameservers":{"type":"string"},"dns_resolves":{"type":"boolean"},"is_proxied":{"type":"boolean"},"is_cloudflare_ip":{"type":"boolean"},"is_fastly_ip":{"type":"boolean"},"is_old_ip_address":{"type":"boolean"},"is_a_record":{"type":"boolean"},"has_cname_record":{"type":"boolean"},"has_mx_records_present":{"type":"boolean"},"is_valid_domain":{"type":"boolean"},"is_apex_domain":{"type":"boolean"},"should_be_a_record":{"type":"boolean"},"is_cname_to_github_user_domain":{"type":"boolean"},"is_cname_to_pages_dot_github_dot_com":{"type":"boolean"},"is_cname_to_fastly":{"type":"boolean"},"is_pointed_to_github_pages_ip":{"type":"boolean"},"is_non_github_pages_ip_present":{"type":"boolean"},"is_pages_domain":{"type":"boolean"},"is_served_by_pages":{"type":"boolean"},"is_valid":{"type":"boolean"},"reason":{"type":"string"},"responds_to_https":{"type":"boolean"},"enforces_https":{"type":"boolean"},"https_error":{"type":"string"},"is_https_eligible":{"type":"boolean"},"caa_error":{"type":"string"}}},"alt_domain":{"type":"object","properties":{"host":{"type":"string"},"uri":{"type":"string"},"nameservers":{"type":"string"},"dns_resolves":{"type":"boolean"},"is_proxied":{"type":"boolean"},"is_cloudflare_ip":{"type":"boolean"},"is_fastly_ip":{"type":"boolean"},"is_old_ip_address":{"type":"boolean"},"is_a_record":{"type":"boolean"},"has_cname_record":{"type":"boolean"},"has_mx_records_present":{"type":"boolean"},"is_valid_domain":{"type":"boolean"},"is_apex_domain":{"type":"boolean"},"should_be_a_record":{"type":"boolean"},"is_cname_to_github_user_domain":{"type":"boolean"},"is_cname_to_pages_dot_github_dot_com":{"type":"boolean"},"is_cname_to_fastly":{"type":"boolean"},"is_pointed_to_github_pages_ip":{"type":"boolean"},"is_non_github_pages_ip_present":{"type":"boolean"},"is_pages_domain":{"type":"boolean"},"is_served_by_pages":{"type":"boolean"},"is_valid":{"type":"boolean"},"reason":{"type":"string"},"responds_to_https":{"type":"boolean"},"enforces_https":{"type":"boolean"},"https_error":{"type":"string"},"is_https_eligible":{"type":"boolean"},"caa_error":{"type":"string"}}}}},"pull-request":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"diff_url":{"type":"string","format":"uri"},"patch_url":{"type":"string","format":"uri"},"issue_url":{"type":"string","format":"uri"},"commits_url":{"type":"string","format":"uri"},"review_comments_url":{"type":"string","format":"uri"},"review_comment_url":{"type":"string"},"comments_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string","format":"uri"},"number":{"type":"integer"},"state":{"type":"string"},"locked":{"type":"boolean"},"title":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"body":{"type":"string"},"labels":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"node_id":{"type":"string"},"url":{"type":"string"},"name":{"type":"string"},"description":{"type":"string","nullable":true},"color":{"type":"string"},"default":{"type":"boolean"}}}},"milestone":{"allOf":[{"$ref":"#/components/schemas/milestone"}]},"active_lock_reason":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"closed_at":{"type":"string","format":"date-time"},"merged_at":{"type":"string","format":"date-time"},"merge_commit_sha":{"type":"string"},"assignee":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"assignees":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"requested_reviewers":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"requested_teams":{"type":"array","items":{"$ref":"#/components/schemas/team-simple"}},"head":{"type":"object","properties":{"label":{"type":"string"},"ref":{"type":"string"},"repo":{"type":"object","properties":{"archive_url":{"type":"string"},"assignees_url":{"type":"string"},"blobs_url":{"type":"string"},"branches_url":{"type":"string"},"collaborators_url":{"type":"string"},"comments_url":{"type":"string"},"commits_url":{"type":"string"},"compare_url":{"type":"string"},"contents_url":{"type":"string"},"contributors_url":{"type":"string","format":"uri"},"deployments_url":{"type":"string","format":"uri"},"description":{"type":"string"},"downloads_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"fork":{"type":"boolean"},"forks_url":{"type":"string","format":"uri"},"full_name":{"type":"string"},"git_commits_url":{"type":"string"},"git_refs_url":{"type":"string"},"git_tags_url":{"type":"string"},"hooks_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"issue_comment_url":{"type":"string"},"issue_events_url":{"type":"string"},"issues_url":{"type":"string"},"keys_url":{"type":"string"},"labels_url":{"type":"string"},"languages_url":{"type":"string","format":"uri"},"merges_url":{"type":"string","format":"uri"},"milestones_url":{"type":"string"},"name":{"type":"string"},"notifications_url":{"type":"string"},"owner":{"type":"object","properties":{"avatar_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"gravatar_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"login":{"type":"string"},"organizations_url":{"type":"string","format":"uri"},"received_events_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"site_admin":{"type":"boolean"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"type":{"type":"string"},"url":{"type":"string","format":"uri"}}},"private":{"type":"boolean"},"pulls_url":{"type":"string"},"releases_url":{"type":"string"},"stargazers_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string"},"subscribers_url":{"type":"string","format":"uri"},"subscription_url":{"type":"string","format":"uri"},"tags_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"trees_url":{"type":"string"},"url":{"type":"string","format":"uri"},"clone_url":{"type":"string"},"default_branch":{"type":"string"},"forks":{"type":"integer"},"forks_count":{"type":"integer"},"git_url":{"type":"string"},"has_downloads":{"type":"boolean"},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_pages":{"type":"boolean"},"homepage":{"type":"string","format":"uri"},"language":{"type":"string"},"master_branch":{"type":"string"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"mirror_url":{"type":"string","format":"uri"},"open_issues":{"type":"integer"},"open_issues_count":{"type":"integer"},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"pull":{"type":"boolean"},"push":{"type":"boolean"}}},"temp_clone_token":{"type":"string"},"allow_merge_commit":{"type":"boolean"},"allow_squash_merge":{"type":"boolean"},"allow_rebase_merge":{"type":"boolean"},"license":{"type":"object","properties":{"key":{"type":"string"},"name":{"type":"string"},"url":{"type":"string","format":"uri"},"spdx_id":{"type":"string"},"node_id":{"type":"string"}}},"pushed_at":{"type":"string","format":"date-time"},"size":{"type":"integer"},"ssh_url":{"type":"string"},"stargazers_count":{"type":"integer"},"svn_url":{"type":"string","format":"uri"},"topics":{"type":"array","items":{"type":"string"}},"watchers":{"type":"integer"},"watchers_count":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"sha":{"type":"string"},"user":{"type":"object","properties":{"avatar_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"gravatar_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"login":{"type":"string"},"organizations_url":{"type":"string","format":"uri"},"received_events_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"site_admin":{"type":"boolean"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"type":{"type":"string"},"url":{"type":"string","format":"uri"}}}}},"base":{"type":"object","properties":{"label":{"type":"string"},"ref":{"type":"string"},"repo":{"type":"object","properties":{"archive_url":{"type":"string"},"assignees_url":{"type":"string"},"blobs_url":{"type":"string"},"branches_url":{"type":"string"},"collaborators_url":{"type":"string"},"comments_url":{"type":"string"},"commits_url":{"type":"string"},"compare_url":{"type":"string"},"contents_url":{"type":"string"},"contributors_url":{"type":"string","format":"uri"},"deployments_url":{"type":"string","format":"uri"},"description":{"type":"string"},"downloads_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"fork":{"type":"boolean"},"forks_url":{"type":"string","format":"uri"},"full_name":{"type":"string"},"git_commits_url":{"type":"string"},"git_refs_url":{"type":"string"},"git_tags_url":{"type":"string"},"hooks_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"issue_comment_url":{"type":"string"},"issue_events_url":{"type":"string"},"issues_url":{"type":"string"},"keys_url":{"type":"string"},"labels_url":{"type":"string"},"languages_url":{"type":"string","format":"uri"},"merges_url":{"type":"string","format":"uri"},"milestones_url":{"type":"string"},"name":{"type":"string"},"notifications_url":{"type":"string"},"owner":{"type":"object","properties":{"avatar_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"gravatar_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"login":{"type":"string"},"organizations_url":{"type":"string","format":"uri"},"received_events_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"site_admin":{"type":"boolean"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"type":{"type":"string"},"url":{"type":"string","format":"uri"}}},"private":{"type":"boolean"},"pulls_url":{"type":"string"},"releases_url":{"type":"string"},"stargazers_url":{"type":"string","format":"uri"},"statuses_url":{"type":"string"},"subscribers_url":{"type":"string","format":"uri"},"subscription_url":{"type":"string","format":"uri"},"tags_url":{"type":"string","format":"uri"},"teams_url":{"type":"string","format":"uri"},"trees_url":{"type":"string"},"url":{"type":"string","format":"uri"},"clone_url":{"type":"string"},"default_branch":{"type":"string"},"forks":{"type":"integer"},"forks_count":{"type":"integer"},"git_url":{"type":"string"},"has_downloads":{"type":"boolean"},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_pages":{"type":"boolean"},"homepage":{"type":"string","format":"uri"},"language":{"type":"string"},"master_branch":{"type":"string"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"mirror_url":{"type":"string","format":"uri"},"open_issues":{"type":"integer"},"open_issues_count":{"type":"integer"},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"pull":{"type":"boolean"},"push":{"type":"boolean"}}},"temp_clone_token":{"type":"string"},"allow_merge_commit":{"type":"boolean"},"allow_squash_merge":{"type":"boolean"},"allow_rebase_merge":{"type":"boolean"},"license":{"allOf":[{"$ref":"#/components/schemas/license-simple"}]},"pushed_at":{"type":"string","format":"date-time"},"size":{"type":"integer"},"ssh_url":{"type":"string"},"stargazers_count":{"type":"integer"},"svn_url":{"type":"string","format":"uri"},"topics":{"type":"array","items":{"type":"string"}},"watchers":{"type":"integer"},"watchers_count":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"}}},"sha":{"type":"string"},"user":{"type":"object","properties":{"avatar_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"gravatar_id":{"type":"string"},"html_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"login":{"type":"string"},"organizations_url":{"type":"string","format":"uri"},"received_events_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"site_admin":{"type":"boolean"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"type":{"type":"string"},"url":{"type":"string","format":"uri"}}}}},"_links":{"type":"object","properties":{"comments":{"$ref":"#/components/schemas/link"},"commits":{"$ref":"#/components/schemas/link"},"statuses":{"$ref":"#/components/schemas/link"},"html":{"$ref":"#/components/schemas/link"},"issue":{"$ref":"#/components/schemas/link"},"review_comments":{"$ref":"#/components/schemas/link"},"review_comment":{"$ref":"#/components/schemas/link"},"self":{"$ref":"#/components/schemas/link"}}},"author_association":{"$ref":"#/components/schemas/author_association"},"auto_merge":{"$ref":"#/components/schemas/auto_merge"},"draft":{"type":"boolean"},"merged":{"type":"boolean"},"mergeable":{"type":"boolean"},"rebaseable":{"type":"boolean"},"mergeable_state":{"type":"string"},"merged_by":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"comments":{"type":"integer"},"review_comments":{"type":"integer"},"maintainer_can_modify":{"type":"boolean"},"commits":{"type":"integer"},"additions":{"type":"integer"},"deletions":{"type":"integer"},"changed_files":{"type":"integer"}}},"pull-request-merge-result":{"type":"object","properties":{"sha":{"type":"string"},"merged":{"type":"boolean"},"message":{"type":"string"}}},"pull-request-review-request":{"type":"object","properties":{"users":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"teams":{"type":"array","items":{"$ref":"#/components/schemas/team"}}}},"pull-request-review":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"body":{"type":"string"},"state":{"type":"string"},"html_url":{"type":"string","format":"uri"},"pull_request_url":{"type":"string","format":"uri"},"_links":{"type":"object","properties":{"html":{"type":"object","properties":{"href":{"type":"string"}}},"pull_request":{"type":"object","properties":{"href":{"type":"string"}}}}},"submitted_at":{"type":"string","format":"date-time"},"commit_id":{"type":"string"},"body_html":{"type":"string"},"body_text":{"type":"string"},"author_association":{"$ref":"#/components/schemas/author_association"}}},"review-comment":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"pull_request_review_id":{"type":"integer"},"id":{"type":"integer"},"node_id":{"type":"string"},"diff_hunk":{"type":"string"},"path":{"type":"string"},"position":{"type":"integer"},"original_position":{"type":"integer"},"commit_id":{"type":"string"},"original_commit_id":{"type":"string"},"in_reply_to_id":{"type":"integer"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"body":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"html_url":{"type":"string","format":"uri"},"pull_request_url":{"type":"string","format":"uri"},"author_association":{"$ref":"#/components/schemas/author_association"},"_links":{"type":"object","properties":{"self":{"$ref":"#/components/schemas/link"},"html":{"$ref":"#/components/schemas/link"},"pull_request":{"$ref":"#/components/schemas/link"}}},"body_text":{"type":"string"},"body_html":{"type":"string"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"},"side":{"type":"string"},"start_side":{"type":"string"},"line":{"type":"integer"},"original_line":{"type":"integer"},"start_line":{"type":"integer"},"original_start_line":{"type":"integer"}}},"release-asset":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"browser_download_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"label":{"type":"string"},"state":{"type":"string"},"content_type":{"type":"string"},"size":{"type":"integer"},"download_count":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"uploader":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]}}},"release":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"assets_url":{"type":"string","format":"uri"},"upload_url":{"type":"string"},"tarball_url":{"type":"string","format":"uri"},"zipball_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"tag_name":{"type":"string"},"target_commitish":{"type":"string"},"name":{"type":"string"},"body":{"type":"string"},"draft":{"type":"boolean"},"prerelease":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"},"published_at":{"type":"string","format":"date-time"},"author":{"$ref":"#/components/schemas/simple-user"},"assets":{"type":"array","items":{"$ref":"#/components/schemas/release-asset"}},"body_html":{"type":"string"},"body_text":{"type":"string"},"mentions_count":{"type":"integer"},"discussion_url":{"type":"string","format":"uri"},"reactions":{"$ref":"#/components/schemas/reaction-rollup"}}},"secret-scanning-alert-state":{"type":"string"},"secret-scanning-alert-resolution":{"type":"string"},"secret-scanning-alert":{"type":"object","properties":{"number":{"$ref":"#/components/schemas/alert-number"},"created_at":{"$ref":"#/components/schemas/alert-created-at"},"url":{"$ref":"#/components/schemas/alert-url"},"html_url":{"$ref":"#/components/schemas/alert-html-url"},"state":{"$ref":"#/components/schemas/secret-scanning-alert-state"},"resolution":{"$ref":"#/components/schemas/secret-scanning-alert-resolution"},"resolved_at":{"type":"string","format":"date-time"},"resolved_by":{"$ref":"#/components/schemas/simple-user"},"secret_type":{"type":"string"},"secret":{"type":"string"}}},"stargazer":{"type":"object","properties":{"starred_at":{"type":"string","format":"date-time"},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]}}},"code-frequency-stat":{"type":"array","items":{"type":"integer"}},"commit-activity":{"type":"object","properties":{"days":{"type":"array","items":{"type":"integer"}},"total":{"type":"integer"},"week":{"type":"integer"}}},"contributor-activity":{"type":"object","properties":{"author":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"total":{"type":"integer"},"weeks":{"type":"array","items":{"type":"object","properties":{"w":{"type":"integer"},"a":{"type":"integer"},"d":{"type":"integer"},"c":{"type":"integer"}}}}}},"participation-stats":{"type":"object","properties":{"all":{"type":"array","items":{"type":"integer"}},"owner":{"type":"array","items":{"type":"integer"}}}},"repository-subscription":{"type":"object","properties":{"subscribed":{"type":"boolean"},"ignored":{"type":"boolean"},"reason":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"}}},"tag":{"type":"object","properties":{"name":{"type":"string"},"commit":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string","format":"uri"}}},"zipball_url":{"type":"string","format":"uri"},"tarball_url":{"type":"string","format":"uri"},"node_id":{"type":"string"}}},"topic":{"type":"object","properties":{"names":{"type":"array","items":{"type":"string"}}}},"traffic":{"type":"object","properties":{"timestamp":{"type":"string","format":"date-time"},"uniques":{"type":"integer"},"count":{"type":"integer"}}},"clone-traffic":{"type":"object","properties":{"count":{"type":"integer"},"uniques":{"type":"integer"},"clones":{"type":"array","items":{"$ref":"#/components/schemas/traffic"}}}},"content-traffic":{"type":"object","properties":{"path":{"type":"string"},"title":{"type":"string"},"count":{"type":"integer"},"uniques":{"type":"integer"}}},"referrer-traffic":{"type":"object","properties":{"referrer":{"type":"string"},"count":{"type":"integer"},"uniques":{"type":"integer"}}},"view-traffic":{"type":"object","properties":{"count":{"type":"integer"},"uniques":{"type":"integer"},"views":{"type":"array","items":{"$ref":"#/components/schemas/traffic"}}}},"scim-group-list-enterprise":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string"}},"totalResults":{"type":"number"},"itemsPerPage":{"type":"number"},"startIndex":{"type":"number"},"Resources":{"type":"array","items":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string"}},"id":{"type":"string"},"externalId":{"type":"string","nullable":true},"displayName":{"type":"string"},"members":{"type":"array","items":{"type":"object","properties":{"value":{"type":"string"},"$ref":{"type":"string"},"display":{"type":"string"}}}},"meta":{"type":"object","properties":{"resourceType":{"type":"string"},"created":{"type":"string"},"lastModified":{"type":"string"},"location":{"type":"string"}}}},"required":["schemas","id"]}}}},"scim-enterprise-group":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string"}},"id":{"type":"string"},"externalId":{"type":"string"},"displayName":{"type":"string"},"members":{"type":"array","items":{"type":"object","properties":{"value":{"type":"string"},"$ref":{"type":"string"},"display":{"type":"string"}}}},"meta":{"type":"object","properties":{"resourceType":{"type":"string"},"created":{"type":"string"},"lastModified":{"type":"string"},"location":{"type":"string"}}}}},"scim-user-list-enterprise":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string"}},"totalResults":{"type":"number"},"itemsPerPage":{"type":"number"},"startIndex":{"type":"number"},"Resources":{"type":"array","items":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string"}},"id":{"type":"string"},"externalId":{"type":"string"},"userName":{"type":"string"},"name":{"type":"object","properties":{"givenName":{"type":"string"},"familyName":{"type":"string"}}},"emails":{"type":"array","items":{"type":"object","properties":{"value":{"type":"string"},"primary":{"type":"boolean"},"type":{"type":"string"}}}},"groups":{"type":"array","items":{"type":"object","properties":{"value":{"type":"string"}}}},"active":{"type":"boolean"},"meta":{"type":"object","properties":{"resourceType":{"type":"string"},"created":{"type":"string"},"lastModified":{"type":"string"},"location":{"type":"string"}}}},"required":["schemas","id"]}}}},"scim-enterprise-user":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string"}},"id":{"type":"string"},"externalId":{"type":"string"},"userName":{"type":"string"},"name":{"type":"object","properties":{"givenName":{"type":"string"},"familyName":{"type":"string"}}},"emails":{"type":"array","items":{"type":"object","properties":{"value":{"type":"string"},"type":{"type":"string"},"primary":{"type":"boolean"}}}},"groups":{"type":"array","items":{"type":"object","properties":{"value":{"type":"string"}}}},"active":{"type":"boolean"},"meta":{"type":"object","properties":{"resourceType":{"type":"string"},"created":{"type":"string"},"lastModified":{"type":"string"},"location":{"type":"string"}}}}},"scim-user":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string","example":"urn:ietf:params:scim:schemas:core:2.0:User"}},"id":{"type":"string"},"externalId":{"type":"string"},"userName":{"type":"string"},"displayName":{"type":"string"},"name":{"type":"object","properties":{"givenName":{"type":"string"},"familyName":{"type":"string"},"formatted":{"type":"string"}}},"emails":{"type":"array","items":{"type":"object","properties":{"value":{"type":"string"},"primary":{"type":"boolean"}},"required":["value"]}},"active":{"type":"boolean"},"meta":{"type":"object","properties":{"resourceType":{"type":"string"},"created":{"type":"string","format":"date-time"},"lastModified":{"type":"string","format":"date-time"},"location":{"type":"string","format":"uri"}}},"organization_id":{"type":"integer"},"operations":{"type":"array","items":{"properties":{"op":{"type":"string","enum":["add","remove","replace"]},"path":{"type":"string"},"value":{"oneOf":[{"type":"string"},{"type":"object"},{"type":"array","items":{}}]}},"required":["op"],"type":"object"}},"groups":{"type":"array","items":{"properties":{"value":{"type":"string"},"display":{"type":"string"}}}}}},"scim-user-list":{"type":"object","properties":{"schemas":{"type":"array","items":{"type":"string","example":"urn:ietf:params:scim:api:messages:2.0:ListResponse"}},"totalResults":{"type":"integer"},"itemsPerPage":{"type":"integer"},"startIndex":{"type":"integer"},"Resources":{"type":"array","items":{"$ref":"#/components/schemas/scim-user"}}}},"search-result-text-matches":{"type":"array","items":{"type":"object","properties":{"object_url":{"type":"string"},"object_type":{"nullable":true,"type":"string"},"property":{"type":"string"},"fragment":{"type":"string"},"matches":{"type":"array","items":{"type":"object","properties":{"text":{"type":"string"},"indices":{"type":"array","items":{"type":"integer"}}}}}}}},"code-search-result-item":{"type":"object","properties":{"name":{"type":"string"},"path":{"type":"string"},"sha":{"type":"string"},"url":{"type":"string","format":"uri"},"git_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"repository":{"$ref":"#/components/schemas/minimal-repository"},"score":{"type":"number"},"file_size":{"type":"integer"},"language":{"type":"string"},"last_modified_at":{"type":"string","format":"date-time"},"line_numbers":{"type":"array","items":{"type":"string"}},"text_matches":{"$ref":"#/components/schemas/search-result-text-matches"}}},"commit-search-result-item":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"sha":{"type":"string"},"html_url":{"type":"string","format":"uri"},"comments_url":{"type":"string","format":"uri"},"commit":{"type":"object","properties":{"author":{"type":"object","properties":{"name":{"type":"string"},"email":{"type":"string"},"date":{"type":"string","format":"date-time"}}},"committer":{"allOf":[{"$ref":"#/components/schemas/git-user"}]},"comment_count":{"type":"integer"},"message":{"type":"string"},"tree":{"type":"object","properties":{"sha":{"type":"string"},"url":{"type":"string","format":"uri"}}},"url":{"type":"string","format":"uri"},"verification":{"$ref":"#/components/schemas/verification"}}},"author":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"committer":{"allOf":[{"$ref":"#/components/schemas/git-user"}]},"parents":{"type":"array","items":{"type":"object","properties":{"url":{"type":"string"},"html_url":{"type":"string"},"sha":{"type":"string"}}}},"repository":{"$ref":"#/components/schemas/minimal-repository"},"score":{"type":"number"},"node_id":{"type":"string"},"text_matches":{"$ref":"#/components/schemas/search-result-text-matches"}}},"issue-search-result-item":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"repository_url":{"type":"string","format":"uri"},"labels_url":{"type":"string"},"comments_url":{"type":"string","format":"uri"},"events_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"id":{"type":"integer"},"node_id":{"type":"string"},"number":{"type":"integer"},"title":{"type":"string"},"locked":{"type":"boolean"},"active_lock_reason":{"type":"string"},"assignees":{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},"user":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"labels":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer","format":"int64"},"node_id":{"type":"string"},"url":{"type":"string"},"name":{"type":"string"},"color":{"type":"string"},"default":{"type":"boolean"},"description":{"type":"string","nullable":true}}}},"state":{"type":"string"},"assignee":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"milestone":{"allOf":[{"$ref":"#/components/schemas/milestone"}]},"comments":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"closed_at":{"type":"string","format":"date-time"},"text_matches":{"$ref":"#/components/schemas/search-result-text-matches"},"pull_request":{"type":"object","properties":{"merged_at":{"type":"string","format":"date-time"},"diff_url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"patch_url":{"type":"string","format":"uri"},"url":{"type":"string","format":"uri"}}},"body":{"type":"string"},"score":{"type":"number"},"author_association":{"$ref":"#/components/schemas/author_association"},"draft":{"type":"boolean"},"repository":{"$ref":"#/components/schemas/repository"},"body_html":{"type":"string"},"body_text":{"type":"string"},"timeline_url":{"type":"string","format":"uri"},"performed_via_github_app":{"allOf":[{"$ref":"#/components/schemas/integration"}]}}},"label-search-result-item":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"url":{"type":"string","format":"uri"},"name":{"type":"string"},"color":{"type":"string"},"default":{"type":"boolean"},"description":{"type":"string"},"score":{"type":"number"},"text_matches":{"$ref":"#/components/schemas/search-result-text-matches"}}},"repo-search-result-item":{"type":"object","properties":{"id":{"type":"integer"},"node_id":{"type":"string"},"name":{"type":"string"},"full_name":{"type":"string"},"owner":{"allOf":[{"$ref":"#/components/schemas/simple-user"}]},"private":{"type":"boolean"},"html_url":{"type":"string","format":"uri"},"description":{"type":"string"},"fork":{"type":"boolean"},"url":{"type":"string","format":"uri"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"pushed_at":{"type":"string","format":"date-time"},"homepage":{"type":"string","format":"uri"},"size":{"type":"integer"},"stargazers_count":{"type":"integer"},"watchers_count":{"type":"integer"},"language":{"type":"string"},"forks_count":{"type":"integer"},"open_issues_count":{"type":"integer"},"master_branch":{"type":"string"},"default_branch":{"type":"string"},"score":{"type":"number"},"forks_url":{"type":"string","format":"uri"},"keys_url":{"type":"string"},"collaborators_url":{"type":"string"},"teams_url":{"type":"string","format":"uri"},"hooks_url":{"type":"string","format":"uri"},"issue_events_url":{"type":"string"},"events_url":{"type":"string","format":"uri"},"assignees_url":{"type":"string"},"branches_url":{"type":"string"},"tags_url":{"type":"string","format":"uri"},"blobs_url":{"type":"string"},"git_tags_url":{"type":"string"},"git_refs_url":{"type":"string"},"trees_url":{"type":"string"},"statuses_url":{"type":"string"},"languages_url":{"type":"string","format":"uri"},"stargazers_url":{"type":"string","format":"uri"},"contributors_url":{"type":"string","format":"uri"},"subscribers_url":{"type":"string","format":"uri"},"subscription_url":{"type":"string","format":"uri"},"commits_url":{"type":"string"},"git_commits_url":{"type":"string"},"comments_url":{"type":"string"},"issue_comment_url":{"type":"string"},"contents_url":{"type":"string"},"compare_url":{"type":"string"},"merges_url":{"type":"string","format":"uri"},"archive_url":{"type":"string"},"downloads_url":{"type":"string","format":"uri"},"issues_url":{"type":"string"},"pulls_url":{"type":"string"},"milestones_url":{"type":"string"},"notifications_url":{"type":"string"},"labels_url":{"type":"string"},"releases_url":{"type":"string"},"deployments_url":{"type":"string","format":"uri"},"git_url":{"type":"string"},"ssh_url":{"type":"string"},"clone_url":{"type":"string"},"svn_url":{"type":"string","format":"uri"},"forks":{"type":"integer"},"open_issues":{"type":"integer"},"watchers":{"type":"integer"},"topics":{"type":"array","items":{"type":"string"}},"mirror_url":{"type":"string","format":"uri"},"has_issues":{"type":"boolean"},"has_projects":{"type":"boolean"},"has_pages":{"type":"boolean"},"has_wiki":{"type":"boolean"},"has_downloads":{"type":"boolean"},"archived":{"type":"boolean"},"disabled":{"type":"boolean"},"license":{"allOf":[{"$ref":"#/components/schemas/license-simple"}]},"permissions":{"type":"object","properties":{"admin":{"type":"boolean"},"pull":{"type":"boolean"},"push":{"type":"boolean"}}},"text_matches":{"$ref":"#/components/schemas/search-result-text-matches"},"temp_clone_token":{"type":"string"},"allow_merge_commit":{"type":"boolean"},"allow_squash_merge":{"type":"boolean"},"allow_rebase_merge":{"type":"boolean"},"allow_auto_merge":{"type":"boolean"},"delete_branch_on_merge":{"type":"boolean"}}},"topic-search-result-item":{"type":"object","properties":{"name":{"type":"string"},"display_name":{"type":"string"},"short_description":{"type":"string"},"description":{"type":"string"},"created_by":{"type":"string"},"released":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"featured":{"type":"boolean"},"curated":{"type":"boolean"},"score":{"type":"number"},"repository_count":{"type":"integer"},"logo_url":{"type":"string","format":"uri"},"text_matches":{"$ref":"#/components/schemas/search-result-text-matches"},"related":{"type":"array","items":{"type":"object","properties":{"topic_relation":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"},"topic_id":{"type":"integer"},"relation_type":{"type":"string"}}}}}},"aliases":{"type":"array","items":{"type":"object","properties":{"topic_relation":{"type":"object","properties":{"id":{"type":"integer"},"name":{"type":"string"},"topic_id":{"type":"integer"},"relation_type":{"type":"string"}}}}}}}},"user-search-result-item":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"avatar_url":{"type":"string","format":"uri"},"gravatar_id":{"type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"followers_url":{"type":"string","format":"uri"},"subscriptions_url":{"type":"string","format":"uri"},"organizations_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"received_events_url":{"type":"string","format":"uri"},"type":{"type":"string"},"score":{"type":"number"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"events_url":{"type":"string"},"public_repos":{"type":"integer"},"public_gists":{"type":"integer"},"followers":{"type":"integer"},"following":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"name":{"type":"string"},"bio":{"type":"string"},"email":{"type":"string","format":"email"},"location":{"type":"string"},"site_admin":{"type":"boolean"},"hireable":{"type":"boolean"},"text_matches":{"$ref":"#/components/schemas/search-result-text-matches"},"blog":{"type":"string"},"company":{"type":"string"},"suspended_at":{"type":"string","format":"date-time"}}},"private-user":{"type":"object","properties":{"login":{"type":"string"},"id":{"type":"integer"},"node_id":{"type":"string"},"avatar_url":{"type":"string","format":"uri"},"gravatar_id":{"type":"string"},"url":{"type":"string","format":"uri"},"html_url":{"type":"string","format":"uri"},"followers_url":{"type":"string","format":"uri"},"following_url":{"type":"string"},"gists_url":{"type":"string"},"starred_url":{"type":"string"},"subscriptions_url":{"type":"string","format":"uri"},"organizations_url":{"type":"string","format":"uri"},"repos_url":{"type":"string","format":"uri"},"events_url":{"type":"string"},"received_events_url":{"type":"string","format":"uri"},"type":{"type":"string"},"site_admin":{"type":"boolean"},"name":{"type":"string"},"company":{"type":"string"},"blog":{"type":"string"},"location":{"type":"string"},"email":{"type":"string","format":"email"},"hireable":{"type":"boolean"},"bio":{"type":"string"},"twitter_username":{"type":"string"},"public_repos":{"type":"integer"},"public_gists":{"type":"integer"},"followers":{"type":"integer"},"following":{"type":"integer"},"created_at":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"private_gists":{"type":"integer"},"total_private_repos":{"type":"integer"},"owned_private_repos":{"type":"integer"},"disk_usage":{"type":"integer"},"collaborators":{"type":"integer"},"two_factor_authentication":{"type":"boolean"},"plan":{"type":"object","properties":{"collaborators":{"type":"integer"},"name":{"type":"string"},"space":{"type":"integer"},"private_repos":{"type":"integer"}}},"suspended_at":{"type":"string","format":"date-time"},"business_plus":{"type":"boolean"},"ldap_dn":{"type":"string"}}},"email":{"type":"object","properties":{"email":{"type":"string","format":"email"},"primary":{"type":"boolean"},"verified":{"type":"boolean"},"visibility":{"type":"string"}}},"gpg-key":{"type":"object","properties":{"id":{"type":"integer"},"primary_key_id":{"type":"integer"},"key_id":{"type":"string"},"public_key":{"type":"string"},"emails":{"type":"array","items":{"type":"object","properties":{"email":{"type":"string"},"verified":{"type":"boolean"}}}},"subkeys":{"type":"array","items":{"type":"object","properties":{"id":{"type":"integer"},"primary_key_id":{"type":"integer"},"key_id":{"type":"string"},"public_key":{"type":"string"},"emails":{"type":"array","items":{}},"subkeys":{"type":"array","items":{}},"can_sign":{"type":"boolean"},"can_encrypt_comms":{"type":"boolean"},"can_encrypt_storage":{"type":"boolean"},"can_certify":{"type":"boolean"},"created_at":{"type":"string"},"expires_at":{"type":"string","nullable":true},"raw_key":{"type":"string","nullable":true}}}},"can_sign":{"type":"boolean"},"can_encrypt_comms":{"type":"boolean"},"can_encrypt_storage":{"type":"boolean"},"can_certify":{"type":"boolean"},"created_at":{"type":"string","format":"date-time"},"expires_at":{"type":"string","format":"date-time"},"raw_key":{"type":"string"}}},"key":{"type":"object","properties":{"key":{"type":"string"},"id":{"type":"integer"},"url":{"type":"string"},"title":{"type":"string"},"created_at":{"type":"string","format":"date-time"},"verified":{"type":"boolean"},"read_only":{"type":"boolean"}}},"marketplace-account":{"type":"object","properties":{"url":{"type":"string","format":"uri"},"id":{"type":"integer"},"type":{"type":"string"},"node_id":{"type":"string"},"login":{"type":"string"},"email":{"type":"string","format":"email"},"organization_billing_email":{"type":"string","format":"email"}}},"user-marketplace-purchase":{"type":"object","properties":{"billing_cycle":{"type":"string"},"next_billing_date":{"type":"string","format":"date-time"},"unit_count":{"type":"integer"},"on_free_trial":{"type":"boolean"},"free_trial_ends_on":{"type":"string","format":"date-time"},"updated_at":{"type":"string","format":"date-time"},"account":{"$ref":"#/components/schemas/marketplace-account"},"plan":{"$ref":"#/components/schemas/marketplace-listing-plan"}}},"starred-repository":{"type":"object","properties":{"starred_at":{"type":"string","format":"date-time"},"repo":{"$ref":"#/components/schemas/repository"}}},"hovercard":{"type":"object","properties":{"contexts":{"type":"array","items":{"type":"object","properties":{"message":{"type":"string"},"octicon":{"type":"string"}},"required":["message","octicon"]}}}},"key-simple":{"type":"object","properties":{"id":{"type":"integer"},"key":{"type":"string"}}}}',
      ),
    ),
  ) {}
  /**
   * GitHub API Root
   * Get Hypermedia links to resources accessible in GitHub's REST API
   * Learn more at {@link https://docs.github.com/rest/overview/resources-in-the-rest-api#root-endpoint}
   * Tags: meta
   *
   */
  async metaRoot(params: {}): Promise<{
    current_user_url: string;
    current_user_authorizations_html_url: string;
    authorizations_url: string;
    code_search_url: string;
    commit_search_url: string;
    emails_url: string;
    emojis_url: string;
    events_url: string;
    feeds_url: string;
    followers_url: string;
    following_url: string;
    gists_url: string;
    hub_url: string;
    issue_search_url: string;
    issues_url: string;
    keys_url: string;
    label_search_url: string;
    notifications_url: string;
    organization_url: string;
    organization_repositories_url: string;
    organization_teams_url: string;
    public_gists_url: string;
    rate_limit_url: string;
    repository_url: string;
    repository_search_url: string;
    current_user_repositories_url: string;
    starred_url: string;
    starred_gists_url: string;
    topic_search_url?: string;
    user_url: string;
    user_organizations_url: string;
    user_repositories_url: string;
    user_search_url: string;
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"current_user_url":{"type":"string","format":"uri-template"},"current_user_authorizations_html_url":{"type":"string","format":"uri-template"},"authorizations_url":{"type":"string","format":"uri-template"},"code_search_url":{"type":"string","format":"uri-template"},"commit_search_url":{"type":"string","format":"uri-template"},"emails_url":{"type":"string","format":"uri-template"},"emojis_url":{"type":"string","format":"uri-template"},"events_url":{"type":"string","format":"uri-template"},"feeds_url":{"type":"string","format":"uri-template"},"followers_url":{"type":"string","format":"uri-template"},"following_url":{"type":"string","format":"uri-template"},"gists_url":{"type":"string","format":"uri-template"},"hub_url":{"type":"string","format":"uri-template"},"issue_search_url":{"type":"string","format":"uri-template"},"issues_url":{"type":"string","format":"uri-template"},"keys_url":{"type":"string","format":"uri-template"},"label_search_url":{"type":"string","format":"uri-template"},"notifications_url":{"type":"string","format":"uri-template"},"organization_url":{"type":"string","format":"uri-template"},"organization_repositories_url":{"type":"string","format":"uri-template"},"organization_teams_url":{"type":"string","format":"uri-template"},"public_gists_url":{"type":"string","format":"uri-template"},"rate_limit_url":{"type":"string","format":"uri-template"},"repository_url":{"type":"string","format":"uri-template"},"repository_search_url":{"type":"string","format":"uri-template"},"current_user_repositories_url":{"type":"string","format":"uri-template"},"starred_url":{"type":"string","format":"uri-template"},"starred_gists_url":{"type":"string","format":"uri-template"},"topic_search_url":{"type":"string","format":"uri-template"},"user_url":{"type":"string","format":"uri-template"},"user_organizations_url":{"type":"string","format":"uri-template"},"user_repositories_url":{"type":"string","format":"uri-template"},"user_search_url":{"type":"string","format":"uri-template"}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the authenticated app
   * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are associated with this GitHub App, see the `installations_count` in the response. For more details about your app's installations, see the "[List installations for the authenticated app](https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-the-authenticated-app}
   * Tags: apps
   *
   */
  async appsGetAuthenticated(params: {}): Promise<Integration> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/integration"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a GitHub App from a manifest
   * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key), and `webhook_secret`.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#create-a-github-app-from-a-manifest}
   * Tags: apps
   *
   */
  async appsCreateFromManifest(
    params: {
      code: string;
    },
    body: any,
  ): Promise<
    Integration &
      ({
        client_id: string;
        client_secret: string;
        webhook_secret: string | null;
        pem: string;
      } & {
        [key: string]: any;
      })
  > {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app-manifests/{code}/conversions', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"allOf":[{"$ref":"#/components/schemas/integration"},{"type":"object","properties":{"client_id":{"type":"string"},"client_secret":{"type":"string"},"webhook_secret":{"type":"string"},"pem":{"type":"string"}},"additionalProperties":true}]}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a webhook configuration for an app
   * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-a-webhook-configuration-for-an-app}
   * Tags: apps
   *
   */
  async appsGetWebhookConfigForApp(params: {}): Promise<WebhookConfig> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/hook/config', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/webhook-config"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a webhook configuration for an app
   * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#update-a-webhook-configuration-for-an-app}
   * Tags: apps
   *
   */
  async appsUpdateWebhookConfigForApp(
    params: {},
    body: {
      url?: WebhookConfigUrl;
      content_type?: WebhookConfigContentType;
      secret?: WebhookConfigSecret;
      insecure_ssl?: WebhookConfigInsecureSsl;
    },
  ): Promise<WebhookConfig> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/hook/config', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/webhook-config"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List deliveries for an app webhook
   * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-deliveries-for-an-app-webhook}
   * Tags: apps
   *
   */
  async appsListWebhookDeliveries(params: {
    per_page?: number;
    cursor?: string;
  }): Promise<HookDeliveryItem[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/hook/deliveries', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.cursor !== undefined)
      requestContext.setQueryParam(
        'cursor',
        r.serializeParameter(params.cursor),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/hook-delivery-item"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a delivery for an app webhook
   * Returns a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-a-delivery-for-an-app-webhook}
   * Tags: apps
   *
   */
  async appsGetWebhookDelivery(params: {
    delivery_id: number;
  }): Promise<HookDelivery> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/hook/deliveries/{delivery_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/hook-delivery"}'),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Redeliver a delivery for an app webhook
   * Redeliver a delivery for the webhook configured for a GitHub App.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#redeliver-a-delivery-for-an-app-webhook}
   * Tags: apps
   *
   */
  async appsRedeliverWebhookDelivery(params: {
    delivery_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/hook/deliveries/{delivery_id}/attempts', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"object"}'),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List installations for the authenticated app
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   *
   * The permissions the installation has are included under the `permissions` key.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-installations-for-the-authenticated-app}
   * Tags: apps
   *
   */
  async appsListInstallations(params: {
    per_page?: number;
    page?: number;
    since?: Date;
    outdated?: string;
  }): Promise<Installation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/installations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.outdated !== undefined)
      requestContext.setQueryParam(
        'outdated',
        r.serializeParameter(params.outdated),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/installation"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an installation for the authenticated app
   * Enables an authenticated GitHub App to find an installation's information using the installation id. The installation's account type (`target_type`) will be either an organization or a user account, depending which account the repository belongs to.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-an-installation-for-the-authenticated-app}
   * Tags: apps
   *
   */
  async appsGetInstallation(params: {
    installation_id: number;
  }): Promise<Installation> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/installations/{installation_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/installation"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an installation for the authenticated app
   * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's access to your account's resources, then we recommend the "[Suspend an app installation](https://docs.github.com/rest/reference/apps/#suspend-an-app-installation)" endpoint.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#delete-an-installation-for-the-authenticated-app}
   * Tags: apps
   *
   */
  async appsDeleteInstallation(params: {
    installation_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/app/installations/{installation_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an installation access token for an app
   * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's installation on an organization or individual account. Installation tokens expire one hour from the time you create them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation token. By default the installation token has access to all repositories that the installation can access. To restrict the access to specific repositories, you can provide the `repository_ids` when creating the token. When you omit `repository_ids`, the response does not contain the `repositories` key.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps/#create-an-installation-access-token-for-an-app}
   * Tags: apps
   *
   */
  async appsCreateInstallationAccessToken(
    params: {
      installation_id: number;
    },
    body: {
      /**
       * List of repository names that the token should have access to
       *
       */
      repositories?: string[];
      /**
       * List of repository IDs that the token should have access to
       * @example
       * [
       *   1
       * ]
       *
       */
      repository_ids?: number[];
      permissions?: AppPermissions;
    },
  ): Promise<InstallationToken> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/app/installations/{installation_id}/access_tokens',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/installation-token"}'),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Suspend an app installation
   * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that account.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#suspend-an-app-installation}
   * Tags: apps
   *
   */
  async appsSuspendInstallation(params: {
    installation_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/app/installations/{installation_id}/suspended',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unsuspend an app installation
   * Removes a GitHub App installation suspension.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#unsuspend-an-app-installation}
   * Tags: apps
   *
   */
  async appsUnsuspendInstallation(params: {
    installation_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/app/installations/{installation_id}/suspended',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List your grants
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * You can use this API to list the set of OAuth applications that have been granted access to your account. Unlike the [list your authorizations](https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations) API, this API does not manage individual tokens. This API will return one entry for each OAuth application that has been granted access to your account, regardless of the number of tokens an application has generated for your user. The list of OAuth applications returned matches what is shown on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized). The `scopes` returned are the union of scopes authorized for the application. For example, if an application has one token with `repo` scope and another token with `user` scope, the grant will return `["repo", "user"]`.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#list-your-grants}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsListGrants(params: {
    per_page?: number;
    page?: number;
    client_id?: string;
  }): Promise<ApplicationGrant[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/grants', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.client_id !== undefined)
      requestContext.setQueryParam(
        'client_id',
        r.serializeParameter(params.client_id),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/application-grant"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a single grant
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-grant}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsGetGrant(params: {
    grant_id: number;
  }): Promise<ApplicationGrant> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/grants/{grant_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/application-grant"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a grant
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for your user. Once deleted, the application has no access to your account and is no longer listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#delete-a-grant}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsDeleteGrant(params: {
    grant_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/grants/{grant_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an app authorization
   * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the application authorizations settings screen within GitHub](https://github.com/settings/applications#authorized).
   * Learn more at {@link https://docs.github.com/rest/reference/apps#delete-an-app-authorization}
   * Tags: apps
   *
   */
  async appsDeleteAuthorization(
    params: {
      client_id: string;
    },
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       *
       */
      access_token?: string;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/{client_id}/grant', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Revoke a grant for an application
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth application owners can revoke a grant for their OAuth application and a specific user. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also provide a valid token as `:access_token` and the grant for the token's owner will be deleted.
   *
   * Deleting an OAuth application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the application will have no access to the user's account and will no longer be listed on [the Applications settings page under "Authorized OAuth Apps" on GitHub](https://github.com/settings/applications#authorized).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/apps#revoke-a-grant-for-an-application}
   * Tags: apps
   *
   */
  async appsRevokeGrantForApplication(params: {
    client_id: string;
    access_token: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/applications/{client_id}/grants/{access_token}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check a token
   * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this endpoint, where the username is the OAuth application `client_id` and the password is its `client_secret`. Invalid tokens will return `404 NOT FOUND`.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#check-a-token}
   * Tags: apps
   *
   */
  async appsCheckToken(
    params: {
      client_id: string;
    },
    body: {
      /**
       * The access_token of the OAuth application.
       *
       */
      access_token: string;
    },
  ): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/{client_id}/token', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Reset a token
   * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#reset-a-token}
   * Tags: apps
   *
   */
  async appsResetToken(
    params: {
      client_id: string;
    },
    body: {
      /**
       * The access_token of the OAuth application.
       *
       */
      access_token: string;
    },
  ): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/{client_id}/token', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an app token
   * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#delete-an-app-token}
   * Tags: apps
   *
   */
  async appsDeleteToken(
    params: {
      client_id: string;
    },
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       *
       */
      access_token: string;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/{client_id}/token', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a scoped access token
   * Use a non-scoped user-to-server OAuth access token to create a repository scoped and/or permission scoped user-to-server OAuth access token. You can specify which repositories the token can access and which permissions are granted to the token. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#create-a-scoped-access-token}
   * Tags: apps
   *
   */
  async appsScopeToken(
    params: {
      client_id: string;
    },
    body: {
      /**
       * The OAuth access token used to authenticate to the GitHub API.
       * @example "e72e16c7e42f292c6912e7710c838347ae178b4a"
       *
       */
      access_token: string;
      /**
       * The name of the user or organization to scope the user-to-server access token to. **Required** unless `target_id` is specified.
       * @example "octocat"
       *
       */
      target?: string;
      /**
       * The ID of the user or organization to scope the user-to-server access token to. **Required** unless `target` is specified.
       * @example 1
       *
       */
      target_id?: number;
      /**
       * The list of repository names to scope the user-to-server access token to. `repositories` may not be specified if `repository_ids` is specified.
       *
       */
      repositories?: string[];
      /**
       * The list of repository IDs to scope the user-to-server access token to. `repository_ids` may not be specified if `repositories` is specified.
       * @example
       * [
       *   1
       * ]
       *
       */
      repository_ids?: number[];
      permissions?: AppPermissions;
    },
  ): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/applications/{client_id}/token/scoped', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check an authorization
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth applications can use a special API method for checking OAuth token validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this particular endpoint. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/apps#check-an-authorization}
   * Tags: apps
   *
   */
  async appsCheckAuthorization(params: {
    client_id: string;
    access_token: string;
  }): Promise<Authorization | null> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/applications/{client_id}/tokens/{access_token}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"allOf":[{"$ref":"#/components/schemas/authorization"}]}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Reset an authorization
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth applications can use this API method to reset a valid OAuth token without end-user involvement. Applications must save the "token" property in the response because changes take effect immediately. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. Invalid tokens will return `404 NOT FOUND`.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/apps#reset-an-authorization}
   * Tags: apps
   *
   */
  async appsResetAuthorization(params: {
    client_id: string;
    access_token: string;
  }): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/applications/{client_id}/tokens/{access_token}',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Revoke an authorization for an application
   * **Deprecation Notice:** GitHub will discontinue OAuth endpoints that contain `access_token` in the path parameter. We have introduced new endpoints that allow you to securely manage tokens for OAuth Apps by moving `access_token` to the request body. For more information, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-app-endpoint/).
   *
   * OAuth application owners can revoke a single token for an OAuth application. You must use [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/apps#revoke-an-authorization-for-an-application}
   * Tags: apps
   *
   */
  async appsRevokeAuthorizationForApplication(params: {
    client_id: string;
    access_token: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/applications/{client_id}/tokens/{access_token}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an app
   * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
   *
   * If the GitHub App you specify is public, you can access this endpoint without authenticating. If the GitHub App you specify is private, you must authenticate with a [personal access token](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line/) or an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps/#get-an-app}
   * Tags: apps
   *
   */
  async appsGetBySlug(params: { app_slug: string }): Promise<Integration> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/apps/{app_slug}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/integration"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List your authorizations
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#list-your-authorizations}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsListAuthorizations(params: {
    per_page?: number;
    page?: number;
    client_id?: string;
  }): Promise<Authorization[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/authorizations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.client_id !== undefined)
      requestContext.setQueryParam(
        'client_id',
        r.serializeParameter(params.client_id),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/authorization"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a new authorization
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates OAuth tokens using [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication). If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * To create tokens for a particular OAuth application using this endpoint, you must authenticate as the user you want to create an authorization for and provide the app's client ID and secret, found on your OAuth application's settings page. If your OAuth application intends to create multiple tokens for one user, use `fingerprint` to differentiate between them.
   *
   * You can also create tokens on GitHub from the [personal access tokens settings](https://github.com/settings/tokens) page. Read more about these tokens in [the GitHub Help documentation](https://help.github.com/articles/creating-an-access-token-for-command-line-use).
   *
   * Organizations that enforce SAML SSO require personal access tokens to be allowed. Read more about allowing tokens in [the GitHub Help documentation](https://help.github.com/articles/about-identity-and-access-management-with-saml-single-sign-on).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#create-a-new-authorization}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsCreateAuthorization(
    params: {},
    body: {
      /**
       * A list of scopes that this authorization is in.
       * @example
       * [
       *   "public_repo",
       *   "user"
       * ]
       *
       */
      scopes?: string[] | null;
      /**
       * A note to remind you what the OAuth token is for.
       * @example "Update all gems"
       *
       */
      note?: string;
      /**
       * A URL to remind you what app the OAuth token is for.
       *
       */
      note_url?: string;
      /**
       * The OAuth app client key for which to create the token.
       *
       */
      client_id?: string;
      /**
       * The OAuth app client secret for which to create the token.
       *
       */
      client_secret?: string;
      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       *
       */
      fingerprint?: string;
    },
  ): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/authorizations', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get-or-create an authorization for a specific app
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * Creates a new authorization for the specified OAuth application, only if an authorization for that application doesn't already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsGetOrCreateAuthorizationForApp(
    params: {
      client_id: string;
    },
    body: {
      /**
       * The OAuth app client secret for which to create the token.
       *
       */
      client_secret: string;
      /**
       * A list of scopes that this authorization is in.
       * @example
       * [
       *   "public_repo",
       *   "user"
       * ]
       *
       */
      scopes?: string[] | null;
      /**
       * A note to remind you what the OAuth token is for.
       * @example "Update all gems"
       *
       */
      note?: string;
      /**
       * A URL to remind you what app the OAuth token is for.
       *
       */
      note_url?: string;
      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       *
       */
      fingerprint?: string;
    },
  ): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/authorizations/clients/{client_id}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Authorization>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get-or-create an authorization for a specific app and fingerprint
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * **Warning:** Apps must use the [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow) to obtain OAuth tokens that work with GitHub SAML organizations. OAuth tokens created using the Authorizations API will be unable to access GitHub SAML organizations. For more information, see the [blog post](https://developer.github.com/changes/2019-11-05-deprecated-passwords-and-authorizations-api).
   *
   * This method will create a new authorization for the specified OAuth application, only if an authorization for that application and fingerprint do not already exist for the user. The URL includes the 20 character client ID for the OAuth app that is requesting the token. `fingerprint` is a unique string to distinguish an authorization from others created for the same client ID and user. It returns the user's existing authorization for the application if one is present. Otherwise, it creates and returns a new one.
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#get-or-create-an-authorization-for-a-specific-app-and-fingerprint}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsGetOrCreateAuthorizationForAppAndFingerprint(
    params: {
      client_id: string;
      fingerprint: string;
    },
    body: {
      /**
       * The OAuth app client secret for which to create the token.
       *
       */
      client_secret: string;
      /**
       * A list of scopes that this authorization is in.
       * @example
       * [
       *   "public_repo",
       *   "user"
       * ]
       *
       */
      scopes?: string[] | null;
      /**
       * A note to remind you what the OAuth token is for.
       * @example "Update all gems"
       *
       */
      note?: string;
      /**
       * A URL to remind you what app the OAuth token is for.
       *
       */
      note_url?: string;
    },
  ): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/authorizations/clients/{client_id}/{fingerprint}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Authorization>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a single authorization
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#get-a-single-authorization}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsGetAuthorization(params: {
    authorization_id: number;
  }): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/authorizations/{authorization_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an existing authorization
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations/), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/developers/apps/authorizing-oauth-apps#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   *
   * If you have two-factor authentication setup, Basic Authentication for this endpoint requires that you use a one-time password (OTP) and your username and password instead of tokens. For more information, see "[Working with two-factor authentication](https://docs.github.com/rest/overview/other-authentication-methods#working-with-two-factor-authentication)."
   *
   * You can only send one of these scope keys at a time.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#update-an-existing-authorization}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsUpdateAuthorization(
    params: {
      authorization_id: number;
    },
    body: {
      /**
       * A list of scopes that this authorization is in.
       * @example
       * [
       *   "public_repo",
       *   "user"
       * ]
       *
       */
      scopes?: string[] | null;
      /**
       * A list of scopes to add to this authorization.
       *
       */
      add_scopes?: string[];
      /**
       * A list of scopes to remove from this authorization.
       *
       */
      remove_scopes?: string[];
      /**
       * A note to remind you what the OAuth token is for.
       * @example "Update all gems"
       *
       */
      note?: string;
      /**
       * A URL to remind you what app the OAuth token is for.
       *
       */
      note_url?: string;
      /**
       * A unique string to distinguish an authorization from others created for the same client ID and user.
       *
       */
      fingerprint?: string;
    },
  ): Promise<Authorization> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/authorizations/{authorization_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authorization"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an authorization
   * **Deprecation Notice:** GitHub will discontinue the [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations), which is used by integrations to create personal access tokens and OAuth tokens, and you must now create these tokens using our [web application flow](https://docs.github.com/apps/building-oauth-apps/authorizing-oauth-apps/#web-application-flow). The [OAuth Authorizations API](https://docs.github.com/rest/reference/oauth-authorizations) will be removed on November, 13, 2020. For more information, including scheduled brownouts, see the [blog post](https://developer.github.com/changes/2020-02-14-deprecating-oauth-auth-endpoint/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/oauth-authorizations#delete-an-authorization}
   * Tags: oauth-authorizations
   *
   */
  async oauthAuthorizationsDeleteAuthorization(params: {
    authorization_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/authorizations/{authorization_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all codes of conduct
   * Learn more at {@link https://docs.github.com/rest/reference/codes-of-conduct#get-all-codes-of-conduct}
   * Tags: codes-of-conduct
   *
   */
  async codesOfConductGetAllCodesOfConduct(params: {}): Promise<
    CodeOfConduct[]
  > {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/codes_of_conduct', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/code-of-conduct"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a code of conduct
   * Learn more at {@link https://docs.github.com/rest/reference/codes-of-conduct#get-a-code-of-conduct}
   * Tags: codes-of-conduct
   *
   */
  async codesOfConductGetConductCode(params: {
    key: string;
  }): Promise<CodeOfConduct> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/codes_of_conduct/{key}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/code-of-conduct"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get emojis
   * Lists all the emojis available to use on GitHub.
   * Learn more at {@link https://docs.github.com/rest/reference/emojis#get-emojis}
   * Tags: emojis
   *
   */
  async emojisGet(params: {}): Promise<{
    [key: string]: string;
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/emojis', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","additionalProperties":{"type":"string"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Actions permissions for an enterprise
   * Gets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#get-github-actions-permissions-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminGetGithubActionsPermissionsEnterprise(params: {
    enterprise: string;
  }): Promise<ActionsEnterprisePermissions> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/actions-enterprise-permissions"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set GitHub Actions permissions for an enterprise
   * Sets the GitHub Actions permissions policy for organizations and allowed actions in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#set-github-actions-permissions-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminSetGithubActionsPermissionsEnterprise(
    params: {
      enterprise: string;
    },
    body: {
      enabled_organizations: EnabledOrganizations;
      allowed_actions?: AllowedActions;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List selected organizations enabled for GitHub Actions in an enterprise
   * Lists the organizations that are selected to have GitHub Actions enabled in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-selected-organizations-enabled-for-github-actions-in-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListSelectedOrganizationsEnabledGithubActionsEnterprise(params: {
    enterprise: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    organizations: OrganizationSimple[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions/organizations',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"organizations":{"type":"array","items":{"$ref":"#/components/schemas/organization-simple"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set selected organizations enabled for GitHub Actions in an enterprise
   * Replaces the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#set-selected-organizations-enabled-for-github-actions-in-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminSetSelectedOrganizationsEnabledGithubActionsEnterprise(
    params: {
      enterprise: string;
    },
    body: {
      /**
       * List of organization IDs to enable for GitHub Actions.
       *
       */
      selected_organization_ids: number[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions/organizations',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Enable a selected organization for GitHub Actions in an enterprise
   * Adds an organization to the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#enable-a-selected-organization-for-github-actions-in-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminEnableSelectedOrganizationGithubActionsEnterprise(params: {
    enterprise: string;
    org_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Disable a selected organization for GitHub Actions in an enterprise
   * Removes an organization from the list of selected organizations that are enabled for GitHub Actions in an enterprise. To use this endpoint, the enterprise permission policy for `enabled_organizations` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#disable-a-selected-organization-for-github-actions-in-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminDisableSelectedOrganizationGithubActionsEnterprise(params: {
    enterprise: string;
    org_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions/organizations/{org_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get allowed actions for an enterprise
   * Gets the selected actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#get-allowed-actions-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminGetAllowedActionsEnterprise(params: {
    enterprise: string;
  }): Promise<SelectedActions> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions/selected-actions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/selected-actions"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set allowed actions for an enterprise
   * Sets the actions that are allowed in an enterprise. To use this endpoint, the enterprise permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an enterprise](#set-github-actions-permissions-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#set-allowed-actions-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminSetAllowedActionsEnterprise(
    params: {
      enterprise: string;
    },
    body: SelectedActions,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/permissions/selected-actions',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List self-hosted runner groups for an enterprise
   * Lists all self-hosted runner groups for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runner-groups-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListSelfHostedRunnerGroupsForEnterprise(params: {
    enterprise: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    runner_groups: RunnerGroupsEnterprise[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"runner_groups":{"type":"array","items":{"$ref":"#/components/schemas/runner-groups-enterprise"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a self-hosted runner group for an enterprise
   * Creates a new self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#create-self-hosted-runner-group-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminCreateSelfHostedRunnerGroupForEnterprise(
    params: {
      enterprise: string;
    },
    body: {
      /**
       * Name of the runner group.
       *
       */
      name: string;
      /**
       * Visibility of a runner group. You can select all organizations or select individual organization. Can be one of: `all` or `selected`
       *
       */
      visibility?: 'selected' | 'all';
      /**
       * List of organization IDs that can access the runner group.
       *
       */
      selected_organization_ids?: number[];
      /**
       * List of runner IDs to add to the runner group.
       *
       */
      runners?: number[];
    },
  ): Promise<RunnerGroupsEnterprise> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner-groups-enterprise"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a self-hosted runner group for an enterprise
   * Gets a specific self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-group-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminGetSelfHostedRunnerGroupForEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
  }): Promise<RunnerGroupsEnterprise> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner-groups-enterprise"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a self-hosted runner group for an enterprise
   * Updates the `name` and `visibility` of a self-hosted runner group in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#update-a-self-hosted-runner-group-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminUpdateSelfHostedRunnerGroupForEnterprise(
    params: {
      enterprise: string;
      runner_group_id: number;
    },
    body: {
      /**
       * Name of the runner group.
       *
       */
      name?: string;
      /**
       * Visibility of a runner group. You can select all organizations or select individual organizations. Can be one of: `all` or `selected`
       * @defaultValue "all"
       *
       */
      visibility?: 'selected' | 'all';
    },
  ): Promise<RunnerGroupsEnterprise> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner-groups-enterprise"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a self-hosted runner group from an enterprise
   * Deletes a self-hosted runner group for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#delete-a-self-hosted-runner-group-from-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminDeleteSelfHostedRunnerGroupFromEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization access to a self-hosted runner group in an enterprise
   * Lists the organizations with access to a self-hosted runner group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-organization-access-to-a-self-hosted-runner-group-in-a-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListOrgAccessToSelfHostedRunnerGroupInEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    organizations: OrganizationSimple[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"organizations":{"type":"array","items":{"$ref":"#/components/schemas/organization-simple"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set organization access for a self-hosted runner group in an enterprise
   * Replaces the list of organizations that have access to a self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#set-organization-access-to-a-self-hosted-runner-group-in-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminSetOrgAccessToSelfHostedRunnerGroupInEnterprise(
    params: {
      enterprise: string;
      runner_group_id: number;
    },
    body: {
      /**
       * List of organization IDs that can access the runner group.
       *
       */
      selected_organization_ids: number[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add organization access to a self-hosted runner group in an enterprise
   * Adds an organization to the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#add-organization-access-to-a-self-hosted-runner-group-in-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminAddOrgAccessToSelfHostedRunnerGroupInEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
    org_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove organization access to a self-hosted runner group in an enterprise
   * Removes an organization from the list of selected organizations that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an enterprise](#create-a-self-hosted-runner-group-for-an-enterprise)."
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#remove-organization-access-to-a-self-hosted-runner-group-in-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminRemoveOrgAccessToSelfHostedRunnerGroupInEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
    org_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/organizations/{org_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List self-hosted runners in a group for an enterprise
   * Lists the self-hosted runners that are in a specific enterprise group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-in-a-group-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListSelfHostedRunnersInGroupForEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    runners: Runner[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"runners":{"type":"array","items":{"$ref":"#/components/schemas/runner"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set self-hosted runners in a group for an enterprise
   * Replaces the list of self-hosted runners that are part of an enterprise runner group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#set-self-hosted-runners-in-a-group-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminSetSelfHostedRunnersInGroupForEnterprise(
    params: {
      enterprise: string;
      runner_group_id: number;
    },
    body: {
      /**
       * List of runner IDs to add to the runner group.
       *
       */
      runners: number[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add a self-hosted runner to a group for an enterprise
   * Adds a self-hosted runner to a runner group configured in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise`
   * scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#add-a-self-hosted-runner-to-a-group-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminAddSelfHostedRunnerToGroupForEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
    runner_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a self-hosted runner from a group for an enterprise
   * Removes a self-hosted runner from a group configured in an enterprise. The runner is then returned to the default group.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#remove-a-self-hosted-runner-from-a-group-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminRemoveSelfHostedRunnerFromGroupForEnterprise(params: {
    enterprise: string;
    runner_group_id: number;
    runner_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runner-groups/{runner_group_id}/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List self-hosted runners for an enterprise
   * Lists all self-hosted runners configured for an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-self-hosted-runners-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListSelfHostedRunnersForEnterprise(params: {
    enterprise: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count?: number;
    runners?: Runner[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/enterprises/{enterprise}/actions/runners', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"runners":{"type":"array","items":{"$ref":"#/components/schemas/runner"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List runner applications for an enterprise
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-runner-applications-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListRunnerApplicationsForEnterprise(params: {
    enterprise: string;
  }): Promise<RunnerApplication[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runners/downloads',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/runner-application"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a registration token for an enterprise
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/enterprises/octo-enterprise --token TOKEN
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#create-a-registration-token-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminCreateRegistrationTokenForEnterprise(params: {
    enterprise: string;
  }): Promise<AuthenticationToken> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runners/registration-token',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authentication-token"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a remove token for an enterprise
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an enterprise. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an enterprise, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#create-a-remove-token-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminCreateRemoveTokenForEnterprise(params: {
    enterprise: string;
  }): Promise<AuthenticationToken> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runners/remove-token',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authentication-token"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a self-hosted runner for an enterprise
   * Gets a specific self-hosted runner configured in an enterprise.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#get-a-self-hosted-runner-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminGetSelfHostedRunnerForEnterprise(params: {
    enterprise: string;
    runner_id: number;
  }): Promise<Runner> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a self-hosted runner from an enterprise
   * Forces the removal of a self-hosted runner from an enterprise. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `admin:enterprise` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#delete-self-hosted-runner-from-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminDeleteSelfHostedRunnerFromEnterprise(params: {
    enterprise: string;
    runner_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/actions/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the audit log for an enterprise
   * Gets the audit log for an enterprise. To use this endpoint, you must be an enterprise admin, and you must use an access token with the `admin:enterprise` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#get-the-audit-log-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminGetAuditLog(params: {
    enterprise: string;
    phrase?: string;
    include?: 'web' | 'git' | 'all';
    after?: string;
    before?: string;
    order?: 'desc' | 'asc';
    page?: number;
    per_page?: number;
  }): Promise<AuditLogEvent[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/enterprises/{enterprise}/audit-log', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.phrase !== undefined)
      requestContext.setQueryParam(
        'phrase',
        r.serializeParameter(params.phrase),
      );
    if (params.include !== undefined)
      requestContext.setQueryParam(
        'include',
        r.serializeParameter(params.include),
      );
    if (params.after !== undefined)
      requestContext.setQueryParam('after', r.serializeParameter(params.after));
    if (params.before !== undefined)
      requestContext.setQueryParam(
        'before',
        r.serializeParameter(params.before),
      );
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/audit-log-event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Actions billing for an enterprise
   * Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * The authenticated user must be an enterprise admin.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-enterprise}
   * Tags: billing
   *
   */
  async billingGetGithubActionsBillingGhe(params: {
    enterprise: string;
  }): Promise<ActionsBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/settings/billing/actions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Packages billing for an enterprise
   * Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * The authenticated user must be an enterprise admin.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-enterprise}
   * Tags: billing
   *
   */
  async billingGetGithubPackagesBillingGhe(params: {
    enterprise: string;
  }): Promise<PackagesBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/settings/billing/packages',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/packages-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get shared storage billing for an enterprise
   * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * The authenticated user must be an enterprise admin.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-enterprise}
   * Tags: billing
   *
   */
  async billingGetSharedStorageBillingGhe(params: {
    enterprise: string;
  }): Promise<CombinedBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/enterprises/{enterprise}/settings/billing/shared-storage',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/combined-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public events
   * We delay the public events feed by five minutes, which means the most recent event returned by the public events API actually occurred at least five minutes ago.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-public-events}
   * Tags: activity
   *
   */
  async activityListPublicEvents(params: {
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/events', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get feeds
   * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API lists all the feeds available to the authenticated user:
   *
   * *   **Timeline**: The GitHub global public timeline
   * *   **User**: The public timeline for any user, using [URI template](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia)
   * *   **Current user public**: The public timeline for the authenticated user
   * *   **Current user**: The private timeline for the authenticated user
   * *   **Current user actor**: The private timeline for activity created by the authenticated user
   * *   **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
   * *   **Security advisories**: A collection of public announcements that provide information about security-related vulnerabilities in software on GitHub.
   *
   * **Note**: Private feeds are only returned when [authenticating via Basic Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs use the older, non revocable auth tokens.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#get-feeds}
   * Tags: activity
   *
   */
  async activityGetFeeds(params: {}): Promise<Feed> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/feeds', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/feed"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List gists for the authenticated user
   * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
   * Learn more at {@link https://docs.github.com/rest/reference/gists#list-gists-for-the-authenticated-user}
   * Tags: gists
   *
   */
  async gistsList(params: {
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<BaseGist[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/base-gist"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a gist
   * Allows you to add a new gist with one or more files.
   *
   * **Note:** Don't name your files "gistfile" with a numerical suffix. This is the format of the automatic naming scheme that Gist uses internally.
   * Learn more at {@link https://docs.github.com/rest/reference/gists#create-a-gist}
   * Tags: gists
   *
   */
  async gistsCreate(
    params: {},
    body: {
      /**
       * Description of the gist
       * @example "Example Ruby script"
       *
       */
      description?: string;
      /**
       * Names and content for the files that make up the gist
       * @example
       * {
       *   "hello.rb": {
       *     "content": "puts \"Hello, World!\""
       *   }
       * }
       *
       */
      files: {
        [key: string]: {
          /**
           * Content of the file
           *
           */
          content: string;
        };
      };
      public?: boolean | ('true' | 'false');
    },
  ): Promise<GistSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gist-simple"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public gists
   * List public gists sorted by most recently updated to least recently updated.
   *
   * Note: With [pagination](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination), you can fetch up to 3000 gists. For example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
   * Learn more at {@link https://docs.github.com/rest/reference/gists#list-public-gists}
   * Tags: gists
   *
   */
  async gistsListPublic(params: {
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<BaseGist[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/public', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/base-gist"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List starred gists
   * List the authenticated user's starred gists:
   * Learn more at {@link https://docs.github.com/rest/reference/gists#list-starred-gists}
   * Tags: gists
   *
   */
  async gistsListStarred(params: {
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<BaseGist[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/starred', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/base-gist"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a gist
   * Learn more at {@link https://docs.github.com/rest/reference/gists#get-a-gist}
   * Tags: gists
   *
   */
  async gistsGet(params: { gist_id: string }): Promise<GistSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gist-simple"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        block?: {
          reason?: string;
          created_at?: string;
          html_url?: string | null;
        };
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"block":{"type":"object","properties":{"reason":{"type":"string"},"created_at":{"type":"string"},"html_url":{"type":"string"}}},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a gist
   * Allows you to update or delete a gist file and rename gist files. Files from the previous version of the gist that aren't explicitly changed during an edit are unchanged.
   * Learn more at {@link https://docs.github.com/rest/reference/gists/#update-a-gist}
   * Tags: gists
   *
   */
  async gistsUpdate(
    params: {
      gist_id: string;
    },
    body: (any | any) | null,
  ): Promise<GistSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gist-simple"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a gist
   * Learn more at {@link https://docs.github.com/rest/reference/gists#delete-a-gist}
   * Tags: gists
   *
   */
  async gistsDelete(params: { gist_id: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List gist comments
   * Learn more at {@link https://docs.github.com/rest/reference/gists#list-gist-comments}
   * Tags: gists
   *
   */
  async gistsListComments(params: {
    gist_id: string;
    per_page?: number;
    page?: number;
  }): Promise<GistComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/comments', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/gist-comment"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a gist comment
   * Learn more at {@link https://docs.github.com/rest/reference/gists#create-a-gist-comment}
   * Tags: gists
   *
   */
  async gistsCreateComment(
    params: {
      gist_id: string;
    },
    body: {
      /**
       * The comment text.
       * @example "Body of the attachment"
       *
       */
      body: string;
    },
  ): Promise<GistComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/comments', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gist-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a gist comment
   * Learn more at {@link https://docs.github.com/rest/reference/gists#get-a-gist-comment}
   * Tags: gists
   *
   */
  async gistsGetComment(params: {
    gist_id: string;
    comment_id: number;
  }): Promise<GistComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/comments/{comment_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gist-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        block?: {
          reason?: string;
          created_at?: string;
          html_url?: string | null;
        };
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"block":{"type":"object","properties":{"reason":{"type":"string"},"created_at":{"type":"string"},"html_url":{"type":"string"}}},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a gist comment
   * Learn more at {@link https://docs.github.com/rest/reference/gists#update-a-gist-comment}
   * Tags: gists
   *
   */
  async gistsUpdateComment(
    params: {
      gist_id: string;
      comment_id: number;
    },
    body: {
      /**
       * The comment text.
       * @example "Body of the attachment"
       *
       */
      body: string;
    },
  ): Promise<GistComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/comments/{comment_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gist-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a gist comment
   * Learn more at {@link https://docs.github.com/rest/reference/gists#delete-a-gist-comment}
   * Tags: gists
   *
   */
  async gistsDeleteComment(params: {
    gist_id: string;
    comment_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/comments/{comment_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List gist commits
   * Learn more at {@link https://docs.github.com/rest/reference/gists#list-gist-commits}
   * Tags: gists
   *
   */
  async gistsListCommits(params: {
    gist_id: string;
    per_page?: number;
    page?: number;
  }): Promise<GistCommit[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/commits', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/gist-commit"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List gist forks
   * Learn more at {@link https://docs.github.com/rest/reference/gists#list-gist-forks}
   * Tags: gists
   *
   */
  async gistsListForks(params: {
    gist_id: string;
    per_page?: number;
    page?: number;
  }): Promise<GistSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/forks', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/gist-simple"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Fork a gist
   * **Note**: This was previously `/gists/:gist_id/fork`.
   * Learn more at {@link https://docs.github.com/rest/reference/gists#fork-a-gist}
   * Tags: gists
   *
   */
  async gistsFork(params: { gist_id: string }): Promise<BaseGist> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/forks', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/base-gist"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a gist is starred
   * Learn more at {@link https://docs.github.com/rest/reference/gists#check-if-a-gist-is-starred}
   * Tags: gists
   *
   */
  async gistsCheckIsStarred(params: { gist_id: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/star', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{},"additionalProperties":false}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Star a gist
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   * Learn more at {@link https://docs.github.com/rest/reference/gists#star-a-gist}
   * Tags: gists
   *
   */
  async gistsStar(params: { gist_id: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/star', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unstar a gist
   * Learn more at {@link https://docs.github.com/rest/reference/gists#unstar-a-gist}
   * Tags: gists
   *
   */
  async gistsUnstar(params: { gist_id: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/star', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a gist revision
   * Learn more at {@link https://docs.github.com/rest/reference/gists#get-a-gist-revision}
   * Tags: gists
   *
   */
  async gistsGetRevision(params: {
    gist_id: string;
    sha: string;
  }): Promise<GistSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gists/{gist_id}/{sha}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gist-simple"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all gitignore templates
   * List all templates available to pass as an option when [creating a repository](https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user).
   * Learn more at {@link https://docs.github.com/rest/reference/gitignore#get-all-gitignore-templates}
   * Tags: gitignore
   *
   */
  async gitignoreGetAllTemplates(params: {}): Promise<string[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gitignore/templates', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"array","items":{"type":"string"}}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a gitignore template
   * The API also allows fetching the source of a single template.
   * Use the raw [media type](https://docs.github.com/rest/overview/media-types/) to get the raw contents.
   * Learn more at {@link https://docs.github.com/rest/reference/gitignore#get-a-gitignore-template}
   * Tags: gitignore
   *
   */
  async gitignoreGetTemplate(params: {
    name: string;
  }): Promise<GitignoreTemplate> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/gitignore/templates/{name}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gitignore-template"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories accessible to the app installation
   * List repositories that an app installation can access.
   *
   * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-app-installation}
   * Tags: apps
   *
   */
  async appsListReposAccessibleToInstallation(params: {
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    repositories: Repository[];
    /**
     * @example "selected"
     *
     */
    repository_selection?: string;
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/installation/repositories', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/repository"}},"repository_selection":{"type":"string"}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Revoke an installation access token
   * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
   *
   * Once an installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked installation token must have a new installation token to work. You can create a new token using the "[Create an installation access token for an app](https://docs.github.com/rest/reference/apps#create-an-installation-access-token-for-an-app)" endpoint.
   *
   * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#revoke-an-installation-access-token}
   * Tags: apps
   *
   */
  async appsRevokeInstallationAccessToken(params: {}): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/installation/token', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List issues assigned to the authenticated user
   * List issues assigned to the authenticated user across all visible repositories including owned repositories, member
   * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are not
   * necessarily assigned to you.
   *
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-issues-assigned-to-the-authenticated-user}
   * Tags: issues
   *
   */
  async issuesList(params: {
    filter?:
      | 'assigned'
      | 'created'
      | 'mentioned'
      | 'subscribed'
      | 'repos'
      | 'all';
    state?: 'open' | 'closed' | 'all';
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    collab?: boolean;
    orgs?: boolean;
    owned?: boolean;
    pulls?: boolean;
    per_page?: number;
    page?: number;
  }): Promise<Issue[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/issues', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.labels !== undefined)
      requestContext.setQueryParam(
        'labels',
        r.serializeParameter(params.labels),
      );
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.collab !== undefined)
      requestContext.setQueryParam(
        'collab',
        r.serializeParameter(params.collab),
      );
    if (params.orgs !== undefined)
      requestContext.setQueryParam('orgs', r.serializeParameter(params.orgs));
    if (params.owned !== undefined)
      requestContext.setQueryParam('owned', r.serializeParameter(params.owned));
    if (params.pulls !== undefined)
      requestContext.setQueryParam('pulls', r.serializeParameter(params.pulls));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all commonly used licenses
   * Learn more at {@link https://docs.github.com/rest/reference/licenses#get-all-commonly-used-licenses}
   * Tags: licenses
   *
   */
  async licensesGetAllCommonlyUsed(params: {
    featured?: boolean;
    per_page?: number;
    page?: number;
  }): Promise<LicenseSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/licenses', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.featured !== undefined)
      requestContext.setQueryParam(
        'featured',
        r.serializeParameter(params.featured),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/license-simple"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a license
   * Learn more at {@link https://docs.github.com/rest/reference/licenses#get-a-license}
   * Tags: licenses
   *
   */
  async licensesGet(params: { license: string }): Promise<License> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/licenses/{license}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/license"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Render a Markdown document
   * Learn more at {@link https://docs.github.com/rest/reference/markdown#render-a-markdown-document}
   * Tags: markdown
   *
   */
  async markdownRender(
    params: {},
    body: {
      /**
       * The Markdown text to render in HTML.
       *
       */
      text: string;
      /**
       * The rendering mode.
       * @example "markdown"
       * @defaultValue "markdown"
       *
       */
      mode?: 'markdown' | 'gfm';
      /**
       * The repository context to use when creating references in `gfm` mode.
       *
       */
      context?: string;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/markdown', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Render a Markdown document in raw mode
   * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
   * Learn more at {@link https://docs.github.com/rest/reference/markdown#render-a-markdown-document-in-raw-mode}
   * Tags: markdown
   *
   */
  async markdownRenderRaw(params: {}, body: any): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/markdown/raw', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a subscription plan for an account
   * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account}
   * Tags: apps
   *
   */
  async appsGetSubscriptionPlanForAccount(params: {
    account_id: number;
  }): Promise<MarketplacePurchase> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/marketplace_listing/accounts/{account_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/marketplace-purchase"}'),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List plans
   * Lists all plans that are part of your GitHub Marketplace listing.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-plans}
   * Tags: apps
   *
   */
  async appsListPlans(params: {
    per_page?: number;
    page?: number;
  }): Promise<MarketplaceListingPlan[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/marketplace_listing/plans', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/marketplace-listing-plan"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List accounts for a plan
   * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan}
   * Tags: apps
   *
   */
  async appsListAccountsForPlan(params: {
    plan_id: number;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<MarketplacePurchase[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/marketplace_listing/plans/{plan_id}/accounts',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/marketplace-purchase"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a subscription plan for an account (stubbed)
   * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-a-subscription-plan-for-an-account-stubbed}
   * Tags: apps
   *
   */
  async appsGetSubscriptionPlanForAccountStubbed(params: {
    account_id: number;
  }): Promise<MarketplacePurchase> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/marketplace_listing/stubbed/accounts/{account_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/marketplace-purchase"}'),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List plans (stubbed)
   * Lists all plans that are part of your GitHub Marketplace listing.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-plans-stubbed}
   * Tags: apps
   *
   */
  async appsListPlansStubbed(params: {
    per_page?: number;
    page?: number;
  }): Promise<MarketplaceListingPlan[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/marketplace_listing/stubbed/plans', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/marketplace-listing-plan"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List accounts for a plan (stubbed)
   * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending change.
   *
   * GitHub Apps must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint. OAuth Apps must use [basic authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their client ID and client secret to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-accounts-for-a-plan-stubbed}
   * Tags: apps
   *
   */
  async appsListAccountsForPlanStubbed(params: {
    plan_id: number;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<MarketplacePurchase[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/marketplace_listing/stubbed/plans/{plan_id}/accounts',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/marketplace-purchase"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub meta information
   * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About GitHub's IP addresses](https://help.github.com/articles/about-github-s-ip-addresses/)."
   *
   * **Note:** The IP addresses shown in the documentation's response are only example values. You must always query the API directly to get the latest list of IP addresses.
   * Learn more at {@link https://docs.github.com/rest/reference/meta#get-github-meta-information}
   * Tags: meta
   *
   */
  async metaGet(params: {}): Promise<ApiOverview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/meta', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/api-overview"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public events for a network of repositories
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-public-events-for-a-network-of-repositories}
   * Tags: activity
   *
   */
  async activityListPublicEventsForRepoNetwork(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/networks/{owner}/{repo}/events', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List notifications for the authenticated user
   * List all notifications for the current user, sorted by most recently updated.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityListNotificationsForAuthenticatedUser(params: {
    all?: boolean;
    participating?: boolean;
    since?: Date;
    before?: Date;
    per_page?: number;
    page?: number;
  }): Promise<Thread[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/notifications', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.all !== undefined)
      requestContext.setQueryParam('all', r.serializeParameter(params.all));
    if (params.participating !== undefined)
      requestContext.setQueryParam(
        'participating',
        r.serializeParameter(params.participating),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.before !== undefined)
      requestContext.setQueryParam(
        'before',
        r.serializeParameter(params.before),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/thread"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Mark notifications as read
   * Marks all notifications as "read" removes it from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#mark-notifications-as-read}
   * Tags: activity
   *
   */
  async activityMarkNotificationsAsRead(
    params: {},
    body: {
      /**
       * Describes the last point that notifications were checked.
       *
       */
      last_read_at?: Date;
      /**
       * Whether the notification has been read.
       *
       */
      read?: boolean;
    },
  ): Promise<{
    message?: string;
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/notifications', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"message":{"type":"string"}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('205', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a thread
   * Learn more at {@link https://docs.github.com/rest/reference/activity#get-a-thread}
   * Tags: activity
   *
   */
  async activityGetThread(params: { thread_id: number }): Promise<Thread> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/notifications/threads/{thread_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/thread"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Mark a thread as read
   * Learn more at {@link https://docs.github.com/rest/reference/activity#mark-a-thread-as-read}
   * Tags: activity
   *
   */
  async activityMarkThreadAsRead(params: { thread_id: number }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/notifications/threads/{thread_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('205', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a thread subscription for the authenticated user
   * This checks to see if the current user is subscribed to a thread. You can also [get a repository subscription](https://docs.github.com/rest/reference/activity#get-a-repository-subscription).
   *
   * Note that subscriptions are only generated if a user is participating in a conversation--for example, they've replied to the thread, were **@mentioned**, or manually subscribe to a thread.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#get-a-thread-subscription-for-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityGetThreadSubscriptionForAuthenticatedUser(params: {
    thread_id: number;
  }): Promise<ThreadSubscription> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/notifications/threads/{thread_id}/subscription',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/thread-subscription"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set a thread subscription
   * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore future notifications for threads until you comment on the thread or get an **@mention**.
   *
   * You can also use this endpoint to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have previously ignored.
   *
   * Unsubscribing from a conversation in a repository that you are not watching is functionally equivalent to the [Delete a thread subscription](https://docs.github.com/rest/reference/activity#delete-a-thread-subscription) endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#set-a-thread-subscription}
   * Tags: activity
   *
   */
  async activitySetThreadSubscription(
    params: {
      thread_id: number;
    },
    body: {
      /**
       * Whether to block all notifications from a thread.
       *
       */
      ignored?: boolean;
    },
  ): Promise<ThreadSubscription> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/notifications/threads/{thread_id}/subscription',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/thread-subscription"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a thread subscription
   * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are watching the repository of the thread, you will still receive notifications. To ignore future notifications for a repository you are watching, use the [Set a thread subscription](https://docs.github.com/rest/reference/activity#set-a-thread-subscription) endpoint and set `ignore` to `true`.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#delete-a-thread-subscription}
   * Tags: activity
   *
   */
  async activityDeleteThreadSubscription(params: {
    thread_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/notifications/threads/{thread_id}/subscription',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get Octocat
   * Get the octocat as ASCII art
   * Learn more at {@link https://docs.github.com/rest/reference/meta#get-octocat}
   * Tags: meta
   *
   */
  async metaGetOctocat(params: { s?: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/octocat', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.s !== undefined)
      requestContext.setQueryParam('s', r.serializeParameter(params.s));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organizations
   * Lists all organizations, in the order that they were created on GitHub.
   *
   * **Note:** Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of organizations.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-organizations}
   * Tags: orgs
   *
   */
  async orgsList(params: {
    since?: number;
    per_page?: number;
  }): Promise<OrganizationSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/organizations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/organization-simple"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an organization
   * To see many of the organization response values, you need to be an authenticated organization owner with the `admin:org` scope. When the value of `two_factor_requirement_enabled` is `true`, the organization requires all members, billing managers, and outside collaborators to enable [two-factor authentication](https://help.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
   *
   * GitHub Apps with the `Organization plan` permission can use this endpoint to retrieve information about an organization's GitHub plan. See "[Authenticating with GitHub Apps](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/)" for details. For an example response, see 'Response with GitHub plan information' below."
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#get-an-organization}
   * Tags: orgs
   *
   */
  async orgsGet(params: { org: string }): Promise<OrganizationFull> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/organization-full"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an organization
   * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`, `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see the [blog post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
   *
   * Enables an authenticated organization owner with the `admin:org` scope to update the organization's profile and member privileges.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs/#update-an-organization}
   * Tags: orgs
   *
   */
  async orgsUpdate(
    params: {
      org: string;
    },
    body: {
      /**
       * Billing email address. This address is not publicized.
       *
       */
      billing_email?: string;
      /**
       * The company name.
       *
       */
      company?: string;
      /**
       * The publicly visible email address.
       *
       */
      email?: string;
      /**
       * The Twitter username of the company.
       *
       */
      twitter_username?: string;
      /**
       * The location.
       *
       */
      location?: string;
      /**
       * The shorthand name of the company.
       *
       */
      name?: string;
      /**
       * The description of the company.
       *
       */
      description?: string;
      /**
       * Toggles whether an organization can use organization projects.
       *
       */
      has_organization_projects?: boolean;
      /**
       * Toggles whether repositories that belong to the organization can use repository projects.
       *
       */
      has_repository_projects?: boolean;
      /**
       * Default permission level members have for organization repositories:
       * \* `read` - can pull, but not push to or administer this repository.
       * \* `write` - can pull and push, but not administer this repository.
       * \* `admin` - can pull, push, and administer this repository.
       * \* `none` - no permissions granted by default.
       * @defaultValue "read"
       *
       */
      default_repository_permission?: 'read' | 'write' | 'admin' | 'none';
      /**
       * Toggles the ability of non-admin organization members to create repositories. Can be one of:
       * \* `true` - all organization members can create repositories.
       * \* `false` - only organization owners can create repositories.
       * Default: `true`
       * **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
       * @defaultValue true
       *
       */
      members_can_create_repositories?: boolean;
      /**
       * Toggles whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. Can be one of:
       * \* `true` - all organization members can create internal repositories.
       * \* `false` - only organization owners can create internal repositories.
       * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
       *
       */
      members_can_create_internal_repositories?: boolean;
      /**
       * Toggles whether organization members can create private repositories, which are visible to organization members with permission. Can be one of:
       * \* `true` - all organization members can create private repositories.
       * \* `false` - only organization owners can create private repositories.
       * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
       *
       */
      members_can_create_private_repositories?: boolean;
      /**
       * Toggles whether organization members can create public repositories, which are visible to anyone. Can be one of:
       * \* `true` - all organization members can create public repositories.
       * \* `false` - only organization owners can create public repositories.
       * Default: `true`. For more information, see "[Restricting repository creation in your organization](https://help.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
       *
       */
      members_can_create_public_repositories?: boolean;
      /**
       * Specifies which types of repositories non-admin organization members can create. Can be one of:
       * \* `all` - all organization members can create public and private repositories.
       * \* `private` - members can create private repositories. This option is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
       * \* `none` - only admin members can create repositories.
       * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
       *
       */
      members_allowed_repository_creation_type?: 'all' | 'private' | 'none';
      /**
       * Toggles whether organization members can create GitHub Pages sites. Can be one of:
       * \* `true` - all organization members can create GitHub Pages sites.
       * \* `false` - no organization members can create GitHub Pages sites. Existing published sites will not be impacted.
       * @defaultValue true
       *
       */
      members_can_create_pages?: boolean;
      /**
       * Toggles whether organization members can create public GitHub Pages sites. Can be one of:
       * \* `true` - all organization members can create public GitHub Pages sites.
       * \* `false` - no organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
       * @defaultValue true
       *
       */
      members_can_create_public_pages?: boolean;
      /**
       * Toggles whether organization members can create private GitHub Pages sites. Can be one of:
       * \* `true` - all organization members can create private GitHub Pages sites.
       * \* `false` - no organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
       * @defaultValue true
       *
       */
      members_can_create_private_pages?: boolean;
      /**
       * @example "\"http://github.blog\""
       *
       */
      blog?: string;
    },
  ): Promise<OrganizationFull> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/organization-full"}'),
        this.resolver,
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError | ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"oneOf":[{"$ref":"#/components/schemas/validation-error"},{"$ref":"#/components/schemas/validation-error-simple"}]}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Actions permissions for an organization
   * Gets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-an-organization}
   * Tags: actions
   *
   */
  async actionsGetGithubActionsPermissionsOrganization(params: {
    org: string;
  }): Promise<ActionsOrganizationPermissions> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/permissions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/actions-organization-permissions"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set GitHub Actions permissions for an organization
   * Sets the GitHub Actions permissions policy for repositories and allowed actions in an organization.
   *
   * If the organization belongs to an enterprise that has set restrictive permissions at the enterprise level, such as `allowed_actions` to `selected` actions, then you cannot override them for the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-an-organization}
   * Tags: actions
   *
   */
  async actionsSetGithubActionsPermissionsOrganization(
    params: {
      org: string;
    },
    body: {
      enabled_repositories: EnabledRepositories;
      allowed_actions?: AllowedActions;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/permissions', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List selected repositories enabled for GitHub Actions in an organization
   * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-selected-repositories-enabled-for-github-actions-in-an-organization}
   * Tags: actions
   *
   */
  async actionsListSelectedRepositoriesEnabledGithubActionsOrganization(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    repositories: Repository[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/permissions/repositories', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/repository"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set selected repositories enabled for GitHub Actions in an organization
   * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-selected-repositories-enabled-for-github-actions-in-an-organization}
   * Tags: actions
   *
   */
  async actionsSetSelectedRepositoriesEnabledGithubActionsOrganization(
    params: {
      org: string;
    },
    body: {
      /**
       * List of repository IDs to enable for GitHub Actions.
       *
       */
      selected_repository_ids: number[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/permissions/repositories', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Enable a selected repository for GitHub Actions in an organization
   * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#enable-a-selected-repository-for-github-actions-in-an-organization}
   * Tags: actions
   *
   */
  async actionsEnableSelectedRepositoryGithubActionsOrganization(params: {
    org: string;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/permissions/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Disable a selected repository for GitHub Actions in an organization
   * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#disable-a-selected-repository-for-github-actions-in-an-organization}
   * Tags: actions
   *
   */
  async actionsDisableSelectedRepositoryGithubActionsOrganization(params: {
    org: string;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/permissions/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get allowed actions for an organization
   * Gets the selected actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization).""
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-allowed-actions-for-an-organization}
   * Tags: actions
   *
   */
  async actionsGetAllowedActionsOrganization(params: {
    org: string;
  }): Promise<SelectedActions> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/permissions/selected-actions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/selected-actions"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set allowed actions for an organization
   * Sets the actions that are allowed in an organization. To use this endpoint, the organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
   *
   * If the organization belongs to an enterprise that has `selected` actions set at the enterprise level, then you cannot override any of the enterprise's allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the organization must belong to an enterprise. If the organization does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories in the organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `administration` organization permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-allowed-actions-for-an-organization}
   * Tags: actions
   *
   */
  async actionsSetAllowedActionsOrganization(
    params: {
      org: string;
    },
    body: SelectedActions,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/permissions/selected-actions',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List self-hosted runner groups for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists all self-hosted runner groups configured in an organization and inherited from an enterprise.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-self-hosted-runner-groups-for-an-organization}
   * Tags: actions
   *
   */
  async actionsListSelfHostedRunnerGroupsForOrg(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    runner_groups: RunnerGroupsOrg[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/runner-groups', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"runner_groups":{"type":"array","items":{"$ref":"#/components/schemas/runner-groups-org"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a self-hosted runner group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Creates a new self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-a-self-hosted-runner-group-for-an-organization}
   * Tags: actions
   *
   */
  async actionsCreateSelfHostedRunnerGroupForOrg(
    params: {
      org: string;
    },
    body: {
      /**
       * Name of the runner group.
       *
       */
      name: string;
      /**
       * Visibility of a runner group. You can select all repositories, select individual repositories, or limit access to private repositories. Can be one of: `all`, `selected`, or `private`.
       * @defaultValue "all"
       *
       */
      visibility?: 'selected' | 'all' | 'private';
      /**
       * List of repository IDs that can access the runner group.
       *
       */
      selected_repository_ids?: number[];
      /**
       * List of runner IDs to add to the runner group.
       *
       */
      runners?: number[];
    },
  ): Promise<RunnerGroupsOrg> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/runner-groups', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner-groups-org"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a self-hosted runner group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Gets a specific self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-group-for-an-organization}
   * Tags: actions
   *
   */
  async actionsGetSelfHostedRunnerGroupForOrg(params: {
    org: string;
    runner_group_id: number;
  }): Promise<RunnerGroupsOrg> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner-groups-org"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a self-hosted runner group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Updates the `name` and `visibility` of a self-hosted runner group in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#update-a-self-hosted-runner-group-for-an-organization}
   * Tags: actions
   *
   */
  async actionsUpdateSelfHostedRunnerGroupForOrg(
    params: {
      org: string;
      runner_group_id: number;
    },
    body: {
      /**
       * Name of the runner group.
       *
       */
      name?: string;
      /**
       * Visibility of a runner group. You can select all repositories, select individual repositories, or all private repositories. Can be one of: `all`, `selected`, or `private`.
       *
       */
      visibility?: 'selected' | 'all' | 'private';
    },
  ): Promise<RunnerGroupsOrg> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner-groups-org"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a self-hosted runner group from an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Deletes a self-hosted runner group for an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-group-from-an-organization}
   * Tags: actions
   *
   */
  async actionsDeleteSelfHostedRunnerGroupFromOrg(params: {
    org: string;
    runner_group_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository access to a self-hosted runner group in an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud and GitHub Enterprise Server. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists the repositories with access to a self-hosted runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-repository-access-to-a-self-hosted-runner-group-in-an-organization}
   * Tags: actions
   *
   */
  async actionsListRepoAccessToSelfHostedRunnerGroupInOrg(params: {
    org: string;
    runner_group_id: number;
    page?: number;
    per_page?: number;
  }): Promise<{
    total_count: number;
    repositories: MinimalRepository[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set repository access for a self-hosted runner group in an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Replaces the list of repositories that have access to a self-hosted runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-repository-access-to-a-self-hosted-runner-group-in-an-organization}
   * Tags: actions
   *
   */
  async actionsSetRepoAccessToSelfHostedRunnerGroupInOrg(
    params: {
      org: string;
      runner_group_id: number;
    },
    body: {
      /**
       * List of repository IDs that can access the runner group.
       *
       */
      selected_repository_ids: number[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add repository access to a self-hosted runner group in an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Adds a repository to the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org`
   * scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#add-repository-acess-to-a-self-hosted-runner-group-in-an-organization}
   * Tags: actions
   *
   */
  async actionsAddRepoAccessToSelfHostedRunnerGroupInOrg(params: {
    org: string;
    runner_group_id: number;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove repository access to a self-hosted runner group in an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Removes a repository from the list of selected repositories that can access a self-hosted runner group. The runner group must have `visibility` set to `selected`. For more information, see "[Create a self-hosted runner group for an organization](#create-a-self-hosted-runner-group-for-an-organization)."
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#remove-repository-access-to-a-self-hosted-runner-group-in-an-organization}
   * Tags: actions
   *
   */
  async actionsRemoveRepoAccessToSelfHostedRunnerGroupInOrg(params: {
    org: string;
    runner_group_id: number;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List self-hosted runners in a group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Lists self-hosted runners that are in a specific organization group.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-self-hosted-runners-in-a-group-for-an-organization}
   * Tags: actions
   *
   */
  async actionsListSelfHostedRunnersInGroupForOrg(params: {
    org: string;
    runner_group_id: number;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    runners: Runner[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"number"},"runners":{"type":"array","items":{"$ref":"#/components/schemas/runner"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set self-hosted runners in a group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   * Replaces the list of self-hosted runners that are part of an organization runner group.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-self-hosted-runners-in-a-group-for-an-organization}
   * Tags: actions
   *
   */
  async actionsSetSelfHostedRunnersInGroupForOrg(
    params: {
      org: string;
      runner_group_id: number;
    },
    body: {
      /**
       * List of runner IDs to add to the runner group.
       *
       */
      runners: number[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add a self-hosted runner to a group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Adds a self-hosted runner to a runner group configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org`
   * scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#add-a-self-hosted-runner-to-a-group-for-an-organization}
   * Tags: actions
   *
   */
  async actionsAddSelfHostedRunnerToGroupForOrg(params: {
    org: string;
    runner_group_id: number;
    runner_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a self-hosted runner from a group for an organization
   * The self-hosted runner groups REST API is available with GitHub Enterprise Cloud. For more information, see "[GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)."
   *
   *
   * Removes a self-hosted runner from a group configured in an organization. The runner is then returned to the default group.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#remove-a-self-hosted-runner-from-a-group-for-an-organization}
   * Tags: actions
   *
   */
  async actionsRemoveSelfHostedRunnerFromGroupForOrg(params: {
    org: string;
    runner_group_id: number;
    runner_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runner-groups/{runner_group_id}/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List self-hosted runners for an organization
   * Lists all self-hosted runners configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-an-organization}
   * Tags: actions
   *
   */
  async actionsListSelfHostedRunnersForOrg(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    runners: Runner[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/runners', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"runners":{"type":"array","items":{"$ref":"#/components/schemas/runner"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List runner applications for an organization
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-runner-applications-for-an-organization}
   * Tags: actions
   *
   */
  async actionsListRunnerApplicationsForOrg(params: {
    org: string;
  }): Promise<RunnerApplication[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/runners/downloads', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/runner-application"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a registration token for an organization
   * Returns a token that you can pass to the `config` script. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org --token TOKEN
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-a-registration-token-for-an-organization}
   * Tags: actions
   *
   */
  async actionsCreateRegistrationTokenForOrg(params: {
    org: string;
  }): Promise<AuthenticationToken> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/runners/registration-token',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authentication-token"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a remove token for an organization
   * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token expires after one hour.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from an organization, replace `TOKEN` with the remove token provided by this
   * endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-a-remove-token-for-an-organization}
   * Tags: actions
   *
   */
  async actionsCreateRemoveTokenForOrg(params: {
    org: string;
  }): Promise<AuthenticationToken> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/runners/remove-token', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authentication-token"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a self-hosted runner for an organization
   * Gets a specific self-hosted runner configured in an organization.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-an-organization}
   * Tags: actions
   *
   */
  async actionsGetSelfHostedRunnerForOrg(params: {
    org: string;
    runner_id: number;
  }): Promise<Runner> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/runners/{runner_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a self-hosted runner from an organization
   * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `admin:org` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-an-organization}
   * Tags: actions
   *
   */
  async actionsDeleteSelfHostedRunnerFromOrg(params: {
    org: string;
    runner_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/runners/{runner_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization secrets
   * Lists all secrets available in an organization without revealing their encrypted values. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-organization-secrets}
   * Tags: actions
   *
   */
  async actionsListOrgSecrets(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    secrets: OrganizationActionsSecret[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/secrets', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"secrets":{"type":"array","items":{"$ref":"#/components/schemas/organization-actions-secret"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an organization public key
   * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-an-organization-public-key}
   * Tags: actions
   *
   */
  async actionsGetOrgPublicKey(params: {
    org: string;
  }): Promise<ActionsPublicKey> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/secrets/public-key', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-public-key"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an organization secret
   * Gets a single organization secret without revealing its encrypted value. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-an-organization-secret}
   * Tags: actions
   *
   */
  async actionsGetOrgSecret(params: {
    org: string;
    secret_name: string;
  }): Promise<OrganizationActionsSecret> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/secrets/{secret_name}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/organization-actions-secret"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create or update an organization secret
   * Creates or updates an organization secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to
   * use this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret}
   * Tags: actions
   *
   */
  async actionsCreateOrUpdateOrgSecret(
    params: {
      org: string;
      secret_name: string;
    },
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/reference/actions#get-an-organization-public-key) endpoint.
       *
       */
      encrypted_value?: string;
      /**
       * ID of the key you used to encrypt the secret.
       *
       */
      key_id?: string;
      /**
       * Configures the access that repositories have to the organization secret. Can be one of:
       * \- `all` - All repositories in an organization can access the secret.
       * \- `private` - Private repositories in an organization can access the secret.
       * \- `selected` - Only specific repositories can access the secret.
       *
       */
      visibility: 'all' | 'private' | 'selected';
      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
       *
       */
      selected_repository_ids?: string[];
    },
  ): Promise<EmptyObject> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/secrets/{secret_name}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/empty-object"}'),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an organization secret
   * Deletes a secret in an organization using the secret name. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-an-organization-secret}
   * Tags: actions
   *
   */
  async actionsDeleteOrgSecret(params: {
    org: string;
    secret_name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/actions/secrets/{secret_name}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List selected repositories for an organization secret
   * Lists all repositories that have been selected when the `visibility` for repository access to a secret is set to `selected`. You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-selected-repositories-for-an-organization-secret}
   * Tags: actions
   *
   */
  async actionsListSelectedReposForOrgSecret(params: {
    org: string;
    secret_name: string;
    page?: number;
    per_page?: number;
  }): Promise<{
    total_count: number;
    repositories: MinimalRepository[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set selected repositories for an organization secret
   * Replaces all repositories for an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret}
   * Tags: actions
   *
   */
  async actionsSetSelectedReposForOrgSecret(
    params: {
      org: string;
      secret_name: string;
    },
    body: {
      /**
       * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/reference/actions#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret) endpoints.
       *
       */
      selected_repository_ids?: number[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add selected repository to an organization secret
   * Adds a repository to an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#add-selected-repository-to-an-organization-secret}
   * Tags: actions
   *
   */
  async actionsAddSelectedRepoToOrgSecret(params: {
    org: string;
    secret_name: string;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove selected repository from an organization secret
   * Removes a repository from an organization secret when the `visibility` for repository access is set to `selected`. The visibility is set when you [Create or update an organization secret](https://docs.github.com/rest/reference/actions#create-or-update-an-organization-secret). You must authenticate using an access token with the `admin:org` scope to use this endpoint. GitHub Apps must have the `secrets` organization permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#remove-selected-repository-from-an-organization-secret}
   * Tags: actions
   *
   */
  async actionsRemoveSelectedRepoFromOrgSecret(params: {
    org: string;
    secret_name: string;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the audit log for an organization
   * Gets the audit log for an organization. For more information, see "[Reviewing the audit log for your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/reviewing-the-audit-log-for-your-organization)."
   *
   * To use this endpoint, you must be an organization owner, and you must use an access token with the `admin:org` scope. GitHub Apps must have the `organization_administration` read permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#get-audit-log}
   * Tags: orgs
   *
   */
  async orgsGetAuditLog(params: {
    org: string;
    phrase?: string;
    include?: 'web' | 'git' | 'all';
    after?: string;
    before?: string;
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  }): Promise<AuditLogEvent[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/audit-log', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.phrase !== undefined)
      requestContext.setQueryParam(
        'phrase',
        r.serializeParameter(params.phrase),
      );
    if (params.include !== undefined)
      requestContext.setQueryParam(
        'include',
        r.serializeParameter(params.include),
      );
    if (params.after !== undefined)
      requestContext.setQueryParam('after', r.serializeParameter(params.after));
    if (params.before !== undefined)
      requestContext.setQueryParam(
        'before',
        r.serializeParameter(params.before),
      );
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/audit-log-event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List users blocked by an organization
   * List the users blocked by an organization.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-users-blocked-by-an-organization}
   * Tags: orgs
   *
   */
  async orgsListBlockedUsers(params: { org: string }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/blocks', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a user is blocked by an organization
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#check-if-a-user-is-blocked-by-an-organization}
   * Tags: orgs
   *
   */
  async orgsCheckBlockedUser(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/blocks/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Block a user from an organization
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#block-a-user-from-an-organization}
   * Tags: orgs
   *
   */
  async orgsBlockUser(params: { org: string; username: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/blocks/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unblock a user from an organization
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#unblock-a-user-from-an-organization}
   * Tags: orgs
   *
   */
  async orgsUnblockUser(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/blocks/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List SAML SSO authorizations for an organization
   * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
   *
   * An authenticated organization owner with the `read:org` scope can list all credential authorizations for an organization that uses SAML single sign-on (SSO). The credentials are either personal access tokens or SSH keys that organization members have authorized for the organization. For more information, see [About authentication with SAML single sign-on](https://help.github.com/en/articles/about-authentication-with-saml-single-sign-on).
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-saml-sso-authorizations-for-an-organization}
   * Tags: orgs
   *
   */
  async orgsListSamlSsoAuthorizations(params: {
    org: string;
  }): Promise<CredentialAuthorization[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/credential-authorizations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/credential-authorization"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a SAML SSO authorization for an organization
   * Listing and deleting credential authorizations is available to organizations with GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products).
   *
   * An authenticated organization owner with the `admin:org` scope can remove a credential authorization for an organization that uses SAML SSO. Once you remove someone's credential authorization, they will need to create a new personal access token or SSH key and authorize it for the organization they want to access.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#remove-a-saml-sso-authorization-for-an-organization}
   * Tags: orgs
   *
   */
  async orgsRemoveSamlSsoAuthorization(params: {
    org: string;
    credential_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/credential-authorizations/{credential_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public organization events
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-public-organization-events}
   * Tags: activity
   *
   */
  async activityListPublicOrgEvents(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/events', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List failed organization invitations
   * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed and the reason for the failure.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-failed-organization-invitations}
   * Tags: orgs
   *
   */
  async orgsListFailedInvitations(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<OrganizationInvitation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/failed_invitations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/organization-invitation"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization webhooks
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-organization-webhooks}
   * Tags: orgs
   *
   */
  async orgsListWebhooks(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<OrgHook[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/org-hook"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an organization webhook
   * Here's how you can create a hook that posts payloads in JSON format:
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#create-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsCreateWebhook(
    params: {
      org: string;
    },
    body: {
      /**
       * Must be passed as "web".
       *
       */
      name: string;
      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#create-hook-config-params).
       *
       */
      config: {
        url: WebhookConfigUrl;
        content_type?: WebhookConfigContentType;
        secret?: WebhookConfigSecret;
        insecure_ssl?: WebhookConfigInsecureSsl;
        /**
         * @example "\"kdaigle\""
         *
         */
        username?: string;
        /**
         * @example "\"password\""
         *
         */
        password?: string;
      };
      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       * @defaultValue
       * [
       *   "push"
       * ]
       *
       */
      events?: string[];
      /**
       * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
       * @defaultValue true
       *
       */
      active?: boolean;
    },
  ): Promise<OrgHook> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/org-hook"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an organization webhook
   * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook configuration for an organization](/rest/reference/orgs#get-a-webhook-configuration-for-an-organization)."
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#get-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsGetWebhook(params: {
    org: string;
    hook_id: number;
  }): Promise<OrgHook> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks/{hook_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/org-hook"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an organization webhook
   * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an organization](/rest/reference/orgs#update-a-webhook-configuration-for-an-organization)."
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#update-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsUpdateWebhook(
    params: {
      org: string;
      hook_id: number;
    },
    body: {
      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/orgs#update-hook-config-params).
       *
       */
      config?: {
        url: WebhookConfigUrl;
        content_type?: WebhookConfigContentType;
        secret?: WebhookConfigSecret;
        insecure_ssl?: WebhookConfigInsecureSsl;
      };
      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       * @defaultValue
       * [
       *   "push"
       * ]
       *
       */
      events?: string[];
      /**
       * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
       * @defaultValue true
       *
       */
      active?: boolean;
      /**
       * @example "\"web\""
       *
       */
      name?: string;
    },
  ): Promise<OrgHook> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks/{hook_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/org-hook"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an organization webhook
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#delete-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsDeleteWebhook(params: {
    org: string;
    hook_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks/{hook_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a webhook configuration for an organization
   * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active` state and `events`, use "[Get an organization webhook ](/rest/reference/orgs#get-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:read` permission.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#get-a-webhook-configuration-for-an-organization}
   * Tags: orgs
   *
   */
  async orgsGetWebhookConfigForOrg(params: {
    org: string;
    hook_id: number;
  }): Promise<WebhookConfig> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks/{hook_id}/config', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/webhook-config"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a webhook configuration for an organization
   * Updates the webhook configuration for an organization. To update more information about the webhook, including the `active` state and `events`, use "[Update an organization webhook ](/rest/reference/orgs#update-an-organization-webhook)."
   *
   * Access tokens must have the `admin:org_hook` scope, and GitHub Apps must have the `organization_hooks:write` permission.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#update-a-webhook-configuration-for-an-organization}
   * Tags: orgs
   *
   */
  async orgsUpdateWebhookConfigForOrg(
    params: {
      org: string;
      hook_id: number;
    },
    body: {
      url?: WebhookConfigUrl;
      content_type?: WebhookConfigContentType;
      secret?: WebhookConfigSecret;
      insecure_ssl?: WebhookConfigInsecureSsl;
    },
  ): Promise<WebhookConfig> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks/{hook_id}/config', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/webhook-config"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List deliveries for an organization webhook
   * Returns a list of webhook deliveries for a webhook configured in an organization.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-deliveries-for-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsListWebhookDeliveries(params: {
    org: string;
    hook_id: number;
    per_page?: number;
    cursor?: string;
  }): Promise<HookDeliveryItem[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks/{hook_id}/deliveries', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.cursor !== undefined)
      requestContext.setQueryParam(
        'cursor',
        r.serializeParameter(params.cursor),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/hook-delivery-item"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a webhook delivery for an organization webhook
   * Returns a delivery for a webhook configured in an organization.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#get-a-webhook-delivery-for-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsGetWebhookDelivery(params: {
    org: string;
    hook_id: number;
    delivery_id: number;
  }): Promise<HookDelivery> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/hook-delivery"}'),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Redeliver a delivery for an organization webhook
   * Redeliver a delivery for a webhook configured in an organization.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#redeliver-a-delivery-for-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsRedeliverWebhookDelivery(params: {
    org: string;
    hook_id: number;
    delivery_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"object"}'),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Ping an organization webhook
   * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#ping-an-organization-webhook}
   * Tags: orgs
   *
   */
  async orgsPingWebhook(params: {
    org: string;
    hook_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/hooks/{hook_id}/pings', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an organization installation for the authenticated app
   * Enables an authenticated GitHub App to find the organization's installation information.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-an-organization-installation-for-the-authenticated-app}
   * Tags: apps
   *
   */
  async appsGetOrgInstallation(params: { org: string }): Promise<Installation> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/installation', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/installation"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List app installations for an organization
   * Lists all GitHub Apps in an organization. The installation count includes all GitHub Apps installed on repositories in the organization. You must be an organization owner with `admin:read` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-app-installations-for-an-organization}
   * Tags: orgs
   *
   */
  async orgsListAppInstallations(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    installations: Installation[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/installations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"installations":{"type":"array","items":{"$ref":"#/components/schemas/installation"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get interaction restrictions for an organization
   * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no restrictions, you will see an empty response.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-an-organization}
   * Tags: interactions
   *
   */
  async interactionsGetRestrictionsForOrg(params: {
    org: string;
  }): Promise<InteractionLimitResponse | any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/interaction-limits', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"anyOf":[{"$ref":"#/components/schemas/interaction-limit-response"},{"type":"object","properties":{},"additionalProperties":false}]}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set interaction restrictions for an organization
   * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization. You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level will overwrite any interaction limits that are set for individual repositories owned by the organization.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-an-organization}
   * Tags: interactions
   *
   */
  async interactionsSetRestrictionsForOrg(
    params: {
      org: string;
    },
    body: InteractionLimit,
  ): Promise<InteractionLimitResponse> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/interaction-limits', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/interaction-limit-response"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove interaction restrictions for an organization
   * Removes all interaction restrictions from public repositories in the given organization. You must be an organization owner to remove restrictions.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-an-organization}
   * Tags: interactions
   *
   */
  async interactionsRemoveRestrictionsForOrg(params: {
    org: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/interaction-limits', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List pending organization invitations
   * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-pending-organization-invitations}
   * Tags: orgs
   *
   */
  async orgsListPendingInvitations(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<OrganizationInvitation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/invitations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/organization-invitation"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an organization invitation
   * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in an organization, the authenticated user must be an organization owner.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#create-an-organization-invitation}
   * Tags: orgs
   *
   */
  async orgsCreateInvitation(
    params: {
      org: string;
    },
    body: {
      /**
       * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
       *
       */
      invitee_id?: number;
      /**
       * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
       *
       */
      email?: string;
      /**
       * Specify role for new member. Can be one of:
       * \* `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
       * \* `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
       * \* `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
       * @defaultValue "direct_member"
       *
       */
      role?: 'admin' | 'direct_member' | 'billing_manager';
      /**
       * Specify IDs for the teams you want to invite new members to.
       *
       */
      team_ids?: number[];
    },
  ): Promise<OrganizationInvitation> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/invitations', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/organization-invitation"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Cancel an organization invitation
   * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an organization owner.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications).
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#cancel-an-organization-invitation}
   * Tags: orgs
   *
   */
  async orgsCancelInvitation(params: {
    org: string;
    invitation_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/invitations/{invitation_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization invitation teams
   * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user must be an organization owner.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-organization-invitation-teams}
   * Tags: orgs
   *
   */
  async orgsListInvitationTeams(params: {
    org: string;
    invitation_id: number;
    per_page?: number;
    page?: number;
  }): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/invitations/{invitation_id}/teams',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization issues assigned to the authenticated user
   * List issues in an organization assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-organization-issues-assigned-to-the-authenticated-user}
   * Tags: issues
   *
   */
  async issuesListForOrg(params: {
    org: string;
    filter?:
      | 'assigned'
      | 'created'
      | 'mentioned'
      | 'subscribed'
      | 'repos'
      | 'all';
    state?: 'open' | 'closed' | 'all';
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<Issue[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/issues', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.labels !== undefined)
      requestContext.setQueryParam(
        'labels',
        r.serializeParameter(params.labels),
      );
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization members
   * List all users who are members of an organization. If the authenticated user is also a member of this organization then both concealed and public members will be returned.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-organization-members}
   * Tags: orgs
   *
   */
  async orgsListMembers(params: {
    org: string;
    filter?: '2fa_disabled' | 'all';
    role?: 'all' | 'admin' | 'member';
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/members', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.role !== undefined)
      requestContext.setQueryParam('role', r.serializeParameter(params.role));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('302', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check organization membership for a user
   * Check if a user is, publicly or privately, a member of the organization.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#check-organization-membership-for-a-user}
   * Tags: orgs
   *
   */
  async orgsCheckMembershipForUser(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/members/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('302', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove an organization member
   * Removing a user from this list will remove them from all teams and they will no longer have any access to the organization's repositories.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#remove-an-organization-member}
   * Tags: orgs
   *
   */
  async orgsRemoveMember(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/members/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get organization membership for a user
   * In order to get a user's membership with an organization, the authenticated user must be an organization member. The `state` parameter in the response can be used to identify the user's membership status.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user}
   * Tags: orgs
   *
   */
  async orgsGetMembershipForUser(params: {
    org: string;
    username: string;
  }): Promise<OrgMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/memberships/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/org-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set organization membership for a user
   * Only authenticated organization owners can add a member to the organization or update the member's role.
   *
   * *   If the authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the organization. The user's [membership status](https://docs.github.com/rest/reference/orgs#get-organization-membership-for-a-user) will be `pending` until they accept the invitation.
   *
   * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be sent.
   *
   * **Rate limits**
   *
   * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour period.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#set-organization-membership-for-a-user}
   * Tags: orgs
   *
   */
  async orgsSetMembershipForUser(
    params: {
      org: string;
      username: string;
    },
    body: {
      /**
       * The role to give the user in the organization. Can be one of:
       * \* `admin` - The user will become an owner of the organization.
       * \* `member` - The user will become a non-owner member of the organization.
       * @defaultValue "member"
       *
       */
      role?: 'admin' | 'member';
    },
  ): Promise<OrgMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/memberships/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/org-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove organization membership for a user
   * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
   *
   * If the specified user is an active member of the organization, this will remove them from the organization. If the specified user has been invited to the organization, this will cancel their invitation. The specified user will receive an email notification in both cases.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#remove-organization-membership-for-a-user}
   * Tags: orgs
   *
   */
  async orgsRemoveMembershipForUser(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/memberships/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization migrations
   * Lists the most recent migrations.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#list-organization-migrations}
   * Tags: migrations
   *
   */
  async migrationsListForOrg(params: {
    org: string;
    per_page?: number;
    page?: number;
    exclude?: 'repositories'[];
  }): Promise<Migration[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/migrations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.exclude !== undefined)
      requestContext.setQueryParam(
        'exclude',
        r.serializeParameter(params.exclude),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/migration"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Start an organization migration
   * Initiates the generation of a migration archive.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#start-an-organization-migration}
   * Tags: migrations
   *
   */
  async migrationsStartForOrg(
    params: {
      org: string;
    },
    body: {
      /**
       * A list of arrays indicating which repositories should be migrated.
       *
       */
      repositories: string[];
      /**
       * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
       *
       */
      lock_repositories?: boolean;
      /**
       * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
       *
       */
      exclude_attachments?: boolean;
      exclude?: 'repositories'[];
    },
  ): Promise<Migration> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/migrations', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/migration"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an organization migration status
   * Fetches the status of a migration.
   *
   * The `state` of a migration can be one of the following values:
   *
   * *   `pending`, which means the migration hasn't started yet.
   * *   `exporting`, which means the migration is in progress.
   * *   `exported`, which means the migration finished successfully.
   * *   `failed`, which means the migration failed.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#get-an-organization-migration-status}
   * Tags: migrations
   *
   */
  async migrationsGetStatusForOrg(params: {
    org: string;
    migration_id: number;
    exclude?: 'repositories'[];
  }): Promise<Migration> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/migrations/{migration_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.exclude !== undefined)
      requestContext.setQueryParam(
        'exclude',
        r.serializeParameter(params.exclude),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/migration"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Download an organization migration archive
   * Fetches the URL to a migration archive.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#download-an-organization-migration-archive}
   * Tags: migrations
   *
   */
  async migrationsDownloadArchiveForOrg(params: {
    org: string;
    migration_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/migrations/{migration_id}/archive',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('302', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an organization migration archive
   * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#delete-an-organization-migration-archive}
   * Tags: migrations
   *
   */
  async migrationsDeleteArchiveForOrg(params: {
    org: string;
    migration_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/migrations/{migration_id}/archive',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unlock an organization repository
   * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete them](https://docs.github.com/rest/reference/repos#delete-a-repository) when the migration is complete and you no longer need the source data.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#unlock-an-organization-repository}
   * Tags: migrations
   *
   */
  async migrationsUnlockRepoForOrg(params: {
    org: string;
    migration_id: number;
    repo_name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories in an organization migration
   * List all the repositories for this organization migration.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#list-repositories-in-an-organization-migration}
   * Tags: migrations
   *
   */
  async migrationsListReposForOrg(params: {
    org: string;
    migration_id: number;
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/migrations/{migration_id}/repositories',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List outside collaborators for an organization
   * List all users who are outside collaborators of an organization.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-outside-collaborators-for-an-organization}
   * Tags: orgs
   *
   */
  async orgsListOutsideCollaborators(params: {
    org: string;
    filter?: '2fa_disabled' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/outside_collaborators', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Convert an organization member to outside collaborator
   * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that their current team membership allows. The user will no longer be a member of the organization. For more information, see "[Converting an organization member to an outside collaborator](https://help.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#convert-an-organization-member-to-outside-collaborator}
   * Tags: orgs
   *
   */
  async orgsConvertMemberToOutsideCollaborator(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/outside_collaborators/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{},"additionalProperties":false}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove outside collaborator from an organization
   * Removing a user from this list will remove them from all the organization's repositories.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#remove-outside-collaborator-from-an-organization}
   * Tags: orgs
   *
   */
  async orgsRemoveOutsideCollaborator(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/outside_collaborators/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a package for an organization
   * Gets a specific package in an organization.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-a-package-for-an-organization}
   * Tags: packages
   *
   */
  async packagesGetPackageForOrganization(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
  }): Promise<Package> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/packages/{package_type}/{package_name}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/package"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a package for an organization
   * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#delete-a-package-for-an-organization}
   * Tags: packages
   *
   */
  async packagesDeletePackageForOrg(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/packages/{package_type}/{package_name}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Restore a package for an organization
   * Restores an entire package in an organization.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#restore-a-package-for-an-organization}
   * Tags: packages
   *
   */
  async packagesRestorePackageForOrg(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    token?: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/packages/{package_type}/{package_name}/restore',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.token !== undefined)
      requestContext.setQueryParam('token', r.serializeParameter(params.token));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all package versions for a package owned by an organization
   * Returns all package versions for a package owned by an organization.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-an-organization}
   * Tags: packages
   *
   */
  async packagesGetAllPackageVersionsForPackageOwnedByOrg(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    page?: number;
    per_page?: number;
    state?: 'active' | 'deleted';
  }): Promise<PackageVersion[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/packages/{package_type}/{package_name}/versions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/package-version"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a package version for an organization
   * Gets a specific package version in an organization.
   *
   * You must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-a-package-version-for-an-organization}
   * Tags: packages
   *
   */
  async packagesGetPackageVersionForOrganization(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    package_version_id: number;
  }): Promise<PackageVersion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/package-version"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete package version for an organization
   * Deletes a specific package version in an organization. If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container you want to delete.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#delete-a-package-version-for-an-organization}
   * Tags: packages
   *
   */
  async packagesDeletePackageVersionForOrg(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    package_version_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Restore package version for an organization
   * Restores a specific package version in an organization.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:write` scopes. In addition:
   * - If `package_type` is not `container`, your token must also include the `repo` scope.
   * - If `package_type` is `container`, you must also have admin permissions to the container that you want to restore.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#restore-a-package-version-for-an-organization}
   * Tags: packages
   *
   */
  async packagesRestorePackageVersionForOrg(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    package_version_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization projects
   * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#list-organization-projects}
   * Tags: projects
   *
   */
  async projectsListForOrg(params: {
    org: string;
    state?: 'open' | 'closed' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<Project[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/projects', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/project"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an organization project
   * Creates an organization project board. Returns a `404 Not Found` status if projects are disabled in the organization. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#create-an-organization-project}
   * Tags: projects
   *
   */
  async projectsCreateForOrg(
    params: {
      org: string;
    },
    body: {
      /**
       * The name of the project.
       *
       */
      name: string;
      /**
       * The description of the project.
       *
       */
      body?: string;
    },
  ): Promise<Project> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/projects', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project"}'),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public organization members
   * Members of an organization can choose to have their membership publicized or not.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-public-organization-members}
   * Tags: orgs
   *
   */
  async orgsListPublicMembers(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/public_members', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check public organization membership for a user
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#check-public-organization-membership-for-a-user}
   * Tags: orgs
   *
   */
  async orgsCheckPublicMembershipForUser(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/public_members/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set public organization membership for the authenticated user
   * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#set-public-organization-membership-for-the-authenticated-user}
   * Tags: orgs
   *
   */
  async orgsSetPublicMembershipForAuthenticatedUser(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/public_members/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove public organization membership for the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#remove-public-organization-membership-for-the-authenticated-user}
   * Tags: orgs
   *
   */
  async orgsRemovePublicMembershipForAuthenticatedUser(params: {
    org: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/public_members/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization repositories
   * Lists repositories for the specified organization.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-organization-repositories}
   * Tags: repos
   *
   */
  async reposListForOrg(params: {
    org: string;
    type?:
      | 'all'
      | 'public'
      | 'private'
      | 'forks'
      | 'sources'
      | 'member'
      | 'internal';
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/repos', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.type !== undefined)
      requestContext.setQueryParam('type', r.serializeParameter(params.type));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an organization repository
   * Creates a new repository in the specified organization. The authenticated user must be a member of the organization.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-an-organization-repository}
   * Tags: repos
   *
   */
  async reposCreateInOrg(
    params: {
      org: string;
    },
    body: {
      /**
       * The name of the repository.
       *
       */
      name: string;
      /**
       * A short description of the repository.
       *
       */
      description?: string;
      /**
       * A URL with more information about the repository.
       *
       */
      homepage?: string;
      /**
       * Whether the repository is private.
       *
       */
      private?: boolean;
      /**
       * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. Note: For GitHub Enterprise Server and GitHub AE, this endpoint will only list repositories available to all users on the enterprise. For more information, see "[Creating an internal repository](https://help.github.com/en/github/creating-cloning-and-archiving-repositories/about-repository-visibility#about-internal-repositories)" in the GitHub Help documentation.
       * The `visibility` parameter overrides the `private` parameter when you use both parameters with the `nebula-preview` preview header.
       *
       */
      visibility?: 'public' | 'private' | 'visibility' | 'internal';
      /**
       * Either `true` to enable issues for this repository or `false` to disable them.
       * @defaultValue true
       *
       */
      has_issues?: boolean;
      /**
       * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
       * @defaultValue true
       *
       */
      has_projects?: boolean;
      /**
       * Either `true` to enable the wiki for this repository or `false` to disable it.
       * @defaultValue true
       *
       */
      has_wiki?: boolean;
      /**
       * Either `true` to make this repo available as a template repository or `false` to prevent it.
       *
       */
      is_template?: boolean;
      /**
       * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
       *
       */
      team_id?: number;
      /**
       * Pass `true` to create an initial commit with empty README.
       *
       */
      auto_init?: boolean;
      /**
       * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
       *
       */
      gitignore_template?: string;
      /**
       * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://help.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
       *
       */
      license_template?: string;
      /**
       * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
       * @defaultValue true
       *
       */
      allow_squash_merge?: boolean;
      /**
       * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
       * @defaultValue true
       *
       */
      allow_merge_commit?: boolean;
      /**
       * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
       * @defaultValue true
       *
       */
      allow_rebase_merge?: boolean;
      /**
       * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
       *
       */
      allow_auto_merge?: boolean;
      /**
       * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
       *
       */
      delete_branch_on_merge?: boolean;
    },
  ): Promise<Repository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/repos', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/repository"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Actions billing for an organization
   * Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * Access tokens must have the `repo` or `admin:org` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-an-organization}
   * Tags: billing
   *
   */
  async billingGetGithubActionsBillingOrg(params: {
    org: string;
  }): Promise<ActionsBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/settings/billing/actions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Packages billing for an organization
   * Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `repo` or `admin:org` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-an-organization}
   * Tags: billing
   *
   */
  async billingGetGithubPackagesBillingOrg(params: {
    org: string;
  }): Promise<PackagesBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/settings/billing/packages', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/packages-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get shared storage billing for an organization
   * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `repo` or `admin:org` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-an-organization}
   * Tags: billing
   *
   */
  async billingGetSharedStorageBillingOrg(params: {
    org: string;
  }): Promise<CombinedBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/settings/billing/shared-storage', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/combined-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List IdP groups for an organization
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups available in an organization. You can limit your page results using the `per_page` parameter. GitHub generates a url-encoded `page` token using a cursor value for where the next page begins. For more information on cursor pagination, see "[Offset and Cursor Pagination explained](https://dev.to/jackmarchant/offset-and-cursor-pagination-explained-b89)."
   *
   * The `per_page` parameter provides pagination for a list of IdP groups the authenticated user can access in an organization. For example, if the user `octocat` wants to see two groups per page in `octo-org` via cURL, it would look like this:
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-idp-groups-for-an-organization}
   * Tags: teams
   *
   */
  async teamsListIdpGroupsForOrg(params: {
    org: string;
    per_page?: number;
    page?: string;
  }): Promise<GroupMapping> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/team-sync/groups', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/group-mapping"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List teams
   * Lists all teams in an organization that are visible to the authenticated user.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-teams}
   * Tags: teams
   *
   */
  async teamsList(params: {
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a team
   * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting team creation permissions](https://help.github.com/en/articles/setting-team-creation-permissions-in-your-organization)."
   *
   * When you create a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of `maintainers`. For more information, see "[About teams](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/about-teams)".
   * Learn more at {@link https://docs.github.com/rest/reference/teams#create-a-team}
   * Tags: teams
   *
   */
  async teamsCreate(
    params: {
      org: string;
    },
    body: {
      /**
       * The name of the team.
       *
       */
      name: string;
      /**
       * The description of the team.
       *
       */
      description?: string;
      /**
       * List GitHub IDs for organization members who will become team maintainers.
       *
       */
      maintainers?: string[];
      /**
       * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
       *
       */
      repo_names?: string[];
      /**
       * The level of privacy this team should have. The options are:
       * **For a non-nested team:**
       * \* `secret` - only visible to organization owners and members of this team.
       * \* `closed` - visible to all members of this organization.
       * Default: `secret`
       * **For a parent or child team:**
       * \* `closed` - visible to all members of this organization.
       * Default for child team: `closed`
       *
       */
      privacy?: 'secret' | 'closed';
      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
       * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
       * \* `push` - team members can pull and push, but not administer newly-added repositories.
       * \* `admin` - team members can pull, push and administer newly-added repositories.
       * @defaultValue "pull"
       *
       */
      permission?: 'pull' | 'push' | 'admin';
      /**
       * The ID of a team to set as the parent team.
       *
       */
      parent_team_id?: number;
    },
  ): Promise<TeamFull> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-full"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a team by name
   * Gets a team using the team's `slug`. GitHub generates the `slug` from the team `name`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-a-team-by-name}
   * Tags: teams
   *
   */
  async teamsGetByName(params: {
    org: string;
    team_slug: string;
  }): Promise<TeamFull> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-full"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a team
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#update-a-team}
   * Tags: teams
   *
   */
  async teamsUpdateInOrg(
    params: {
      org: string;
      team_slug: string;
    },
    body: {
      /**
       * The name of the team.
       *
       */
      name?: string;
      /**
       * The description of the team.
       *
       */
      description?: string;
      /**
       * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
       * **For a non-nested team:**
       * \* `secret` - only visible to organization owners and members of this team.
       * \* `closed` - visible to all members of this organization.
       * **For a parent or child team:**
       * \* `closed` - visible to all members of this organization.
       *
       */
      privacy?: 'secret' | 'closed';
      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
       * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
       * \* `push` - team members can pull and push, but not administer newly-added repositories.
       * \* `admin` - team members can pull, push and administer newly-added repositories.
       * @defaultValue "pull"
       *
       */
      permission?: 'pull' | 'push' | 'admin';
      /**
       * The ID of a team to set as the parent team.
       *
       */
      parent_team_id?: number | null;
    },
  ): Promise<TeamFull> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-full"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a team
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#delete-a-team}
   * Tags: teams
   *
   */
  async teamsDeleteInOrg(params: {
    org: string;
    team_slug: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List discussions
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-discussions}
   * Tags: teams
   *
   */
  async teamsListDiscussionsInOrg(params: {
    org: string;
    team_slug: string;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
    pinned?: string;
  }): Promise<TeamDiscussion[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}/discussions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.pinned !== undefined)
      requestContext.setQueryParam(
        'pinned',
        r.serializeParameter(params.pinned),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team-discussion"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a discussion
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#create-a-discussion}
   * Tags: teams
   *
   */
  async teamsCreateDiscussionInOrg(
    params: {
      org: string;
      team_slug: string;
    },
    body: {
      /**
       * The discussion post's title.
       *
       */
      title: string;
      /**
       * The discussion post's body text.
       *
       */
      body: string;
      /**
       * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
       *
       */
      private?: boolean;
    },
  ): Promise<TeamDiscussion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}/discussions', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a discussion
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-a-discussion}
   * Tags: teams
   *
   */
  async teamsGetDiscussionInOrg(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
  }): Promise<TeamDiscussion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a discussion
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#update-a-discussion}
   * Tags: teams
   *
   */
  async teamsUpdateDiscussionInOrg(
    params: {
      org: string;
      team_slug: string;
      discussion_number: number;
    },
    body: {
      /**
       * The discussion post's title.
       *
       */
      title?: string;
      /**
       * The discussion post's body text.
       *
       */
      body?: string;
    },
  ): Promise<TeamDiscussion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a discussion
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#delete-a-discussion}
   * Tags: teams
   *
   */
  async teamsDeleteDiscussionInOrg(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List discussion comments
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-discussion-comments}
   * Tags: teams
   *
   */
  async teamsListDiscussionCommentsInOrg(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<TeamDiscussionComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team-discussion-comment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a discussion comment
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#create-a-discussion-comment}
   * Tags: teams
   *
   */
  async teamsCreateDiscussionCommentInOrg(
    params: {
      org: string;
      team_slug: string;
      discussion_number: number;
    },
    body: {
      /**
       * The discussion comment's body text.
       *
       */
      body: string;
    },
  ): Promise<TeamDiscussionComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion-comment"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a discussion comment
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-a-discussion-comment}
   * Tags: teams
   *
   */
  async teamsGetDiscussionCommentInOrg(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
  }): Promise<TeamDiscussionComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion-comment"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a discussion comment
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#update-a-discussion-comment}
   * Tags: teams
   *
   */
  async teamsUpdateDiscussionCommentInOrg(
    params: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;
    },
    body: {
      /**
       * The discussion comment's body text.
       *
       */
      body: string;
    },
  ): Promise<TeamDiscussionComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion-comment"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a discussion comment
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#delete-a-discussion-comment}
   * Tags: teams
   *
   */
  async teamsDeleteDiscussionCommentInOrg(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for a team discussion comment
   * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments/). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment}
   * Tags: reactions
   *
   */
  async reactionsListForTeamDiscussionCommentInOrg(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for a team discussion comment
   * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment}
   * Tags: reactions
   *
   */
  async reactionsCreateForTeamDiscussionCommentInOrg(
    params: {
      org: string;
      team_slug: string;
      discussion_number: number;
      comment_number: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Reaction>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete team discussion comment reaction
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#delete-team-discussion-comment-reaction}
   * Tags: reactions
   *
   */
  async reactionsDeleteForTeamDiscussionComment(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
    reaction_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for a team discussion
   * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion}
   * Tags: reactions
   *
   */
  async reactionsListForTeamDiscussionInOrg(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for a team discussion
   * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `POST /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion}
   * Tags: reactions
   *
   */
  async reactionsCreateForTeamDiscussionInOrg(
    params: {
      org: string;
      team_slug: string;
      discussion_number: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Reaction>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete team discussion reaction
   * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
   *
   * Delete a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#delete-team-discussion-reaction}
   * Tags: reactions
   *
   */
  async reactionsDeleteForTeamDiscussion(params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    reaction_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List pending team invitations
   * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-pending-team-invitations}
   * Tags: teams
   *
   */
  async teamsListPendingInvitationsInOrg(params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  }): Promise<OrganizationInvitation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}/invitations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/organization-invitation"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List team members
   * Team members will include the members of child teams.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-team-members}
   * Tags: teams
   *
   */
  async teamsListMembersInOrg(params: {
    org: string;
    team_slug: string;
    role?: 'member' | 'maintainer' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}/members', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.role !== undefined)
      requestContext.setQueryParam('role', r.serializeParameter(params.role));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get team membership for a user
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   *
   * **Note:**
   * The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user}
   * Tags: teams
   *
   */
  async teamsGetMembershipForUserInOrg(params: {
    org: string;
    team_slug: string;
    username: string;
  }): Promise<TeamMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/memberships/{username}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add or update team membership for a user
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization members to a team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * An organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user}
   * Tags: teams
   *
   */
  async teamsAddOrUpdateMembershipForUserInOrg(
    params: {
      org: string;
      team_slug: string;
      username: string;
    },
    body: {
      /**
       * The role that this user should have in the team. Can be one of:
       * \* `member` - a normal member of the team.
       * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
       * @defaultValue "member"
       *
       */
      role?: 'member' | 'maintainer';
    },
  ): Promise<TeamMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/memberships/{username}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove team membership for a user
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/memberships/{username}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user}
   * Tags: teams
   *
   */
  async teamsRemoveMembershipForUserInOrg(params: {
    org: string;
    team_slug: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/memberships/{username}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List team projects
   * Lists the organization projects for a team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-team-projects}
   * Tags: teams
   *
   */
  async teamsListProjectsInOrg(params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  }): Promise<TeamProject[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}/projects', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team-project"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check team permissions for a project
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project}
   * Tags: teams
   *
   */
  async teamsCheckPermissionsForProjectInOrg(params: {
    org: string;
    team_slug: string;
    project_id: number;
  }): Promise<TeamProject> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-project"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add or update team project permissions
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions}
   * Tags: teams
   *
   */
  async teamsAddOrUpdateProjectPermissionsInOrg(
    params: {
      org: string;
      team_slug: string;
      project_id: number;
    },
    body: {
      /**
       * The permission to grant to the team for this project. Can be one of:
       * \* `read` - team members can read, but not write to or administer this project.
       * \* `write` - team members can read and write, but not administer this project.
       * \* `admin` - team members can read, write and administer this project.
       * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
       *
       */
      permission?: 'read' | 'write' | 'admin';
    } | null,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a project from a team
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but does not delete the project.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team}
   * Tags: teams
   *
   */
  async teamsRemoveProjectInOrg(params: {
    org: string;
    team_slug: string;
    project_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List team repositories
   * Lists a team's repositories visible to the authenticated user.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-team-repositories}
   * Tags: teams
   *
   */
  async teamsListReposInOrg(params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}/repos', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check team permissions for a repository
   * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories inherited through a parent team will also be checked.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept header.
   *
   * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository}
   * Tags: teams
   *
   */
  async teamsCheckPermissionsForRepoInOrg(params: {
    org: string;
    team_slug: string;
    owner: string;
    repo: string;
  }): Promise<TeamRepository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-repository"}'),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add or update team repository permissions
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   *
   * For more information about the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions}
   * Tags: teams
   *
   */
  async teamsAddOrUpdateRepoPermissionsInOrg(
    params: {
      org: string;
      team_slug: string;
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The permission to grant the team on this repository. Can be one of:
       * \* `pull` - team members can pull, but not push to or administer this repository.
       * \* `push` - team members can pull and push, but not administer this repository.
       * \* `admin` - team members can pull, push and administer this repository.
       * \* `maintain` - team members can manage the repository without access to sensitive or destructive actions. Recommended for project managers. Only applies to repositories owned by organizations.
       * \* `triage` - team members can proactively manage issues and pull requests without write access. Recommended for contributors who triage a repository. Only applies to repositories owned by organizations.
       *
       * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
       *
       */
      permission?: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a repository from a team
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. This does not delete the repository, it just removes it from the team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team}
   * Tags: teams
   *
   */
  async teamsRemoveRepoInOrg(params: {
    org: string;
    team_slug: string;
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List IdP groups for a team
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups connected to a team on GitHub.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team}
   * Tags: teams
   *
   */
  async teamsListIdpGroupsInOrg(params: {
    org: string;
    team_slug: string;
  }): Promise<GroupMapping> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/group-mapping"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create or update IdP group connections
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}/team-sync/group-mappings`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections}
   * Tags: teams
   *
   */
  async teamsCreateOrUpdateIdpGroupConnectionsInOrg(
    params: {
      org: string;
      team_slug: string;
    },
    body: {
      /**
       * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
       *
       */
      groups?: {
        /**
         * ID of the IdP group.
         *
         */
        group_id: string;
        /**
         * Name of the IdP group.
         *
         */
        group_name: string;
        /**
         * Description of the IdP group.
         *
         */
        group_description: string;
      }[];
    },
  ): Promise<GroupMapping> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/orgs/{org}/teams/{team_slug}/team-sync/group-mappings',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/group-mapping"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List child teams
   * Lists the child teams of the team specified by `{team_slug}`.
   *
   * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-child-teams}
   * Tags: teams
   *
   */
  async teamsListChildInOrg(params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  }): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/orgs/{org}/teams/{team_slug}/teams', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a project card
   * Learn more at {@link https://docs.github.com/rest/reference/projects#get-a-project-card}
   * Tags: projects
   *
   */
  async projectsGetCard(params: { card_id: number }): Promise<ProjectCard> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/cards/{card_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project-card"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an existing project card
   * Learn more at {@link https://docs.github.com/rest/reference/projects#update-a-project-card}
   * Tags: projects
   *
   */
  async projectsUpdateCard(
    params: {
      card_id: number;
    },
    body: {
      /**
       * The project card's note
       * @example "Update all gems"
       *
       */
      note?: string | null;
      /**
       * Whether or not the card is archived
       *
       */
      archived?: boolean;
    },
  ): Promise<ProjectCard> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/cards/{card_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project-card"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a project card
   * Learn more at {@link https://docs.github.com/rest/reference/projects#delete-a-project-card}
   * Tags: projects
   *
   */
  async projectsDeleteCard(params: { card_id: number }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/cards/{card_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
        errors?: string[];
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"string"}}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Move a project card
   * Learn more at {@link https://docs.github.com/rest/reference/projects#move-a-project-card}
   * Tags: projects
   *
   */
  async projectsMoveCard(
    params: {
      card_id: number;
    },
    body: {
      /**
       * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
       * @example "bottom"
       *
       */
      position: string;
      /**
       * The unique identifier of the column the card should be moved to
       * @example 42
       *
       */
      column_id?: number;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/cards/{card_id}/moves', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{},"additionalProperties":false}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
          resource?: string;
          field?: string;
        }[];
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"resource":{"type":"string"},"field":{"type":"string"}}}}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}}}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a project column
   * Learn more at {@link https://docs.github.com/rest/reference/projects#get-a-project-column}
   * Tags: projects
   *
   */
  async projectsGetColumn(params: {
    column_id: number;
  }): Promise<ProjectColumn> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/{column_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project-column"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an existing project column
   * Learn more at {@link https://docs.github.com/rest/reference/projects#update-a-project-column}
   * Tags: projects
   *
   */
  async projectsUpdateColumn(
    params: {
      column_id: number;
    },
    body: {
      /**
       * Name of the project column
       * @example "Remaining tasks"
       *
       */
      name: string;
    },
  ): Promise<ProjectColumn> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/{column_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project-column"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a project column
   * Learn more at {@link https://docs.github.com/rest/reference/projects#delete-a-project-column}
   * Tags: projects
   *
   */
  async projectsDeleteColumn(params: { column_id: number }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/{column_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List project cards
   * Learn more at {@link https://docs.github.com/rest/reference/projects#list-project-cards}
   * Tags: projects
   *
   */
  async projectsListCards(params: {
    column_id: number;
    archived_state?: 'all' | 'archived' | 'not_archived';
    per_page?: number;
    page?: number;
  }): Promise<ProjectCard[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/{column_id}/cards', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.archived_state !== undefined)
      requestContext.setQueryParam(
        'archived_state',
        r.serializeParameter(params.archived_state),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/project-card"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a project card
   * Learn more at {@link https://docs.github.com/rest/reference/projects#create-a-project-card}
   * Tags: projects
   *
   */
  async projectsCreateCard(
    params: {
      column_id: number;
    },
    body:
      | {
          /**
           * The project card's note
           * @example "Update all gems"
           *
           */
          note: string | null;
        }
      | {
          /**
           * The unique identifier of the content associated with the card
           * @example 42
           *
           */
          content_id: number;
          /**
           * The piece of content associated with the card
           * @example "PullRequest"
           *
           */
          content_type: string;
        },
  ): Promise<ProjectCard> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/{column_id}/cards', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project-card"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError | ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"oneOf":[{"$ref":"#/components/schemas/validation-error"},{"$ref":"#/components/schemas/validation-error-simple"}]}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
        errors?: {
          code?: string;
          message?: string;
        }[];
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"}}}}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Move a project column
   * Learn more at {@link https://docs.github.com/rest/reference/projects#move-a-project-column}
   * Tags: projects
   *
   */
  async projectsMoveColumn(
    params: {
      column_id: number;
    },
    body: {
      /**
       * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
       * @example "last"
       *
       */
      position: string;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/columns/{column_id}/moves', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{},"additionalProperties":false}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a project
   * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#get-a-project}
   * Tags: projects
   *
   */
  async projectsGet(params: { project_id: number }): Promise<Project> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/{project_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a project
   * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#update-a-project}
   * Tags: projects
   *
   */
  async projectsUpdate(
    params: {
      project_id: number;
    },
    body: {
      /**
       * Name of the project
       * @example "Week One Sprint"
       *
       */
      name?: string;
      /**
       * Body of the project
       * @example "This project represents the sprint of the first week in January"
       *
       */
      body?: string | null;
      /**
       * State of the project; either 'open' or 'closed'
       * @example "open"
       *
       */
      state?: string;
      /**
       * The baseline permission that all organization members have on this project
       *
       */
      organization_permission?: 'read' | 'write' | 'admin' | 'none';
      /**
       * Whether or not this project can be seen by everyone.
       *
       */
      private?: boolean;
    },
  ): Promise<Project> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/{project_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
        errors?: string[];
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"string"}}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a project
   * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#delete-a-project}
   * Tags: projects
   *
   */
  async projectsDelete(params: { project_id: number }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/{project_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
        errors?: string[];
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"},"errors":{"type":"array","items":{"type":"string"}}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List project collaborators
   * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners. You must be an organization owner or a project `admin` to list collaborators.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#list-project-collaborators}
   * Tags: projects
   *
   */
  async projectsListCollaborators(params: {
    project_id: number;
    affiliation?: 'outside' | 'direct' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/{project_id}/collaborators', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.affiliation !== undefined)
      requestContext.setQueryParam(
        'affiliation',
        r.serializeParameter(params.affiliation),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add project collaborator
   * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a project `admin` to add a collaborator.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#add-project-collaborator}
   * Tags: projects
   *
   */
  async projectsAddCollaborator(
    params: {
      project_id: number;
      username: string;
    },
    body: {
      /**
       * The permission to grant the collaborator.
       * @example "write"
       * @defaultValue "write"
       *
       */
      permission?: 'read' | 'write' | 'admin';
    } | null,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/projects/{project_id}/collaborators/{username}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove user as a collaborator
   * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a collaborator.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#remove-project-collaborator}
   * Tags: projects
   *
   */
  async projectsRemoveCollaborator(params: {
    project_id: number;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/projects/{project_id}/collaborators/{username}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get project permission for a user
   * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key: `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission level.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#get-project-permission-for-a-user}
   * Tags: projects
   *
   */
  async projectsGetPermissionForUser(params: {
    project_id: number;
    username: string;
  }): Promise<RepositoryCollaboratorPermission> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/projects/{project_id}/collaborators/{username}/permission',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/repository-collaborator-permission"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List project columns
   * Learn more at {@link https://docs.github.com/rest/reference/projects#list-project-columns}
   * Tags: projects
   *
   */
  async projectsListColumns(params: {
    project_id: number;
    per_page?: number;
    page?: number;
  }): Promise<ProjectColumn[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/{project_id}/columns', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/project-column"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a project column
   * Learn more at {@link https://docs.github.com/rest/reference/projects#create-a-project-column}
   * Tags: projects
   *
   */
  async projectsCreateColumn(
    params: {
      project_id: number;
    },
    body: {
      /**
       * Name of the project column
       * @example "Remaining tasks"
       *
       */
      name: string;
    },
  ): Promise<ProjectColumn> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/projects/{project_id}/columns', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project-column"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get rate limit status for the authenticated user
   * **Note:** Accessing this endpoint does not count against your REST API rate limit.
   *
   * **Note:** The `rate` object is deprecated. If you're writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object. The `core` object contains the same information that is present in the `rate` object.
   * Learn more at {@link https://docs.github.com/rest/reference/rate-limit#get-rate-limit-status-for-the-authenticated-user}
   * Tags: rate-limit
   *
   */
  async rateLimitGet(params: {}): Promise<RateLimitOverview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/rate_limit', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/rate-limit-overview"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a reaction (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Reactions API. We recommend migrating your existing code to use the new delete reactions endpoints. For more information, see this [blog post](https://developer.github.com/changes/2020-02-26-new-delete-reactions-endpoints/).
   *
   * OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), when deleting a [team discussion](https://docs.github.com/rest/reference/teams#discussions) or [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/reactions/#delete-a-reaction-legacy}
   * Tags: reactions
   *
   */
  async reactionsDeleteLegacy(params: { reaction_id: number }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/reactions/{reaction_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository
   * When you pass the `scarlet-witch-preview` media type, requests to get a repository will also return the repository's code of conduct if it can be detected from the repository's code of conduct file.
   *
   * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository was forked from, `source` is the ultimate source for the network.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-repository}
   * Tags: repos
   *
   */
  async reposGet(params: {
    owner: string;
    repo: string;
  }): Promise<FullRepository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/full-repository"}'),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a repository
   * **Note**: To edit a repository's topics, use the [Replace all repository topics](https://docs.github.com/rest/reference/repos#replace-all-repository-topics) endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/repos/#update-a-repository}
   * Tags: repos
   *
   */
  async reposUpdate(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The name of the repository.
       *
       */
      name?: string;
      /**
       * A short description of the repository.
       *
       */
      description?: string;
      /**
       * A URL with more information about the repository.
       *
       */
      homepage?: string;
      /**
       * Either `true` to make the repository private or `false` to make it public. Default: `false`.
       * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private. **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://help.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
       *
       */
      private?: boolean;
      /**
       * Can be `public` or `private`. If your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+, `visibility` can also be `internal`. The `visibility` parameter overrides the `private` parameter when you use both along with the `nebula-preview` preview header.
       *
       */
      visibility?: 'public' | 'private' | 'visibility' | 'internal';
      /**
       * Specify which security and analysis features to enable or disable. For example, to enable GitHub Advanced Security, use this data in the body of the PATCH request: `{"security_and_analysis": {"advanced_security": {"status": "enabled"}}}`. If you have admin permissions for a private repository covered by an Advanced Security license, you can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
       *
       */
      security_and_analysis?: {
        /**
         * Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
         *
         */
        advanced_security?: {
          /**
           * Can be `enabled` or `disabled`.
           *
           */
          status?: string;
        };
        /**
         * Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
         *
         */
        secret_scanning?: {
          /**
           * Can be `enabled` or `disabled`.
           *
           */
          status?: string;
        };
      } | null;
      /**
       * Either `true` to enable issues for this repository or `false` to disable them.
       * @defaultValue true
       *
       */
      has_issues?: boolean;
      /**
       * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
       * @defaultValue true
       *
       */
      has_projects?: boolean;
      /**
       * Either `true` to enable the wiki for this repository or `false` to disable it.
       * @defaultValue true
       *
       */
      has_wiki?: boolean;
      /**
       * Either `true` to make this repo available as a template repository or `false` to prevent it.
       *
       */
      is_template?: boolean;
      /**
       * Updates the default branch for this repository.
       *
       */
      default_branch?: string;
      /**
       * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
       * @defaultValue true
       *
       */
      allow_squash_merge?: boolean;
      /**
       * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
       * @defaultValue true
       *
       */
      allow_merge_commit?: boolean;
      /**
       * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
       * @defaultValue true
       *
       */
      allow_rebase_merge?: boolean;
      /**
       * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
       *
       */
      allow_auto_merge?: boolean;
      /**
       * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
       *
       */
      delete_branch_on_merge?: boolean;
      /**
       * `true` to archive this repository. **Note**: You cannot unarchive repositories through the API.
       *
       */
      archived?: boolean;
    },
  ): Promise<FullRepository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/full-repository"}'),
        this.resolver,
      );
    if (r.isCodeInRange('307', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a repository
   * Deleting a repository requires admin access. If OAuth is used, the `delete_repo` scope is required.
   *
   * If an organization owner has configured the organization to prevent members from deleting organization-owned
   * repositories, you will get a `403 Forbidden` response.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-repository}
   * Tags: repos
   *
   */
  async reposDelete(params: { owner: string; repo: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('307', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List artifacts for a repository
   * Lists all artifacts for a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-artifacts-for-a-repository}
   * Tags: actions
   *
   */
  async actionsListArtifactsForRepo(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    artifacts: Artifact[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/artifacts', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"artifacts":{"type":"array","items":{"$ref":"#/components/schemas/artifact"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an artifact
   * Gets a specific artifact for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-an-artifact}
   * Tags: actions
   *
   */
  async actionsGetArtifact(params: {
    owner: string;
    repo: string;
    artifact_id: number;
  }): Promise<Artifact> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/artifact"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an artifact
   * Deletes an artifact for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-an-artifact}
   * Tags: actions
   *
   */
  async actionsDeleteArtifact(params: {
    owner: string;
    repo: string;
    artifact_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Download an artifact
   * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:` in
   * the response header to find the URL for the download. The `:archive_format` must be `zip`. Anyone with read access to
   * the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   * GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#download-an-artifact}
   * Tags: actions
   *
   */
  async actionsDownloadArtifact(params: {
    owner: string;
    repo: string;
    artifact_id: number;
    archive_format: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('302', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a job for a workflow run
   * Gets a specific job in a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-job-for-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsGetJobForWorkflowRun(params: {
    owner: string;
    repo: string;
    job_id: number;
  }): Promise<Job> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/jobs/{job_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/job"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Download job logs for a workflow run
   * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
   * for `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can
   * use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must
   * have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#download-job-logs-for-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsDownloadJobLogsForWorkflowRun(params: {
    owner: string;
    repo: string;
    job_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('302', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Actions permissions for a repository
   * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions allowed to run in the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-github-actions-permissions-for-a-repository}
   * Tags: actions
   *
   */
  async actionsGetGithubActionsPermissionsRepository(params: {
    owner: string;
    repo: string;
  }): Promise<ActionsRepositoryPermissions> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/permissions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/actions-repository-permissions"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set GitHub Actions permissions for a repository
   * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions in the repository.
   *
   * If the repository belongs to an organization or enterprise that has set restrictive permissions at the organization or enterprise levels, such as `allowed_actions` to `selected` actions, then you cannot override them for the repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-github-actions-permissions-for-a-repository}
   * Tags: actions
   *
   */
  async actionsSetGithubActionsPermissionsRepository(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      enabled: ActionsEnabled;
      allowed_actions?: AllowedActions;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/permissions', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get allowed actions for a repository
   * Gets the settings for selected actions that are allowed in a repository. To use this endpoint, the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-allowed-actions-for-a-repository}
   * Tags: actions
   *
   */
  async actionsGetAllowedActionsRepository(params: {
    owner: string;
    repo: string;
  }): Promise<SelectedActions> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/permissions/selected-actions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/selected-actions"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set allowed actions for a repository
   * Sets the actions that are allowed in a repository. To use this endpoint, the repository permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
   *
   * If the repository belongs to an organization or enterprise that has `selected` actions set at the organization or enterprise levels, then you cannot override any of the allowed actions settings.
   *
   * To use the `patterns_allowed` setting for private repositories, the repository must belong to an enterprise. If the repository does not belong to an enterprise, then the `patterns_allowed` setting only applies to public repositories.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `administration` repository permission to use this API.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#set-allowed-actions-for-a-repository}
   * Tags: actions
   *
   */
  async actionsSetAllowedActionsRepository(
    params: {
      owner: string;
      repo: string;
    },
    body: SelectedActions,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/permissions/selected-actions',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List self-hosted runners for a repository
   * Lists all self-hosted runners configured in a repository. You must authenticate using an access token with the `repo` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-self-hosted-runners-for-a-repository}
   * Tags: actions
   *
   */
  async actionsListSelfHostedRunnersForRepo(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    runners: Runner[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/runners', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"runners":{"type":"array","items":{"$ref":"#/components/schemas/runner"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List runner applications for a repository
   * Lists binaries for the runner application that you can download and run.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-runner-applications-for-a-repository}
   * Tags: actions
   *
   */
  async actionsListRunnerApplicationsForRepo(params: {
    owner: string;
    repo: string;
  }): Promise<RunnerApplication[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runners/downloads',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/runner-application"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a registration token for a repository
   * Returns a token that you can pass to the `config` script. The token expires after one hour. You must authenticate
   * using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using registration token
   *
   * Configure your self-hosted runner, replacing `TOKEN` with the registration token provided by this endpoint.
   *
   * ```
   * ./config.sh --url https://github.com/octo-org/octo-repo-artifacts --token TOKEN
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-a-registration-token-for-a-repository}
   * Tags: actions
   *
   */
  async actionsCreateRegistrationTokenForRepo(params: {
    owner: string;
    repo: string;
  }): Promise<AuthenticationToken> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runners/registration-token',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authentication-token"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a remove token for a repository
   * Returns a token that you can pass to remove a self-hosted runner from a repository. The token expires after one hour.
   * You must authenticate using an access token with the `repo` scope to use this endpoint.
   *
   * #### Example using remove token
   *
   * To remove your self-hosted runner from a repository, replace TOKEN with the remove token provided by this endpoint.
   *
   * ```
   * ./config.sh remove --token TOKEN
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-a-remove-token-for-a-repository}
   * Tags: actions
   *
   */
  async actionsCreateRemoveTokenForRepo(params: {
    owner: string;
    repo: string;
  }): Promise<AuthenticationToken> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runners/remove-token',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/authentication-token"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a self-hosted runner for a repository
   * Gets a specific self-hosted runner configured in a repository.
   *
   * You must authenticate using an access token with the `repo` scope to use this
   * endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-self-hosted-runner-for-a-repository}
   * Tags: actions
   *
   */
  async actionsGetSelfHostedRunnerForRepo(params: {
    owner: string;
    repo: string;
    runner_id: number;
  }): Promise<Runner> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/runner"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a self-hosted runner from a repository
   * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner when the machine you were using no longer exists.
   *
   * You must authenticate using an access token with the `repo`
   * scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-a-self-hosted-runner-from-a-repository}
   * Tags: actions
   *
   */
  async actionsDeleteSelfHostedRunnerFromRepo(params: {
    owner: string;
    repo: string;
    runner_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runners/{runner_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List workflow runs for a repository
   * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-workflow-runs-for-a-repository}
   * Tags: actions
   *
   */
  async actionsListWorkflowRunsForRepo(params: {
    owner: string;
    repo: string;
    actor?: string;
    branch?: string;
    event?: string;
    status?:
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting';
    per_page?: number;
    page?: number;
    created?: Date;
  }): Promise<{
    total_count: number;
    workflow_runs: WorkflowRun[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/runs', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.actor !== undefined)
      requestContext.setQueryParam('actor', r.serializeParameter(params.actor));
    if (params.branch !== undefined)
      requestContext.setQueryParam(
        'branch',
        r.serializeParameter(params.branch),
      );
    if (params.event !== undefined)
      requestContext.setQueryParam('event', r.serializeParameter(params.event));
    if (params.status !== undefined)
      requestContext.setQueryParam(
        'status',
        r.serializeParameter(params.status),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.created !== undefined)
      requestContext.setQueryParam(
        'created',
        r.serializeParameter(params.created),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"workflow_runs":{"type":"array","items":{"$ref":"#/components/schemas/workflow-run"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a workflow run
   * Gets a specific workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsGetWorkflowRun(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<WorkflowRun> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/runs/{run_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/workflow-run"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a workflow run
   * Delete a specific workflow run. Anyone with write access to the repository can use this endpoint. If the repository is
   * private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:write` permission to use
   * this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsDeleteWorkflowRun(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/runs/{run_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the review history for a workflow run
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-the-review-history-for-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsGetReviewsForRun(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<EnvironmentApprovals[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/environment-approvals"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Approve a workflow run for a fork pull request
   * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see ["Approving workflow runs from public forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#approve-a-workflow-run-for-a-fork-pull-request}
   * Tags: actions
   *
   */
  async actionsApproveWorkflowRun(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<EmptyObject> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/approve',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/empty-object"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List workflow run artifacts
   * Lists artifacts for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-workflow-run-artifacts}
   * Tags: actions
   *
   */
  async actionsListWorkflowRunArtifacts(params: {
    owner: string;
    repo: string;
    run_id: number;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    artifacts: Artifact[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"artifacts":{"type":"array","items":{"$ref":"#/components/schemas/artifact"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Cancel a workflow run
   * Cancels a workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#cancel-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsCancelWorkflowRun(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{},"additionalProperties":false}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List jobs for a workflow run
   * Lists jobs for a workflow run. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-jobs-for-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsListJobsForWorkflowRun(params: {
    owner: string;
    repo: string;
    run_id: number;
    filter?: 'latest' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    jobs: Job[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"jobs":{"type":"array","items":{"$ref":"#/components/schemas/job"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Download workflow run logs
   * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look for
   * `Location:` in the response header to find the URL for the download. Anyone with read access to the repository can use
   * this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have
   * the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#download-workflow-run-logs}
   * Tags: actions
   *
   */
  async actionsDownloadWorkflowRunLogs(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/logs',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('302', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete workflow run logs
   * Deletes all logs for a workflow run. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-workflow-run-logs}
   * Tags: actions
   *
   */
  async actionsDeleteWorkflowRunLogs(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/logs',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get pending deployments for a workflow run
   * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-pending-deployments-for-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsGetPendingDeploymentsForRun(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<PendingDeployment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/pending-deployment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Review pending deployments for a workflow run
   * Approve or reject pending deployments that are waiting on approval by a required reviewer.
   *
   * Anyone with read access to the repository contents and deployments can use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#review-pending-deployments-for-a-workflow-run}
   * Tags: actions
   *
   */
  async actionsReviewPendingDeploymentsForRun(
    params: {
      owner: string;
      repo: string;
      run_id: number;
    },
    body: {
      /**
       * The list of environment ids to approve or reject
       * @example
       * [
       *   161171787,
       *   161171795
       * ]
       *
       */
      environment_ids: number[];
      /**
       * Whether to approve or reject deployment to the specified environments. Must be one of: `approved` or `rejected`
       * @example "approved"
       *
       */
      state: 'approved' | 'rejected';
      /**
       * A comment to accompany the deployment review
       * @example "Ship it!"
       *
       */
      comment: string;
    },
  ): Promise<Deployment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/deployment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Re-run a workflow
   * Re-runs your workflow run using its `id`. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#re-run-a-workflow}
   * Tags: actions
   *
   */
  async actionsReRunWorkflow(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{},"additionalProperties":false}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get workflow run usage
   * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-workflow-run-usage}
   * Tags: actions
   *
   */
  async actionsGetWorkflowRunUsage(params: {
    owner: string;
    repo: string;
    run_id: number;
  }): Promise<WorkflowRunUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/runs/{run_id}/timing',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/workflow-run-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository secrets
   * Lists all secrets available in a repository without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-repository-secrets}
   * Tags: actions
   *
   */
  async actionsListRepoSecrets(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    secrets: ActionsSecret[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/secrets', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"secrets":{"type":"array","items":{"$ref":"#/components/schemas/actions-secret"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository public key
   * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-repository-public-key}
   * Tags: actions
   *
   */
  async actionsGetRepoPublicKey(params: {
    owner: string;
    repo: string;
  }): Promise<ActionsPublicKey> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/secrets/public-key',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-public-key"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository secret
   * Gets a single repository secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-repository-secret}
   * Tags: actions
   *
   */
  async actionsGetRepoSecret(params: {
    owner: string;
    repo: string;
    secret_name: string;
  }): Promise<ActionsSecret> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-secret"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create or update a repository secret
   * Creates or updates a repository secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-or-update-a-repository-secret}
   * Tags: actions
   *
   */
  async actionsCreateOrUpdateRepoSecret(
    params: {
      owner: string;
      repo: string;
      secret_name: string;
    },
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/reference/actions#get-a-repository-public-key) endpoint.
       *
       */
      encrypted_value?: string;
      /**
       * ID of the key you used to encrypt the secret.
       *
       */
      key_id?: string;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{},"additionalProperties":false}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a repository secret
   * Deletes a secret in a repository using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-a-repository-secret}
   * Tags: actions
   *
   */
  async actionsDeleteRepoSecret(params: {
    owner: string;
    repo: string;
    secret_name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/secrets/{secret_name}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository workflows
   * Lists the workflows in a repository. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-repository-workflows}
   * Tags: actions
   *
   */
  async actionsListRepoWorkflows(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    workflows: Workflow[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/actions/workflows', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"workflows":{"type":"array","items":{"$ref":"#/components/schemas/workflow"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a workflow
   * Gets a specific workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-a-workflow}
   * Tags: actions
   *
   */
  async actionsGetWorkflow(params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  }): Promise<Workflow> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/workflow"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Disable a workflow
   * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#disable-a-workflow}
   * Tags: actions
   *
   */
  async actionsDisableWorkflow(params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a workflow dispatch event
   * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must configure your GitHub Actions workflow to run when the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event occurs. The `inputs` are configured in the workflow file. For more information about how to configure the `workflow_dispatch` event in the workflow file, see "[Events that trigger workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)."
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-a-workflow-dispatch-event}
   * Tags: actions
   *
   */
  async actionsCreateWorkflowDispatch(
    params: {
      owner: string;
      repo: string;
      workflow_id: number | string;
    },
    body: {
      /**
       * The git reference for the workflow. The reference can be a branch or tag name.
       *
       */
      ref: string;
      /**
       * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
       *
       */
      inputs?: {
        [key: string]: string;
      };
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Enable a workflow
   * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
   *
   * You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `actions:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#enable-a-workflow}
   * Tags: actions
   *
   */
  async actionsEnableWorkflow(params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List workflow runs
   * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see [Parameters](https://docs.github.com/rest/overview/resources-in-the-rest-api#parameters).
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-workflow-runs}
   * Tags: actions
   *
   */
  async actionsListWorkflowRuns(params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
    actor?: string;
    branch?: string;
    event?: string;
    status?:
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting';
    per_page?: number;
    page?: number;
    created?: Date;
  }): Promise<{
    total_count: number;
    workflow_runs: WorkflowRun[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.actor !== undefined)
      requestContext.setQueryParam('actor', r.serializeParameter(params.actor));
    if (params.branch !== undefined)
      requestContext.setQueryParam(
        'branch',
        r.serializeParameter(params.branch),
      );
    if (params.event !== undefined)
      requestContext.setQueryParam('event', r.serializeParameter(params.event));
    if (params.status !== undefined)
      requestContext.setQueryParam(
        'status',
        r.serializeParameter(params.status),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.created !== undefined)
      requestContext.setQueryParam(
        'created',
        r.serializeParameter(params.created),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"workflow_runs":{"type":"array","items":{"$ref":"#/components/schemas/workflow-run"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get workflow usage
   * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * You can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-workflow-usage}
   * Tags: actions
   *
   */
  async actionsGetWorkflowUsage(params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  }): Promise<WorkflowUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/workflow-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List assignees
   * Lists the [available assignees](https://help.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a repository.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-assignees}
   * Tags: issues
   *
   */
  async issuesListAssignees(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/assignees', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a user can be assigned
   * Checks if a user has permission to be assigned to an issue in this repository.
   *
   * If the `assignee` can be assigned to issues in the repository, a `204` header with no content is returned.
   *
   * Otherwise a `404` status code is returned.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#check-if-a-user-can-be-assigned}
   * Tags: issues
   *
   */
  async issuesCheckUserCanBeAssigned(params: {
    owner: string;
    repo: string;
    assignee: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/assignees/{assignee}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List all autolinks of a repository
   * This returns a list of autolinks configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * Learn more at {@link https://docs.github.com/v3/repos#list-autolinks}
   * Tags: repos
   *
   */
  async reposListAutolinks(params: {
    owner: string;
    repo: string;
    page?: number;
  }): Promise<Autolink[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/autolinks', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/autolink"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an autolink reference for a repository
   * Users with admin access to the repository can create an autolink.
   * Learn more at {@link https://docs.github.com/v3/repos#create-an-autolink}
   * Tags: repos
   *
   */
  async reposCreateAutolink(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The prefix appended by a number will generate a link any time it is found in an issue, pull request, or commit.
       *
       */
      key_prefix: string;
      /**
       * The URL must contain <num> for the reference number.
       *
       */
      url_template: string;
    },
  ): Promise<Autolink> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/autolinks', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/autolink"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an autolink reference of a repository
   * This returns a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * Learn more at {@link https://docs.github.com/v3/repos#get-autolink}
   * Tags: repos
   *
   */
  async reposGetAutolink(params: {
    owner: string;
    repo: string;
    autolink_id: number;
  }): Promise<Autolink> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/autolinks/{autolink_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/autolink"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an autolink reference from a repository
   * This deletes a single autolink reference by ID that was configured for the given repository.
   *
   * Information about autolinks are only available to repository administrators.
   * Learn more at {@link https://docs.github.com/v3/repos#delete-autolink}
   * Tags: repos
   *
   */
  async reposDeleteAutolink(params: {
    owner: string;
    repo: string;
    autolink_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/autolinks/{autolink_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Enable automated security fixes
   * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
   * Learn more at {@link https://docs.github.com/rest/reference/repos#enable-automated-security-fixes}
   * Tags: repos
   *
   */
  async reposEnableAutomatedSecurityFixes(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/automated-security-fixes',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Disable automated security fixes
   * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For more information, see "[Configuring automated security fixes](https://help.github.com/en/articles/configuring-automated-security-fixes)".
   * Learn more at {@link https://docs.github.com/rest/reference/repos#disable-automated-security-fixes}
   * Tags: repos
   *
   */
  async reposDisableAutomatedSecurityFixes(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/automated-security-fixes',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List branches
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-branches}
   * Tags: repos
   *
   */
  async reposListBranches(params: {
    owner: string;
    repo: string;
    protected?: boolean;
    per_page?: number;
    page?: number;
  }): Promise<ShortBranch[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/branches', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.protected !== undefined)
      requestContext.setQueryParam(
        'protected',
        r.serializeParameter(params.protected),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/short-branch"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a branch
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-branch}
   * Tags: repos
   *
   */
  async reposGetBranch(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<BranchWithProtection> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/branches/{branch}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/branch-with-protection"}'),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-branch-protection}
   * Tags: repos
   *
   */
  async reposGetBranchProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<BranchProtection> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/branch-protection"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Protecting a branch requires admin or owner permissions to the repository.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   *
   * **Note**: The list of users, apps, and teams in total is limited to 100 items.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-branch-protection}
   * Tags: repos
   *
   */
  async reposUpdateBranchProtection(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body: {
      /**
       * Require status checks to pass before merging. Set to `null` to disable.
       *
       */
      required_status_checks: {
        /**
         * Require branches to be up to date before merging.
         *
         */
        strict: boolean;
        /**
         * The list of status checks to require in order to merge into this branch
         *
         */
        contexts: string[];
      } | null;
      /**
       * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
       *
       */
      enforce_admins: boolean | null;
      /**
       * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
       *
       */
      required_pull_request_reviews: {
        /**
         * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
         *
         */
        dismissal_restrictions?: {
          /**
           * The list of user `login`s with dismissal access
           *
           */
          users?: string[];
          /**
           * The list of team `slug`s with dismissal access
           *
           */
          teams?: string[];
        };
        /**
         * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
         *
         */
        dismiss_stale_reviews?: boolean;
        /**
         * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) review them.
         *
         */
        require_code_owner_reviews?: boolean;
        /**
         * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6.
         *
         */
        required_approving_review_count?: number;
      } | null;
      /**
       * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
       *
       */
      restrictions: {
        /**
         * The list of user `login`s with push access
         *
         */
        users: string[];
        /**
         * The list of team `slug`s with push access
         *
         */
        teams: string[];
        /**
         * The list of app `slug`s with push access
         *
         */
        apps?: string[];
      } | null;
      /**
       * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://help.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
       *
       */
      required_linear_history?: boolean;
      /**
       * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
       *
       */
      allow_force_pushes?: boolean | null;
      /**
       * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://help.github.com/en/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
       *
       */
      allow_deletions?: boolean;
      /**
       * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
       *
       */
      required_conversation_resolution?: boolean;
    },
  ): Promise<ProtectedBranch> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/protected-branch"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-branch-protection}
   * Tags: repos
   *
   */
  async reposDeleteBranchProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get admin branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-admin-branch-protection}
   * Tags: repos
   *
   */
  async reposGetAdminBranchProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<ProtectedBranchAdminEnforced> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/protected-branch-admin-enforced"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set admin branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Adding admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#set-admin-branch-protection}
   * Tags: repos
   *
   */
  async reposSetAdminBranchProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<ProtectedBranchAdminEnforced> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/protected-branch-admin-enforced"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete admin branch protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removing admin enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-admin-branch-protection}
   * Tags: repos
   *
   */
  async reposDeleteAdminBranchProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get pull request review protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-pull-request-review-protection}
   * Tags: repos
   *
   */
  async reposGetPullRequestReviewProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<ProtectedBranchPullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/protected-branch-pull-request-review"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update pull request review protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating pull request review enforcement requires admin or owner permissions to the repository and branch protection to be enabled.
   *
   * **Note**: Passing new arrays of `users` and `teams` replaces their previous values.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-pull-request-review-protection}
   * Tags: repos
   *
   */
  async reposUpdatePullRequestReviewProtection(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body: {
      /**
       * Specify which users and teams can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
       *
       */
      dismissal_restrictions?: {
        /**
         * The list of user `login`s with dismissal access
         *
         */
        users?: string[];
        /**
         * The list of team `slug`s with dismissal access
         *
         */
        teams?: string[];
      };
      /**
       * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
       *
       */
      dismiss_stale_reviews?: boolean;
      /**
       * Blocks merging pull requests until [code owners](https://help.github.com/articles/about-code-owners/) have reviewed.
       *
       */
      require_code_owner_reviews?: boolean;
      /**
       * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6.
       *
       */
      required_approving_review_count?: number;
    },
  ): Promise<ProtectedBranchPullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/protected-branch-pull-request-review"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete pull request review protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-pull-request-review-protection}
   * Tags: repos
   *
   */
  async reposDeletePullRequestReviewProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get commit signature protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign commits on this branch. For more information, see [Signing commits with GPG](https://help.github.com/articles/signing-commits-with-gpg) in GitHub Help.
   *
   * **Note**: You must enable branch protection to require signed commits.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-commit-signature-protection}
   * Tags: repos
   *
   */
  async reposGetCommitSignatureProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<ProtectedBranchAdminEnforced> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/protected-branch-admin-enforced"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create commit signature protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-commit-signature-protection}
   * Tags: repos
   *
   */
  async reposCreateCommitSignatureProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<ProtectedBranchAdminEnforced> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/protected-branch-admin-enforced"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete commit signature protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * When authenticated with admin or owner permissions to the repository, you can use this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed commits.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-commit-signature-protection}
   * Tags: repos
   *
   */
  async reposDeleteCommitSignatureProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get status checks protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-status-checks-protection}
   * Tags: repos
   *
   */
  async reposGetStatusChecksProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<StatusCheckPolicy> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/status-check-policy"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update status check protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Updating required status checks requires admin or owner permissions to the repository and branch protection to be enabled.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-status-check-potection}
   * Tags: repos
   *
   */
  async reposUpdateStatusCheckProtection(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body: {
      /**
       * Require branches to be up to date before merging.
       *
       */
      strict?: boolean;
      /**
       * The list of status checks to require in order to merge into this branch
       *
       */
      contexts?: string[];
    },
  ): Promise<StatusCheckPolicy> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/status-check-policy"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove status check protection
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#remove-status-check-protection}
   * Tags: repos
   *
   */
  async reposRemoveStatusCheckProtection(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-all-status-check-contexts}
   * Tags: repos
   *
   */
  async reposGetAllStatusCheckContexts(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<string[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"array","items":{"type":"string"}}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#add-status-check-contexts}
   * Tags: repos
   *
   */
  async reposAddStatusCheckContexts(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * contexts parameter
           *
           */
          contexts: string[];
        }
      | string[],
  ): Promise<string[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"array","items":{"type":"string"}}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#set-status-check-contexts}
   * Tags: repos
   *
   */
  async reposSetStatusCheckContexts(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * contexts parameter
           *
           */
          contexts: string[];
        }
      | string[],
  ): Promise<string[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"array","items":{"type":"string"}}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove status check contexts
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#remove-status-check-contexts}
   * Tags: repos
   *
   */
  async reposRemoveStatusCheckContexts(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * contexts parameter
           *
           */
          contexts: string[];
        }
      | string[],
  ): Promise<string[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"array","items":{"type":"string"}}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists who has access to this protected branch.
   *
   * **Note**: Users, apps, and teams `restrictions` are only available for organization-owned repositories.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-access-restrictions}
   * Tags: repos
   *
   */
  async reposGetAccessRestrictions(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<BranchRestrictionPolicy> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/branch-restriction-policy"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Disables the ability to restrict who can push to this branch.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-access-restrictions}
   * Tags: repos
   *
   */
  async reposDeleteAccessRestrictions(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get apps with access to the protected branch
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the GitHub Apps that have push access to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-apps-with-access-to-the-protected-branch}
   * Tags: repos
   *
   */
  async reposGetAppsWithAccessToProtectedBranch(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<Integration[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/integration"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add app access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified apps push access for this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#add-app-access-restrictions}
   * Tags: repos
   *
   */
  async reposAddAppAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * apps parameter
           *
           */
          apps: string[];
        }
      | string[],
  ): Promise<Integration[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/integration"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set app access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of apps that have push access to this branch. This removes all apps that previously had push access and grants push access to the new list of apps. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#set-app-access-restrictions}
   * Tags: repos
   *
   */
  async reposSetAppAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * apps parameter
           *
           */
          apps: string[];
        }
      | string[],
  ): Promise<Integration[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/integration"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove app access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of an app to push to this branch. Only installed GitHub Apps with `write` access to the `contents` permission can be added as authorized actors on a protected branch.
   *
   * | Type    | Description                                                                                                                                                |
   * | ------- | ---------------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | The GitHub Apps that have push access to this branch. Use the app's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#remove-app-access-restrictions}
   * Tags: repos
   *
   */
  async reposRemoveAppAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * apps parameter
           *
           */
          apps: string[];
        }
      | string[],
  ): Promise<Integration[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/integration"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get teams with access to the protected branch
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the teams who have push access to this branch. The list includes child teams.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-teams-with-access-to-the-protected-branch}
   * Tags: repos
   *
   */
  async reposGetTeamsWithAccessToProtectedBranch(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add team access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified teams push access for this branch. You can also give push access to child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#add-team-access-restrictions}
   * Tags: repos
   *
   */
  async reposAddTeamAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * teams parameter
           *
           */
          teams: string[];
        }
      | string[],
  ): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set team access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of teams that have push access to this branch. This removes all teams that previously had push access and grants push access to the new list of teams. Team restrictions include child teams.
   *
   * | Type    | Description                                                                                                                                |
   * | ------- | ------------------------------------------------------------------------------------------------------------------------------------------ |
   * | `array` | The teams that can have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#set-team-access-restrictions}
   * Tags: repos
   *
   */
  async reposSetTeamAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * teams parameter
           *
           */
          teams: string[];
        }
      | string[],
  ): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove team access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a team to push to this branch. You can also remove push access for child teams.
   *
   * | Type    | Description                                                                                                                                         |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Teams that should no longer have push access. Use the team's `slug`. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#remove-team-access-restrictions}
   * Tags: repos
   *
   */
  async reposRemoveTeamAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * teams parameter
           *
           */
          teams: string[];
        }
      | string[],
  ): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get users with access to the protected branch
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists the people who have push access to this branch.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-users-with-access-to-the-protected-branch}
   * Tags: repos
   *
   */
  async reposGetUsersWithAccessToProtectedBranch(params: {
    owner: string;
    repo: string;
    branch: string;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add user access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Grants the specified people push access for this branch.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#add-user-access-restrictions}
   * Tags: repos
   *
   */
  async reposAddUserAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * users parameter
           *
           */
          users: string[];
        }
      | string[],
  ): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set user access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Replaces the list of people that have push access to this branch. This removes all people that previously had push access and grants push access to the new list of people.
   *
   * | Type    | Description                                                                                                                   |
   * | ------- | ----------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#set-user-access-restrictions}
   * Tags: repos
   *
   */
  async reposSetUserAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * users parameter
           *
           */
          users: string[];
        }
      | string[],
  ): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove user access restrictions
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Removes the ability of a user to push to this branch.
   *
   * | Type    | Description                                                                                                                                   |
   * | ------- | --------------------------------------------------------------------------------------------------------------------------------------------- |
   * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and teams in total is limited to 100 items. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#remove-user-access-restrictions}
   * Tags: repos
   *
   */
  async reposRemoveUserAccessRestrictions(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body:
      | {
          /**
           * users parameter
           *
           */
          users: string[];
        }
      | string[],
  ): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Rename a branch
   * Renames a branch in a repository.
   *
   * **Note:** Although the API responds immediately, the branch rename process might take some extra time to complete in the background. You won't be able to push to the old branch name while the rename process is in progress. For more information, see "[Renaming a branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
   *
   * The permissions required to use this endpoint depends on whether you are renaming the default branch.
   *
   * To rename a non-default branch:
   *
   * * Users must have push access.
   * * GitHub Apps must have the `contents:write` repository permission.
   *
   * To rename the default branch:
   *
   * * Users must have admin or owner permissions.
   * * GitHub Apps must have the `administration:write` repository permission.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#rename-a-branch}
   * Tags: repos
   *
   */
  async reposRenameBranch(
    params: {
      owner: string;
      repo: string;
      branch: string;
    },
    body: {
      /**
       * The new name of the branch.
       *
       */
      new_name: string;
    },
  ): Promise<BranchWithProtection> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/branches/{branch}/rename',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/branch-with-protection"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a check run
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Creates a new check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to create check runs.
   *
   * In a check suite, GitHub limits the number of check runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older check runs.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#create-a-check-run}
   * Tags: checks
   *
   */
  async checksCreate(
    params: {
      owner: string;
      repo: string;
    },
    body: any | any,
  ): Promise<CheckRun> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/check-runs', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/check-run"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a check run
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Gets a single check run using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#get-a-check-run}
   * Tags: checks
   *
   */
  async checksGet(params: {
    owner: string;
    repo: string;
    check_run_id: number;
  }): Promise<CheckRun> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/check-runs/{check_run_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/check-run"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a check run
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Updates a check run for a specific commit in a repository. Your GitHub App must have the `checks:write` permission to edit check runs.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#update-a-check-run}
   * Tags: checks
   *
   */
  async checksUpdate(
    params: {
      owner: string;
      repo: string;
      check_run_id: number;
    },
    body: any | any,
  ): Promise<CheckRun> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/check-runs/{check_run_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/check-run"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List check run annotations
   * Lists annotations for a check run using the annotation `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get annotations for a check run. OAuth Apps and authenticated users must have the `repo` scope to get annotations for a check run in a private repository.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#list-check-run-annotations}
   * Tags: checks
   *
   */
  async checksListAnnotations(params: {
    owner: string;
    repo: string;
    check_run_id: number;
    per_page?: number;
    page?: number;
  }): Promise<CheckAnnotation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/check-annotation"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a check suite
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * By default, check suites are automatically created when you create a [check run](https://docs.github.com/rest/reference/checks#check-runs). You only need to use this endpoint for manually creating check suites when you've disabled automatic creation using "[Update repository preferences for check suites](https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites)". Your GitHub App must have the `checks:write` permission to create check suites.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#create-a-check-suite}
   * Tags: checks
   *
   */
  async checksCreateSuite(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The sha of the head commit.
       *
       */
      head_sha: string;
    },
  ): Promise<CheckSuite> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/check-suites', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/check-suite"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<CheckSuite>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/check-suite"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update repository preferences for check suites
   * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a check suite](https://docs.github.com/rest/reference/checks#create-a-check-suite). You must have admin permissions in the repository to set preferences for check suites.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#update-repository-preferences-for-check-suites}
   * Tags: checks
   *
   */
  async checksSetSuitesPreferences(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default. See the [`auto_trigger_checks` object](https://docs.github.com/rest/reference/checks#auto_trigger_checks-object) description for details.
       *
       */
      auto_trigger_checks?: {
        /**
         * The `id` of the GitHub App.
         *
         */
        app_id: number;
        /**
         * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
         * @defaultValue true
         *
         */
        setting: boolean;
      }[];
    },
  ): Promise<CheckSuitePreference> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/check-suites/preferences',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/check-suite-preference"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a check suite
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Gets a single check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#get-a-check-suite}
   * Tags: checks
   *
   */
  async checksGetSuite(params: {
    owner: string;
    repo: string;
    check_suite_id: number;
  }): Promise<CheckSuite> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/check-suites/{check_suite_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/check-suite"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List check runs in a check suite
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a check suite using its `id`. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite}
   * Tags: checks
   *
   */
  async checksListForSuite(params: {
    owner: string;
    repo: string;
    check_suite_id: number;
    check_name?: string;
    status?: 'queued' | 'in_progress' | 'completed';
    filter?: 'latest' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    check_runs: CheckRun[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.check_name !== undefined)
      requestContext.setQueryParam(
        'check_name',
        r.serializeParameter(params.check_name),
      );
    if (params.status !== undefined)
      requestContext.setQueryParam(
        'status',
        r.serializeParameter(params.status),
      );
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"check_runs":{"type":"array","items":{"$ref":"#/components/schemas/check-run"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Rerequest a check suite
   * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is cleared.
   *
   * To rerequest a check suite, your GitHub App must have the `checks:read` permission on a private repository or pull access to a public repository.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#rerequest-a-check-suite}
   * Tags: checks
   *
   */
  async checksRerequestSuite(params: {
    owner: string;
    repo: string;
    check_suite_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{},"additionalProperties":false}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List code scanning alerts for a repository
   * Lists all open code scanning alerts for the default branch (usually `main`
   * or `master`). You must use an access token with the `security_events` scope to use
   * this endpoint. GitHub Apps must have the `security_events` read permission to use
   * this endpoint.
   *
   * The response includes a `most_recent_instance` object.
   * This provides details of the most recent instance of this alert
   * for the default branch or for the specified Git reference
   * (if you used `ref` in the request).
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#list-code-scanning-alerts-for-a-repository}
   * Tags: code-scanning
   *
   */
  async codeScanningListAlertsForRepo(params: {
    owner: string;
    repo: string;
    tool_name?: CodeScanningAnalysisToolName;
    tool_guid?: CodeScanningAnalysisToolGuid;
    page?: number;
    per_page?: number;
    ref?: CodeScanningRef;
    state?: CodeScanningAlertState;
  }): Promise<CodeScanningAlertItems[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/code-scanning/alerts', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.tool_name !== undefined)
      requestContext.setQueryParam(
        'tool_name',
        r.serializeParameter(params.tool_name),
      );
    if (params.tool_guid !== undefined)
      requestContext.setQueryParam(
        'tool_guid',
        r.serializeParameter(params.tool_guid),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.ref !== undefined)
      requestContext.setQueryParam('ref', r.serializeParameter(params.ref));
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/code-scanning-alert-items"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a code scanning alert
   * Gets a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The instances field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The same information can now be retrieved via a GET request to the URL specified by `instances_url`.
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-alert}
   * Tags: code-scanning
   *
   */
  async codeScanningGetAlert(params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  }): Promise<CodeScanningAlert> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/code-scanning-alert"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a code scanning alert
   * Updates the status of a single code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#update-a-code-scanning-alert}
   * Tags: code-scanning
   *
   */
  async codeScanningUpdateAlert(
    params: {
      owner: string;
      repo: string;
      alert_number: AlertNumber;
    },
    body: {
      state: CodeScanningAlertSetState;
      dismissed_reason?: CodeScanningAlertDismissedReason;
    },
  ): Promise<CodeScanningAlert> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/code-scanning-alert"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List instances of a code scanning alert
   * Lists all instances of the specified code scanning alert. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#list-instances-of-a-code-scanning-alert}
   * Tags: code-scanning
   *
   */
  async codeScanningListAlertInstances(params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
    page?: number;
    per_page?: number;
    ref?: CodeScanningRef;
  }): Promise<CodeScanningAlertInstance[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.ref !== undefined)
      requestContext.setQueryParam('ref', r.serializeParameter(params.ref));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/code-scanning-alert-instance"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List code scanning analyses for a repository
   * Lists the details of all code scanning analyses for a repository,
   * starting with the most recent.
   * The response is paginated and you can use the `page` and `per_page` parameters
   * to list the analyses you're interested in.
   * By default 30 analyses are listed per page.
   *
   * The `rules_count` field in the response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * You must use an access token with the `security_events` scope to use this endpoint.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * **Deprecation notice**:
   * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#list-code-scanning-analyses-for-a-repository}
   * Tags: code-scanning
   *
   */
  async codeScanningListRecentAnalyses(params: {
    owner: string;
    repo: string;
    tool_name?: CodeScanningAnalysisToolName;
    tool_guid?: CodeScanningAnalysisToolGuid;
    page?: number;
    per_page?: number;
    ref?: CodeScanningRef;
    sarif_id?: CodeScanningAnalysisSarifId;
  }): Promise<CodeScanningAnalysis[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/code-scanning/analyses', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.tool_name !== undefined)
      requestContext.setQueryParam(
        'tool_name',
        r.serializeParameter(params.tool_name),
      );
    if (params.tool_guid !== undefined)
      requestContext.setQueryParam(
        'tool_guid',
        r.serializeParameter(params.tool_guid),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.ref !== undefined)
      requestContext.setQueryParam('ref', r.serializeParameter(params.ref));
    if (params.sarif_id !== undefined)
      requestContext.setQueryParam(
        'sarif_id',
        r.serializeParameter(params.sarif_id),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/code-scanning-analysis"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a code scanning analysis for a repository
   * Gets a specified code scanning analysis for a repository.
   * You must use an access token with the `security_events` scope to use this endpoint.
   * GitHub Apps must have the `security_events` read permission to use this endpoint.
   *
   * The default JSON response contains fields that describe the analysis.
   * This includes the Git reference and commit SHA to which the analysis relates,
   * the datetime of the analysis, the name of the code scanning tool,
   * and the number of alerts.
   *
   * The `rules_count` field in the default response give the number of rules
   * that were run in the analysis.
   * For very old analyses this data is not available,
   * and `0` is returned in this field.
   *
   * If you use the Accept header `application/sarif+json`,
   * the response contains the analysis data that was uploaded.
   * This is formatted as
   * [SARIF version 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html).
   *
   * **Deprecation notice**:
   * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint. The example response reflects this change. The tool name can now be found inside the `tool` field.
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository}
   * Tags: code-scanning
   *
   */
  async codeScanningGetAnalysis(params: {
    owner: string;
    repo: string;
    analysis_id: number;
  }): Promise<CodeScanningAnalysis> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/code-scanning-analysis"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a code scanning analysis from a repository
   * Deletes a specified code scanning analysis from a repository. For
   * private repositories, you must use an access token with the `repo` scope. For public repositories,
   * you must use an access token with `public_repo` and `repo:security_events` scopes.
   * GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * You can delete one analysis at a time.
   * To delete a series of analyses, start with the most recent analysis and work backwards.
   * Conceptually, the process is similar to the undo function in a text editor.
   *
   * When you list the analyses for a repository,
   * one or more will be identified as deletable in the response:
   *
   * ```
   * "deletable": true
   * ```
   *
   * An analysis is deletable when it's the most recent in a set of analyses.
   * Typically, a repository will have multiple sets of analyses
   * for each enabled code scanning tool,
   * where a set is determined by a unique combination of analysis values:
   *
   * * `ref`
   * * `tool`
   * * `analysis_key`
   * * `environment`
   *
   * If you attempt to delete an analysis that is not the most recent in a set,
   * you'll get a 400 response with the message:
   *
   * ```
   * Analysis specified is not deletable.
   * ```
   *
   * The response from a successful `DELETE` operation provides you with
   * two alternative URLs for deleting the next analysis in the set
   * (see the example default response below).
   * Use the `next_analysis_url` URL if you want to avoid accidentally deleting the final analysis
   * in the set. This is a useful option if you want to preserve at least one analysis
   * for the specified tool in your repository.
   * Use the `confirm_delete_url` URL if you are content to remove all analyses for a tool.
   * When you delete the last analysis in a set the value of `next_analysis_url` and `confirm_delete_url`
   * in the 200 response is `null`.
   *
   * As an example of the deletion process,
   * let's imagine that you added a workflow that configured a particular code scanning tool
   * to analyze the code in a repository. This tool has added 15 analyses:
   * 10 on the default branch, and another 5 on a topic branch.
   * You therefore have two separate sets of analyses for this tool.
   * You've now decided that you want to remove all of the analyses for the tool.
   * To do this you must make 15 separate deletion requests.
   * To start, you must find the deletable analysis for one of the sets,
   * step through deleting the analyses in that set,
   * and then repeat the process for the second set.
   * The procedure therefore consists of a nested loop:
   *
   * **Outer loop**:
   * * List the analyses for the repository, filtered by tool.
   * * Parse this list to find a deletable analysis. If found:
   *
   *   **Inner loop**:
   *   * Delete the identified analysis.
   *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the next iteration.
   *
   * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's analysis entirely.
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#delete-a-code-scanning-analysis-from-a-repository}
   * Tags: code-scanning
   *
   */
  async codeScanningDeleteAnalysis(params: {
    owner: string;
    repo: string;
    analysis_id: number;
    confirm_delete?: string | null;
  }): Promise<CodeScanningAnalysisDeletion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.confirm_delete !== undefined)
      requestContext.setQueryParam(
        'confirm_delete',
        r.serializeParameter(params.confirm_delete),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/code-scanning-analysis-deletion"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Upload an analysis as SARIF data
   * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` write permission to use this endpoint.
   *
   * There are two places where you can upload code scanning results.
   *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
   *  - If you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for your repository. For more information, see "[Managing code scanning alerts for your repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
   *
   * You must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64 format string. For example:
   *
   * ```
   * gzip -c analysis-data.sarif | base64 -w0
   * ```
   *
   * SARIF upload supports a maximum of 5000 results per analysis run. Any results over this limit are ignored and any SARIF uploads with more than 25,000 results are rejected. Typically, but not necessarily, a SARIF file contains a single run of a single tool. If a code scanning tool generates too many results, you should update the analysis configuration to run only the most important rules or queries.
   *
   * The `202 Accepted`, response includes an `id` value.
   * You can use this ID to check the status of the upload by using this for the `/sarifs/{sarif_id}` endpoint.
   * For more information, see "[Get information about a SARIF upload](/rest/reference/code-scanning#get-information-about-a-sarif-upload)."
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#upload-a-sarif-file}
   * Tags: code-scanning
   *
   */
  async codeScanningUploadSarif(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      commit_sha: CodeScanningAnalysisCommitSha;
      ref: CodeScanningRef;
      sarif: CodeScanningAnalysisSarifFile;
      /**
       * The base directory used in the analysis, as it appears in the SARIF file.
       * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
       * @example "file:///github/workspace/"
       *
       */
      checkout_uri?: string;
      /**
       * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       *
       */
      started_at?: Date;
      /**
       * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
       *
       */
      tool_name?: string;
    },
  ): Promise<CodeScanningSarifsReceipt> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/code-scanning/sarifs', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/code-scanning-sarifs-receipt"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('413', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get information about a SARIF upload
   * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a repository](/rest/reference/code-scanning#get-a-code-scanning-analysis-for-a-repository)." You must use an access token with the `security_events` scope to use this endpoint. GitHub Apps must have the `security_events` read permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/code-scanning#list-recent-code-scanning-analyses-for-a-repository}
   * Tags: code-scanning
   *
   */
  async codeScanningGetSarif(params: {
    owner: string;
    repo: string;
    sarif_id: string;
  }): Promise<CodeScanningSarifsStatus> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/code-scanning-sarifs-status"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository collaborators
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-collaborators}
   * Tags: repos
   *
   */
  async reposListCollaborators(params: {
    owner: string;
    repo: string;
    affiliation?: 'outside' | 'direct' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<Collaborator[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/collaborators', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.affiliation !== undefined)
      requestContext.setQueryParam(
        'affiliation',
        r.serializeParameter(params.affiliation),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/collaborator"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a user is a repository collaborator
   * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that are direct collaborators, organization members with access through team memberships, organization members with access through default organization permissions, and organization owners.
   *
   * Team members will include the members of child teams.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#check-if-a-user-is-a-repository-collaborator}
   * Tags: repos
   *
   */
  async reposCheckCollaborator(params: {
    owner: string;
    repo: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/collaborators/{username}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add a repository collaborator
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * For more information the permission levels, see "[Repository permission levels for an organization](https://help.github.com/en/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * The invitee will receive a notification that they have been invited to the repository, which they must accept or decline. They may do this via the notifications page, the email they receive, or by using the [repository invitations API endpoints](https://docs.github.com/rest/reference/repos#invitations).
   *
   * **Rate limits**
   *
   * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you are inviting organization members to an organization repository.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#add-a-repository-collaborator}
   * Tags: repos
   *
   */
  async reposAddCollaborator(
    params: {
      owner: string;
      repo: string;
      username: string;
    },
    body: {
      /**
       * The permission to grant the collaborator. **Only valid on organization-owned repositories.** Can be one of:
       * \* `pull` - can pull, but not push to or administer this repository.
       * \* `push` - can pull and push, but not administer this repository.
       * \* `admin` - can pull, push and administer this repository.
       * \* `maintain` - Recommended for project managers who need to manage the repository without access to sensitive or destructive actions.
       * \* `triage` - Recommended for contributors who need to proactively manage issues and pull requests without write access.
       * @defaultValue "push"
       *
       */
      permission?: 'pull' | 'push' | 'admin' | 'maintain' | 'triage';
      /**
       * @example "\"push\""
       *
       */
      permissions?: string;
    },
  ): Promise<RepositoryInvitation> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/collaborators/{username}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/repository-invitation"}'),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a repository collaborator
   * Learn more at {@link https://docs.github.com/rest/reference/repos#remove-a-repository-collaborator}
   * Tags: repos
   *
   */
  async reposRemoveCollaborator(params: {
    owner: string;
    repo: string;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/collaborators/{username}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get repository permissions for a user
   * Checks the repository permission of a collaborator. The possible repository permissions are `admin`, `write`, `read`, and `none`.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-repository-permissions-for-a-user}
   * Tags: repos
   *
   */
  async reposGetCollaboratorPermissionLevel(params: {
    owner: string;
    repo: string;
    username: string;
  }): Promise<RepositoryCollaboratorPermission> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/collaborators/{username}/permission',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/repository-collaborator-permission"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List commit comments for a repository
   * Commit Comments use [these custom media types](https://docs.github.com/rest/reference/repos#custom-media-types). You can read more about the use of media types in the API [here](https://docs.github.com/rest/overview/media-types/).
   *
   * Comments are ordered by ascending ID.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-commit-comments-for-a-repository}
   * Tags: repos
   *
   */
  async reposListCommitCommentsForRepo(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<CommitComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/comments', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/commit-comment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a commit comment
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-commit-comment}
   * Tags: repos
   *
   */
  async reposGetCommitComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
  }): Promise<CommitComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/comments/{comment_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/commit-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a commit comment
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-a-commit-comment}
   * Tags: repos
   *
   */
  async reposUpdateCommitComment(
    params: {
      owner: string;
      repo: string;
      comment_id: number;
    },
    body: {
      /**
       * The contents of the comment
       *
       */
      body: string;
    },
  ): Promise<CommitComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/comments/{comment_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/commit-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a commit comment
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-commit-comment}
   * Tags: repos
   *
   */
  async reposDeleteCommitComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/comments/{comment_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for a commit comment
   * List the reactions to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#list-reactions-for-a-commit-comment}
   * Tags: reactions
   *
   */
  async reactionsListForCommitComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for a commit comment
   * Create a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments). A response with an HTTP `200` status means that you already added the reaction type to this commit comment.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#create-reaction-for-a-commit-comment}
   * Tags: reactions
   *
   */
  async reactionsCreateForCommitComment(
    params: {
      owner: string;
      repo: string;
      comment_id: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the commit comment.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Reaction>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a commit comment reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to a [commit comment](https://docs.github.com/rest/reference/repos#comments).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#delete-a-commit-comment-reaction}
   * Tags: reactions
   *
   */
  async reactionsDeleteForCommitComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
    reaction_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List commits
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-commits}
   * Tags: repos
   *
   */
  async reposListCommits(params: {
    owner: string;
    repo: string;
    sha?: string;
    path?: string;
    author?: string;
    since?: Date;
    until?: Date;
    per_page?: number;
    page?: number;
  }): Promise<Commit[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/commits', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sha !== undefined)
      requestContext.setQueryParam('sha', r.serializeParameter(params.sha));
    if (params.path !== undefined)
      requestContext.setQueryParam('path', r.serializeParameter(params.path));
    if (params.author !== undefined)
      requestContext.setQueryParam(
        'author',
        r.serializeParameter(params.author),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.until !== undefined)
      requestContext.setQueryParam('until', r.serializeParameter(params.until));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/commit"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('500', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List branches for HEAD commit
   * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Returns all branches where the given commit SHA is the HEAD, or latest commit for the branch.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-branches-for-head-commit}
   * Tags: repos
   *
   */
  async reposListBranchesForHeadCommit(params: {
    owner: string;
    repo: string;
    commit_sha: string;
  }): Promise<BranchShort[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/branch-short"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List commit comments
   * Use the `:commit_sha` to specify the commit that will have its comments listed.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-commit-comments}
   * Tags: repos
   *
   */
  async reposListCommentsForCommit(params: {
    owner: string;
    repo: string;
    commit_sha: string;
    per_page?: number;
    page?: number;
  }): Promise<CommitComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/commits/{commit_sha}/comments',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/commit-comment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a commit comment
   * Create a comment for a commit using its `:commit_sha`.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-commit-comment}
   * Tags: repos
   *
   */
  async reposCreateCommitComment(
    params: {
      owner: string;
      repo: string;
      commit_sha: string;
    },
    body: {
      /**
       * The contents of the comment.
       *
       */
      body: string;
      /**
       * Relative path of the file to comment on.
       *
       */
      path?: string;
      /**
       * Line index in the diff to comment on.
       *
       */
      position?: number;
      /**
       * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
       *
       */
      line?: number;
    },
  ): Promise<CommitComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/commits/{commit_sha}/comments',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/commit-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List pull requests associated with a commit
   * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default branch, additionally returns open pull requests associated with the commit. The results may include open and closed pull requests. Additional preview headers may be required to see certain details for associated pull requests, such as whether a pull request is in a draft state. For more information about previews that might affect this endpoint, see the [List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests) endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-pull-requests-associated-with-a-commit}
   * Tags: repos
   *
   */
  async reposListPullRequestsAssociatedWithCommit(params: {
    owner: string;
    repo: string;
    commit_sha: string;
    per_page?: number;
    page?: number;
  }): Promise<PullRequestSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/commits/{commit_sha}/pulls',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/pull-request-simple"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a commit
   * Returns the contents of a single commit reference. You must have `read` access for the repository to use this endpoint.
   *
   * **Note:** If there are more than 300 files in the commit diff, the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page contains the static commit information, and the only changes are to the file listing.
   *
   * You can pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to  fetch `diff` and `patch` formats. Diffs with binary data will have no `patch` property.
   *
   * To return only the SHA-1 hash of the commit reference, you can provide the `sha` custom [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) in the `Accept` header. You can use this endpoint to check if a remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as the ETag.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-commit}
   * Tags: repos
   *
   */
  async reposGetCommit(params: {
    owner: string;
    repo: string;
    page?: number;
    per_page?: number;
    ref: string;
  }): Promise<Commit> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/commits/{ref}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/commit"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('500', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List check runs for a Git reference
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
   *
   * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to get check runs. OAuth Apps and authenticated users must have the `repo` scope to get check runs in a private repository.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#list-check-runs-for-a-git-reference}
   * Tags: checks
   *
   */
  async checksListForRef(params: {
    owner: string;
    repo: string;
    ref: string;
    check_name?: string;
    status?: 'queued' | 'in_progress' | 'completed';
    filter?: 'latest' | 'all';
    per_page?: number;
    page?: number;
    app_id?: number;
  }): Promise<{
    total_count: number;
    check_runs: CheckRun[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/commits/{ref}/check-runs',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.check_name !== undefined)
      requestContext.setQueryParam(
        'check_name',
        r.serializeParameter(params.check_name),
      );
    if (params.status !== undefined)
      requestContext.setQueryParam(
        'status',
        r.serializeParameter(params.status),
      );
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.app_id !== undefined)
      requestContext.setQueryParam(
        'app_id',
        r.serializeParameter(params.app_id),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"check_runs":{"type":"array","items":{"$ref":"#/components/schemas/check-run"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List check suites for a Git reference
   * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for `head_branch`.
   *
   * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name. GitHub Apps must have the `checks:read` permission on a private repository or pull access to a public repository to list check suites. OAuth Apps and authenticated users must have the `repo` scope to get check suites in a private repository.
   * Learn more at {@link https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference}
   * Tags: checks
   *
   */
  async checksListSuitesForRef(params: {
    owner: string;
    repo: string;
    ref: string;
    app_id?: number;
    check_name?: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    check_suites: CheckSuite[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/commits/{ref}/check-suites',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.app_id !== undefined)
      requestContext.setQueryParam(
        'app_id',
        r.serializeParameter(params.app_id),
      );
    if (params.check_name !== undefined)
      requestContext.setQueryParam(
        'check_name',
        r.serializeParameter(params.check_name),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"check_suites":{"type":"array","items":{"$ref":"#/components/schemas/check-suite"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the combined status for a specific reference
   * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name.
   *
   * The most recent status for each context is returned, up to 100. This field [paginates](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination) if there are over 100 contexts.
   *
   * Additionally, a combined `state` is returned. The `state` is one of:
   *
   * *   **failure** if any of the contexts report as `error` or `failure`
   * *   **pending** if there are no statuses or a context is `pending`
   * *   **success** if the latest status for all contexts is `success`
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-the-combined-status-for-a-specific-reference}
   * Tags: repos
   *
   */
  async reposGetCombinedStatusForRef(params: {
    owner: string;
    repo: string;
    ref: string;
    per_page?: number;
    page?: number;
  }): Promise<CombinedCommitStatus> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/commits/{ref}/status', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/combined-commit-status"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List commit statuses for a reference
   * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest one.
   *
   * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-commit-statuses-for-a-reference}
   * Tags: repos
   *
   */
  async reposListCommitStatusesForRef(params: {
    owner: string;
    repo: string;
    ref: string;
    per_page?: number;
    page?: number;
  }): Promise<Status[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/commits/{ref}/statuses', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/status"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the code of conduct for a repository
   * Returns the contents of the repository's code of conduct file, if one is detected.
   *
   * A code of conduct is detected if there is a file named `CODE_OF_CONDUCT` in the root directory of the repository. GitHub detects which code of conduct it is using fuzzy matching.
   * Learn more at {@link https://docs.github.com/rest/reference/codes-of-conduct#get-the-code-of-conduct-for-a-repository}
   * Tags: codes-of-conduct
   *
   */
  async codesOfConductGetForRepo(params: {
    owner: string;
    repo: string;
  }): Promise<CodeOfConduct> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/community/code_of_conduct',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/code-of-conduct"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get community profile metrics
   * This endpoint will return all community profile metrics, including an
   * overall health score, repository description, the presence of documentation, detected
   * code of conduct, detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
   * README, and CONTRIBUTING files.
   *
   * The `health_percentage` score is defined as a percentage of how many of
   * these four documents are present: README, CONTRIBUTING, LICENSE, and
   * CODE_OF_CONDUCT. For example, if all four documents are present, then
   * the `health_percentage` is `100`. If only one is present, then the
   * `health_percentage` is `25`.
   *
   * `content_reports_enabled` is only returned for organization-owned repositories.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-community-profile-metrics}
   * Tags: repos
   *
   */
  async reposGetCommunityProfileMetrics(params: {
    owner: string;
    repo: string;
  }): Promise<CommunityProfile> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/community/profile', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/community-profile"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Compare two commits
   * The `basehead` param is comprised of two parts: `base` and `head`. Both must be branch names in `repo`. To compare branches across other repositories in the same network as `repo`, use the format `<USERNAME>:branch`.
   *
   * The response from the API is equivalent to running the `git log base..head` command; however, commits are returned in chronological order. Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   *
   * The response also includes details on the files that were changed between the two commits. This includes the status of the change (for example, if a file was added, removed, modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch` field showing the changes made to the file.
   *
   * **Working with large comparisons**
   *
   * To process a response with a large number of commits, you can use (`per_page` or `page`) to paginate the results. When using paging, the list of changed files is only returned with page 1, but includes all changed files for the entire comparison. For more information on working with pagination, see "[Traversing with pagination](/rest/guides/traversing-with-pagination)."
   *
   * When calling this API without any paging parameters (`per_page` or `page`), the returned list is limited to 250 commits and the last commit in the list is the most recent of the entire comparison. When a paging parameter is specified, the first commit in the returned list of each page is the earliest.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * Learn more at {@link https://docs.github.com/rest/reference/repos#compare-two-commits}
   * Tags: repos
   *
   */
  async reposCompareCommits(params: {
    owner: string;
    repo: string;
    page?: number;
    per_page?: number;
    basehead: string;
  }): Promise<CommitComparison> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/compare/{basehead}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/commit-comparison"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('500', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a content attachment
   * Creates an attachment under a content reference URL in the body or comment of an issue or pull request. Use the `id` and `repository` `full_name` of the content reference from the [`content_reference` event](https://docs.github.com/webhooks/event-payloads/#content_reference) to create an attachment.
   *
   * The app must create a content attachment within six hours of the content reference URL being posted. See "[Using content attachments](https://docs.github.com/apps/using-content-attachments/)" for details about content attachments.
   *
   * You must use an [installation access token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-an-installation) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#create-a-content-attachment}
   * Tags: apps
   *
   */
  async appsCreateContentAttachment(
    params: {
      owner: string;
      repo: string;
      content_reference_id: number;
    },
    body: {
      /**
       * The title of the attachment
       * @example "Title of the attachment"
       *
       */
      title: string;
      /**
       * The body of the attachment
       * @example "Body of the attachment"
       *
       */
      body: string;
    },
  ): Promise<ContentReferenceAttachment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/content_references/{content_reference_id}/attachments',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/content-reference-attachment"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get repository content
   * Gets the contents of a file or directory in a repository. Specify the file path or directory in `:path`. If you omit
   * `:path`, you will receive the contents of the repository's root directory. See the description below regarding what the API response includes for directories.
   *
   * Files and symlinks support [a custom media type](https://docs.github.com/rest/reference/repos#custom-media-types) for
   * retrieving the raw content or rendered HTML (when supported). All content types support [a custom media
   * type](https://docs.github.com/rest/reference/repos#custom-media-types) to ensure the content is returned in a consistent
   * object format.
   *
   * **Note**:
   * *   To get a repository's contents recursively, you can [recursively get the tree](https://docs.github.com/rest/reference/git#trees).
   * *   This API has an upper limit of 1,000 files for a directory. If you need to retrieve more files, use the [Git Trees
   * API](https://docs.github.com/rest/reference/git#get-a-tree).
   * *   This API supports files up to 1 megabyte in size.
   *
   * #### If the content is a directory
   * The response will be an array of objects, one object for each item in the directory.
   * When listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value
   * _should_ be "submodule". This behavior exists in API v3 [for backwards compatibility purposes](https://git.io/v1YCW).
   * In the next major version of the API, the type will be returned as "submodule".
   *
   * #### If the content is a symlink
   * If the requested `:path` points to a symlink, and the symlink's target is a normal file in the repository, then the
   * API responds with the content of the file (in the format shown in the example. Otherwise, the API responds with an object
   * describing the symlink itself.
   *
   * #### If the content is a submodule
   * The `submodule_git_url` identifies the location of the submodule repository, and the `sha` identifies a specific
   * commit within the submodule repository. Git uses the given URL when cloning the submodule repository, and checks out
   * the submodule at that specific commit.
   *
   * If the submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the
   * github.com URLs (`html_url` and `_links["html"]`) will have null values.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-repository-content}
   * Tags: repos
   *
   */
  async reposGetContent(params: {
    owner: string;
    repo: string;
    path: string;
    ref?: string;
  }): Promise<
    ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule
  > {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/contents/{path}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.ref !== undefined)
      requestContext.setQueryParam('ref', r.serializeParameter(params.ref));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"oneOf":[{"$ref":"#/components/schemas/content-directory"},{"$ref":"#/components/schemas/content-file"},{"$ref":"#/components/schemas/content-symlink"},{"$ref":"#/components/schemas/content-submodule"}]}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('302', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create or update file contents
   * Creates a new file or replaces an existing file in a repository.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-or-update-file-contents}
   * Tags: repos
   *
   */
  async reposCreateOrUpdateFileContents(
    params: {
      owner: string;
      repo: string;
      path: string;
    },
    body: {
      /**
       * The commit message.
       *
       */
      message: string;
      /**
       * The new file content, using Base64 encoding.
       *
       */
      content: string;
      /**
       * **Required if you are updating a file**. The blob SHA of the file being replaced.
       *
       */
      sha?: string;
      /**
       * The branch name. Default: the repository’s default branch (usually `master`)
       *
       */
      branch?: string;
      /**
       * The person that committed the file. Default: the authenticated user.
       *
       */
      committer?: {
        /**
         * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
         *
         */
        name: string;
        /**
         * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
         *
         */
        email: string;
        /**
         * @example "\"2013-01-05T13:13:22+05:00\""
         *
         */
        date?: string;
      };
      /**
       * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
       *
       */
      author?: {
        /**
         * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
         *
         */
        name: string;
        /**
         * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
         *
         */
        email: string;
        /**
         * @example "\"2013-01-15T17:13:22+05:00\""
         *
         */
        date?: string;
      };
    },
  ): Promise<FileCommit> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/contents/{path}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/file-commit"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<FileCommit>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/file-commit"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a file
   * Deletes a file in a repository.
   *
   * You can provide an additional `committer` parameter, which is an object containing information about the committer. Or, you can provide an `author` parameter, which is an object containing information about the author.
   *
   * The `author` section is optional and is filled in with the `committer` information if omitted. If the `committer` information is omitted, the authenticated user's information is used.
   *
   * You must provide values for both `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status code.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-file}
   * Tags: repos
   *
   */
  async reposDeleteFile(
    params: {
      owner: string;
      repo: string;
      path: string;
    },
    body: {
      /**
       * The commit message.
       *
       */
      message: string;
      /**
       * The blob SHA of the file being replaced.
       *
       */
      sha: string;
      /**
       * The branch name. Default: the repository’s default branch (usually `master`)
       *
       */
      branch?: string;
      /**
       * object containing information about the committer.
       *
       */
      committer?: {
        /**
         * The name of the author (or committer) of the commit
         *
         */
        name?: string;
        /**
         * The email of the author (or committer) of the commit
         *
         */
        email?: string;
      };
      /**
       * object containing information about the author.
       *
       */
      author?: {
        /**
         * The name of the author (or committer) of the commit
         *
         */
        name?: string;
        /**
         * The email of the author (or committer) of the commit
         *
         */
        email?: string;
      };
    },
  ): Promise<FileCommit> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/contents/{path}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/file-commit"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository contributors
   * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending order. This endpoint may return information that is a few hours old because the GitHub REST API v3 caches contributor data to improve performance.
   *
   * GitHub identifies contributors by author email address. This endpoint groups contribution counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without associated GitHub user information.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-contributors}
   * Tags: repos
   *
   */
  async reposListContributors(params: {
    owner: string;
    repo: string;
    anon?: string;
    per_page?: number;
    page?: number;
  }): Promise<Contributor[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/contributors', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.anon !== undefined)
      requestContext.setQueryParam('anon', r.serializeParameter(params.anon));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/contributor"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List deployments
   * Simple filtering of deployments is available via query parameters:
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-deployments}
   * Tags: repos
   *
   */
  async reposListDeployments(params: {
    owner: string;
    repo: string;
    sha?: string;
    ref?: string;
    task?: string;
    environment?: string | null;
    per_page?: number;
    page?: number;
  }): Promise<Deployment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/deployments', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sha !== undefined)
      requestContext.setQueryParam('sha', r.serializeParameter(params.sha));
    if (params.ref !== undefined)
      requestContext.setQueryParam('ref', r.serializeParameter(params.ref));
    if (params.task !== undefined)
      requestContext.setQueryParam('task', r.serializeParameter(params.task));
    if (params.environment !== undefined)
      requestContext.setQueryParam(
        'environment',
        r.serializeParameter(params.environment),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/deployment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a deployment
   * Deployments offer a few configurable parameters with certain defaults.
   *
   * The `ref` parameter can be any named branch, tag, or SHA. At GitHub we often deploy branches and verify them
   * before we merge a pull request.
   *
   * The `environment` parameter allows deployments to be issued to different runtime environments. Teams often have
   * multiple environments for verifying their applications, such as `production`, `staging`, and `qa`. This parameter
   * makes it easier to track which environments have requested deployments. The default environment is `production`.
   *
   * The `auto_merge` parameter is used to ensure that the requested ref is not behind the repository's default branch. If
   * the ref _is_ behind the default branch for the repository, we will attempt to merge it for you. If the merge succeeds,
   * the API will return a successful merge commit. If merge conflicts prevent the merge from succeeding, the API will
   * return a failure response.
   *
   * By default, [commit statuses](https://docs.github.com/rest/reference/repos#statuses) for every submitted context must be in a `success`
   * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or to
   * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you do
   * not require any contexts or create any commit statuses, the deployment will always succeed.
   *
   * The `payload` parameter is available for any extra information that a deployment system might need. It is a JSON text
   * field that will be passed on when a deployment event is dispatched.
   *
   * The `task` parameter is used by the deployment system to allow different execution paths. In the web world this might
   * be `deploy:migrations` to run schema changes on the system. In the compiled world this could be a flag to compile an
   * application with debugging enabled.
   *
   * Users with `repo` or `repo_deployment` scopes can create a deployment for a given ref.
   *
   * #### Merged branch response
   * You will see this response when GitHub automatically merges the base branch into the topic branch instead of creating
   * a deployment. This auto-merge happens when:
   * *   Auto-merge option is enabled in the repository
   * *   Topic branch does not include the latest changes on the base branch, which is `master` in the response example
   * *   There are no merge conflicts
   *
   * If there are no new commits in the base branch, a new request to create a deployment should give a successful
   * response.
   *
   * #### Merge conflict response
   * This error happens when the `auto_merge` option is enabled and when the default branch (in this case `master`), can't
   * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge conflicts.
   *
   * #### Failed commit status checks
   * This error happens when the `required_contexts` parameter indicates that one or more contexts need to have a `success`
   * status for the commit to be deployed, but one or more of the required contexts do not have a state of `success`.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-deployment}
   * Tags: repos
   *
   */
  async reposCreateDeployment(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The ref to deploy. This can be a branch, tag, or SHA.
       *
       */
      ref: string;
      /**
       * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
       * @defaultValue "deploy"
       *
       */
      task?: string;
      /**
       * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
       * @defaultValue true
       *
       */
      auto_merge?: boolean;
      /**
       * The [status](https://docs.github.com/rest/reference/repos#statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
       *
       */
      required_contexts?: string[];
      payload?:
        | {
            [key: string]: any;
          }
        | string;
      /**
       * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
       * @defaultValue "production"
       *
       */
      environment?: string;
      /**
       * Short description of the deployment.
       *
       */
      description?: string | null;
      /**
       * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
       * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
       *
       */
      transient_environment?: boolean;
      /**
       * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
       * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
       *
       */
      production_environment?: boolean;
    },
  ): Promise<Deployment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/deployments', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/deployment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('202', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a deployment
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-deployment}
   * Tags: repos
   *
   */
  async reposGetDeployment(params: {
    owner: string;
    repo: string;
    deployment_id: number;
  }): Promise<Deployment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/deployments/{deployment_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/deployment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a deployment
   * To ensure there can always be an active deployment, you can only delete an _inactive_ deployment. Anyone with `repo` or `repo_deployment` scopes can delete an inactive deployment.
   *
   * To set a deployment as inactive, you must:
   *
   * *   Create a new deployment that is active so that the system has a record of the current state, then delete the previously active deployment.
   * *   Mark the active deployment as inactive by adding any non-successful deployment status.
   *
   * For more information, see "[Create a deployment](https://docs.github.com/rest/reference/repos/#create-a-deployment)" and "[Create a deployment status](https://docs.github.com/rest/reference/repos#create-a-deployment-status)."
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-deployment}
   * Tags: repos
   *
   */
  async reposDeleteDeployment(params: {
    owner: string;
    repo: string;
    deployment_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/deployments/{deployment_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List deployment statuses
   * Users with pull access can view deployment statuses for a deployment:
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-deployment-statuses}
   * Tags: repos
   *
   */
  async reposListDeploymentStatuses(params: {
    owner: string;
    repo: string;
    deployment_id: number;
    per_page?: number;
    page?: number;
  }): Promise<DeploymentStatus[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/deployment-status"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a deployment status
   * Users with `push` access can create deployment statuses for a given deployment.
   *
   * GitHub Apps require `read & write` access to "Deployments" and `read-only` access to "Repo contents" (for private repos). OAuth Apps require the `repo_deployment` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-deployment-status}
   * Tags: repos
   *
   */
  async reposCreateDeploymentStatus(
    params: {
      owner: string;
      repo: string;
      deployment_id: number;
    },
    body: {
      /**
       * The state of the status. Can be one of `error`, `failure`, `inactive`, `in_progress`, `queued` `pending`, or `success`. **Note:** To use the `inactive` state, you must provide the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type. To use the `in_progress` and `queued` states, you must provide the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
       *
       */
      state:
        | 'error'
        | 'failure'
        | 'inactive'
        | 'in_progress'
        | 'queued'
        | 'pending'
        | 'success';
      /**
       * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
       *
       */
      target_url?: string;
      /**
       * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
       * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
       *
       */
      log_url?: string;
      /**
       * A short description of the status. The maximum description length is 140 characters.
       *
       */
      description?: string;
      /**
       * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. **Note:** This parameter requires you to use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
       *
       */
      environment?: 'production' | 'staging' | 'qa';
      /**
       * Sets the URL for accessing your environment. Default: `""`
       * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
       *
       */
      environment_url?: string;
      /**
       * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
       * **Note:** To add an `inactive` status to `production` environments, you must use the [`application/vnd.github.flash-preview+json`](https://docs.github.com/rest/overview/api-previews#deployment-statuses) custom media type.
       * **Note:** This parameter requires you to use the [`application/vnd.github.ant-man-preview+json`](https://docs.github.com/rest/overview/api-previews#enhanced-deployments) custom media type.
       *
       */
      auto_inactive?: boolean;
    },
  ): Promise<DeploymentStatus> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/deployment-status"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a deployment status
   * Users with pull access can view a deployment status for a deployment:
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-deployment-status}
   * Tags: repos
   *
   */
  async reposGetDeploymentStatus(params: {
    owner: string;
    repo: string;
    deployment_id: number;
    status_id: number;
  }): Promise<DeploymentStatus> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/deployment-status"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a repository dispatch event
   * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
   *
   * The `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test to debug your workflow.
   *
   * This endpoint requires write access to the repository by providing either:
   *
   *   - Personal access tokens with `repo` scope. For more information, see "[Creating a personal access token for the command line](https://help.github.com/articles/creating-a-personal-access-token-for-the-command-line)" in the GitHub Help documentation.
   *   - GitHub Apps with both `metadata:read` and `contents:read&write` permissions.
   *
   * This input example shows how you can use the `client_payload` as a test to debug your workflow.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-repository-dispatch-event}
   * Tags: repos
   *
   */
  async reposCreateDispatchEvent(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * A custom webhook event name.
       *
       */
      event_type: string;
      /**
       * JSON payload with extra information about the webhook event that your action or worklow may use.
       *
       */
      client_payload?: {
        [key: string]: any;
      };
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/dispatches', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all environments
   * Get all environments for a repository.
   *
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-all-environments}
   * Tags: repos
   *
   */
  async reposGetAllEnvironments(params: {
    owner: string;
    repo: string;
  }): Promise<{
    /**
     * The number of environments in this repository
     * @example 5
     *
     */
    total_count?: number;
    environments?: Environment[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/environments', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"environments":{"type":"array","items":{"$ref":"#/components/schemas/environment"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an environment
   * Anyone with read access to the repository can use this endpoint. If the repository is private, you must use an access token with the `repo` scope. GitHub Apps must have the `actions:read` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-an-environment}
   * Tags: repos
   *
   */
  async reposGetEnvironment(params: {
    owner: string;
    repo: string;
    environment_name: string;
  }): Promise<Environment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/environments/{environment_name}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/environment"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create or update an environment
   * Create or update an environment with protection rules, such as required reviewers. For more information about environment protection rules, see "[Environments](/actions/reference/environments#environment-protection-rules)."
   *
   * **Note:** Although you can use this operation to specify that only branches that match specified name patterns can deploy to this environment, you must use the UI to set the name patterns. For more information, see "[Environments](/actions/reference/environments#deployment-branches)."
   *
   * **Note:** To create or update secrets for an environment, see "[Secrets](/rest/reference/actions#secrets)."
   *
   * You must authenticate using an access token with the repo scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-or-update-an-environment}
   * Tags: repos
   *
   */
  async reposCreateOrUpdateEnvironment(
    params: {
      owner: string;
      repo: string;
      environment_name: string;
    },
    body: {
      wait_timer?: WaitTimer;
      /**
       * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
       *
       */
      reviewers?:
        | {
            type?: DeploymentReviewerType;
            /**
             * The id of the user or team who can review the deployment
             * @example 4532992
             *
             */
            id?: number;
          }[]
        | null;
      deployment_branch_policy?: Deployment_branch_policy;
    } | null,
  ): Promise<Environment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/environments/{environment_name}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/environment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an environment
   * You must authenticate using an access token with the repo scope to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-an-environment}
   * Tags: repos
   *
   */
  async reposDeleteAnEnvironment(params: {
    owner: string;
    repo: string;
    environment_name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/environments/{environment_name}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository events
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-repository-events}
   * Tags: activity
   *
   */
  async activityListRepoEvents(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/events', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List forks
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-forks}
   * Tags: repos
   *
   */
  async reposListForks(params: {
    owner: string;
    repo: string;
    sort?: 'newest' | 'oldest' | 'stargazers' | 'watchers';
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/forks', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a fork
   * Create a fork for the authenticated user.
   *
   * **Note**: Forking a Repository happens asynchronously. You may have to wait a short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact [GitHub Support](https://support.github.com/contact?tags=rest-api).
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-fork}
   * Tags: repos
   *
   */
  async reposCreateFork(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * Optional parameter to specify the organization name if forking into an organization.
       *
       */
      organization?: string;
    } | null,
  ): Promise<FullRepository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/forks', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/full-repository"}'),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a blob
   * Learn more at {@link https://docs.github.com/rest/reference/git#create-a-blob}
   * Tags: git
   *
   */
  async gitCreateBlob(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The new blob's content.
       *
       */
      content: string;
      /**
       * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
       * @defaultValue "utf-8"
       *
       */
      encoding?: string;
    },
  ): Promise<ShortBlob> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/blobs', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/short-blob"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a blob
   * The `content` in the response will always be Base64 encoded.
   *
   * _Note_: This API supports blobs up to 100 megabytes in size.
   * Learn more at {@link https://docs.github.com/rest/reference/git#get-a-blob}
   * Tags: git
   *
   */
  async gitGetBlob(params: {
    owner: string;
    repo: string;
    file_sha: string;
  }): Promise<Blob> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/blobs/{file_sha}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/blob"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a commit
   * Creates a new Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * Learn more at {@link https://docs.github.com/rest/reference/git#create-a-commit}
   * Tags: git
   *
   */
  async gitCreateCommit(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The commit message
       *
       */
      message: string;
      /**
       * The SHA of the tree object this commit points to
       *
       */
      tree: string;
      /**
       * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
       *
       */
      parents?: string[];
      /**
       * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
       *
       */
      author?: {
        /**
         * The name of the author (or committer) of the commit
         *
         */
        name: string;
        /**
         * The email of the author (or committer) of the commit
         *
         */
        email: string;
        /**
         * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         *
         */
        date?: Date;
      };
      /**
       * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
       *
       */
      committer?: {
        /**
         * The name of the author (or committer) of the commit
         *
         */
        name?: string;
        /**
         * The email of the author (or committer) of the commit
         *
         */
        email?: string;
        /**
         * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         *
         */
        date?: Date;
      };
      /**
       * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
       *
       */
      signature?: string;
    },
  ): Promise<GitCommit> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/commits', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-commit"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a commit
   * Gets a Git [commit object](https://git-scm.com/book/en/v1/Git-Internals-Git-Objects#Commit-Objects).
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * Learn more at {@link https://docs.github.com/rest/reference/git#get-a-commit}
   * Tags: git
   *
   */
  async gitGetCommit(params: {
    owner: string;
    repo: string;
    commit_sha: string;
  }): Promise<GitCommit> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/git/commits/{commit_sha}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-commit"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List matching references
   * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the repository, but existing refs start with `:ref`, they will be returned as an array.
   *
   * When you use this endpoint without providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * If you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
   * Learn more at {@link https://docs.github.com/rest/reference/git#list-matching-references}
   * Tags: git
   *
   */
  async gitListMatchingRefs(params: {
    owner: string;
    repo: string;
    ref: string;
    per_page?: number;
    page?: number;
  }): Promise<GitRef[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/git/matching-refs/{ref}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/git-ref"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a reference
   * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
   *
   * **Note:** You need to explicitly [request a pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) to trigger a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   * Learn more at {@link https://docs.github.com/rest/reference/git#get-a-reference}
   * Tags: git
   *
   */
  async gitGetRef(params: {
    owner: string;
    repo: string;
    ref: string;
  }): Promise<GitRef> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/ref/{ref}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-ref"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a reference
   * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the commit SHA-1 hash used exists. Empty repositories are repositories without branches.
   * Learn more at {@link https://docs.github.com/rest/reference/git#create-a-reference}
   * Tags: git
   *
   */
  async gitCreateRef(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
       *
       */
      ref: string;
      /**
       * The SHA1 value for this reference.
       *
       */
      sha: string;
      /**
       * @example "\"refs/heads/newbranch\""
       *
       */
      key?: string;
    },
  ): Promise<GitRef> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/refs', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-ref"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a reference
   * Learn more at {@link https://docs.github.com/rest/reference/git#update-a-reference}
   * Tags: git
   *
   */
  async gitUpdateRef(
    params: {
      owner: string;
      repo: string;
      ref: string;
    },
    body: {
      /**
       * The SHA1 value to set this reference to
       *
       */
      sha: string;
      /**
       * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
       *
       */
      force?: boolean;
    },
  ): Promise<GitRef> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/refs/{ref}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-ref"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a reference
   * Learn more at {@link https://docs.github.com/rest/reference/git#delete-a-reference}
   * Tags: git
   *
   */
  async gitDeleteRef(params: {
    owner: string;
    repo: string;
    ref: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/refs/{ref}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a tag object
   * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an annotated tag in Git, you have to do this call to create the tag object, and then [create](https://docs.github.com/rest/reference/git#create-a-reference) the `refs/tags/[tag]` reference. If you want to create a lightweight tag, you only have to [create](https://docs.github.com/rest/reference/git#create-a-reference) the tag reference - this call would be unnecessary.
   *
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * Learn more at {@link https://docs.github.com/rest/reference/git#create-a-tag-object}
   * Tags: git
   *
   */
  async gitCreateTag(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The tag's name. This is typically a version (e.g., "v0.0.1").
       *
       */
      tag: string;
      /**
       * The tag message.
       *
       */
      message: string;
      /**
       * The SHA of the git object this is tagging.
       *
       */
      object: string;
      /**
       * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
       *
       */
      type: 'commit' | 'tree' | 'blob';
      /**
       * An object with information about the individual creating the tag.
       *
       */
      tagger?: {
        /**
         * The name of the author of the tag
         *
         */
        name: string;
        /**
         * The email of the author of the tag
         *
         */
        email: string;
        /**
         * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
         *
         */
        date?: Date;
      };
    },
  ): Promise<GitTag> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/tags', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-tag"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a tag
   * **Signature verification object**
   *
   * The response will include a `verification` object that describes the result of verifying the commit's signature. The following fields are included in the `verification` object:
   *
   * | Name | Type | Description |
   * | ---- | ---- | ----------- |
   * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified. |
   * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table below. |
   * | `signature` | `string` | The signature that was extracted from the commit. |
   * | `payload` | `string` | The value that was signed. |
   *
   * These are the possible values for `reason` in the `verification` object:
   *
   * | Value | Description |
   * | ----- | ----------- |
   * | `expired_key` | The key that made the signature is expired. |
   * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
   * | `gpgverify_error` | There was an error communicating with the signature verification service. |
   * | `gpgverify_unavailable` | The signature verification service is currently unavailable. |
   * | `unsigned` | The object does not include a signature. |
   * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
   * | `no_user` | No user was associated with the `committer` email address in the commit. |
   * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email address is not verified on her/his account. |
   * | `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the signature. |
   * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
   * | `malformed_signature` | There was an error parsing the signature. |
   * | `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature. |
   * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
   * Learn more at {@link https://docs.github.com/rest/reference/git#get-a-tag}
   * Tags: git
   *
   */
  async gitGetTag(params: {
    owner: string;
    repo: string;
    tag_sha: string;
  }): Promise<GitTag> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/tags/{tag_sha}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-tag"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a tree
   * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
   *
   * If you use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then update a branch to point to the commit. For more information see "[Create a commit](https://docs.github.com/rest/reference/git#create-a-commit)" and "[Update a reference](https://docs.github.com/rest/reference/git#update-a-reference)."
   * Learn more at {@link https://docs.github.com/rest/reference/git#create-a-tree}
   * Tags: git
   *
   */
  async gitCreateTree(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
       *
       */
      tree: {
        /**
         * The file referenced in the tree.
         *
         */
        path?: string;
        /**
         * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
         *
         */
        mode?: '100644' | '100755' | '040000' | '160000' | '120000';
        /**
         * Either `blob`, `tree`, or `commit`.
         *
         */
        type?: 'blob' | 'tree' | 'commit';
        /**
         * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
         *
         * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
         *
         */
        sha?: string | null;
        /**
         * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
         *
         * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
         *
         */
        content?: string;
      }[];
      /**
       * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
       * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
       *
       *
       */
      base_tree?: string;
    },
  ): Promise<GitTree> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/trees', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-tree"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a tree
   * Returns a single tree using the SHA1 value for that tree.
   *
   * If `truncated` is `true` in the response then the number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive method of fetching trees, and fetch one sub-tree at a time.
   * Learn more at {@link https://docs.github.com/rest/reference/git#get-a-tree}
   * Tags: git
   *
   */
  async gitGetTree(params: {
    owner: string;
    repo: string;
    tree_sha: string;
    recursive?: string;
  }): Promise<GitTree> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/git/trees/{tree_sha}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.recursive !== undefined)
      requestContext.setQueryParam(
        'recursive',
        r.serializeParameter(params.recursive),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/git-tree"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository webhooks
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-webhooks}
   * Tags: repos
   *
   */
  async reposListWebhooks(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<Hook[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/hook"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a repository webhook
   * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks can
   * share the same `config` as long as those webhooks do not have any `events` that overlap.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposCreateWebhook(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
       *
       */
      name?: string;
      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
       *
       */
      config?: {
        url?: WebhookConfigUrl;
        content_type?: WebhookConfigContentType;
        secret?: WebhookConfigSecret;
        insecure_ssl?: WebhookConfigInsecureSsl;
        /**
         * @example "\"abc\""
         *
         */
        token?: string;
        /**
         * @example "\"sha256\""
         *
         */
        digest?: string;
      };
      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
       * @defaultValue
       * [
       *   "push"
       * ]
       *
       */
      events?: string[];
      /**
       * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
       * @defaultValue true
       *
       */
      active?: boolean;
    } | null,
  ): Promise<Hook> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/hook"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository webhook
   * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook configuration for a repository](/rest/reference/repos#get-a-webhook-configuration-for-a-repository)."
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposGetWebhook(params: {
    owner: string;
    repo: string;
    hook_id: number;
  }): Promise<Hook> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks/{hook_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/hook"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a repository webhook
   * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for a repository](/rest/reference/repos#update-a-webhook-configuration-for-a-repository)."
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposUpdateWebhook(
    params: {
      owner: string;
      repo: string;
      hook_id: number;
    },
    body: {
      /**
       * Key/value pairs to provide settings for this webhook. [These are defined below](https://docs.github.com/rest/reference/repos#create-hook-config-params).
       *
       */
      config?: {
        url: WebhookConfigUrl;
        content_type?: WebhookConfigContentType;
        secret?: WebhookConfigSecret;
        insecure_ssl?: WebhookConfigInsecureSsl;
        /**
         * @example "\"bar@example.com\""
         *
         */
        address?: string;
        /**
         * @example "\"The Serious Room\""
         *
         */
        room?: string;
      };
      /**
       * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
       * @defaultValue
       * [
       *   "push"
       * ]
       *
       */
      events?: string[];
      /**
       * Determines a list of events to be added to the list of events that the Hook triggers for.
       *
       */
      add_events?: string[];
      /**
       * Determines a list of events to be removed from the list of events that the Hook triggers for.
       *
       */
      remove_events?: string[];
      /**
       * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
       * @defaultValue true
       *
       */
      active?: boolean;
    },
  ): Promise<Hook> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks/{hook_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/hook"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a repository webhook
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposDeleteWebhook(params: {
    owner: string;
    repo: string;
    hook_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks/{hook_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a webhook configuration for a repository
   * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active` state and `events`, use "[Get a repository webhook](/rest/reference/orgs#get-a-repository-webhook)."
   *
   * Access tokens must have the `read:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:read` permission.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-webhook-configuration-for-a-repository}
   * Tags: repos
   *
   */
  async reposGetWebhookConfigForRepo(params: {
    owner: string;
    repo: string;
    hook_id: number;
  }): Promise<WebhookConfig> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks/{hook_id}/config', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/webhook-config"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a webhook configuration for a repository
   * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active` state and `events`, use "[Update a repository webhook](/rest/reference/orgs#update-a-repository-webhook)."
   *
   * Access tokens must have the `write:repo_hook` or `repo` scope, and GitHub Apps must have the `repository_hooks:write` permission.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-a-webhook-configuration-for-a-repository}
   * Tags: repos
   *
   */
  async reposUpdateWebhookConfigForRepo(
    params: {
      owner: string;
      repo: string;
      hook_id: number;
    },
    body: {
      url?: WebhookConfigUrl;
      content_type?: WebhookConfigContentType;
      secret?: WebhookConfigSecret;
      insecure_ssl?: WebhookConfigInsecureSsl;
    },
  ): Promise<WebhookConfig> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks/{hook_id}/config', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/webhook-config"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List deliveries for a repository webhook
   * Returns a list of webhook deliveries for a webhook configured in a repository.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-deliveries-for-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposListWebhookDeliveries(params: {
    owner: string;
    repo: string;
    hook_id: number;
    per_page?: number;
    cursor?: string;
  }): Promise<HookDeliveryItem[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.cursor !== undefined)
      requestContext.setQueryParam(
        'cursor',
        r.serializeParameter(params.cursor),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/hook-delivery-item"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a delivery for a repository webhook
   * Returns a delivery for a webhook configured in a repository.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-delivery-for-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposGetWebhookDelivery(params: {
    owner: string;
    repo: string;
    hook_id: number;
    delivery_id: number;
  }): Promise<HookDelivery> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/hook-delivery"}'),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Redeliver a delivery for a repository webhook
   * Redeliver a webhook delivery for a webhook configured in a repository.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#redeliver-a-delivery-for-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposRedeliverWebhookDelivery(params: {
    owner: string;
    repo: string;
    hook_id: number;
    delivery_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"type":"object"}'),
        this.resolver,
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Ping a repository webhook
   * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#ping-a-repository-webhook}
   * Tags: repos
   *
   */
  async reposPingWebhook(params: {
    owner: string;
    repo: string;
    hook_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks/{hook_id}/pings', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Test the push repository webhook
   * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be generated.
   *
   * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
   * Learn more at {@link https://docs.github.com/rest/reference/repos#test-the-push-repository-webhook}
   * Tags: repos
   *
   */
  async reposTestPushWebhook(params: {
    owner: string;
    repo: string;
    hook_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/hooks/{hook_id}/tests', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an import status
   * View the progress of an import.
   *
   * **Import status**
   *
   * This section includes details about the possible values of the `status` field of the Import Progress response.
   *
   * An import that does not have errors will progress through these steps:
   *
   * *   `detecting` - the "detection" step of the import is in progress because the request did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
   * *   `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original repository. The import progress response will include `commit_count` (the total number of raw commits that will be imported) and `percent` (0 - 100, the current progress through the import).
   * *   `mapping` - the "rewrite" step of the import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied. The import progress response does not include progress information.
   * *   `pushing` - the "push" step of the import is in progress. This is where the importer updates the repository on GitHub. The import progress response will include `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
   * *   `complete` - the import is complete, and the repository is ready on GitHub.
   *
   * If there are problems, you will see one of these in the `status` field:
   *
   * *   `auth_failed` - the import requires authentication in order to connect to the original repository. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
   * *   `error` - the import encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub Support](https://support.github.com/contact?tags=rest-api) for more information.
   * *   `detection_needs_auth` - the importer requires authentication for the originating repository to continue detection. To update authentication for the import, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
   * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve, [Cancel the import](https://docs.github.com/rest/reference/migrations#cancel-an-import) and [retry](https://docs.github.com/rest/reference/migrations#start-an-import) with the correct URL.
   * *   `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the case, the Import Progress response will also include a `project_choices` field with the possible project choices as values. To update project choice, please see the [Update an import](https://docs.github.com/rest/reference/migrations#update-an-import) section.
   *
   * **The project_choices field**
   *
   * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field, the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project hashes will differ depending on the version control type.
   *
   * **Git LFS related fields**
   *
   * This section includes details about Git LFS related fields that may be present in the Import Progress response.
   *
   * *   `use_lfs` - describes whether the import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has been taken.
   * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the `importing` step.
   * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the originating repository.
   * *   `large_files_count` - the total number of files larger than 100MB found in the originating repository. To see a list of these files, make a "Get Large Files" request.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#get-an-import-status}
   * Tags: migrations
   *
   */
  async migrationsGetImportStatus(params: {
    owner: string;
    repo: string;
  }): Promise<Import> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/import', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/import"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Start an import
   * Start a source import to a GitHub repository using GitHub Importer.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#start-an-import}
   * Tags: migrations
   *
   */
  async migrationsStartImport(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The URL of the originating repository.
       *
       */
      vcs_url: string;
      /**
       * The originating VCS type. Can be one of `subversion`, `git`, `mercurial`, or `tfvc`. Please be aware that without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
       *
       */
      vcs?: 'subversion' | 'git' | 'mercurial' | 'tfvc';
      /**
       * If authentication is required, the username to provide to `vcs_url`.
       *
       */
      vcs_username?: string;
      /**
       * If authentication is required, the password to provide to `vcs_url`.
       *
       */
      vcs_password?: string;
      /**
       * For a tfvc import, the name of the project that is being imported.
       *
       */
      tfvc_project?: string;
    },
  ): Promise<Import> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/import', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/import"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an import
   * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this API
   * request. If no parameters are provided, the import will be restarted.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#update-an-import}
   * Tags: migrations
   *
   */
  async migrationsUpdateImport(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The username to provide to the originating repository.
       *
       */
      vcs_username?: string;
      /**
       * The password to provide to the originating repository.
       *
       */
      vcs_password?: string;
      /**
       * @example "\"git\""
       *
       */
      vcs?: string;
      /**
       * @example "\"project1\""
       *
       */
      tfvc_project?: string;
    } | null,
  ): Promise<Import> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/import', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/import"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Cancel an import
   * Stop an import for a repository.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#cancel-an-import}
   * Tags: migrations
   *
   */
  async migrationsCancelImport(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/import', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get commit authors
   * Each type of source control system represents authors in a different way. For example, a Git commit author has a display name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot` into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
   *
   * This endpoint and the [Map a commit author](https://docs.github.com/rest/reference/migrations#map-a-commit-author) endpoint allow you to provide correct Git author information.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#get-commit-authors}
   * Tags: migrations
   *
   */
  async migrationsGetCommitAuthors(params: {
    owner: string;
    repo: string;
    since?: number;
  }): Promise<PorterAuthor[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/import/authors', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/porter-author"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Map a commit author
   * Update an author's identity for the import. Your application can continue updating authors any time before you push new commits to the repository.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#map-a-commit-author}
   * Tags: migrations
   *
   */
  async migrationsMapCommitAuthor(
    params: {
      owner: string;
      repo: string;
      author_id: number;
    },
    body: {
      /**
       * The new Git author email.
       *
       */
      email?: string;
      /**
       * The new Git author name.
       *
       */
      name?: string;
    },
  ): Promise<PorterAuthor> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/import/authors/{author_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/porter-author"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get large files
   * List files larger than 100MB found during the import
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#get-large-files}
   * Tags: migrations
   *
   */
  async migrationsGetLargeFiles(params: {
    owner: string;
    repo: string;
  }): Promise<PorterLargeFile[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/import/large_files', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/porter-large-file"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update Git LFS preference
   * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability is powered by [Git LFS](https://git-lfs.github.com). You can learn more about our LFS feature and working with large files [on our help site](https://help.github.com/articles/versioning-large-files/).
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#update-git-lfs-preference}
   * Tags: migrations
   *
   */
  async migrationsSetLfsPreference(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * Can be one of `opt_in` (large files will be stored using Git LFS) or `opt_out` (large files will be removed during the import).
       *
       */
      use_lfs: 'opt_in' | 'opt_out';
    },
  ): Promise<Import> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/import/lfs', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/import"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository installation for the authenticated app
   * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type will be either an organization or a user account, depending which account the repository belongs to.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-a-repository-installation-for-the-authenticated-app}
   * Tags: apps
   *
   */
  async appsGetRepoInstallation(params: {
    owner: string;
    repo: string;
  }): Promise<Installation> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/installation', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/installation"}'),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get interaction restrictions for a repository
   * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no restrictions, you will see an empty response.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-a-repository}
   * Tags: interactions
   *
   */
  async interactionsGetRestrictionsForRepo(params: {
    owner: string;
    repo: string;
  }): Promise<InteractionLimitResponse | any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/interaction-limits', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"anyOf":[{"$ref":"#/components/schemas/interaction-limit-response"},{"type":"object","properties":{},"additionalProperties":false}]}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set interaction restrictions for a repository
   * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-a-repository}
   * Tags: interactions
   *
   */
  async interactionsSetRestrictionsForRepo(
    params: {
      owner: string;
      repo: string;
    },
    body: InteractionLimit,
  ): Promise<InteractionLimitResponse> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/interaction-limits', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/interaction-limit-response"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove interaction restrictions for a repository
   * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single repository.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-for-a-repository}
   * Tags: interactions
   *
   */
  async interactionsRemoveRestrictionsForRepo(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/interaction-limits', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository invitations
   * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository invitations.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-invitations}
   * Tags: repos
   *
   */
  async reposListInvitations(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<RepositoryInvitation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/invitations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/repository-invitation"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a repository invitation
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-a-repository-invitation}
   * Tags: repos
   *
   */
  async reposUpdateInvitation(
    params: {
      owner: string;
      repo: string;
      invitation_id: number;
    },
    body: {
      /**
       * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
       *
       */
      permissions?: 'read' | 'write' | 'maintain' | 'triage' | 'admin';
    },
  ): Promise<RepositoryInvitation> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/invitations/{invitation_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/repository-invitation"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a repository invitation
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-repository-invitation}
   * Tags: repos
   *
   */
  async reposDeleteInvitation(params: {
    owner: string;
    repo: string;
    invitation_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/invitations/{invitation_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository issues
   * List issues in a repository.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-repository-issues}
   * Tags: issues
   *
   */
  async issuesListForRepo(params: {
    owner: string;
    repo: string;
    milestone?: string;
    state?: 'open' | 'closed' | 'all';
    assignee?: string;
    creator?: string;
    mentioned?: string;
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<IssueSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/issues', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.milestone !== undefined)
      requestContext.setQueryParam(
        'milestone',
        r.serializeParameter(params.milestone),
      );
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.assignee !== undefined)
      requestContext.setQueryParam(
        'assignee',
        r.serializeParameter(params.assignee),
      );
    if (params.creator !== undefined)
      requestContext.setQueryParam(
        'creator',
        r.serializeParameter(params.creator),
      );
    if (params.mentioned !== undefined)
      requestContext.setQueryParam(
        'mentioned',
        r.serializeParameter(params.mentioned),
      );
    if (params.labels !== undefined)
      requestContext.setQueryParam(
        'labels',
        r.serializeParameter(params.labels),
      );
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue-simple"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an issue
   * Any user with pull access to a repository can create an issue. If [issues are disabled in the repository](https://help.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#create-an-issue}
   * Tags: issues
   *
   */
  async issuesCreate(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The title of the issue.
       *
       */
      title: string | number;
      /**
       * The contents of the issue.
       *
       */
      body?: string;
      /**
       * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
       *
       */
      assignee?: string | null;
      milestone?: (string | number) | null;
      /**
       * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
       *
       */
      labels?: (
        | string
        | {
            id?: number;
            name?: string;
            description?: string | null;
            color?: string | null;
          }
      )[];
      /**
       * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
       *
       */
      assignees?: string[];
    },
  ): Promise<Issue> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/issues', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List issue comments for a repository
   * By default, Issue Comments are ordered by ascending ID.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-issue-comments-for-a-repository}
   * Tags: issues
   *
   */
  async issuesListCommentsForRepo(params: {
    owner: string;
    repo: string;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<IssueComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/issues/comments', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue-comment"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an issue comment
   * Learn more at {@link https://docs.github.com/rest/reference/issues#get-an-issue-comment}
   * Tags: issues
   *
   */
  async issuesGetComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
  }): Promise<IssueComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an issue comment
   * Learn more at {@link https://docs.github.com/rest/reference/issues#update-an-issue-comment}
   * Tags: issues
   *
   */
  async issuesUpdateComment(
    params: {
      owner: string;
      repo: string;
      comment_id: number;
    },
    body: {
      /**
       * The contents of the comment.
       *
       */
      body: string;
    },
  ): Promise<IssueComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an issue comment
   * Learn more at {@link https://docs.github.com/rest/reference/issues#delete-an-issue-comment}
   * Tags: issues
   *
   */
  async issuesDeleteComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for an issue comment
   * List the reactions to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue-comment}
   * Tags: reactions
   *
   */
  async reactionsListForIssueComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for an issue comment
   * Create a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments). A response with an HTTP `200` status means that you already added the reaction type to this issue comment.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue-comment}
   * Tags: reactions
   *
   */
  async reactionsCreateForIssueComment(
    params: {
      owner: string;
      repo: string;
      comment_id: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue comment.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Reaction>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an issue comment reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue comment](https://docs.github.com/rest/reference/issues#comments).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#delete-an-issue-comment-reaction}
   * Tags: reactions
   *
   */
  async reactionsDeleteForIssueComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
    reaction_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List issue events for a repository
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-issue-events-for-a-repository}
   * Tags: issues
   *
   */
  async issuesListEventsForRepo(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<IssueEvent[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/issues/events', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue-event"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an issue event
   * Learn more at {@link https://docs.github.com/rest/reference/issues#get-an-issue-event}
   * Tags: issues
   *
   */
  async issuesGetEvent(params: {
    owner: string;
    repo: string;
    event_id: number;
  }): Promise<IssueEvent> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/events/{event_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue-event"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an issue
   * The API returns a [`301 Moved Permanently` status](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-redirects-redirects) if the issue was
   * [transferred](https://help.github.com/articles/transferring-an-issue-to-another-repository/) to another repository. If
   * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the API
   * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has read
   * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues, subscribe
   * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#get-an-issue}
   * Tags: issues
   *
   */
  async issuesGet(params: {
    owner: string;
    repo: string;
    issue_number: number;
  }): Promise<Issue> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/issues/{issue_number}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue"}'),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an issue
   * Issue owners and users with push access can edit an issue.
   * Learn more at {@link https://docs.github.com/rest/reference/issues/#update-an-issue}
   * Tags: issues
   *
   */
  async issuesUpdate(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body: {
      /**
       * The title of the issue.
       *
       */
      title?: (string | number) | null;
      /**
       * The contents of the issue.
       *
       */
      body?: string | null;
      /**
       * Login for the user that this issue should be assigned to. **This field is deprecated.**
       *
       */
      assignee?: string | null;
      /**
       * State of the issue. Either `open` or `closed`.
       *
       */
      state?: 'open' | 'closed';
      milestone?: (string | number) | null;
      /**
       * Labels to associate with this issue. Pass one or more Labels to _replace_ the set of Labels on this Issue. Send an empty array (`[]`) to clear all Labels from the Issue. _NOTE: Only users with push access can set labels for issues. Labels are silently dropped otherwise._
       *
       */
      labels?: (
        | string
        | {
            id?: number;
            name?: string;
            description?: string | null;
            color?: string | null;
          }
      )[];
      /**
       * Logins for Users to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this Issue. Send an empty array (`[]`) to clear all assignees from the Issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
       *
       */
      assignees?: string[];
    },
  ): Promise<Issue> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/issues/{issue_number}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue"}'),
        this.resolver,
      );
    if (r.isCodeInRange('301', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add assignees to an issue
   * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#add-assignees-to-an-issue}
   * Tags: issues
   *
   */
  async issuesAddAssignees(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body: {
      /**
       * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
       *
       */
      assignees?: string[];
    },
  ): Promise<IssueSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/assignees',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue-simple"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove assignees from an issue
   * Removes one or more assignees from an issue.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#remove-assignees-from-an-issue}
   * Tags: issues
   *
   */
  async issuesRemoveAssignees(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body: {
      /**
       * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
       *
       */
      assignees?: string[];
    },
  ): Promise<IssueSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/assignees',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue-simple"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List issue comments
   * Issue Comments are ordered by ascending ID.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-issue-comments}
   * Tags: issues
   *
   */
  async issuesListComments(params: {
    owner: string;
    repo: string;
    issue_number: number;
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<IssueComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/comments',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue-comment"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create an issue comment
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#create-an-issue-comment}
   * Tags: issues
   *
   */
  async issuesCreateComment(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body: {
      /**
       * The contents of the comment.
       *
       */
      body: string;
    },
  ): Promise<IssueComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/comments',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/issue-comment"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List issue events
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-issue-events}
   * Tags: issues
   *
   */
  async issuesListEvents(params: {
    owner: string;
    repo: string;
    issue_number: number;
    per_page?: number;
    page?: number;
  }): Promise<IssueEventForIssue[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/events',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue-event-for-issue"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List labels for an issue
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-labels-for-an-issue}
   * Tags: issues
   *
   */
  async issuesListLabelsOnIssue(params: {
    owner: string;
    repo: string;
    issue_number: number;
    per_page?: number;
    page?: number;
  }): Promise<Label[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/label"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add labels to an issue
   * Learn more at {@link https://docs.github.com/rest/reference/issues#add-labels-to-an-issue}
   * Tags: issues
   *
   */
  async issuesAddLabels(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body:
      | {
          /**
           * The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
           *
           */
          labels?: string[];
        }
      | string[]
      | {
          labels?: {
            name: string;
          }[];
        }
      | {
          name: string;
        }[]
      | string,
  ): Promise<Label[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/label"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set labels for an issue
   * Removes any previous labels and sets the new labels for an issue.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#set-labels-for-an-issue}
   * Tags: issues
   *
   */
  async issuesSetLabels(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body:
      | {
          /**
           * The names of the labels to add to the issue. You can pass an empty array to remove all labels. **Note:** Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key.
           *
           */
          labels?: string[];
        }
      | string[]
      | {
          labels?: {
            name: string;
          }[];
        }
      | {
          name: string;
        }[]
      | string,
  ): Promise<Label[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/label"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove all labels from an issue
   * Learn more at {@link https://docs.github.com/rest/reference/issues#remove-all-labels-from-an-issue}
   * Tags: issues
   *
   */
  async issuesRemoveAllLabels(params: {
    owner: string;
    repo: string;
    issue_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a label from an issue
   * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404 Not Found` status if the label does not exist.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#remove-a-label-from-an-issue}
   * Tags: issues
   *
   */
  async issuesRemoveLabel(params: {
    owner: string;
    repo: string;
    issue_number: number;
    name: string;
  }): Promise<Label[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/label"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Lock an issue
   * Users with push access can lock an issue or pull request's conversation.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   * Learn more at {@link https://docs.github.com/rest/reference/issues#lock-an-issue}
   * Tags: issues
   *
   */
  async issuesLock(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body: {
      /**
       * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
       * \* `off-topic`
       * \* `too heated`
       * \* `resolved`
       * \* `spam`
       *
       */
      lock_reason?: 'off-topic' | 'too heated' | 'resolved' | 'spam';
    } | null,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/lock',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unlock an issue
   * Users with push access can unlock an issue's conversation.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#unlock-an-issue}
   * Tags: issues
   *
   */
  async issuesUnlock(params: {
    owner: string;
    repo: string;
    issue_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/lock',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for an issue
   * List the reactions to an [issue](https://docs.github.com/rest/reference/issues).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#list-reactions-for-an-issue}
   * Tags: reactions
   *
   */
  async reactionsListForIssue(params: {
    owner: string;
    repo: string;
    issue_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for an issue
   * Create a reaction to an [issue](https://docs.github.com/rest/reference/issues/). A response with an HTTP `200` status means that you already added the reaction type to this issue.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#create-reaction-for-an-issue}
   * Tags: reactions
   *
   */
  async reactionsCreateForIssue(
    params: {
      owner: string;
      repo: string;
      issue_number: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the issue.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Reaction>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an issue reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
   *
   * Delete a reaction to an [issue](https://docs.github.com/rest/reference/issues/).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#delete-an-issue-reaction}
   * Tags: reactions
   *
   */
  async reactionsDeleteForIssue(params: {
    owner: string;
    repo: string;
    issue_number: number;
    reaction_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List timeline events for an issue
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-timeline-events-for-an-issue}
   * Tags: issues
   *
   */
  async issuesListEventsForTimeline(params: {
    owner: string;
    repo: string;
    issue_number: number;
    per_page?: number;
    page?: number;
  }): Promise<TimelineIssueEvents[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/issues/{issue_number}/timeline',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/timeline-issue-events"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List deploy keys
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-deploy-keys}
   * Tags: repos
   *
   */
  async reposListDeployKeys(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<DeployKey[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/keys', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/deploy-key"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a deploy key
   * You can create a read-only deploy key.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-deploy-key}
   * Tags: repos
   *
   */
  async reposCreateDeployKey(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * A name for the key.
       *
       */
      title?: string;
      /**
       * The contents of the key.
       *
       */
      key: string;
      /**
       * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
       *
       * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://help.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://help.github.com/articles/permission-levels-for-a-user-account-repository/)."
       *
       */
      read_only?: boolean;
    },
  ): Promise<DeployKey> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/keys', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/deploy-key"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a deploy key
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-deploy-key}
   * Tags: repos
   *
   */
  async reposGetDeployKey(params: {
    owner: string;
    repo: string;
    key_id: number;
  }): Promise<DeployKey> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/keys/{key_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/deploy-key"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a deploy key
   * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-deploy-key}
   * Tags: repos
   *
   */
  async reposDeleteDeployKey(params: {
    owner: string;
    repo: string;
    key_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/keys/{key_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List labels for a repository
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-labels-for-a-repository}
   * Tags: issues
   *
   */
  async issuesListLabelsForRepo(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<Label[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/labels', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/label"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a label
   * Learn more at {@link https://docs.github.com/rest/reference/issues#create-a-label}
   * Tags: issues
   *
   */
  async issuesCreateLabel(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
       *
       */
      name: string;
      /**
       * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
       *
       */
      color?: string;
      /**
       * A short description of the label.
       *
       */
      description?: string;
    },
  ): Promise<Label> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/labels', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/label"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a label
   * Learn more at {@link https://docs.github.com/rest/reference/issues#get-a-label}
   * Tags: issues
   *
   */
  async issuesGetLabel(params: {
    owner: string;
    repo: string;
    name: string;
  }): Promise<Label> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/labels/{name}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/label"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a label
   * Learn more at {@link https://docs.github.com/rest/reference/issues#update-a-label}
   * Tags: issues
   *
   */
  async issuesUpdateLabel(
    params: {
      owner: string;
      repo: string;
      name: string;
    },
    body: {
      /**
       * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
       *
       */
      new_name?: string;
      /**
       * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
       *
       */
      color?: string;
      /**
       * A short description of the label.
       *
       */
      description?: string;
    },
  ): Promise<Label> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/labels/{name}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/label"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a label
   * Learn more at {@link https://docs.github.com/rest/reference/issues#delete-a-label}
   * Tags: issues
   *
   */
  async issuesDeleteLabel(params: {
    owner: string;
    repo: string;
    name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/labels/{name}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository languages
   * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written in that language.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-languages}
   * Tags: repos
   *
   */
  async reposListLanguages(params: {
    owner: string;
    repo: string;
  }): Promise<Language> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/languages', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/language"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the license for a repository
   * This method returns the contents of the repository's license file, if one is detected.
   *
   * Similar to [Get repository content](https://docs.github.com/rest/reference/repos#get-repository-content), this method also supports [custom media types](https://docs.github.com/rest/overview/media-types) for retrieving the raw license content or rendered license HTML.
   * Learn more at {@link https://docs.github.com/rest/reference/licenses/#get-the-license-for-a-repository}
   * Tags: licenses
   *
   */
  async licensesGetForRepo(params: {
    owner: string;
    repo: string;
  }): Promise<LicenseContent> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/license', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/license-content"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Merge a branch
   * Learn more at {@link https://docs.github.com/rest/reference/repos#merge-a-branch}
   * Tags: repos
   *
   */
  async reposMerge(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The name of the base branch that the head will be merged into.
       *
       */
      base: string;
      /**
       * The head to merge. This can be a branch name or a commit SHA1.
       *
       */
      head: string;
      /**
       * Commit message to use for the merge commit. If omitted, a default message will be used.
       *
       */
      commit_message?: string;
    },
  ): Promise<Commit> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/merges', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/commit"}'),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List milestones
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-milestones}
   * Tags: issues
   *
   */
  async issuesListMilestones(params: {
    owner: string;
    repo: string;
    state?: 'open' | 'closed' | 'all';
    sort?: 'due_on' | 'completeness';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<Milestone[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/milestones', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/milestone"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a milestone
   * Learn more at {@link https://docs.github.com/rest/reference/issues#create-a-milestone}
   * Tags: issues
   *
   */
  async issuesCreateMilestone(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The title of the milestone.
       *
       */
      title: string;
      /**
       * The state of the milestone. Either `open` or `closed`.
       * @defaultValue "open"
       *
       */
      state?: 'open' | 'closed';
      /**
       * A description of the milestone.
       *
       */
      description?: string;
      /**
       * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       *
       */
      due_on?: Date;
    },
  ): Promise<Milestone> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/milestones', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/milestone"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a milestone
   * Learn more at {@link https://docs.github.com/rest/reference/issues#get-a-milestone}
   * Tags: issues
   *
   */
  async issuesGetMilestone(params: {
    owner: string;
    repo: string;
    milestone_number: number;
  }): Promise<Milestone> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/milestones/{milestone_number}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/milestone"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a milestone
   * Learn more at {@link https://docs.github.com/rest/reference/issues#update-a-milestone}
   * Tags: issues
   *
   */
  async issuesUpdateMilestone(
    params: {
      owner: string;
      repo: string;
      milestone_number: number;
    },
    body: {
      /**
       * The title of the milestone.
       *
       */
      title?: string;
      /**
       * The state of the milestone. Either `open` or `closed`.
       * @defaultValue "open"
       *
       */
      state?: 'open' | 'closed';
      /**
       * A description of the milestone.
       *
       */
      description?: string;
      /**
       * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       *
       */
      due_on?: Date;
    },
  ): Promise<Milestone> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/milestones/{milestone_number}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/milestone"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a milestone
   * Learn more at {@link https://docs.github.com/rest/reference/issues#delete-a-milestone}
   * Tags: issues
   *
   */
  async issuesDeleteMilestone(params: {
    owner: string;
    repo: string;
    milestone_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/milestones/{milestone_number}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List labels for issues in a milestone
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-labels-for-issues-in-a-milestone}
   * Tags: issues
   *
   */
  async issuesListLabelsForMilestone(params: {
    owner: string;
    repo: string;
    milestone_number: number;
    per_page?: number;
    page?: number;
  }): Promise<Label[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/milestones/{milestone_number}/labels',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/label"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository notifications for the authenticated user
   * List all notifications for the current user.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityListRepoNotificationsForAuthenticatedUser(params: {
    owner: string;
    repo: string;
    all?: boolean;
    participating?: boolean;
    since?: Date;
    before?: Date;
    per_page?: number;
    page?: number;
  }): Promise<Thread[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/notifications', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.all !== undefined)
      requestContext.setQueryParam('all', r.serializeParameter(params.all));
    if (params.participating !== undefined)
      requestContext.setQueryParam(
        'participating',
        r.serializeParameter(params.participating),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.before !== undefined)
      requestContext.setQueryParam(
        'before',
        r.serializeParameter(params.before),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/thread"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Mark repository notifications as read
   * Marks all notifications in a repository as "read" removes them from the [default view on GitHub](https://github.com/notifications). If the number of notifications is too large to complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository notifications for the authenticated user](https://docs.github.com/rest/reference/activity#list-repository-notifications-for-the-authenticated-user) endpoint and pass the query parameter `all=false`.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#mark-repository-notifications-as-read}
   * Tags: activity
   *
   */
  async activityMarkRepoNotificationsAsRead(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
       *
       */
      last_read_at?: Date;
    },
  ): Promise<{
    message?: string;
    url?: string;
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/notifications', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"message":{"type":"string"},"url":{"type":"string"}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('205', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a GitHub Pages site
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-github-pages-site}
   * Tags: repos
   *
   */
  async reposGetPages(params: { owner: string; repo: string }): Promise<Page> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/page"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a GitHub Pages site
   * Configures a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages)."
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-github-pages-site}
   * Tags: repos
   *
   */
  async reposCreatePagesSite(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The source branch and directory used to publish your Pages site.
       *
       */
      source: {
        /**
         * The repository branch used to publish your site's source files.
         *
         */
        branch: string;
        /**
         * The repository directory that includes the source files for the Pages site. Allowed paths are `/` or `/docs`. Default: `/`
         * @defaultValue "/"
         *
         */
        path?: '/' | '/docs';
      };
    } | null,
  ): Promise<Page> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/page"}'),
        this.resolver,
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update information about a GitHub Pages site
   * Updates information for a GitHub Pages site. For more information, see "[About GitHub Pages](/github/working-with-github-pages/about-github-pages).
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-information-about-a-github-pages-site}
   * Tags: repos
   *
   */
  async reposUpdateInformationAboutPagesSite(
    params: {
      owner: string;
      repo: string;
    },
    body: any | any | any | any,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a GitHub Pages site
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-github-pages-site}
   * Tags: repos
   *
   */
  async reposDeletePagesSite(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List GitHub Pages builds
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-github-pages-builds}
   * Tags: repos
   *
   */
  async reposListPagesBuilds(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<PageBuild[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages/builds', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/page-build"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Request a GitHub Pages build
   * You can request that your site be built from the latest revision on the default branch. This has the same effect as pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can be helpful when diagnosing build warnings and failures.
   *
   * Build requests are limited to one concurrent build per repository and one concurrent build per requester. If you request a build while another is still in progress, the second request will be queued until the first completes.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#request-a-github-pages-build}
   * Tags: repos
   *
   */
  async reposRequestPagesBuild(params: {
    owner: string;
    repo: string;
  }): Promise<PageBuildStatus> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages/builds', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/page-build-status"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get latest Pages build
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-latest-pages-build}
   * Tags: repos
   *
   */
  async reposGetLatestPagesBuild(params: {
    owner: string;
    repo: string;
  }): Promise<PageBuild> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages/builds/latest', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/page-build"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Pages build
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-github-pages-build}
   * Tags: repos
   *
   */
  async reposGetPagesBuild(params: {
    owner: string;
    repo: string;
    build_id: number;
  }): Promise<PageBuild> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pages/builds/{build_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/page-build"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a DNS health check for GitHub Pages
   * Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
   *
   * The first request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with the health check results in the response.
   *
   * Users must have admin or owner permissions. GitHub Apps must have the `pages:write` and `administration:write` permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-dns-health-check-for-github-pages}
   * Tags: repos
   *
   */
  async reposGetPagesHealthCheck(params: {
    owner: string;
    repo: string;
  }): Promise<PagesHealthCheck> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pages/health', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pages-health-check"}'),
        this.resolver,
      );
    if (r.isCodeInRange('202', res.httpStatusCode))
      throw new r.ApiException<EmptyObject>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/empty-object"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository projects
   * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#list-repository-projects}
   * Tags: projects
   *
   */
  async projectsListForRepo(params: {
    owner: string;
    repo: string;
    state?: 'open' | 'closed' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<Project[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/projects', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/project"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a repository project
   * Creates a repository project board. Returns a `404 Not Found` status if projects are disabled in the repository. If you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
   * Learn more at {@link https://docs.github.com/rest/reference/projects#create-a-repository-project}
   * Tags: projects
   *
   */
  async projectsCreateForRepo(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The name of the project.
       *
       */
      name: string;
      /**
       * The description of the project.
       *
       */
      body?: string;
    },
  ): Promise<Project> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/projects', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project"}'),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('410', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List pull requests
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-pull-requests}
   * Tags: pulls
   *
   */
  async pullsList(params: {
    owner: string;
    repo: string;
    state?: 'open' | 'closed' | 'all';
    head?: string;
    base?: string;
    sort?: 'created' | 'updated' | 'popularity' | 'long-running';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<PullRequestSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pulls', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.head !== undefined)
      requestContext.setQueryParam('head', r.serializeParameter(params.head));
    if (params.base !== undefined)
      requestContext.setQueryParam('base', r.serializeParameter(params.base));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/pull-request-simple"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a pull request
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   *
   * You can create a new pull request.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#create-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsCreate(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The title of the new pull request.
       *
       */
      title?: string;
      /**
       * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
       *
       */
      head: string;
      /**
       * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
       *
       */
      base: string;
      /**
       * The contents of the pull request.
       *
       */
      body?: string;
      /**
       * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
       *
       */
      maintainer_can_modify?: boolean;
      /**
       * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://help.github.com/en/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
       *
       */
      draft?: boolean;
      /**
       * @example 1
       *
       */
      issue?: number;
    },
  ): Promise<PullRequest> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pulls', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List review comments in a repository
   * Lists review comments for all pull requests in a repository. By default, review comments are in ascending order by ID.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-review-comments-in-a-repository}
   * Tags: pulls
   *
   */
  async pullsListReviewCommentsForRepo(params: {
    owner: string;
    repo: string;
    sort?: 'created' | 'updated' | 'created_at';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<PullRequestReviewComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pulls/comments', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/pull-request-review-comment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a review comment for a pull request
   * Provides details for a review comment.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#get-a-review-comment-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsGetReviewComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
  }): Promise<PullRequestReviewComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/pull-request-review-comment"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a review comment for a pull request
   * Enables you to edit a review comment.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#update-a-review-comment-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsUpdateReviewComment(
    params: {
      owner: string;
      repo: string;
      comment_id: number;
    },
    body: {
      /**
       * The text of the reply to the review comment.
       *
       */
      body: string;
    },
  ): Promise<PullRequestReviewComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/pull-request-review-comment"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a review comment for a pull request
   * Deletes a review comment.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#delete-a-review-comment-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsDeleteReviewComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for a pull request review comment
   * List the reactions to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#list-reactions-for-a-pull-request-review-comment}
   * Tags: reactions
   *
   */
  async reactionsListForPullRequestReviewComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for a pull request review comment
   * Create a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#comments). A response with an HTTP `200` status means that you already added the reaction type to this pull request review comment.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#create-reaction-for-a-pull-request-review-comment}
   * Tags: reactions
   *
   */
  async reactionsCreateForPullRequestReviewComment(
    params: {
      owner: string;
      repo: string;
      comment_id: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the pull request review comment.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Reaction>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a pull request comment reaction
   * **Note:** You can also specify a repository by `repository_id` using the route `DELETE /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
   *
   * Delete a reaction to a [pull request review comment](https://docs.github.com/rest/reference/pulls#review-comments).
   * Learn more at {@link https://docs.github.com/rest/reference/reactions#delete-a-pull-request-comment-reaction}
   * Tags: reactions
   *
   */
  async reactionsDeleteForPullRequestComment(params: {
    owner: string;
    repo: string;
    comment_id: number;
    reaction_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a pull request
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Lists details of a pull request by providing its number.
   *
   * When you get, [create](https://docs.github.com/rest/reference/pulls/#create-a-pull-request), or [edit](https://docs.github.com/rest/reference/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to test whether the pull request can be automatically merged into the base branch. This test commit is not added to the base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more information, see "[Checking mergeability of pull requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
   *
   * The value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then `merge_commit_sha` will be the SHA of the _test_ merge commit.
   *
   * The value of the `merge_commit_sha` attribute changes depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how you merged the pull request:
   *
   * *   If merged as a [merge commit](https://help.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the merge commit.
   * *   If merged via a [squash](https://help.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits), `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
   * *   If [rebased](https://help.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits), `merge_commit_sha` represents the commit that the base branch was updated to.
   *
   * Pass the appropriate [media type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and patch formats.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#get-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsGet(params: {
    owner: string;
    repo: string;
    pull_number: number;
  }): Promise<PullRequest> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pulls/{pull_number}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('500', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a pull request
   * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To open or update a pull request in a public repository, you must have write access to the head or the source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to open or update a pull request.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls/#update-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsUpdate(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
    },
    body: {
      /**
       * The title of the pull request.
       *
       */
      title?: string;
      /**
       * The contents of the pull request.
       *
       */
      body?: string;
      /**
       * State of this Pull Request. Either `open` or `closed`.
       *
       */
      state?: 'open' | 'closed';
      /**
       * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
       *
       */
      base?: string;
      /**
       * Indicates whether [maintainers can modify](https://help.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
       *
       */
      maintainer_can_modify?: boolean;
    },
  ): Promise<PullRequest> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/pulls/{pull_number}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List review comments on a pull request
   * Lists all review comments for a pull request. By default, review comments are in ascending order by ID.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-review-comments-on-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsListReviewComments(params: {
    owner: string;
    repo: string;
    pull_number: number;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<PullRequestReviewComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/comments',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/pull-request-review-comment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a review comment for a pull request
   *
   * Creates a review comment in the pull request diff. To add a regular comment to a pull request timeline, see "[Create an issue comment](https://docs.github.com/rest/reference/issues#create-an-issue-comment)." We recommend creating a review comment using `line`, `side`, and optionally `start_line` and `start_side` if your comment applies to more than one line in the pull request diff.
   *
   * You can still create a review comment using the `position` parameter. When you use `position`, the `line`, `side`, `start_line`, and `start_side` parameters are not required. For more information, see the [`comfort-fade` preview notice](https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request-preview-notices).
   *
   * **Note:** The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#create-a-review-comment-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsCreateReviewComment(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
    },
    body: {
      /**
       * The text of the review comment.
       *
       */
      body: string;
      /**
       * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
       *
       */
      commit_id?: string;
      /**
       * The relative path to the file that necessitates a comment.
       *
       */
      path?: string;
      /**
       * **Required without `comfort-fade` preview**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note above.
       *
       */
      position?: number;
      /**
       * **Required with `comfort-fade` preview**. In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://help.github.com/en/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
       *
       */
      side?: 'LEFT' | 'RIGHT';
      /**
       * **Required with `comfort-fade` preview**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
       *
       */
      line?: number;
      /**
       * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
       *
       */
      start_line?: number;
      /**
       * **Required when using multi-line comments**. To create multi-line comments, you must use the `comfort-fade` preview header. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://help.github.com/en/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
       *
       */
      start_side?: 'LEFT' | 'RIGHT' | 'side';
      /**
       * @example 2
       *
       */
      in_reply_to?: number;
    },
  ): Promise<PullRequestReviewComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/comments',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/pull-request-review-comment"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a reply for a review comment
   * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies are not supported.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#create-a-reply-for-a-review-comment}
   * Tags: pulls
   *
   */
  async pullsCreateReplyForReviewComment(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
      comment_id: number;
    },
    body: {
      /**
       * The text of the review comment.
       *
       */
      body: string;
    },
  ): Promise<PullRequestReviewComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/pull-request-review-comment"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List commits on a pull request
   * Lists a maximum of 250 commits for a pull request. To receive a complete commit list for pull requests with more than 250 commits, use the [List commits](https://docs.github.com/rest/reference/repos#list-commits) endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-commits-on-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsListCommits(params: {
    owner: string;
    repo: string;
    pull_number: number;
    per_page?: number;
    page?: number;
  }): Promise<Commit[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/commits',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/commit"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List pull requests files
   * **Note:** Responses include a maximum of 3000 files. The paginated response returns 30 files per page by default.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-pull-requests-files}
   * Tags: pulls
   *
   */
  async pullsListFiles(params: {
    owner: string;
    repo: string;
    pull_number: number;
    per_page?: number;
    page?: number;
  }): Promise<DiffEntry[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/files',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/diff-entry"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('500', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a pull request has been merged
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#check-if-a-pull-request-has-been-merged}
   * Tags: pulls
   *
   */
  async pullsCheckIfMerged(params: {
    owner: string;
    repo: string;
    pull_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/merge',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Merge a pull request
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#merge-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsMerge(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
    },
    body: {
      /**
       * Title for the automatic commit message.
       *
       */
      commit_title?: string;
      /**
       * Extra detail to append to automatic commit message.
       *
       */
      commit_message?: string;
      /**
       * SHA that pull request head must match to allow merge.
       *
       */
      sha?: string;
      /**
       * Merge method to use. Possible values are `merge`, `squash` or `rebase`. Default is `merge`.
       *
       */
      merge_method?: 'merge' | 'squash' | 'rebase';
    } | null,
  ): Promise<PullRequestMergeResult> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/merge',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-merge-result"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('405', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List requested reviewers for a pull request
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-requested-reviewers-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsListRequestedReviewers(params: {
    owner: string;
    repo: string;
    pull_number: number;
    per_page?: number;
    page?: number;
  }): Promise<PullRequestReviewRequest> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/pull-request-review-request"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Request reviewers for a pull request
   * This endpoint triggers [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#request-reviewers-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsRequestReviewers(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
    },
    body: any | any,
  ): Promise<PullRequestSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-simple"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove requested reviewers from a pull request
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#remove-requested-reviewers-from-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsRemoveRequestedReviewers(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
    },
    body: {
      /**
       * An array of user `login`s that will be removed.
       *
       */
      reviewers: string[];
      /**
       * An array of team `slug`s that will be removed.
       *
       */
      team_reviewers?: string[];
    },
  ): Promise<PullRequestSimple> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-simple"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reviews for a pull request
   * The list of reviews returns in chronological order.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-reviews-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsListReviews(params: {
    owner: string;
    repo: string;
    pull_number: number;
    per_page?: number;
    page?: number;
  }): Promise<PullRequestReview[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/pull-request-review"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a review for a pull request
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   *
   * Pull request reviews created in the `PENDING` state do not include the `submitted_at` property in the response.
   *
   * **Note:** To comment on a specific line in a file, you need to first determine the _position_ of that line in the diff. The GitHub REST API v3 offers the `application/vnd.github.v3.diff` [media type](https://docs.github.com/rest/overview/media-types#commits-commit-comparison-and-pull-requests). To see a pull request diff, add this media type to the `Accept` header of a call to the [single pull request](https://docs.github.com/rest/reference/pulls#get-a-pull-request) endpoint.
   *
   * The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#create-a-review-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsCreateReview(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
    },
    body: {
      /**
       * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
       *
       */
      commit_id?: string;
      /**
       * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
       *
       */
      body?: string;
      /**
       * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request) when you are ready.
       *
       */
      event?: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT';
      /**
       * Use the following table to specify the location, destination, and contents of the draft review comment.
       *
       */
      comments?: {
        /**
         * The relative path to the file that necessitates a review comment.
         *
         */
        path: string;
        /**
         * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. For help finding the position value, read the note below.
         *
         */
        position?: number;
        /**
         * Text of the review comment.
         *
         */
        body: string;
        /**
         * @example 28
         *
         */
        line?: number;
        /**
         * @example "RIGHT"
         *
         */
        side?: string;
        /**
         * @example 26
         *
         */
        start_line?: number;
        /**
         * @example "LEFT"
         *
         */
        start_side?: string;
      }[];
    },
  ): Promise<PullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-review"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a review for a pull request
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#get-a-review-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsGetReview(params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  }): Promise<PullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-review"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a review for a pull request
   * Update the review summary comment with new text.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#update-a-review-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsUpdateReview(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    },
    body: {
      /**
       * The body text of the pull request review.
       *
       */
      body: string;
    },
  ): Promise<PullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-review"}'),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a pending review for a pull request
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#delete-a-pending-review-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsDeletePendingReview(params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  }): Promise<PullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-review"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List comments for a pull request review
   * List comments for a specific pull request review.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#list-comments-for-a-pull-request-review}
   * Tags: pulls
   *
   */
  async pullsListCommentsForReview(params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
    per_page?: number;
    page?: number;
  }): Promise<ReviewComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/review-comment"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Dismiss a review for a pull request
   * **Note:** To dismiss a pull request review on a [protected branch](https://docs.github.com/rest/reference/repos#branches), you must be a repository administrator or be included in the list of people or teams who can dismiss pull request reviews.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#dismiss-a-review-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsDismissReview(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    },
    body: {
      /**
       * The message for the pull request review dismissal
       *
       */
      message: string;
      /**
       * @example "\"APPROVE\""
       *
       */
      event?: string;
    },
  ): Promise<PullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-review"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Submit a review for a pull request
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#submit-a-review-for-a-pull-request}
   * Tags: pulls
   *
   */
  async pullsSubmitReview(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
      review_id: number;
    },
    body: {
      /**
       * The body text of the pull request review
       *
       */
      body?: string;
      /**
       * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
       *
       */
      event: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT';
    },
  ): Promise<PullRequestReview> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/pull-request-review"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a pull request branch
   * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull request branch.
   * Learn more at {@link https://docs.github.com/rest/reference/pulls#update-a-pull-request-branch}
   * Tags: pulls
   *
   */
  async pullsUpdateBranch(
    params: {
      owner: string;
      repo: string;
      pull_number: number;
    },
    body: {
      /**
       * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/reference/repos#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
       *
       */
      expected_head_sha?: string;
    } | null,
  ): Promise<{
    message?: string;
    url?: string;
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"message":{"type":"string"},"url":{"type":"string"}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository README
   * Gets the preferred README for a repository.
   *
   * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-repository-readme}
   * Tags: repos
   *
   */
  async reposGetReadme(params: {
    owner: string;
    repo: string;
    ref?: string;
  }): Promise<ContentFile> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/readme', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.ref !== undefined)
      requestContext.setQueryParam('ref', r.serializeParameter(params.ref));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/content-file"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository README for a directory
   * Gets the README from a repository directory.
   *
   * READMEs support [custom media types](https://docs.github.com/rest/reference/repos#custom-media-types) for retrieving the raw content or rendered HTML.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-repository-directory-readme}
   * Tags: repos
   *
   */
  async reposGetReadmeInDirectory(params: {
    owner: string;
    repo: string;
    dir: string;
    ref?: string;
  }): Promise<ContentFile> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/readme/{dir}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.ref !== undefined)
      requestContext.setQueryParam('ref', r.serializeParameter(params.ref));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/content-file"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List releases
   * This returns a list of releases, which does not include regular Git tags that have not been associated with a release. To get a list of Git tags, use the [Repository Tags API](https://docs.github.com/rest/reference/repos#list-repository-tags).
   *
   * Information about published releases are available to everyone. Only users with push access will receive listings for draft releases.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-releases}
   * Tags: repos
   *
   */
  async reposListReleases(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<Release[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/releases', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/release"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a release
   * Users with push access to the repository can create a release.
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-release}
   * Tags: repos
   *
   */
  async reposCreateRelease(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The name of the tag.
       *
       */
      tag_name: string;
      /**
       * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
       *
       */
      target_commitish?: string;
      /**
       * The name of the release.
       *
       */
      name?: string;
      /**
       * Text describing the contents of the tag.
       *
       */
      body?: string;
      /**
       * `true` to create a draft (unpublished) release, `false` to create a published one.
       *
       */
      draft?: boolean;
      /**
       * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
       *
       */
      prerelease?: boolean;
      /**
       * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
       *
       */
      discussion_category_name?: string;
    },
  ): Promise<Release> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/releases', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a release asset
   * To download the asset's binary content, set the `Accept` header of the request to [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-release-asset}
   * Tags: repos
   *
   */
  async reposGetReleaseAsset(params: {
    owner: string;
    repo: string;
    asset_id: number;
  }): Promise<ReleaseAsset> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/releases/assets/{asset_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release-asset"}'),
        this.resolver,
      );
    if (r.isCodeInRange('302', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a release asset
   * Users with push access to the repository can edit a release asset.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-a-release-asset}
   * Tags: repos
   *
   */
  async reposUpdateReleaseAsset(
    params: {
      owner: string;
      repo: string;
      asset_id: number;
    },
    body: {
      /**
       * The file name of the asset.
       *
       */
      name?: string;
      /**
       * An alternate short description of the asset. Used in place of the filename.
       *
       */
      label?: string;
      /**
       * @example "\"uploaded\""
       *
       */
      state?: string;
    },
  ): Promise<ReleaseAsset> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/releases/assets/{asset_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release-asset"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a release asset
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-release-asset}
   * Tags: repos
   *
   */
  async reposDeleteReleaseAsset(params: {
    owner: string;
    repo: string;
    asset_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/releases/assets/{asset_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the latest release
   * View the latest published full release for the repository.
   *
   * The latest release is the most recent non-prerelease, non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for the release, and not the date when the release was drafted or published.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-the-latest-release}
   * Tags: repos
   *
   */
  async reposGetLatestRelease(params: {
    owner: string;
    repo: string;
  }): Promise<Release> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/releases/latest', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a release by tag name
   * Get a published release with the specified tag.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-release-by-tag-name}
   * Tags: repos
   *
   */
  async reposGetReleaseByTag(params: {
    owner: string;
    repo: string;
    tag: string;
  }): Promise<Release> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/releases/tags/{tag}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a release
   * **Note:** This returns an `upload_url` key corresponding to the endpoint for uploading release assets. This key is a [hypermedia resource](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia).
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-a-release}
   * Tags: repos
   *
   */
  async reposGetRelease(params: {
    owner: string;
    repo: string;
    release_id: number;
  }): Promise<Release> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/releases/{release_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a release
   * Users with push access to the repository can edit a release.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#update-a-release}
   * Tags: repos
   *
   */
  async reposUpdateRelease(
    params: {
      owner: string;
      repo: string;
      release_id: number;
    },
    body: {
      /**
       * The name of the tag.
       *
       */
      tag_name?: string;
      /**
       * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch (usually `master`).
       *
       */
      target_commitish?: string;
      /**
       * The name of the release.
       *
       */
      name?: string;
      /**
       * Text describing the contents of the tag.
       *
       */
      body?: string;
      /**
       * `true` makes the release a draft, and `false` publishes the release.
       *
       */
      draft?: boolean;
      /**
       * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
       *
       */
      prerelease?: boolean;
      /**
       * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
       *
       */
      discussion_category_name?: string;
    },
  ): Promise<Release> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/releases/{release_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a release
   * Users with push access to the repository can delete a release.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#delete-a-release}
   * Tags: repos
   *
   */
  async reposDeleteRelease(params: {
    owner: string;
    repo: string;
    release_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/releases/{release_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List release assets
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-release-assets}
   * Tags: repos
   *
   */
  async reposListReleaseAssets(params: {
    owner: string;
    repo: string;
    release_id: number;
    per_page?: number;
    page?: number;
  }): Promise<ReleaseAsset[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/releases/{release_id}/assets',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/release-asset"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Upload a release asset
   * This endpoint makes use of [a Hypermedia relation](https://docs.github.com/rest/overview/resources-in-the-rest-api#hypermedia) to determine which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url` returned in
   * the response of the [Create a release endpoint](https://docs.github.com/rest/reference/repos#create-a-release) to upload a release asset.
   *
   * You need to use an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this endpoint.
   *
   * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type` header to provide the media type of the asset. For a list of media types, see [Media Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
   *
   * `application/zip`
   *
   * GitHub expects the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the request body. Everything else about the endpoint is the same as the rest of the API. For example,
   * you'll still need to pass your authentication to be able to upload an asset.
   *
   * When an upstream failure occurs, you will receive a `502 Bad Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
   *
   * **Notes:**
   * *   GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing periods. The "[List assets for a release](https://docs.github.com/rest/reference/repos#list-assets-for-a-release)"
   * endpoint lists the renamed filenames. For more information and help, contact [GitHub Support](https://support.github.com/contact?tags=rest-api).
   * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete the old file before you can re-upload the new asset.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#upload-a-release-asset}
   * Tags: repos
   *
   */
  async reposUploadReleaseAsset(
    params: {
      owner: string;
      repo: string;
      release_id: number;
      name: string;
      label?: string;
    },
    body: any,
  ): Promise<ReleaseAsset> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/releases/{release_id}/assets',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.name !== undefined)
      requestContext.setQueryParam('name', r.serializeParameter(params.name));
    if (params.label !== undefined)
      requestContext.setQueryParam('label', r.serializeParameter(params.label));
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/release-asset"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for a release
   * Create a reaction to a [release](https://docs.github.com/rest/reference/repos#releases). A response with a `Status: 200 OK` means that you already added the reaction type to this release.
   * Learn more at {@link https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-release}
   * Tags: reactions
   *
   */
  async reactionsCreateForRelease(
    params: {
      owner: string;
      repo: string;
      release_id: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the release.
       *
       */
      content: '+1' | 'laugh' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/releases/{release_id}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<Reaction>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List secret scanning alerts for a repository
   * Lists all secret scanning alerts for a private repository, from newest to oldest. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/secret-scanning#list-secret-scanning-alerts-for-a-repository}
   * Tags: secret-scanning
   *
   */
  async secretScanningListAlertsForRepo(params: {
    owner: string;
    repo: string;
    state?: 'open' | 'resolved';
    secret_type?: string;
    page?: number;
    per_page?: number;
  }): Promise<SecretScanningAlert[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/secret-scanning/alerts', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.secret_type !== undefined)
      requestContext.setQueryParam(
        'secret_type',
        r.serializeParameter(params.secret_type),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/secret-scanning-alert"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a secret scanning alert
   * Gets a single secret scanning alert detected in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` read permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/secret-scanning#get-a-secret-scanning-alert}
   * Tags: secret-scanning
   *
   */
  async secretScanningGetAlert(params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  }): Promise<SecretScanningAlert> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/secret-scanning-alert"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a secret scanning alert
   * Updates the status of a secret scanning alert in a private repository. To use this endpoint, you must be an administrator for the repository or organization, and you must use an access token with the `repo` scope or `security_events` scope.
   *
   * GitHub Apps must have the `secret_scanning_alerts` write permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/secret-scanning#update-a-secret-scanning-alert}
   * Tags: secret-scanning
   *
   */
  async secretScanningUpdateAlert(
    params: {
      owner: string;
      repo: string;
      alert_number: AlertNumber;
    },
    body: {
      state: SecretScanningAlertState;
      resolution?: SecretScanningAlertResolution;
    },
  ): Promise<SecretScanningAlert> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/secret-scanning-alert"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List stargazers
   * Lists the people that have starred the repository.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-stargazers}
   * Tags: activity
   *
   */
  async activityListStargazersForRepo(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[] | Stargazer[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/stargazers', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"anyOf":[{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}},{"type":"array","items":{"$ref":"#/components/schemas/stargazer"}}]}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the weekly commit activity
   * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-the-weekly-commit-activity}
   * Tags: repos
   *
   */
  async reposGetCodeFrequencyStats(params: {
    owner: string;
    repo: string;
  }): Promise<CodeFrequencyStat[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/stats/code_frequency', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/code-frequency-stat"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('202', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"type":"object"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the last year of commit activity
   * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on `Sunday`.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-the-last-year-of-commit-activity}
   * Tags: repos
   *
   */
  async reposGetCommitActivityStats(params: {
    owner: string;
    repo: string;
  }): Promise<CommitActivity[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/stats/commit_activity', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/commit-activity"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('202', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"type":"object"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all contributor commit activity
   *
   * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash (`weeks` array) with the following information:
   *
   * *   `w` - Start of the week, given as a [Unix timestamp](http://en.wikipedia.org/wiki/Unix_time).
   * *   `a` - Number of additions
   * *   `d` - Number of deletions
   * *   `c` - Number of commits
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-all-contributor-commit-activity}
   * Tags: repos
   *
   */
  async reposGetContributorsStats(params: {
    owner: string;
    repo: string;
  }): Promise<ContributorActivity[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/stats/contributors', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/contributor-activity"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('202', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"type":"object"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the weekly commit count
   * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from `all`.
   *
   * The array order is oldest week (index 0) to most recent week.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-the-weekly-commit-count}
   * Tags: repos
   *
   */
  async reposGetParticipationStats(params: {
    owner: string;
    repo: string;
  }): Promise<ParticipationStats> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/stats/participation', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/participation-stats"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the hourly commit count for each day
   * Each array contains the day number, hour number, and number of commits:
   *
   * *   `0-6`: Sunday - Saturday
   * *   `0-23`: Hour of day
   * *   Number of commits
   *
   * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm hour on Tuesdays. All times are based on the time zone of individual commits.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-the-hourly-commit-count-for-each-day}
   * Tags: repos
   *
   */
  async reposGetPunchCardStats(params: {
    owner: string;
    repo: string;
  }): Promise<CodeFrequencyStat[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/stats/punch_card', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/code-frequency-stat"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a commit status
   * Users with push access in a repository can create commit statuses for a given SHA.
   *
   * Note: there is a limit of 1000 statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a validation error.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-commit-status}
   * Tags: repos
   *
   */
  async reposCreateCommitStatus(
    params: {
      owner: string;
      repo: string;
      sha: string;
    },
    body: {
      /**
       * The state of the status. Can be one of `error`, `failure`, `pending`, or `success`.
       *
       */
      state: 'error' | 'failure' | 'pending' | 'success';
      /**
       * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
       * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
       * `http://ci.example.com/user/repo/build/sha`
       *
       */
      target_url?: string;
      /**
       * A short description of the status.
       *
       */
      description?: string;
      /**
       * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
       * @defaultValue "default"
       *
       */
      context?: string;
    },
  ): Promise<Status> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/statuses/{sha}', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/status"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List watchers
   * Lists the people watching the specified repository.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-watchers}
   * Tags: activity
   *
   */
  async activityListWatchersForRepo(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/subscribers', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a repository subscription
   * Learn more at {@link https://docs.github.com/rest/reference/activity#get-a-repository-subscription}
   * Tags: activity
   *
   */
  async activityGetRepoSubscription(params: {
    owner: string;
    repo: string;
  }): Promise<RepositorySubscription> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/subscription', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/repository-subscription"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set a repository subscription
   * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's subscription](https://docs.github.com/rest/reference/activity#delete-a-repository-subscription) completely.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#set-a-repository-subscription}
   * Tags: activity
   *
   */
  async activitySetRepoSubscription(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * Determines if notifications should be received from this repository.
       *
       */
      subscribed?: boolean;
      /**
       * Determines if all notifications should be blocked from this repository.
       *
       */
      ignored?: boolean;
    },
  ): Promise<RepositorySubscription> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/subscription', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/repository-subscription"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a repository subscription
   * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive notifications from a repository, [set the repository's subscription manually](https://docs.github.com/rest/reference/activity#set-a-repository-subscription).
   * Learn more at {@link https://docs.github.com/rest/reference/activity#delete-a-repository-subscription}
   * Tags: activity
   *
   */
  async activityDeleteRepoSubscription(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/subscription', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository tags
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-tags}
   * Tags: repos
   *
   */
  async reposListTags(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<Tag[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/tags', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/tag"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Download a repository archive (tar)
   * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   * **Note**: For private repositories, these links are temporary and expire after five minutes.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#download-a-repository-archive}
   * Tags: repos
   *
   */
  async reposDownloadTarballArchive(params: {
    owner: string;
    repo: string;
    ref: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/tarball/{ref}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('302', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository teams
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-teams}
   * Tags: repos
   *
   */
  async reposListTeams(params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  }): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/teams', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all repository topics
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-all-repository-topics}
   * Tags: repos
   *
   */
  async reposGetAllTopics(params: {
    owner: string;
    repo: string;
    page?: number;
    per_page?: number;
  }): Promise<Topic> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/topics', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/topic"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Replace all repository topics
   * Learn more at {@link https://docs.github.com/rest/reference/repos#replace-all-repository-topics}
   * Tags: repos
   *
   */
  async reposReplaceAllTopics(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
       *
       */
      names: string[];
    },
  ): Promise<Topic> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/topics', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/topic"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get repository clones
   * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-repository-clones}
   * Tags: repos
   *
   */
  async reposGetClones(params: {
    owner: string;
    repo: string;
    per?: '' | 'day' | 'week';
  }): Promise<CloneTraffic> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/traffic/clones', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per !== undefined)
      requestContext.setQueryParam('per', r.serializeParameter(params.per));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/clone-traffic"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get top referral paths
   * Get the top 10 popular contents over the last 14 days.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-top-referral-paths}
   * Tags: repos
   *
   */
  async reposGetTopPaths(params: {
    owner: string;
    repo: string;
  }): Promise<ContentTraffic[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/traffic/popular/paths', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/content-traffic"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get top referral sources
   * Get the top 10 referrers over the last 14 days.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-top-referral-sources}
   * Tags: repos
   *
   */
  async reposGetTopReferrers(params: {
    owner: string;
    repo: string;
  }): Promise<ReferrerTraffic[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{owner}/{repo}/traffic/popular/referrers',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/referrer-traffic"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get page views
   * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight of the beginning of the day or week. Week begins on Monday.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#get-page-views}
   * Tags: repos
   *
   */
  async reposGetViews(params: {
    owner: string;
    repo: string;
    per?: '' | 'day' | 'week';
  }): Promise<ViewTraffic> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/traffic/views', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per !== undefined)
      requestContext.setQueryParam('per', r.serializeParameter(params.per));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/view-traffic"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Transfer a repository
   * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user. The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the requirements to transfer personal and organization-owned repositories, see [about repository transfers](https://help.github.com/articles/about-repository-transfers/).
   * Learn more at {@link https://docs.github.com/rest/reference/repos#transfer-a-repository}
   * Tags: repos
   *
   */
  async reposTransfer(
    params: {
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The username or organization name the repository will be transferred to.
       *
       */
      new_owner: string;
      /**
       * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
       *
       */
      team_ids?: number[];
    },
  ): Promise<MinimalRepository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/transfer', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('202', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/minimal-repository"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if vulnerability alerts are enabled for a repository
   * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
   * Learn more at {@link https://docs.github.com/rest/reference/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository}
   * Tags: repos
   *
   */
  async reposCheckVulnerabilityAlerts(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/vulnerability-alerts', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Enable vulnerability alerts
   * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
   * Learn more at {@link https://docs.github.com/rest/reference/repos#enable-vulnerability-alerts}
   * Tags: repos
   *
   */
  async reposEnableVulnerabilityAlerts(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/vulnerability-alerts', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Disable vulnerability alerts
   * Disables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to the repository. For more information, see "[About security alerts for vulnerable dependencies](https://help.github.com/en/articles/about-security-alerts-for-vulnerable-dependencies)".
   * Learn more at {@link https://docs.github.com/rest/reference/repos#disable-vulnerability-alerts}
   * Tags: repos
   *
   */
  async reposDisableVulnerabilityAlerts(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/vulnerability-alerts', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Download a repository archive (zip)
   * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch (usually
   * `master`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need to use
   * the `Location` header to make a second `GET` request.
   * **Note**: For private repositories, these links are temporary and expire after five minutes.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#download-a-repository-archive}
   * Tags: repos
   *
   */
  async reposDownloadZipballArchive(params: {
    owner: string;
    repo: string;
    ref: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repos/{owner}/{repo}/zipball/{ref}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('302', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a repository using a template
   * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to specify the repository to use as the template. The authenticated user must own or be a member of an organization that owns the repository. To check if a repository is available to use as a template, get the repository's information using the [Get a repository](https://docs.github.com/rest/reference/repos#get-a-repository) endpoint and check that the `is_template` key is `true`.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-repository-using-a-template}
   * Tags: repos
   *
   */
  async reposCreateUsingTemplate(
    params: {
      template_owner: string;
      template_repo: string;
    },
    body: {
      /**
       * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
       *
       */
      owner?: string;
      /**
       * The name of the new repository.
       *
       */
      name: string;
      /**
       * A short description of the new repository.
       *
       */
      description?: string;
      /**
       * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
       *
       */
      include_all_branches?: boolean;
      /**
       * Either `true` to create a new private repository or `false` to create a new public one.
       *
       */
      private?: boolean;
    },
  ): Promise<Repository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repos/{template_owner}/{template_repo}/generate',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/repository"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public repositories
   * Lists all public repositories in the order that they were created.
   *
   * Note:
   * - For GitHub Enterprise Server, this endpoint will only list repositories available to all users on the enterprise.
   * - Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of repositories.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-public-repositories}
   * Tags: repos
   *
   */
  async reposListPublic(params: {
    since?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/repositories', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List environment secrets
   * Lists all secrets available in an environment without revealing their encrypted values. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#list-environment-secrets}
   * Tags: actions
   *
   */
  async actionsListEnvironmentSecrets(params: {
    repository_id: number;
    environment_name: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    secrets: ActionsSecret[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repositories/{repository_id}/environments/{environment_name}/secrets',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"secrets":{"type":"array","items":{"$ref":"#/components/schemas/actions-secret"}}}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an environment public key
   * Get the public key for an environment, which you need to encrypt environment secrets. You need to encrypt a secret before you can create or update secrets. Anyone with read access to the repository can use this endpoint. If the repository is private you must use an access token with the `repo` scope. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-an-environment-public-key}
   * Tags: actions
   *
   */
  async actionsGetEnvironmentPublicKey(params: {
    repository_id: number;
    environment_name: string;
  }): Promise<ActionsPublicKey> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-public-key"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an environment secret
   * Gets a single environment secret without revealing its encrypted value. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#get-an-environment-secret}
   * Tags: actions
   *
   */
  async actionsGetEnvironmentSecret(params: {
    repository_id: number;
    environment_name: string;
    secret_name: string;
  }): Promise<ActionsSecret> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-secret"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create or update an environment secret
   * Creates or updates an environment secret with an encrypted value. Encrypt your secret using
   * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). You must authenticate using an access
   * token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use
   * this endpoint.
   *
   * #### Example encrypting a secret using Node.js
   *
   * Encrypt your secret using the [tweetsodium](https://github.com/github/tweetsodium) library.
   *
   * ```
   * const sodium = require('tweetsodium');
   *
   * const key = "base64-encoded-public-key";
   * const value = "plain-text-secret";
   *
   * // Convert the message and key to Uint8Array's (Buffer implements that interface)
   * const messageBytes = Buffer.from(value);
   * const keyBytes = Buffer.from(key, 'base64');
   *
   * // Encrypt using LibSodium.
   * const encryptedBytes = sodium.seal(messageBytes, keyBytes);
   *
   * // Base64 the encrypted secret
   * const encrypted = Buffer.from(encryptedBytes).toString('base64');
   *
   * console.log(encrypted);
   * ```
   *
   *
   * #### Example encrypting a secret using Python
   *
   * Encrypt your secret using [pynacl](https://pynacl.readthedocs.io/en/stable/public/#nacl-public-sealedbox) with Python 3.
   *
   * ```
   * from base64 import b64encode
   * from nacl import encoding, public
   *
   * def encrypt(public_key: str, secret_value: str) -> str:
   *   """Encrypt a Unicode string using the public key."""
   *   public_key = public.PublicKey(public_key.encode("utf-8"), encoding.Base64Encoder())
   *   sealed_box = public.SealedBox(public_key)
   *   encrypted = sealed_box.encrypt(secret_value.encode("utf-8"))
   *   return b64encode(encrypted).decode("utf-8")
   * ```
   *
   * #### Example encrypting a secret using C#
   *
   * Encrypt your secret using the [Sodium.Core](https://www.nuget.org/packages/Sodium.Core/) package.
   *
   * ```
   * var secretValue = System.Text.Encoding.UTF8.GetBytes("mySecret");
   * var publicKey = Convert.FromBase64String("2Sg8iYjAxxmI2LvUXpJjkYrMxURPc8r+dB7TJyvvcCU=");
   *
   * var sealedPublicKeyBox = Sodium.SealedPublicKeyBox.Create(secretValue, publicKey);
   *
   * Console.WriteLine(Convert.ToBase64String(sealedPublicKeyBox));
   * ```
   *
   * #### Example encrypting a secret using Ruby
   *
   * Encrypt your secret using the [rbnacl](https://github.com/RubyCrypto/rbnacl) gem.
   *
   * ```ruby
   * require "rbnacl"
   * require "base64"
   *
   * key = Base64.decode64("+ZYvJDZMHUfBkJdyq5Zm9SKqeuBQ4sj+6sfjlH4CgG0=")
   * public_key = RbNaCl::PublicKey.new(key)
   *
   * box = RbNaCl::Boxes::Sealed.from_public_key(public_key)
   * encrypted_secret = box.encrypt("my_secret")
   *
   * # Print the base64 encoded secret
   * puts Base64.strict_encode64(encrypted_secret)
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/actions#create-or-update-an-environment-secret}
   * Tags: actions
   *
   */
  async actionsCreateOrUpdateEnvironmentSecret(
    params: {
      repository_id: number;
      environment_name: string;
      secret_name: string;
    },
    body: {
      /**
       * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/reference/actions#get-an-environment-public-key) endpoint.
       *
       */
      encrypted_value?: string;
      /**
       * ID of the key you used to encrypt the secret.
       *
       */
      key_id?: string;
    },
  ): Promise<EmptyObject> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/empty-object"}'),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an environment secret
   * Deletes a secret in an environment using the secret name. You must authenticate using an access token with the `repo` scope to use this endpoint. GitHub Apps must have the `secrets` repository permission to use this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/actions#delete-an-environment-secret}
   * Tags: actions
   *
   */
  async actionsDeleteEnvironmentSecret(params: {
    repository_id: number;
    environment_name: string;
    secret_name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List provisioned SCIM groups for an enterprise
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-provisioned-scim-groups-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListProvisionedGroupsEnterprise(params: {
    enterprise: string;
    startIndex?: number;
    count?: number;
    filter?: string;
    excludedAttributes?: string;
  }): Promise<ScimGroupListEnterprise> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/scim/v2/enterprises/{enterprise}/Groups', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.startIndex !== undefined)
      requestContext.setQueryParam(
        'startIndex',
        r.serializeParameter(params.startIndex),
      );
    if (params.count !== undefined)
      requestContext.setQueryParam('count', r.serializeParameter(params.count));
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.excludedAttributes !== undefined)
      requestContext.setQueryParam(
        'excludedAttributes',
        r.serializeParameter(params.excludedAttributes),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/scim-group-list-enterprise"}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Provision a SCIM enterprise group and invite users
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Provision an enterprise group, and invite users to the group. This sends invitation emails to the email address of the invited users to join the GitHub organization that the SCIM group corresponds to.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#provision-a-scim-enterprise-group-and-invite-users}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminProvisionAndInviteEnterpriseGroup(
    params: {
      enterprise: string;
    },
    body: {
      /**
       * The SCIM schema URIs.
       *
       */
      schemas: string[];
      /**
       * The name of the SCIM group. This must match the GitHub organization that the group maps to.
       *
       */
      displayName: string;
      members?: {
        /**
         * The SCIM user ID for a user.
         *
         */
        value: string;
      }[];
    },
  ): Promise<ScimEnterpriseGroup> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/scim/v2/enterprises/{enterprise}/Groups', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-group"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get SCIM provisioning information for an enterprise group
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-group}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminGetProvisioningInformationForEnterpriseGroup(params: {
    enterprise: string;
    scim_group_id: string;
    excludedAttributes?: string;
  }): Promise<ScimEnterpriseGroup> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.excludedAttributes !== undefined)
      requestContext.setQueryParam(
        'excludedAttributes',
        r.serializeParameter(params.excludedAttributes),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-group"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set SCIM information for a provisioned enterprise group
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Replaces an existing provisioned group’s information. You must provide all the information required for the group as if you were provisioning it for the first time. Any existing group information that you don't provide will be removed, including group membership. If you want to only update a specific attribute, use the [Update an attribute for a SCIM enterprise group](#update-an-attribute-for-a-scim-enterprise-group) endpoint instead.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-group}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminSetInformationForProvisionedEnterpriseGroup(
    params: {
      enterprise: string;
      scim_group_id: string;
    },
    body: {
      /**
       * The SCIM schema URIs.
       *
       */
      schemas: string[];
      /**
       * The name of the SCIM group. This must match the GitHub organization that the group maps to.
       *
       */
      displayName: string;
      members?: {
        /**
         * The SCIM user ID for a user.
         *
         */
        value: string;
      }[];
    },
  ): Promise<ScimEnterpriseGroup> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-group"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an attribute for a SCIM enterprise group
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Allows you to change a provisioned group’s individual attributes. To change a group’s values, you must provide a specific Operations JSON format that contains at least one of the add, remove, or replace operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-group}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminUpdateAttributeForEnterpriseGroup(
    params: {
      enterprise: string;
      scim_group_id: string;
    },
    body: {
      /**
       * The SCIM schema URIs.
       *
       */
      schemas: string[];
      /**
       * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
       *
       */
      Operations: {
        op: 'add' | 'Add' | 'remove' | 'Remove' | 'replace' | 'Replace';
        path?: string;
        value?: string | any | any[];
      }[];
    },
  ): Promise<ScimEnterpriseGroup> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-group"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a SCIM group from an enterprise
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-group-from-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminDeleteScimGroupFromEnterprise(params: {
    enterprise: string;
    scim_group_id: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Groups/{scim_group_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List SCIM provisioned identities for an enterprise
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Retrieves a paginated list of all provisioned enterprise members, including pending invitations.
   *
   * When a user with a SAML-provisioned external identity leaves (or is removed from) an enterprise, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
   *   - When a user with a SCIM-provisioned external identity is removed from an enterprise, the account's metadata is preserved to allow the user to re-join the organization in the future.
   *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
   *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
   *
   * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
   *
   * 1. The user is granted access by the IdP and is not a member of the GitHub enterprise.
   *
   * 1. The user attempts to access the GitHub enterprise and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
   *
   * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
   *    - If the user signs in, their GitHub account is linked to this entry.
   *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub enterprise, and the external identity `null` entry remains in place.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#list-scim-provisioned-identities-for-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminListProvisionedIdentitiesEnterprise(params: {
    enterprise: string;
    startIndex?: number;
    count?: number;
    filter?: string;
  }): Promise<ScimUserListEnterprise> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/scim/v2/enterprises/{enterprise}/Users', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.startIndex !== undefined)
      requestContext.setQueryParam(
        'startIndex',
        r.serializeParameter(params.startIndex),
      );
    if (params.count !== undefined)
      requestContext.setQueryParam('count', r.serializeParameter(params.count));
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-user-list-enterprise"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Provision and invite a SCIM enterprise user
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Provision enterprise membership for a user, and send organization invitation emails to the email address.
   *
   * You can optionally include the groups a user will be invited to join. If you do not provide a list of `groups`, the user is provisioned for the enterprise, but no organization invitation emails will be sent.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#provision-and-invite-a-scim-enterprise-user}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminProvisionAndInviteEnterpriseUser(
    params: {
      enterprise: string;
    },
    body: {
      /**
       * The SCIM schema URIs.
       *
       */
      schemas: string[];
      /**
       * The username for the user.
       *
       */
      userName: string;
      name: {
        /**
         * The first name of the user.
         *
         */
        givenName: string;
        /**
         * The last name of the user.
         *
         */
        familyName: string;
      };
      /**
       * List of user emails.
       *
       */
      emails: {
        /**
         * The email address.
         *
         */
        value: string;
        /**
         * The type of email address.
         *
         */
        type: string;
        /**
         * Whether this email address is the primary address.
         *
         */
        primary: boolean;
      }[];
      /**
       * List of SCIM group IDs the user is a member of.
       *
       */
      groups?: {
        value?: string;
      }[];
    },
  ): Promise<ScimEnterpriseUser> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/scim/v2/enterprises/{enterprise}/Users', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-user"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get SCIM provisioning information for an enterprise user
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#get-scim-provisioning-information-for-an-enterprise-user}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminGetProvisioningInformationForEnterpriseUser(params: {
    enterprise: string;
    scim_user_id: string;
  }): Promise<ScimEnterpriseUser> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-user"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set SCIM information for a provisioned enterprise user
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](#update-an-attribute-for-an-enterprise-scim-user) endpoint instead.
   *
   * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
   *
   * **Warning:** Setting `active: false` removes the user from the enterprise, deletes the external identity, and deletes the associated `{scim_user_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#set-scim-information-for-a-provisioned-enterprise-user}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminSetInformationForProvisionedEnterpriseUser(
    params: {
      enterprise: string;
      scim_user_id: string;
    },
    body: {
      /**
       * The SCIM schema URIs.
       *
       */
      schemas: string[];
      /**
       * The username for the user.
       *
       */
      userName: string;
      name: {
        /**
         * The first name of the user.
         *
         */
        givenName: string;
        /**
         * The last name of the user.
         *
         */
        familyName: string;
      };
      /**
       * List of user emails.
       *
       */
      emails: {
        /**
         * The email address.
         *
         */
        value: string;
        /**
         * The type of email address.
         *
         */
        type: string;
        /**
         * Whether this email address is the primary address.
         *
         */
        primary: boolean;
      }[];
      /**
       * List of SCIM group IDs the user is a member of.
       *
       */
      groups?: {
        value?: string;
      }[];
    },
  ): Promise<ScimEnterpriseUser> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-user"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an attribute for a SCIM enterprise user
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   *
   * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
   *
   * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the enterprise, deletes the external identity, and deletes the associated `:scim_user_id`.
   *
   * ```
   * {
   *   "Operations":[{
   *     "op":"replace",
   *     "value":{
   *       "active":false
   *     }
   *   }]
   * }
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#update-an-attribute-for-a-scim-enterprise-user}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminUpdateAttributeForEnterpriseUser(
    params: {
      enterprise: string;
      scim_user_id: string;
    },
    body: {
      /**
       * The SCIM schema URIs.
       *
       */
      schemas: string[];
      /**
       * Array of [SCIM operations](https://tools.ietf.org/html/rfc7644#section-3.5.2).
       *
       */
      Operations: any[];
    },
  ): Promise<ScimEnterpriseUser> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/scim-enterprise-user"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a SCIM user from an enterprise
   * **Note:** The SCIM API endpoints for enterprise accounts are currently in beta and are subject to change.
   * Learn more at {@link https://docs.github.com/rest/reference/enterprise-admin#delete-a-scim-user-from-an-enterprise}
   * Tags: enterprise-admin
   *
   */
  async enterpriseAdminDeleteUserFromEnterprise(params: {
    enterprise: string;
    scim_user_id: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/enterprises/{enterprise}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List SCIM provisioned identities
   * Retrieves a paginated list of all provisioned organization members, including pending invitations. If you provide the `filter` parameter, the resources for all matching provisions members are returned.
   *
   * When a user with a SAML-provisioned external identity leaves (or is removed from) an organization, the account's metadata is immediately removed. However, the returned list of user accounts might not always match the organization or enterprise member list you see on GitHub. This can happen in certain cases where an external identity associated with an organization will not match an organization member:
   *   - When a user with a SCIM-provisioned external identity is removed from an organization, the account's metadata is preserved to allow the user to re-join the organization in the future.
   *   - When inviting a user to join an organization, you can expect to see their external identity in the results before they accept the invitation, or if the invitation is cancelled (or never accepted).
   *   - When a user is invited over SCIM, an external identity is created that matches with the invitee's email address. However, this identity is only linked to a user account when the user accepts the invitation by going through SAML SSO.
   *
   * The returned list of external identities can include an entry for a `null` user. These are unlinked SAML identities that are created when a user goes through the following Single Sign-On (SSO) process but does not sign in to their GitHub account after completing SSO:
   *
   * 1. The user is granted access by the IdP and is not a member of the GitHub organization.
   *
   * 1. The user attempts to access the GitHub organization and initiates the SAML SSO process, and is not currently signed in to their GitHub account.
   *
   * 1. After successfully authenticating with the SAML SSO IdP, the `null` external identity entry is created and the user is prompted to sign in to their GitHub account:
   *    - If the user signs in, their GitHub account is linked to this entry.
   *    - If the user does not sign in (or does not create a new account when prompted), they are not added to the GitHub organization, and the external identity `null` entry remains in place.
   * Learn more at {@link https://docs.github.com/rest/reference/scim#list-scim-provisioned-identities}
   * Tags: scim
   *
   */
  async scimListProvisionedIdentities(params: {
    org: string;
    startIndex?: number;
    count?: number;
    filter?: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/scim/v2/organizations/{org}/Users', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.startIndex !== undefined)
      requestContext.setQueryParam(
        'startIndex',
        r.serializeParameter(params.startIndex),
      );
    if (params.count !== undefined)
      requestContext.setQueryParam('count', r.serializeParameter(params.count));
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Provision and invite a SCIM user
   * Provision organization membership for a user, and send an activation email to the email address.
   * Learn more at {@link https://docs.github.com/rest/reference/scim#provision-and-invite-a-scim-user}
   * Tags: scim
   *
   */
  async scimProvisionAndInviteUser(
    params: {
      org: string;
    },
    body: {
      /**
       * Configured by the admin. Could be an email, login, or username
       * @example "someone@example.com"
       *
       */
      userName: string;
      /**
       * The name of the user, suitable for display to end-users
       * @example "Jon Doe"
       *
       */
      displayName?: string;
      /**
       * @example
       * {
       *   "givenName": "Jane",
       *   "familyName": "User"
       * }
       *
       */
      name: {
        givenName: string;
        familyName: string;
        formatted?: string;
      };
      /**
       * user emails
       * @example
       * [
       *   {
       *     "value": "someone@example.com",
       *     "primary": true
       *   },
       *   {
       *     "value": "another@example.com",
       *     "primary": false
       *   }
       * ]
       *
       */
      emails: {
        value: string;
        primary?: boolean;
        type?: string;
      }[];
      schemas?: string[];
      externalId?: string;
      groups?: string[];
      active?: boolean;
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/scim/v2/organizations/{org}/Users', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('500', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get SCIM provisioning information for a user
   * Learn more at {@link https://docs.github.com/rest/reference/scim#get-scim-provisioning-information-for-a-user}
   * Tags: scim
   *
   */
  async scimGetProvisioningInformationForUser(params: {
    org: string;
    scim_user_id: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/organizations/{org}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a provisioned organization membership
   * Replaces an existing provisioned user's information. You must provide all the information required for the user as if you were provisioning them for the first time. Any existing user information that you don't provide will be removed. If you want to only update a specific attribute, use the [Update an attribute for a SCIM user](https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user) endpoint instead.
   *
   * You must at least provide the required values for the user: `userName`, `name`, and `emails`.
   *
   * **Warning:** Setting `active: false` removes the user from the organization, deletes the external identity, and deletes the associated `{scim_user_id}`.
   * Learn more at {@link https://docs.github.com/rest/reference/scim#set-scim-information-for-a-provisioned-user}
   * Tags: scim
   *
   */
  async scimSetInformationForProvisionedUser(
    params: {
      org: string;
      scim_user_id: string;
    },
    body: {
      schemas?: string[];
      /**
       * The name of the user, suitable for display to end-users
       * @example "Jon Doe"
       *
       */
      displayName?: string;
      externalId?: string;
      groups?: string[];
      active?: boolean;
      /**
       * Configured by the admin. Could be an email, login, or username
       * @example "someone@example.com"
       *
       */
      userName: string;
      /**
       * @example
       * {
       *   "givenName": "Jane",
       *   "familyName": "User"
       * }
       *
       */
      name: {
        givenName: string;
        familyName: string;
        formatted?: string;
      };
      /**
       * user emails
       * @example
       * [
       *   {
       *     "value": "someone@example.com",
       *     "primary": true
       *   },
       *   {
       *     "value": "another@example.com",
       *     "primary": false
       *   }
       * ]
       *
       */
      emails: {
        type?: string;
        value: string;
        primary?: boolean;
      }[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/organizations/{org}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an attribute for a SCIM user
   * Allows you to change a provisioned user's individual attributes. To change a user's values, you must provide a specific `Operations` JSON format that contains at least one of the `add`, `remove`, or `replace` operations. For examples and more information on the SCIM operations format, see the [SCIM specification](https://tools.ietf.org/html/rfc7644#section-3.5.2).
   *
   * **Note:** Complicated SCIM `path` selectors that include filters are not supported. For example, a `path` selector defined as `"path": "emails[type eq \"work\"]"` will not work.
   *
   * **Warning:** If you set `active:false` using the `replace` operation (as shown in the JSON example below), it removes the user from the organization, deletes the external identity, and deletes the associated `:scim_user_id`.
   *
   * ```
   * {
   *   "Operations":[{
   *     "op":"replace",
   *     "value":{
   *       "active":false
   *     }
   *   }]
   * }
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/scim#update-an-attribute-for-a-scim-user}
   * Tags: scim
   *
   */
  async scimUpdateAttributeForUser(
    params: {
      org: string;
      scim_user_id: string;
    },
    body: {
      schemas?: string[];
      /**
       * Set of operations to be performed
       * @example
       * [
       *   {
       *     "op": "replace",
       *     "value": {
       *       "active": false
       *     }
       *   }
       * ]
       *
       */
      Operations: {
        op: 'add' | 'remove' | 'replace';
        path?: string;
        value?:
          | {
              active?: boolean | null;
              userName?: string | null;
              externalId?: string | null;
              givenName?: string | null;
              familyName?: string | null;
            }
          | {
              value?: string;
              primary?: boolean;
            }[]
          | string;
      }[];
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/organizations/{org}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('429', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a SCIM user from an organization
   * Learn more at {@link https://docs.github.com/rest/reference/scim#delete-a-scim-user-from-an-organization}
   * Tags: scim
   *
   */
  async scimDeleteUserFromOrg(params: {
    org: string;
    scim_user_id: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/scim/v2/organizations/{org}/Users/{scim_user_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<ScimError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/scim-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Search code
   * Searches for query terms inside of a file. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for code, you can get text match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would look something like this:
   *
   * `q=addClass+in:file+language:js+repo:jquery/jquery`
   *
   * This query searches for the keyword `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the `jquery/jquery` repository.
   *
   * #### Considerations for code search
   *
   * Due to the complexity of searching code, there are a few restrictions on how searches are performed:
   *
   * *   Only the _default branch_ is considered. In most cases, this will be the `master` branch.
   * *   Only files smaller than 384 KB are searchable.
   * *   You must always include at least one search term when searching source code. For example, searching for [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while [`amazing
   * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
   * Learn more at {@link https://docs.github.com/rest/reference/search#search-code}
   * Tags: search
   *
   */
  async searchCode(params: {
    q: string;
    sort?: 'indexed';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    incomplete_results: boolean;
    items: CodeSearchResultItem[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/search/code', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.q !== undefined)
      requestContext.setQueryParam('q', r.serializeParameter(params.q));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"incomplete_results":{"type":"boolean"},"items":{"type":"array","items":{"$ref":"#/components/schemas/code-search-result-item"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Search commits
   * Find commits via various criteria on the default branch (usually `master`). This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for commits, you can get text match metadata for the **message** field when you provide the `text-match` media type. For more details about how to receive highlighted search results, see [Text match
   * metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would look something like this:
   *
   * `q=repo:octocat/Spoon-Knife+css`
   * Learn more at {@link https://docs.github.com/rest/reference/search#search-commits}
   * Tags: search
   *
   */
  async searchCommits(params: {
    q: string;
    sort?: 'author-date' | 'committer-date';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    incomplete_results: boolean;
    items: CommitSearchResultItem[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/search/commits', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.q !== undefined)
      requestContext.setQueryParam('q', r.serializeParameter(params.q));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"incomplete_results":{"type":"boolean"},"items":{"type":"array","items":{"$ref":"#/components/schemas/commit-search-result-item"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Search issues and pull requests
   * Find issues by state and keyword. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for issues, you can get text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the `text-match` media type. For more details about how to receive highlighted
   * search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find the oldest unresolved Python bugs on Windows. Your query might look something like this.
   *
   * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
   *
   * This query searches for the keyword `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the search results.
   *
   * **Note:** For [user-to-server](https://docs.github.com/developers/apps/identifying-and-authorizing-users-for-github-apps#user-to-server-requests) GitHub App requests, you can't retrieve a combination of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only issues or pull requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
   * Learn more at {@link https://docs.github.com/rest/reference/search#search-issues-and-pull-requests}
   * Tags: search
   *
   */
  async searchIssuesAndPullRequests(params: {
    q: string;
    sort?:
      | 'comments'
      | 'reactions'
      | 'reactions-+1'
      | 'reactions--1'
      | 'reactions-smile'
      | 'reactions-thinking_face'
      | 'reactions-heart'
      | 'reactions-tada'
      | 'interactions'
      | 'created'
      | 'updated';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    incomplete_results: boolean;
    items: IssueSearchResultItem[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/search/issues', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.q !== undefined)
      requestContext.setQueryParam('q', r.serializeParameter(params.q));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"incomplete_results":{"type":"boolean"},"items":{"type":"array","items":{"$ref":"#/components/schemas/issue-search-result-item"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Search labels
   * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for labels, you can get text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to find labels in the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like this:
   *
   * `q=bug+defect+enhancement&repository_id=64778136`
   *
   * The labels that best match the query appear first in the search results.
   * Learn more at {@link https://docs.github.com/rest/reference/search#search-labels}
   * Tags: search
   *
   */
  async searchLabels(params: {
    repository_id: number;
    q: string;
    sort?: 'created' | 'updated';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    incomplete_results: boolean;
    items: LabelSearchResultItem[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/search/labels', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.repository_id !== undefined)
      requestContext.setQueryParam(
        'repository_id',
        r.serializeParameter(params.repository_id),
      );
    if (params.q !== undefined)
      requestContext.setQueryParam('q', r.serializeParameter(params.q));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"incomplete_results":{"type":"boolean"},"items":{"type":"array","items":{"$ref":"#/components/schemas/label-search-result-item"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Search repositories
   * Find repositories via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for repositories, you can get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for popular Tetris repositories written in assembly code, your query might look like this:
   *
   * `q=tetris+language:assembly&sort=stars&order=desc`
   *
   * This query searches for repositories with the word `tetris` in the name, the description, or the README. The results are limited to repositories where the primary language is assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the search results.
   *
   * When you include the `mercy` preview header, you can also search for multiple topics by adding more `topic:` instances. For example, your query might look like this:
   *
   * `q=topic:ruby+topic:rails`
   * Learn more at {@link https://docs.github.com/rest/reference/search#search-repositories}
   * Tags: search
   *
   */
  async searchRepos(params: {
    q: string;
    sort?: 'stars' | 'forks' | 'help-wanted-issues' | 'updated';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    incomplete_results: boolean;
    items: RepoSearchResultItem[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/search/repositories', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.q !== undefined)
      requestContext.setQueryParam('q', r.serializeParameter(params.q));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"incomplete_results":{"type":"boolean"},"items":{"type":"array","items":{"$ref":"#/components/schemas/repo-search-result-item"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Search topics
   * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination). See "[Searching topics](https://help.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
   *
   * When searching for topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look like this:
   *
   * `q=ruby+is:featured`
   *
   * This query searches for topics with the keyword `ruby` and limits the results to find only topics that are featured. The topics that are the best match for the query appear first in the search results.
   * Learn more at {@link https://docs.github.com/rest/reference/search#search-topics}
   * Tags: search
   *
   */
  async searchTopics(params: {
    q: string;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    incomplete_results: boolean;
    items: TopicSearchResultItem[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/search/topics', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.q !== undefined)
      requestContext.setQueryParam('q', r.serializeParameter(params.q));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"incomplete_results":{"type":"boolean"},"items":{"type":"array","items":{"$ref":"#/components/schemas/topic-search-result-item"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Search users
   * Find users via various criteria. This method returns up to 100 results [per page](https://docs.github.com/rest/overview/resources-in-the-rest-api#pagination).
   *
   * When searching for users, you can get text match metadata for the issue **login**, **email**, and **name** fields when you pass the `text-match` media type. For more details about highlighting search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata). For more details about how to receive highlighted search results, see [Text match metadata](https://docs.github.com/rest/reference/search#text-match-metadata).
   *
   * For example, if you're looking for a list of popular users, you might try this query:
   *
   * `q=tom+repos:%3E42+followers:%3E1000`
   *
   * This query searches for users with the name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
   * Learn more at {@link https://docs.github.com/rest/reference/search#search-users}
   * Tags: search
   *
   */
  async searchUsers(params: {
    q: string;
    sort?: 'followers' | 'repositories' | 'joined';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    incomplete_results: boolean;
    items: UserSearchResultItem[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/search/users', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.q !== undefined)
      requestContext.setQueryParam('q', r.serializeParameter(params.q));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.order !== undefined)
      requestContext.setQueryParam('order', r.serializeParameter(params.order));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"incomplete_results":{"type":"boolean"},"items":{"type":"array","items":{"$ref":"#/components/schemas/user-search-result-item"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('503', res.httpStatusCode))
      throw new r.ApiException<{
        code?: string;
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"code":{"type":"string"},"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the [Get a team by name](https://docs.github.com/rest/reference/teams#get-a-team-by-name) endpoint.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#get-a-team-legacy}
   * Tags: teams
   *
   */
  async teamsGetLegacy(params: { team_id: number }): Promise<TeamFull> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-full"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a team](https://docs.github.com/rest/reference/teams#update-a-team) endpoint.
   *
   * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
   *
   * **Note:** With nested teams, the `privacy` for parent teams cannot be `secret`.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#update-a-team-legacy}
   * Tags: teams
   *
   */
  async teamsUpdateLegacy(
    params: {
      team_id: number;
    },
    body: {
      /**
       * The name of the team.
       *
       */
      name: string;
      /**
       * The description of the team.
       *
       */
      description?: string;
      /**
       * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
       * **For a non-nested team:**
       * \* `secret` - only visible to organization owners and members of this team.
       * \* `closed` - visible to all members of this organization.
       * **For a parent or child team:**
       * \* `closed` - visible to all members of this organization.
       *
       */
      privacy?: 'secret' | 'closed';
      /**
       * **Deprecated**. The permission that new repositories will be added to the team with when none is specified. Can be one of:
       * \* `pull` - team members can pull, but not push to or administer newly-added repositories.
       * \* `push` - team members can pull and push, but not administer newly-added repositories.
       * \* `admin` - team members can pull, push and administer newly-added repositories.
       * @defaultValue "pull"
       *
       */
      permission?: 'pull' | 'push' | 'admin';
      /**
       * The ID of a team to set as the parent team.
       *
       */
      parent_team_id?: number | null;
    },
  ): Promise<TeamFull> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-full"}'),
        this.resolver,
      );
    if (r.isCodeInRange('201', res.httpStatusCode))
      throw new r.ApiException<TeamFull>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/team-full"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a team](https://docs.github.com/rest/reference/teams#delete-a-team) endpoint.
   *
   * To delete a team, the authenticated user must be an organization owner or team maintainer.
   *
   * If you are an organization owner, deleting a parent team will delete all of its child teams as well.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#delete-a-team-legacy}
   * Tags: teams
   *
   */
  async teamsDeleteLegacy(params: { team_id: number }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List discussions (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List discussions`](https://docs.github.com/rest/reference/teams#list-discussions) endpoint.
   *
   * List all discussions on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-discussions-legacy}
   * Tags: teams
   *
   */
  async teamsListDiscussionsLegacy(params: {
    team_id: number;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<TeamDiscussion[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/discussions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team-discussion"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create a discussion`](https://docs.github.com/rest/reference/teams#create-a-discussion) endpoint.
   *
   * Creates a new discussion post on a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#create-a-discussion-legacy}
   * Tags: teams
   *
   */
  async teamsCreateDiscussionLegacy(
    params: {
      team_id: number;
    },
    body: {
      /**
       * The discussion post's title.
       *
       */
      title: string;
      /**
       * The discussion post's body text.
       *
       */
      body: string;
      /**
       * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
       *
       */
      private?: boolean;
    },
  ): Promise<TeamDiscussion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/discussions', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion](https://docs.github.com/rest/reference/teams#get-a-discussion) endpoint.
   *
   * Get a specific discussion on a team's page. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-a-discussion-legacy}
   * Tags: teams
   *
   */
  async teamsGetDiscussionLegacy(params: {
    team_id: number;
    discussion_number: number;
  }): Promise<TeamDiscussion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion](https://docs.github.com/rest/reference/teams#update-a-discussion) endpoint.
   *
   * Edits the title and body text of a discussion post. Only the parameters you provide are updated. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#update-a-discussion-legacy}
   * Tags: teams
   *
   */
  async teamsUpdateDiscussionLegacy(
    params: {
      team_id: number;
      discussion_number: number;
    },
    body: {
      /**
       * The discussion post's title.
       *
       */
      title?: string;
      /**
       * The discussion post's body text.
       *
       */
      body?: string;
    },
  ): Promise<TeamDiscussion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Delete a discussion`](https://docs.github.com/rest/reference/teams#delete-a-discussion) endpoint.
   *
   * Delete a discussion from a team's page. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#delete-a-discussion-legacy}
   * Tags: teams
   *
   */
  async teamsDeleteDiscussionLegacy(params: {
    team_id: number;
    discussion_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List discussion comments (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List discussion comments](https://docs.github.com/rest/reference/teams#list-discussion-comments) endpoint.
   *
   * List all comments on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-discussion-comments-legacy}
   * Tags: teams
   *
   */
  async teamsListDiscussionCommentsLegacy(params: {
    team_id: number;
    discussion_number: number;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<TeamDiscussionComment[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/comments',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team-discussion-comment"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Create a discussion comment](https://docs.github.com/rest/reference/teams#create-a-discussion-comment) endpoint.
   *
   * Creates a new comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   *
   * This endpoint triggers [notifications](https://docs.github.com/en/github/managing-subscriptions-and-notifications-on-github/about-notifications). Creating content too quickly using this endpoint may result in secondary rate limiting. See "[Secondary rate limits](https://docs.github.com/rest/overview/resources-in-the-rest-api#secondary-rate-limits)" and "[Dealing with secondary rate limits](https://docs.github.com/rest/guides/best-practices-for-integrators#dealing-with-secondary-rate-limits)" for details.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#create-a-discussion-comment-legacy}
   * Tags: teams
   *
   */
  async teamsCreateDiscussionCommentLegacy(
    params: {
      team_id: number;
      discussion_number: number;
    },
    body: {
      /**
       * The discussion comment's body text.
       *
       */
      body: string;
    },
  ): Promise<TeamDiscussionComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/comments',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion-comment"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get a discussion comment](https://docs.github.com/rest/reference/teams#get-a-discussion-comment) endpoint.
   *
   * Get a specific comment on a team discussion. OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-a-discussion-comment-legacy}
   * Tags: teams
   *
   */
  async teamsGetDiscussionCommentLegacy(params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
  }): Promise<TeamDiscussionComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion-comment"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Update a discussion comment](https://docs.github.com/rest/reference/teams#update-a-discussion-comment) endpoint.
   *
   * Edits the body text of a discussion comment. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#update-a-discussion-comment-legacy}
   * Tags: teams
   *
   */
  async teamsUpdateDiscussionCommentLegacy(
    params: {
      team_id: number;
      discussion_number: number;
      comment_number: number;
    },
    body: {
      /**
       * The discussion comment's body text.
       *
       */
      body: string;
    },
  ): Promise<TeamDiscussionComment> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
        params,
      ),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-discussion-comment"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Delete a discussion comment](https://docs.github.com/rest/reference/teams#delete-a-discussion-comment) endpoint.
   *
   * Deletes a comment on a team discussion. OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#delete-a-discussion-comment-legacy}
   * Tags: teams
   *
   */
  async teamsDeleteDiscussionCommentLegacy(params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for a team discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion comment`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
   *
   * List the reactions to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-comment-legacy}
   * Tags: reactions
   *
   */
  async reactionsListForTeamDiscussionCommentLegacy(params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for a team discussion comment (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Create reaction for a team discussion comment](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion-comment)" endpoint.
   *
   * Create a reaction to a [team discussion comment](https://docs.github.com/rest/reference/teams#discussion-comments). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion comment.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-comment-legacy}
   * Tags: reactions
   *
   */
  async reactionsCreateForTeamDiscussionCommentLegacy(
    params: {
      team_id: number;
      discussion_number: number;
      comment_number: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion comment.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List reactions for a team discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List reactions for a team discussion`](https://docs.github.com/rest/reference/reactions#list-reactions-for-a-team-discussion) endpoint.
   *
   * List the reactions to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `read:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/reactions/#list-reactions-for-a-team-discussion-legacy}
   * Tags: reactions
   *
   */
  async reactionsListForTeamDiscussionLegacy(params: {
    team_id: number;
    discussion_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  }): Promise<Reaction[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/reactions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.content !== undefined)
      requestContext.setQueryParam(
        'content',
        r.serializeParameter(params.content),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/reaction"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create reaction for a team discussion (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create reaction for a team discussion`](https://docs.github.com/rest/reference/reactions#create-reaction-for-a-team-discussion) endpoint.
   *
   * Create a reaction to a [team discussion](https://docs.github.com/rest/reference/teams#discussions). OAuth access tokens require the `write:discussion` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/). A response with an HTTP `200` status means that you already added the reaction type to this team discussion.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/reactions/#create-reaction-for-a-team-discussion-legacy}
   * Tags: reactions
   *
   */
  async reactionsCreateForTeamDiscussionLegacy(
    params: {
      team_id: number;
      discussion_number: number;
    },
    body: {
      /**
       * The [reaction type](https://docs.github.com/rest/reference/reactions#reaction-types) to add to the team discussion.
       *
       */
      content:
        | '+1'
        | '-1'
        | 'laugh'
        | 'confused'
        | 'heart'
        | 'hooray'
        | 'rocket'
        | 'eyes';
    },
  ): Promise<Reaction> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/teams/{team_id}/discussions/{discussion_number}/reactions',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/reaction"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List pending team invitations (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List pending team invitations`](https://docs.github.com/rest/reference/teams#list-pending-team-invitations) endpoint.
   *
   * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member, the `login` field in the return hash will be `null`.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-pending-team-invitations-legacy}
   * Tags: teams
   *
   */
  async teamsListPendingInvitationsLegacy(params: {
    team_id: number;
    per_page?: number;
    page?: number;
  }): Promise<OrganizationInvitation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/invitations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/organization-invitation"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List team members (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team members`](https://docs.github.com/rest/reference/teams#list-team-members) endpoint.
   *
   * Team members will include the members of child teams.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-team-members-legacy}
   * Tags: teams
   *
   */
  async teamsListMembersLegacy(params: {
    team_id: number;
    role?: 'member' | 'maintainer' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/members', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.role !== undefined)
      requestContext.setQueryParam('role', r.serializeParameter(params.role));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get team member (Legacy)
   * The "Get team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint instead. It allows you to get both active and pending memberships.
   *
   * To list members in a team, the team must be visible to the authenticated user.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-team-member-legacy}
   * Tags: teams
   *
   */
  async teamsGetMemberLegacy(params: {
    team_id: number;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/members/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add team member (Legacy)
   * The "Add team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint instead. It allows you to invite new organization members to your teams.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in the team they're changing. The person being added to the team must be a member of the team's organization.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#add-team-member-legacy}
   * Tags: teams
   *
   */
  async teamsAddMemberLegacy(params: {
    team_id: number;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/members/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove team member (Legacy)
   * The "Remove team member" endpoint (described below) is deprecated.
   *
   * We recommend using the [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint instead. It allows you to remove both active and pending memberships.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#remove-team-member-legacy}
   * Tags: teams
   *
   */
  async teamsRemoveMemberLegacy(params: {
    team_id: number;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/members/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get team membership for a user (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Get team membership for a user](https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user) endpoint.
   *
   * Team members will include the members of child teams.
   *
   * To get a user's membership with a team, the team must be visible to the authenticated user.
   *
   * **Note:**
   * The response contains the `state` of the membership and the member's `role`.
   *
   * The `role` for organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a team](https://docs.github.com/rest/reference/teams#create-a-team).
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#get-team-membership-for-a-user-legacy}
   * Tags: teams
   *
   */
  async teamsGetMembershipForUserLegacy(params: {
    team_id: number;
    username: string;
  }): Promise<TeamMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/memberships/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add or update team membership for a user (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team membership for a user](https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * If the user is already a member of the team's organization, this endpoint will add the user to the team. To add a membership between an organization member and a team, the authenticated user must be an organization owner or a team maintainer.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   *
   * If the user is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the membership will transition to the "active" state and the user will be added as a member of the team. To add a membership between an unaffiliated user and a team, the authenticated user must be an organization owner.
   *
   * If the user is already a member of the team, this endpoint will update the role of the team member's role. To update the membership of a team member, the authenticated user must be an organization owner or a team maintainer.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#add-or-update-team-membership-for-a-user-legacy}
   * Tags: teams
   *
   */
  async teamsAddOrUpdateMembershipForUserLegacy(
    params: {
      team_id: number;
      username: string;
    },
    body: {
      /**
       * The role that this user should have in the team. Can be one of:
       * \* `member` - a normal member of the team.
       * \* `maintainer` - a team maintainer. Able to add/remove other team members, promote other team members to team maintainer, and edit the team's name and description.
       * @defaultValue "member"
       *
       */
      role?: 'member' | 'maintainer';
    },
  ): Promise<TeamMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/memberships/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove team membership for a user (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove team membership for a user](https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be an owner of the organization that the team is associated with. Removing team membership does not delete the user, it just removes their membership from the team.
   *
   * **Note:** When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams between your identity provider and GitHub](https://help.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#remove-team-membership-for-a-user-legacy}
   * Tags: teams
   *
   */
  async teamsRemoveMembershipForUserLegacy(params: {
    team_id: number;
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/memberships/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List team projects (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List team projects`](https://docs.github.com/rest/reference/teams#list-team-projects) endpoint.
   *
   * Lists the organization projects for a team.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#list-team-projects-legacy}
   * Tags: teams
   *
   */
  async teamsListProjectsLegacy(params: {
    team_id: number;
    per_page?: number;
    page?: number;
  }): Promise<TeamProject[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/projects', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team-project"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check team permissions for a project (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a project](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-project) endpoint.
   *
   * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a parent team.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-project-legacy}
   * Tags: teams
   *
   */
  async teamsCheckPermissionsForProjectLegacy(params: {
    team_id: number;
    project_id: number;
  }): Promise<TeamProject> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/projects/{project_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-project"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add or update team project permissions (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Add or update team project permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-project-permissions) endpoint.
   *
   * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the authenticated user must have `admin` permissions for the project. The project and team must be part of the same organization.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#add-or-update-team-project-permissions-legacy}
   * Tags: teams
   *
   */
  async teamsAddOrUpdateProjectPermissionsLegacy(
    params: {
      team_id: number;
      project_id: number;
    },
    body: {
      /**
       * The permission to grant to the team for this project. Can be one of:
       * \* `read` - team members can read, but not write to or administer this project.
       * \* `write` - team members can read and write, but not administer this project.
       * \* `admin` - team members can read, write and administer this project.
       * Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
       *
       */
      permission?: 'read' | 'write' | 'admin';
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/projects/{project_id}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<{
        message?: string;
        documentation_url?: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a project from a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a project from a team](https://docs.github.com/rest/reference/teams#remove-a-project-from-a-team) endpoint.
   *
   * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin` access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#remove-a-project-from-a-team-legacy}
   * Tags: teams
   *
   */
  async teamsRemoveProjectLegacy(params: {
    team_id: number;
    project_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/projects/{project_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List team repositories (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [List team repositories](https://docs.github.com/rest/reference/teams#list-team-repositories) endpoint.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#list-team-repositories-legacy}
   * Tags: teams
   *
   */
  async teamsListReposLegacy(params: {
    team_id: number;
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/repos', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check team permissions for a repository (Legacy)
   * **Note**: Repositories inherited through a parent team will also be checked.
   *
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Check team permissions for a repository](https://docs.github.com/rest/reference/teams#check-team-permissions-for-a-repository) endpoint.
   *
   * You can also get information about the specified repository, including what permissions the team grants on it, by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#check-team-permissions-for-a-repository-legacy}
   * Tags: teams
   *
   */
  async teamsCheckPermissionsForRepoLegacy(params: {
    team_id: number;
    owner: string;
    repo: string;
  }): Promise<TeamRepository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/repos/{owner}/{repo}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/team-repository"}'),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add or update team repository permissions (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new "[Add or update team repository permissions](https://docs.github.com/rest/reference/teams#add-or-update-team-repository-permissions)" endpoint.
   *
   * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin access to the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a repository to a team that is not owned by the organization.
   *
   * Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#add-or-update-team-repository-permissions-legacy}
   * Tags: teams
   *
   */
  async teamsAddOrUpdateRepoPermissionsLegacy(
    params: {
      team_id: number;
      owner: string;
      repo: string;
    },
    body: {
      /**
       * The permission to grant the team on this repository. Can be one of:
       * \* `pull` - team members can pull, but not push to or administer this repository.
       * \* `push` - team members can pull and push, but not administer this repository.
       * \* `admin` - team members can pull, push and administer this repository.
       *
       * If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
       *
       */
      permission?: 'pull' | 'push' | 'admin';
    },
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/repos/{owner}/{repo}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a repository from a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [Remove a repository from a team](https://docs.github.com/rest/reference/teams#remove-a-repository-from-a-team) endpoint.
   *
   * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from a team as an organization member, the authenticated user must have admin access to the repository and must be able to see the team. NOTE: This does not delete the repository, it just removes it from the team.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#remove-a-repository-from-a-team-legacy}
   * Tags: teams
   *
   */
  async teamsRemoveRepoLegacy(params: {
    team_id: number;
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/repos/{owner}/{repo}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List IdP groups for a team (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List IdP groups for a team`](https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * List IdP groups connected to a team on GitHub.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-idp-groups-for-a-team-legacy}
   * Tags: teams
   *
   */
  async teamsListIdpGroupsForLegacy(params: {
    team_id: number;
  }): Promise<GroupMapping> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/team-sync/group-mappings', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/group-mapping"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create or update IdP group connections (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`Create or update IdP group connections`](https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections) endpoint.
   *
   * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's products](https://help.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help documentation.
   *
   * Creates, updates, or removes a connection between a team and an IdP group. When adding groups to a team, you must include all new and existing groups to avoid replacing existing groups with the new ones. Specifying an empty `groups` array will remove all connections for a team.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams#create-or-update-idp-group-connections-legacy}
   * Tags: teams
   *
   */
  async teamsCreateOrUpdateIdpGroupConnectionsLegacy(
    params: {
      team_id: number;
    },
    body: {
      /**
       * The IdP groups you want to connect to a GitHub team. When updating, the new `groups` object will replace the original one. You must include any existing groups that you don't want to remove.
       *
       */
      groups: {
        /**
         * ID of the IdP group.
         *
         */
        group_id: string;
        /**
         * Name of the IdP group.
         *
         */
        group_name: string;
        /**
         * Description of the IdP group.
         *
         */
        group_description: string;
        /**
         * @example "\"caceab43fc9ffa20081c\""
         *
         */
        id?: string;
        /**
         * @example "\"external-team-6c13e7288ef7\""
         *
         */
        name?: string;
        /**
         * @example "\"moar cheese pleese\""
         *
         */
        description?: string;
      }[];
      /**
       * @example "\"I am not a timestamp\""
       *
       */
      synced_at?: string;
    },
  ): Promise<GroupMapping> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/team-sync/group-mappings', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/group-mapping"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List child teams (Legacy)
   * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new [`List child teams`](https://docs.github.com/rest/reference/teams#list-child-teams) endpoint.
   * @deprecated
   * Learn more at {@link https://docs.github.com/rest/reference/teams/#list-child-teams-legacy}
   * Tags: teams
   *
   */
  async teamsListChildLegacy(params: {
    team_id: number;
    per_page?: number;
    page?: number;
  }): Promise<Team[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/teams/{team_id}/teams', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the authenticated user
   * If the authenticated user is authenticated through basic authentication or OAuth with the `user` scope, then the response lists public and private profile information.
   *
   * If the authenticated user is authenticated through OAuth without the `user` scope, then the response lists only public profile information.
   * Learn more at {@link https://docs.github.com/rest/reference/users#get-the-authenticated-user}
   * Tags: users
   *
   */
  async usersGetAuthenticated(params: {}): Promise<PrivateUser | PublicUser> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"oneOf":[{"$ref":"#/components/schemas/private-user"},{"$ref":"#/components/schemas/public-user"}]}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update the authenticated user
   * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via the API.
   * Learn more at {@link https://docs.github.com/rest/reference/users/#update-the-authenticated-user}
   * Tags: users
   *
   */
  async usersUpdateAuthenticated(
    params: {},
    body: {
      /**
       * The new name of the user.
       * @example "Omar Jahandar"
       *
       */
      name?: string;
      /**
       * The publicly visible email address of the user.
       * @example "omar@example.com"
       *
       */
      email?: string;
      /**
       * The new blog URL of the user.
       * @example "blog.example.com"
       *
       */
      blog?: string;
      /**
       * The new Twitter username of the user.
       * @example "therealomarj"
       *
       */
      twitter_username?: string | null;
      /**
       * The new company of the user.
       * @example "Acme corporation"
       *
       */
      company?: string;
      /**
       * The new location of the user.
       * @example "Berlin, Germany"
       *
       */
      location?: string;
      /**
       * The new hiring availability of the user.
       *
       */
      hireable?: boolean;
      /**
       * The new short biography of the user.
       *
       */
      bio?: string;
    },
  ): Promise<PrivateUser> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/private-user"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List users blocked by the authenticated user
   * List the users you've blocked on your personal account.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-users-blocked-by-the-authenticated-user}
   * Tags: users
   *
   */
  async usersListBlockedByAuthenticated(params: {}): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/blocks', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a user is blocked by the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/users#check-if-a-user-is-blocked-by-the-authenticated-user}
   * Tags: users
   *
   */
  async usersCheckBlocked(params: { username: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/blocks/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Block a user
   * Learn more at {@link https://docs.github.com/rest/reference/users#block-a-user}
   * Tags: users
   *
   */
  async usersBlock(params: { username: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/blocks/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unblock a user
   * Learn more at {@link https://docs.github.com/rest/reference/users#unblock-a-user}
   * Tags: users
   *
   */
  async usersUnblock(params: { username: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/blocks/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set primary email visibility for the authenticated user
   * Sets the visibility for your primary email addresses.
   * Learn more at {@link https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersSetPrimaryEmailVisibilityForAuthenticated(
    params: {},
    body: {
      /**
       * Denotes whether an email is publicly visible.
       *
       */
      visibility: 'public' | 'private';
    },
  ): Promise<Email[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/email/visibility', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/email"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List email addresses for the authenticated user
   * Lists all of your email addresses, and specifies which one is visible to the public. This endpoint is accessible with the `user:email` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-email-addresses-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersListEmailsForAuthenticated(params: {
    per_page?: number;
    page?: number;
  }): Promise<Email[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/emails', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/email"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add an email address for the authenticated user
   * This endpoint is accessible with the `user` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/users#add-an-email-address-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersAddEmailForAuthenticated(
    params: {},
    body:
      | {
          /**
           * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
           * @example []
           *
           */
          emails: string[];
        }
      | string[]
      | string,
  ): Promise<Email[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/emails', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/email"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete an email address for the authenticated user
   * This endpoint is accessible with the `user` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/users#delete-an-email-address-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersDeleteEmailForAuthenticated(
    params: {},
    body:
      | {
          /**
           * Email addresses associated with the GitHub user account.
           *
           */
          emails: string[];
        }
      | string[]
      | string,
  ): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/emails', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List followers of the authenticated user
   * Lists the people following the authenticated user.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-followers-of-the-authenticated-user}
   * Tags: users
   *
   */
  async usersListFollowersForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/followers', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List the people the authenticated user follows
   * Lists the people who the authenticated user follows.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-the-people-the-authenticated-user-follows}
   * Tags: users
   *
   */
  async usersListFollowedByAuthenticated(params: {
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/following', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a person is followed by the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/users#check-if-a-person-is-followed-by-the-authenticated-user}
   * Tags: users
   *
   */
  async usersCheckPersonIsFollowedByAuthenticated(params: {
    username: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/following/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Follow a user
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   *
   * Following a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/users#follow-a-user}
   * Tags: users
   *
   */
  async usersFollow(params: { username: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/following/{username}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unfollow a user
   * Unfollowing a user requires the user to be logged in and authenticated with basic auth or OAuth with the `user:follow` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/users#unfollow-a-user}
   * Tags: users
   *
   */
  async usersUnfollow(params: { username: string }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/following/{username}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List GPG keys for the authenticated user
   * Lists the current user's GPG keys. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-gpg-keys-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersListGpgKeysForAuthenticated(params: {
    per_page?: number;
    page?: number;
  }): Promise<GpgKey[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/gpg_keys', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/gpg-key"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a GPG key for the authenticated user
   * Adds a GPG key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#create-a-gpg-key-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersCreateGpgKeyForAuthenticated(
    params: {},
    body: {
      /**
       * A GPG key in ASCII-armored format.
       *
       */
      armored_public_key: string;
    },
  ): Promise<GpgKey> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/gpg_keys', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gpg-key"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a GPG key for the authenticated user
   * View extended details for a single GPG key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#get-a-gpg-key-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersGetGpgKeyForAuthenticated(params: {
    gpg_key_id: number;
  }): Promise<GpgKey> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/gpg_keys/{gpg_key_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/gpg-key"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a GPG key for the authenticated user
   * Removes a GPG key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:gpg_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#delete-a-gpg-key-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersDeleteGpgKeyForAuthenticated(params: {
    gpg_key_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/gpg_keys/{gpg_key_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List app installations accessible to the user access token
   * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You can find the permissions for the installation under the `permissions` key.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-app-installations-accessible-to-the-user-access-token}
   * Tags: apps
   *
   */
  async appsListInstallationsForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    installations: Installation[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/installations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"installations":{"type":"array","items":{"$ref":"#/components/schemas/installation"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories accessible to the user access token
   * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an installation.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   *
   * You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint.
   *
   * The access the user has to each repository is included in the hash under the `permissions` key.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-repositories-accessible-to-the-user-access-token}
   * Tags: apps
   *
   */
  async appsListInstallationReposForAuthenticatedUser(params: {
    installation_id: number;
    per_page?: number;
    page?: number;
  }): Promise<{
    total_count: number;
    repository_selection?: string;
    repositories: Repository[];
  }> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/installations/{installation_id}/repositories',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"object","properties":{"total_count":{"type":"integer"},"repository_selection":{"type":"string"},"repositories":{"type":"array","items":{"$ref":"#/components/schemas/repository"}}}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Add a repository to an app installation
   * Add a single repository to an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#add-a-repository-to-an-app-installation}
   * Tags: apps
   *
   */
  async appsAddRepoToInstallation(params: {
    installation_id: number;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/installations/{installation_id}/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove a repository from an app installation
   * Remove a single repository from an installation. The authenticated user must have admin access to the repository.
   *
   * You must use a personal access token (which you can create via the [command line](https://docs.github.com/github/authenticating-to-github/creating-a-personal-access-token) or [Basic Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#remove-a-repository-from-an-app-installation}
   * Tags: apps
   *
   */
  async appsRemoveRepoFromInstallation(params: {
    installation_id: number;
    repository_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/installations/{installation_id}/repositories/{repository_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get interaction restrictions for your public repositories
   * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#get-interaction-restrictions-for-your-public-repositories}
   * Tags: interactions
   *
   */
  async interactionsGetRestrictionsForAuthenticatedUser(params: {}): Promise<
    InteractionLimitResponse | any
  > {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/interaction-limits', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"anyOf":[{"$ref":"#/components/schemas/interaction-limit-response"},{"type":"object","properties":{},"additionalProperties":false}]}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('204', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Set interaction restrictions for your public repositories
   * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the user.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#set-interaction-restrictions-for-your-public-repositories}
   * Tags: interactions
   *
   */
  async interactionsSetRestrictionsForAuthenticatedUser(
    params: {},
    body: InteractionLimit,
  ): Promise<InteractionLimitResponse> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/interaction-limits', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"$ref":"#/components/schemas/interaction-limit-response"}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Remove interaction restrictions from your public repositories
   * Removes any interaction restrictions from your public repositories.
   * Learn more at {@link https://docs.github.com/rest/reference/interactions#remove-interaction-restrictions-from-your-public-repositories}
   * Tags: interactions
   *
   */
  async interactionsRemoveRestrictionsForAuthenticatedUser(params: {}): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/interaction-limits', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List user account issues assigned to the authenticated user
   * List issues across owned and member repositories assigned to the authenticated user.
   *
   * **Note**: GitHub's REST API v3 considers every pull request an issue, but not every issue is a pull request. For this
   * reason, "Issues" endpoints may return both issues and pull requests in the response. You can identify pull requests by
   * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
   * request id, use the "[List pull requests](https://docs.github.com/rest/reference/pulls#list-pull-requests)" endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/issues#list-user-account-issues-assigned-to-the-authenticated-user}
   * Tags: issues
   *
   */
  async issuesListForAuthenticatedUser(params: {
    filter?:
      | 'assigned'
      | 'created'
      | 'mentioned'
      | 'subscribed'
      | 'repos'
      | 'all';
    state?: 'open' | 'closed' | 'all';
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<Issue[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/issues', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.filter !== undefined)
      requestContext.setQueryParam(
        'filter',
        r.serializeParameter(params.filter),
      );
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.labels !== undefined)
      requestContext.setQueryParam(
        'labels',
        r.serializeParameter(params.labels),
      );
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/issue"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public SSH keys for the authenticated user
   * Lists the public SSH keys for the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-public-ssh-keys-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersListPublicSshKeysForAuthenticated(params: {
    per_page?: number;
    page?: number;
  }): Promise<Key[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/keys', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/key"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a public SSH key for the authenticated user
   * Adds a public SSH key to the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth, or OAuth with at least `write:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#create-a-public-ssh-key-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersCreatePublicSshKeyForAuthenticated(
    params: {},
    body: {
      /**
       * A descriptive name for the new key.
       * @example "Personal MacBook Air"
       *
       */
      title?: string;
      /**
       * The public SSH key to add to your GitHub account.
       *
       */
      key: string;
    },
  ): Promise<Key> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/keys', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/key"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a public SSH key for the authenticated user
   * View extended details for a single public SSH key. Requires that you are authenticated via Basic Auth or via OAuth with at least `read:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#get-a-public-ssh-key-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersGetPublicSshKeyForAuthenticated(params: {
    key_id: number;
  }): Promise<Key> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/keys/{key_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/key"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a public SSH key for the authenticated user
   * Removes a public SSH key from the authenticated user's GitHub account. Requires that you are authenticated via Basic Auth or via OAuth with at least `admin:public_key` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/users#delete-a-public-ssh-key-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersDeletePublicSshKeyForAuthenticated(params: {
    key_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/keys/{key_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List subscriptions for the authenticated user
   * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user}
   * Tags: apps
   *
   */
  async appsListSubscriptionsForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<UserMarketplacePurchase[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/marketplace_purchases', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/user-marketplace-purchase"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List subscriptions for the authenticated user (stubbed)
   * Lists the active subscriptions for the authenticated user. You must use a [user-to-server OAuth access token](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/#identifying-users-on-your-site), created for a user who has authorized your GitHub App, to access this endpoint. . OAuth Apps must authenticate using an [OAuth token](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/apps#list-subscriptions-for-the-authenticated-user-stubbed}
   * Tags: apps
   *
   */
  async appsListSubscriptionsForAuthenticatedUserStubbed(params: {
    per_page?: number;
    page?: number;
  }): Promise<UserMarketplacePurchase[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/marketplace_purchases/stubbed', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/user-marketplace-purchase"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization memberships for the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-organization-memberships-for-the-authenticated-user}
   * Tags: orgs
   *
   */
  async orgsListMembershipsForAuthenticatedUser(params: {
    state?: 'active' | 'pending';
    per_page?: number;
    page?: number;
  }): Promise<OrgMembership[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/memberships/orgs', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/org-membership"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get an organization membership for the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#get-an-organization-membership-for-the-authenticated-user}
   * Tags: orgs
   *
   */
  async orgsGetMembershipForAuthenticatedUser(params: {
    org: string;
  }): Promise<OrgMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/memberships/orgs/{org}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/org-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Update an organization membership for the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#update-an-organization-membership-for-the-authenticated-user}
   * Tags: orgs
   *
   */
  async orgsUpdateMembershipForAuthenticatedUser(
    params: {
      org: string;
    },
    body: {
      /**
       * The state that the membership should be in. Only `"active"` will be accepted.
       *
       */
      state: 'active';
    },
  ): Promise<OrgMembership> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/memberships/orgs/{org}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/org-membership"}'),
        this.resolver,
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List user migrations
   * Lists all migrations a user has started.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#list-user-migrations}
   * Tags: migrations
   *
   */
  async migrationsListForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<Migration[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/migrations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/migration"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Start a user migration
   * Initiates the generation of a user migration archive.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#start-a-user-migration}
   * Tags: migrations
   *
   */
  async migrationsStartForAuthenticatedUser(
    params: {},
    body: {
      /**
       * Lock the repositories being migrated at the start of the migration
       * @example true
       *
       */
      lock_repositories?: boolean;
      /**
       * Do not include attachments in the migration
       * @example true
       *
       */
      exclude_attachments?: boolean;
      /**
       * Exclude attributes from the API response to improve performance
       * @example
       * [
       *   "repositories"
       * ]
       *
       */
      exclude?: 'repositories'[];
      repositories: string[];
    },
  ): Promise<Migration> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/migrations', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/migration"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a user migration status
   * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following values:
   *
   * *   `pending` - the migration hasn't started yet.
   * *   `exporting` - the migration is in progress.
   * *   `exported` - the migration finished successfully.
   * *   `failed` - the migration failed.
   *
   * Once the migration has been `exported` you can [download the migration archive](https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive).
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#get-a-user-migration-status}
   * Tags: migrations
   *
   */
  async migrationsGetStatusForAuthenticatedUser(params: {
    migration_id: number;
    exclude?: string[];
  }): Promise<Migration> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/migrations/{migration_id}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.exclude !== undefined)
      requestContext.setQueryParam(
        'exclude',
        r.serializeParameter(params.exclude),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/migration"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Download a user migration archive
   * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses, the migration archive can contain JSON files with data for these objects:
   *
   * *   attachments
   * *   bases
   * *   commit\_comments
   * *   issue\_comments
   * *   issue\_events
   * *   issues
   * *   milestones
   * *   organizations
   * *   projects
   * *   protected\_branches
   * *   pull\_request\_reviews
   * *   pull\_requests
   * *   releases
   * *   repositories
   * *   review\_comments
   * *   schema
   * *   users
   *
   * The archive will also contain an `attachments` directory that includes all attachment files uploaded to GitHub.com and a `repositories` directory that contains the repository's Git data.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#download-a-user-migration-archive}
   * Tags: migrations
   *
   */
  async migrationsGetArchiveForAuthenticatedUser(params: {
    migration_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/migrations/{migration_id}/archive', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('302', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a user migration archive
   * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days. Migration metadata, which is returned in the [List user migrations](https://docs.github.com/rest/reference/migrations#list-user-migrations) and [Get a user migration status](https://docs.github.com/rest/reference/migrations#get-a-user-migration-status) endpoints, will continue to be available even after an archive is deleted.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#delete-a-user-migration-archive}
   * Tags: migrations
   *
   */
  async migrationsDeleteArchiveForAuthenticatedUser(params: {
    migration_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/migrations/{migration_id}/archive', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unlock a user repository
   * Unlocks a repository. You can lock repositories when you [start a user migration](https://docs.github.com/rest/reference/migrations#start-a-user-migration). Once the migration is complete you can unlock each repository to begin using it again or [delete the repository](https://docs.github.com/rest/reference/repos#delete-a-repository) if you no longer need the source data. Returns a status of `404 Not Found` if the repository is not locked.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#unlock-a-user-repository}
   * Tags: migrations
   *
   */
  async migrationsUnlockRepoForAuthenticatedUser(params: {
    migration_id: number;
    repo_name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/migrations/{migration_id}/repos/{repo_name}/lock',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories for a user migration
   * Lists all the repositories for this user migration.
   * Learn more at {@link https://docs.github.com/rest/reference/migrations#list-repositories-for-a-user-migration}
   * Tags: migrations
   *
   */
  async migrationsListReposForUser(params: {
    migration_id: number;
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/migrations/{migration_id}/repositories', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organizations for the authenticated user
   * List organizations for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * This only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires at least `user` or `read:org` scope. OAuth requests with insufficient scope receive a `403 Forbidden` response.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user}
   * Tags: orgs
   *
   */
  async orgsListForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<OrganizationSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/orgs', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/organization-simple"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a package for the authenticated user
   * Gets a specific package for a package owned by the authenticated user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-a-package-for-the-authenticated-user}
   * Tags: packages
   *
   */
  async packagesGetPackageForAuthenticatedUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
  }): Promise<Package> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/packages/{package_type}/{package_name}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/package"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a package for the authenticated user
   * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:delete` scopes.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#delete-a-package-for-the-authenticated-user}
   * Tags: packages
   *
   */
  async packagesDeletePackageForAuthenticatedUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/packages/{package_type}/{package_name}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Restore a package for the authenticated user
   * Restores a package owned by the authenticated user.
   *
   * You can restore a deleted package under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#restore-a-package-for-the-authenticated-user}
   * Tags: packages
   *
   */
  async packagesRestorePackageForAuthenticatedUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    token?: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/packages/{package_type}/{package_name}/restore',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.token !== undefined)
      requestContext.setQueryParam('token', r.serializeParameter(params.token));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all package versions for a package owned by the authenticated user
   * Returns all package versions for a package owned by the authenticated user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-the-authenticated-user}
   * Tags: packages
   *
   */
  async packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    page?: number;
    per_page?: number;
    state?: 'active' | 'deleted';
  }): Promise<PackageVersion[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/packages/{package_type}/{package_name}/versions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/package-version"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a package version for the authenticated user
   * Gets a specific package version for a package owned by the authenticated user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-a-package-version-for-the-authenticated-user}
   * Tags: packages
   *
   */
  async packagesGetPackageVersionForAuthenticatedUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
  }): Promise<PackageVersion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/packages/{package_type}/{package_name}/versions/{package_version_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/package-version"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Delete a package version for the authenticated user
   * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
   *
   * To use this endpoint, you must have admin permissions in the organization and authenticate using an access token with the `packages:read` and `packages:delete` scopes.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#delete-a-package-version-for-the-authenticated-user}
   * Tags: packages
   *
   */
  async packagesDeletePackageVersionForAuthenticatedUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/packages/{package_type}/{package_name}/versions/{package_version_id}',
        params,
      ),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Restore a package version for the authenticated user
   * Restores a package version owned by the authenticated user.
   *
   * You can restore a deleted package version under the following conditions:
   *   - The package was deleted within the last 30 days.
   *   - The same package namespace and version is still available and not reused for a new package. If the same package namespace is not available, you will not be able to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's namespace first.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` and `packages:write` scopes. If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#restore-a-package-version-for-the-authenticated-user}
   * Tags: packages
   *
   */
  async packagesRestorePackageVersionForAuthenticatedUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore',
        params,
      ),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a user project
   * Learn more at {@link https://docs.github.com/rest/reference/projects#create-a-user-project}
   * Tags: projects
   *
   */
  async projectsCreateForAuthenticatedUser(
    params: {},
    body: {
      /**
       * Name of the project
       * @example "Week One Sprint"
       *
       */
      name: string;
      /**
       * Body of the project
       * @example "This project represents the sprint of the first week in January"
       *
       */
      body?: string | null;
    },
  ): Promise<Project> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/projects', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/project"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationErrorSimple>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error-simple"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public email addresses for the authenticated user
   * Lists your publicly visible email address, which you can set with the [Set primary email visibility for the authenticated user](https://docs.github.com/rest/reference/users#set-primary-email-visibility-for-the-authenticated-user) endpoint. This endpoint is accessible with the `user:email` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-public-email-addresses-for-the-authenticated-user}
   * Tags: users
   *
   */
  async usersListPublicEmailsForAuthenticated(params: {
    per_page?: number;
    page?: number;
  }): Promise<Email[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/public_emails', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/email"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories for the authenticated user
   * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
   *
   * The authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator, and repositories that they can access through an organization membership.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repositories-for-the-authenticated-user}
   * Tags: repos
   *
   */
  async reposListForAuthenticatedUser(params: {
    visibility?: 'all' | 'public' | 'private';
    affiliation?: string;
    type?: 'all' | 'owner' | 'public' | 'private' | 'member';
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
    since?: Date;
    before?: Date;
  }): Promise<Repository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/repos', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.visibility !== undefined)
      requestContext.setQueryParam(
        'visibility',
        r.serializeParameter(params.visibility),
      );
    if (params.affiliation !== undefined)
      requestContext.setQueryParam(
        'affiliation',
        r.serializeParameter(params.affiliation),
      );
    if (params.type !== undefined)
      requestContext.setQueryParam('type', r.serializeParameter(params.type));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.before !== undefined)
      requestContext.setQueryParam(
        'before',
        r.serializeParameter(params.before),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Create a repository for the authenticated user
   * Creates a new repository for the authenticated user.
   *
   * **OAuth scope requirements**
   *
   * When using [OAuth](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/), authorizations must include:
   *
   * *   `public_repo` scope or `repo` scope to create a public repository. Note: For GitHub AE, use `repo` scope to create an internal repository.
   * *   `repo` scope to create a private repository.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#create-a-repository-for-the-authenticated-user}
   * Tags: repos
   *
   */
  async reposCreateForAuthenticatedUser(
    params: {},
    body: {
      /**
       * The name of the repository.
       * @example "Team Environment"
       *
       */
      name: string;
      /**
       * A short description of the repository.
       *
       */
      description?: string;
      /**
       * A URL with more information about the repository.
       *
       */
      homepage?: string;
      /**
       * Whether the repository is private.
       *
       */
      private?: boolean;
      /**
       * Whether issues are enabled.
       * @example true
       * @defaultValue true
       *
       */
      has_issues?: boolean;
      /**
       * Whether projects are enabled.
       * @example true
       * @defaultValue true
       *
       */
      has_projects?: boolean;
      /**
       * Whether the wiki is enabled.
       * @example true
       * @defaultValue true
       *
       */
      has_wiki?: boolean;
      /**
       * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
       *
       */
      team_id?: number;
      /**
       * Whether the repository is initialized with a minimal README.
       *
       */
      auto_init?: boolean;
      /**
       * The desired language or platform to apply to the .gitignore.
       * @example "Haskell"
       *
       */
      gitignore_template?: string;
      /**
       * The license keyword of the open source license for this repository.
       * @example "mit"
       *
       */
      license_template?: string;
      /**
       * Whether to allow squash merges for pull requests.
       * @example true
       * @defaultValue true
       *
       */
      allow_squash_merge?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @example true
       * @defaultValue true
       *
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @example true
       * @defaultValue true
       *
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow Auto-merge to be used on pull requests.
       *
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to delete head branches when pull requests are merged
       *
       */
      delete_branch_on_merge?: boolean;
      /**
       * Whether downloads are enabled.
       * @example true
       * @defaultValue true
       *
       */
      has_downloads?: boolean;
      /**
       * Whether this repository acts as a template that can be used to generate new repositories.
       * @example true
       *
       */
      is_template?: boolean;
    },
  ): Promise<Repository> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/repos', params),
      r.HttpMethod.POST,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    requestContext.setBody(JSON.stringify(body));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('201', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/repository"}'),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('400', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repository invitations for the authenticated user
   * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repository-invitations-for-the-authenticated-user}
   * Tags: repos
   *
   */
  async reposListInvitationsForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<RepositoryInvitation[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/repository_invitations', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/repository-invitation"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Accept a repository invitation
   * Learn more at {@link https://docs.github.com/rest/reference/repos#accept-a-repository-invitation}
   * Tags: repos
   *
   */
  async reposAcceptInvitation(params: { invitation_id: number }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/repository_invitations/{invitation_id}', params),
      r.HttpMethod.PATCH,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Decline a repository invitation
   * Learn more at {@link https://docs.github.com/rest/reference/repos#decline-a-repository-invitation}
   * Tags: repos
   *
   */
  async reposDeclineInvitation(params: {
    invitation_id: number;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/repository_invitations/{invitation_id}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('409', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories starred by the authenticated user
   * Lists repositories the authenticated user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-repositories-starred-by-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityListReposStarredByAuthenticatedUser(params: {
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<Repository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/starred', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a repository is starred by the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/activity#check-if-a-repository-is-starred-by-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityCheckRepoIsStarredByAuthenticatedUser(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/starred/{owner}/{repo}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Star a repository for the authenticated user
   * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP verbs](https://docs.github.com/rest/overview/resources-in-the-rest-api#http-verbs)."
   * Learn more at {@link https://docs.github.com/rest/reference/activity#star-a-repository-for-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityStarRepoForAuthenticatedUser(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/starred/{owner}/{repo}', params),
      r.HttpMethod.PUT,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Unstar a repository for the authenticated user
   * Learn more at {@link https://docs.github.com/rest/reference/activity#unstar-a-repository-for-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityUnstarRepoForAuthenticatedUser(params: {
    owner: string;
    repo: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/starred/{owner}/{repo}', params),
      r.HttpMethod.DELETE,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories watched by the authenticated user
   * Lists repositories the authenticated user is watching.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-repositories-watched-by-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityListWatchedReposForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/subscriptions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List teams for the authenticated user
   * List all of the teams across all of the organizations to which the authenticated user belongs. This method requires `user`, `repo`, or `read:org` [scope](https://docs.github.com/apps/building-oauth-apps/understanding-scopes-for-oauth-apps/) when authenticating via [OAuth](https://docs.github.com/apps/building-oauth-apps/).
   * Learn more at {@link https://docs.github.com/rest/reference/teams#list-teams-for-the-authenticated-user}
   * Tags: teams
   *
   */
  async teamsListForAuthenticatedUser(params: {
    per_page?: number;
    page?: number;
  }): Promise<TeamFull[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/user/teams', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/team-full"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List users
   * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization accounts.
   *
   * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link header](https://docs.github.com/rest/overview/resources-in-the-rest-api#link-header) to get the URL for the next page of users.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-users}
   * Tags: users
   *
   */
  async usersList(params: {
    since?: number;
    per_page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('304', res.httpStatusCode))
      throw new r.ApiException<any>(res.httpStatusCode, null);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a user
   * Provides publicly available information about someone with a GitHub account.
   *
   * GitHub Apps with the `Plan` user permission can use this endpoint to retrieve information about a user's GitHub plan. The GitHub App must be authenticated as a user. See "[Identifying and authorizing users for GitHub Apps](https://docs.github.com/apps/building-github-apps/identifying-and-authorizing-users-for-github-apps/)" for details about authentication. For an example response, see 'Response with GitHub plan information' below"
   *
   * The `email` key in the following response is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint. If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible email addresses when authenticated with GitHub. For more information, see [Authentication](https://docs.github.com/rest/overview/resources-in-the-rest-api#authentication).
   *
   * The Emails API enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more information, see "[Emails API](https://docs.github.com/rest/reference/users#emails)".
   * Learn more at {@link https://docs.github.com/rest/reference/users#get-a-user}
   * Tags: users
   *
   */
  async usersGetByUsername(params: {
    username: string;
  }): Promise<PrivateUser | PublicUser> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"oneOf":[{"$ref":"#/components/schemas/private-user"},{"$ref":"#/components/schemas/public-user"}]}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('202', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"type":"object"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List events for the authenticated user
   * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-events-for-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityListEventsForAuthenticatedUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/events', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organization events for the authenticated user
   * This is the user's organization dashboard. You must be authenticated as the user to view this.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-organization-events-for-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityListOrgEventsForAuthenticatedUser(params: {
    username: string;
    org: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/events/orgs/{org}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public events for a user
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-public-events-for-a-user}
   * Tags: activity
   *
   */
  async activityListPublicEventsForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/events/public', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List followers of a user
   * Lists the people following the specified user.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-followers-of-a-user}
   * Tags: users
   *
   */
  async usersListFollowersForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/followers', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List the people a user follows
   * Lists the people who the specified user follows.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-the-people-a-user-follows}
   * Tags: users
   *
   */
  async usersListFollowingForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<SimpleUser[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/following', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/simple-user"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Check if a user follows another user
   * Learn more at {@link https://docs.github.com/rest/reference/users#check-if-a-user-follows-another-user}
   * Tags: users
   *
   */
  async usersCheckFollowingForUser(params: {
    username: string;
    target_user: string;
  }): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/following/{target_user}', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('204', res.httpStatusCode)) return null;
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<any>(
        res.httpStatusCode,
        await r.handleResponse(res, {}, this.resolver),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List gists for a user
   * Lists public gists for the specified user:
   * Learn more at {@link https://docs.github.com/rest/reference/gists#list-gists-for-a-user}
   * Tags: gists
   *
   */
  async gistsListForUser(params: {
    username: string;
    since?: Date;
    per_page?: number;
    page?: number;
  }): Promise<BaseGist[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/gists', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.since !== undefined)
      requestContext.setQueryParam('since', r.serializeParameter(params.since));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/base-gist"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List GPG keys for a user
   * Lists the GPG keys for a user. This information is accessible by anyone.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-gpg-keys-for-a-user}
   * Tags: users
   *
   */
  async usersListGpgKeysForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<GpgKey[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/gpg_keys', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/gpg-key"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get contextual information for a user
   * Provides hovercard information when authenticated through basic auth or OAuth with the `repo` scope. You can find out more about someone in relation to their pull requests, issues, repositories, and organizations.
   *
   * The `subject_type` and `subject_id` parameters provide context for the person's hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
   *
   * ```shell
   *  curl -u username:token
   *   https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
   * ```
   * Learn more at {@link https://docs.github.com/rest/reference/users#get-contextual-information-for-a-user}
   * Tags: users
   *
   */
  async usersGetContextForUser(params: {
    username: string;
    subject_type?: 'organization' | 'repository' | 'issue' | 'pull_request';
    subject_id?: string;
  }): Promise<Hovercard> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/hovercard', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.subject_type !== undefined)
      requestContext.setQueryParam(
        'subject_type',
        r.serializeParameter(params.subject_type),
      );
    if (params.subject_id !== undefined)
      requestContext.setQueryParam(
        'subject_id',
        r.serializeParameter(params.subject_id),
      );
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/hovercard"}'),
        this.resolver,
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a user installation for the authenticated app
   * Enables an authenticated GitHub App to find the user’s installation information.
   *
   * You must use a [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app) to access this endpoint.
   * Learn more at {@link https://docs.github.com/rest/reference/apps#get-a-user-installation-for-the-authenticated-app}
   * Tags: apps
   *
   */
  async appsGetUserInstallation(params: {
    username: string;
  }): Promise<Installation> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/installation', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/installation"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public keys for a user
   * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
   * Learn more at {@link https://docs.github.com/rest/reference/users#list-public-keys-for-a-user}
   * Tags: users
   *
   */
  async usersListPublicKeysForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<KeySimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/keys', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/key-simple"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List organizations for a user
   * List [public organization memberships](https://help.github.com/articles/publicizing-or-concealing-organization-membership) for the specified user.
   *
   * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the organization memberships (public and private) for the authenticated user, use the [List organizations for the authenticated user](https://docs.github.com/rest/reference/orgs#list-organizations-for-the-authenticated-user) API instead.
   * Learn more at {@link https://docs.github.com/rest/reference/orgs#list-organizations-for-a-user}
   * Tags: orgs
   *
   */
  async orgsListForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<OrganizationSimple[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/orgs', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/organization-simple"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a package for a user
   * Gets a specific package metadata for a public package owned by a user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-a-package-for-a-user}
   * Tags: packages
   *
   */
  async packagesGetPackageForUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
  }): Promise<Package> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/users/{username}/packages/{package_type}/{package_name}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/package"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get all package versions for a package owned by a user
   * Returns all package versions for a public package owned by a specified user.
   *
   * To use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-all-package-versions-for-a-package-owned-by-a-user}
   * Tags: packages
   *
   */
  async packagesGetAllPackageVersionsForPackageOwnedByUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
  }): Promise<PackageVersion[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/users/{username}/packages/{package_type}/{package_name}/versions',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/package-version"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('401', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('403', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('404', res.httpStatusCode))
      throw new r.ApiException<BasicError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/basic-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get a package version for a user
   * Gets a specific package version for a public package owned by a specified user.
   *
   * At this time, to use this endpoint, you must authenticate using an access token with the `packages:read` scope.
   * If `package_type` is not `container`, your token must also include the `repo` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/packages#get-a-package-version-for-a-user}
   * Tags: packages
   *
   */
  async packagesGetPackageVersionForUser(params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
    username: string;
  }): Promise<PackageVersion> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/package-version"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List user projects
   * Learn more at {@link https://docs.github.com/rest/reference/projects#list-user-projects}
   * Tags: projects
   *
   */
  async projectsListForUser(params: {
    username: string;
    state?: 'open' | 'closed' | 'all';
    per_page?: number;
    page?: number;
  }): Promise<Project[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/projects', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.state !== undefined)
      requestContext.setQueryParam('state', r.serializeParameter(params.state));
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/project"}}',
        ),
        this.resolver,
      );
    if (r.isCodeInRange('415', res.httpStatusCode))
      throw new r.ApiException<{
        message: string;
        documentation_url: string;
      }>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse(
            '{"type":"object","properties":{"message":{"type":"string"},"documentation_url":{"type":"string"}}}',
          ),
          this.resolver,
        ),
      );
    if (r.isCodeInRange('422', res.httpStatusCode))
      throw new r.ApiException<ValidationError>(
        res.httpStatusCode,
        await r.handleResponse(
          res,
          JSON.parse('{"$ref":"#/components/schemas/validation-error"}'),
          this.resolver,
        ),
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List events received by the authenticated user
   * These are events that you've received by watching repos and following users. If you are authenticated as the given user, you will see private events. Otherwise, you'll only see public events.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-events-received-by-the-authenticated-user}
   * Tags: activity
   *
   */
  async activityListReceivedEventsForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/received_events', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List public events received by a user
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-public-events-received-by-a-user}
   * Tags: activity
   *
   */
  async activityListReceivedPublicEventsForUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<Event[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/received_events/public', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/event"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories for a user
   * Lists public repositories for the specified user. Note: For GitHub AE, this endpoint will list internal repositories for the specified user.
   * Learn more at {@link https://docs.github.com/rest/reference/repos#list-repositories-for-a-user}
   * Tags: repos
   *
   */
  async reposListForUser(params: {
    username: string;
    type?: 'all' | 'owner' | 'member';
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/repos', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.type !== undefined)
      requestContext.setQueryParam('type', r.serializeParameter(params.type));
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Actions billing for a user
   * Gets the summary of the free and paid GitHub Actions minutes used.
   *
   * Paid minutes only apply to workflows in private repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub Actions](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
   *
   * Access tokens must have the `user` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-github-actions-billing-for-a-user}
   * Tags: billing
   *
   */
  async billingGetGithubActionsBillingUser(params: {
    username: string;
  }): Promise<ActionsBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/settings/billing/actions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/actions-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get GitHub Packages billing for a user
   * Gets the free and paid storage used for GitHub Packages in gigabytes.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `user` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-github-packages-billing-for-a-user}
   * Tags: billing
   *
   */
  async billingGetGithubPackagesBillingUser(params: {
    username: string;
  }): Promise<PackagesBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/settings/billing/packages', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/packages-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get shared storage billing for a user
   * Gets the estimated paid and estimated total storage used for GitHub Actions and Github Packages.
   *
   * Paid minutes only apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub Packages](https://help.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
   *
   * Access tokens must have the `user` scope.
   * Learn more at {@link https://docs.github.com/rest/reference/billing#get-shared-storage-billing-for-a-user}
   * Tags: billing
   *
   */
  async billingGetSharedStorageBillingUser(params: {
    username: string;
  }): Promise<CombinedBillingUsage> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating(
        '/users/{username}/settings/billing/shared-storage',
        params,
      ),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse('{"$ref":"#/components/schemas/combined-billing-usage"}'),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories starred by a user
   * Lists repositories a user has starred.
   *
   * You can also find out _when_ stars were created by passing the following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-repositories-starred-by-a-user}
   * Tags: activity
   *
   */
  async activityListReposStarredByUser(params: {
    username: string;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  }): Promise<StarredRepository[] | Repository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/starred', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.sort !== undefined)
      requestContext.setQueryParam('sort', r.serializeParameter(params.sort));
    if (params.direction !== undefined)
      requestContext.setQueryParam(
        'direction',
        r.serializeParameter(params.direction),
      );
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"anyOf":[{"type":"array","items":{"$ref":"#/components/schemas/starred-repository"}},{"type":"array","items":{"$ref":"#/components/schemas/repository"}}]}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * List repositories watched by a user
   * Lists repositories a user is watching.
   * Learn more at {@link https://docs.github.com/rest/reference/activity#list-repositories-watched-by-a-user}
   * Tags: activity
   *
   */
  async activityListReposWatchedByUser(params: {
    username: string;
    per_page?: number;
    page?: number;
  }): Promise<MinimalRepository[]> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/users/{username}/subscriptions', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    if (params.per_page !== undefined)
      requestContext.setQueryParam(
        'per_page',
        r.serializeParameter(params.per_page),
      );
    if (params.page !== undefined)
      requestContext.setQueryParam('page', r.serializeParameter(params.page));
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(
        res,
        JSON.parse(
          '{"type":"array","items":{"$ref":"#/components/schemas/minimal-repository"}}',
        ),
        this.resolver,
      );
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
  /**
   * Get the Zen of GitHub
   * Get a random sentence from the Zen of GitHub
   * Tags: meta
   *
   */
  async metaGetZen(params: {}): Promise<any> {
    const requestContext = this.server.makeRequestContext(
      r.applyTemplating('/zen', params),
      r.HttpMethod.GET,
    );
    requestContext.setHeaderParam('Content-Type', 'application/json');
    const res = await this.http.send(requestContext);
    if (r.isCodeInRange('200', res.httpStatusCode))
      return r.handleResponse(res, {}, this.resolver);
    throw new r.ApiException(
      res.httpStatusCode,
      await r.handleResponse(res, {}, this.resolver),
    );
  }
}
