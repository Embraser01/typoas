import * as r from '@typoas/runtime';
export type Root = {
  current_user_url: string;
  current_user_authorizations_html_url: string;
  authorizations_url: string;
  code_search_url: string;
  commit_search_url: string;
  emails_url: string;
  emojis_url: string;
  events_url: string;
  feeds_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  hub_url: string;
  issue_search_url: string;
  issues_url: string;
  keys_url: string;
  label_search_url: string;
  notifications_url: string;
  organization_url: string;
  organization_repositories_url: string;
  organization_teams_url: string;
  public_gists_url: string;
  rate_limit_url: string;
  repository_url: string;
  repository_search_url: string;
  current_user_repositories_url: string;
  starred_url: string;
  starred_gists_url: string;
  topic_search_url?: string;
  user_url: string;
  user_organizations_url: string;
  user_repositories_url: string;
  user_search_url: string;
};
/**
 * The package's language or package management ecosystem.
 */
export enum SecurityAdvisoryEcosystems {
  RUBYGEMS = 'rubygems',
  NPM = 'npm',
  PIP = 'pip',
  MAVEN = 'maven',
  NUGET = 'nuget',
  COMPOSER = 'composer',
  GO = 'go',
  RUST = 'rust',
  ERLANG = 'erlang',
  ACTIONS = 'actions',
  PUB = 'pub',
  OTHER = 'other',
  SWIFT = 'swift',
}
/**
 * Simple User
 * A GitHub user.
 */
export type SimpleUser = {
  name?: string | null;
  email?: string | null;
  /**
   * @example "octocat"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDQ6VXNlcjE="
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @example "User"
   */
  type: string;
  site_admin: boolean;
  /**
   * @example "\"2020-07-09T00:17:55Z\""
   */
  starred_at?: string;
};
/**
 * The type of credit the user is receiving.
 */
export enum SecurityAdvisoryCreditTypes {
  ANALYST = 'analyst',
  FINDER = 'finder',
  REPORTER = 'reporter',
  COORDINATOR = 'coordinator',
  REMEDIATION_DEVELOPER = 'remediation_developer',
  REMEDIATION_REVIEWER = 'remediation_reviewer',
  REMEDIATION_VERIFIER = 'remediation_verifier',
  TOOL = 'tool',
  SPONSOR = 'sponsor',
  OTHER = 'other',
}
/**
 * A GitHub Security Advisory.
 */
export type GlobalAdvisory = {
  /**
   * The GitHub Security Advisory ID.
   */
  ghsa_id: string;
  /**
   * The Common Vulnerabilities and Exposures (CVE) ID.
   */
  cve_id: string | null;
  /**
   * The API URL for the advisory.
   */
  url: string;
  /**
   * The URL for the advisory.
   */
  html_url: string;
  /**
   * The API URL for the repository advisory.
   */
  repository_advisory_url: string | null;
  /**
   * A short summary of the advisory.
   */
  summary: string;
  /**
   * A detailed description of what the advisory entails.
   */
  description: string | null;
  /**
   * The type of advisory.
   */
  type: 'reviewed' | 'unreviewed' | 'malware';
  /**
   * The severity of the advisory.
   */
  severity: 'critical' | 'high' | 'medium' | 'low' | 'unknown';
  /**
   * The URL of the advisory's source code.
   */
  source_code_location: string | null;
  identifiers:
    | {
        /**
         * The type of identifier.
         */
        type: 'CVE' | 'GHSA';
        /**
         * The identifier value.
         */
        value: string;
      }[]
    | null;
  references: string[] | null;
  /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   */
  published_at: Date;
  /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   */
  updated_at: Date;
  /**
   * The date and time of when the advisory was reviewed by GitHub, in ISO 8601 format.
   */
  github_reviewed_at: Date | null;
  /**
   * The date and time when the advisory was published in the National Vulnerability Database, in ISO 8601 format.
   * This field is only populated when the advisory is imported from the National Vulnerability Database.
   */
  nvd_published_at: Date | null;
  /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   */
  withdrawn_at: Date | null;
  /**
   * The products and respective version ranges affected by the advisory.
   */
  vulnerabilities:
    | {
        /**
         * The name of the package affected by the vulnerability.
         */
        package: {
          ecosystem: SecurityAdvisoryEcosystems;
          /**
           * The unique package name within its ecosystem.
           */
          name: string | null;
        } | null;
        /**
         * The range of the package versions affected by the vulnerability.
         */
        vulnerable_version_range: string | null;
        /**
         * The package version that resolve the vulnerability.
         */
        first_patched_version: string | null;
        /**
         * The functions in the package that are affected by the vulnerability.
         */
        vulnerable_functions: string[] | null;
      }[]
    | null;
  cvss: {
    /**
     * The CVSS vector.
     */
    vector_string: string | null;
    /**
     * The CVSS score.
     */
    score: number | null;
  } | null;
  cwes:
    | {
        /**
         * The Common Weakness Enumeration (CWE) identifier.
         */
        cwe_id: string;
        /**
         * The name of the CWE.
         */
        name: string;
      }[]
    | null;
  /**
   * The users who contributed to the advisory.
   */
  credits:
    | {
        user: SimpleUser;
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
};
/**
 * Basic Error
 * Basic Error
 */
export type BasicError = {
  message?: string;
  documentation_url?: string;
  url?: string;
  status?: string;
};
/**
 * Validation Error Simple
 * Validation Error Simple
 */
export type ValidationErrorSimple = {
  message: string;
  documentation_url: string;
  errors?: string[];
};
/**
 * Simple User
 * A GitHub user.
 */
export type NullableSimpleUser = {
  name?: string | null;
  email?: string | null;
  /**
   * @example "octocat"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDQ6VXNlcjE="
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @example "User"
   */
  type: string;
  site_admin: boolean;
  /**
   * @example "\"2020-07-09T00:17:55Z\""
   */
  starred_at?: string;
} | null;
/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type Integration = {
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id: number;
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   */
  slug?: string;
  /**
   * @example "MDExOkludGVncmF0aW9uMQ=="
   */
  node_id: string;
  owner: NullableSimpleUser;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   */
  name: string;
  /**
   * @example "The description of the app."
   */
  description: string | null;
  /**
   * @example "https://example.com"
   */
  external_url: string;
  /**
   * @example "https://github.com/apps/super-ci"
   */
  html_url: string;
  /**
   * @example "2017-07-08T16:18:44-04:00"
   */
  created_at: Date;
  /**
   * @example "2017-07-08T16:18:44-04:00"
   */
  updated_at: Date;
  /**
   * The set of permissions for the GitHub app
   * @example
   * {
   *   "issues": "read",
   *   "deployments": "write"
   * }
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
  } & {
    [key: string]: string;
  };
  /**
   * The list of events for the GitHub app
   * @example
   * [
   *   "label",
   *   "deployment"
   * ]
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   * @example 5
   */
  installations_count?: number;
  /**
   * @example "\"Iv1.25b5d1e65ffc4022\""
   */
  client_id?: string;
  /**
   * @example "\"1d4b2097ac622ba702d19de498f005747a8b21d3\""
   */
  client_secret?: string;
  /**
   * @example "\"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b\""
   */
  webhook_secret?: string | null;
  /**
   * @example "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n\""
   */
  pem?: string;
};
/**
 * The URL to which the payloads will be delivered.
 * @example "https://example.com/webhook"
 */
export type WebhookConfigUrl = string;
/**
 * The media type used to serialize the payloads. Supported values include `json` and `form`. The default is `form`.
 * @example "\"json\""
 */
export type WebhookConfigContentType = string;
/**
 * If provided, the `secret` will be used as the `key` to generate the HMAC hex digest value for [delivery signature headers](https://docs.github.com/webhooks/event-payloads/#delivery-headers).
 * @example "\"********\""
 */
export type WebhookConfigSecret = string;
export type WebhookConfigInsecureSsl = string | number;
/**
 * Webhook Configuration
 * Configuration object of the webhook
 */
export type WebhookConfig = {
  url?: WebhookConfigUrl;
  content_type?: WebhookConfigContentType;
  secret?: WebhookConfigSecret;
  insecure_ssl?: WebhookConfigInsecureSsl;
};
/**
 * Simple webhook delivery
 * Delivery made by a webhook, without request and response information.
 */
export type HookDeliveryItem = {
  /**
   * Unique identifier of the webhook delivery.
   * @example 42
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   */
  guid: string;
  /**
   * Time when the webhook delivery occurred.
   * @example "2021-05-12T20:33:44Z"
   */
  delivered_at: Date;
  /**
   * Whether the webhook delivery is a redelivery.
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   */
  duration: number;
  /**
   * Describes the response returned after attempting the delivery.
   * @example "failed to connect"
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @example 123
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @example 123
   */
  repository_id: number | null;
};
/**
 * Scim Error
 * Scim Error
 */
export type ScimError = {
  message?: string | null;
  documentation_url?: string | null;
  detail?: string | null;
  status?: number;
  scimType?: string | null;
  schemas?: string[];
};
/**
 * Validation Error
 * Validation Error
 */
export type ValidationError = {
  message: string;
  documentation_url: string;
  errors?: {
    resource?: string;
    field?: string;
    message?: string;
    code: string;
    index?: number;
    value?: (string | null) | (number | null) | (string[] | null);
  }[];
};
/**
 * Webhook delivery
 * Delivery made by a webhook.
 */
export type HookDelivery = {
  /**
   * Unique identifier of the delivery.
   * @example 42
   */
  id: number;
  /**
   * Unique identifier for the event (shared with all deliveries for all webhooks that subscribe to this event).
   * @example "58474f00-b361-11eb-836d-0e4f3503ccbe"
   */
  guid: string;
  /**
   * Time when the delivery was delivered.
   * @example "2021-05-12T20:33:44Z"
   */
  delivered_at: Date;
  /**
   * Whether the delivery is a redelivery.
   */
  redelivery: boolean;
  /**
   * Time spent delivering.
   * @example 0.03
   */
  duration: number;
  /**
   * Description of the status of the attempted delivery
   * @example "failed to connect"
   */
  status: string;
  /**
   * Status code received when delivery was made.
   * @example 502
   */
  status_code: number;
  /**
   * The event that triggered the delivery.
   * @example "issues"
   */
  event: string;
  /**
   * The type of activity for the event that triggered the delivery.
   * @example "opened"
   */
  action: string | null;
  /**
   * The id of the GitHub App installation associated with this event.
   * @example 123
   */
  installation_id: number | null;
  /**
   * The id of the repository associated with this event.
   * @example 123
   */
  repository_id: number | null;
  /**
   * The URL target of the delivery.
   * @example "https://www.example.com"
   */
  url?: string;
  request: {
    /**
     * The request headers sent with the webhook delivery.
     */
    headers: {
      [key: string]: any;
    } | null;
    /**
     * The webhook payload.
     */
    payload: {
      [key: string]: any;
    } | null;
  };
  response: {
    /**
     * The response headers received when the delivery was made.
     */
    headers: {
      [key: string]: any;
    } | null;
    /**
     * The response payload received.
     */
    payload: string | null;
  };
};
/**
 * Enterprise
 * An enterprise on GitHub.
 */
export type Enterprise = {
  /**
   * A short description of the enterprise.
   */
  description?: string | null;
  /**
   * @example "https://github.com/enterprises/octo-business"
   */
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string | null;
  /**
   * Unique identifier of the enterprise
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   */
  slug: string;
  /**
   * @example "2019-01-26T19:01:12Z"
   */
  created_at: Date | null;
  /**
   * @example "2019-01-26T19:14:43Z"
   */
  updated_at: Date | null;
  avatar_url: string;
};
/**
 * Integration Installation Request
 * Request to install an integration on a target
 */
export type IntegrationInstallationRequest = {
  /**
   * Unique identifier of the request installation.
   * @example 42
   */
  id: number;
  /**
   * @example "MDExOkludGVncmF0aW9uMQ=="
   */
  node_id?: string;
  account: SimpleUser | Enterprise;
  requester: SimpleUser;
  /**
   * @example "2022-07-08T16:18:44-04:00"
   */
  created_at: Date;
};
/**
 * App Permissions
 * The permissions granted to the user access token.
 * @example
 * {
 *   "contents": "read",
 *   "issues": "read",
 *   "deployments": "write",
 *   "single_file": "read"
 * }
 */
export type AppPermissions = {
  /**
   * The level of permission to grant the access token for GitHub Actions workflows, workflow runs, and artifacts.
   */
  actions?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for repository creation, deletion, settings, teams, and collaborators creation.
   */
  administration?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for checks on code.
   */
  checks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to create, edit, delete, and list Codespaces.
   */
  codespaces?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for repository contents, commits, branches, downloads, releases, and merges.
   */
  contents?: 'read' | 'write';
  /**
   * The leve of permission to grant the access token to manage Dependabot secrets.
   */
  dependabot_secrets?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for deployments and deployment statuses.
   */
  deployments?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for managing repository environments.
   */
  environments?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for issues and related comments, assignees, labels, and milestones.
   */
  issues?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to search repositories, list collaborators, and access repository metadata.
   */
  metadata?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for packages published to GitHub Packages.
   */
  packages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to retrieve Pages statuses, configuration, and builds, as well as create new builds.
   */
  pages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for pull requests and related comments, assignees, labels, milestones, and merges.
   */
  pull_requests?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and edit custom properties for a repository, when allowed by the property.
   */
  repository_custom_properties?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for a repository.
   */
  repository_hooks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage repository projects, columns, and cards.
   */
  repository_projects?: 'read' | 'write' | 'admin';
  /**
   * The level of permission to grant the access token to view and manage secret scanning alerts.
   */
  secret_scanning_alerts?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage repository secrets.
   */
  secrets?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage security events like code scanning alerts.
   */
  security_events?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage just a single file.
   */
  single_file?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for commit statuses.
   */
  statuses?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage Dependabot alerts.
   */
  vulnerability_alerts?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to update GitHub Actions workflow files.
   */
  workflows?: 'write';
  /**
   * The level of permission to grant the access token for organization teams and members.
   */
  members?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage access to an organization.
   */
  organization_administration?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for custom repository roles management.
   */
  organization_custom_roles?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for custom organization roles management.
   */
  organization_custom_org_roles?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for custom property management.
   */
  organization_custom_properties?: 'read' | 'write' | 'admin';
  /**
   * The level of permission to grant the access token for managing access to GitHub Copilot for members of an organization with a Copilot Business subscription. This property is in beta and is subject to change.
   */
  organization_copilot_seat_management?: 'write';
  /**
   * The level of permission to grant the access token to view and manage announcement banners for an organization.
   */
  organization_announcement_banners?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view events triggered by an activity in an organization.
   */
  organization_events?: 'read';
  /**
   * The level of permission to grant the access token to manage the post-receive hooks for an organization.
   */
  organization_hooks?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for viewing and managing fine-grained personal access token requests to an organization.
   */
  organization_personal_access_tokens?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for viewing and managing fine-grained personal access tokens that have been approved by an organization.
   */
  organization_personal_access_token_requests?: 'read' | 'write';
  /**
   * The level of permission to grant the access token for viewing an organization's plan.
   */
  organization_plan?: 'read';
  /**
   * The level of permission to grant the access token to manage organization projects and projects beta (where available).
   */
  organization_projects?: 'read' | 'write' | 'admin';
  /**
   * The level of permission to grant the access token for organization packages published to GitHub Packages.
   */
  organization_packages?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage organization secrets.
   */
  organization_secrets?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage GitHub Actions self-hosted runners available to an organization.
   */
  organization_self_hosted_runners?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage users blocked by the organization.
   */
  organization_user_blocking?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage team discussions and related comments.
   */
  team_discussions?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the email addresses belonging to a user.
   */
  email_addresses?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the followers belonging to a user.
   */
  followers?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage git SSH keys.
   */
  git_ssh_keys?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage GPG keys belonging to a user.
   */
  gpg_keys?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to view and manage interaction limits on a repository.
   */
  interaction_limits?: 'read' | 'write';
  /**
   * The level of permission to grant the access token to manage the profile settings belonging to a user.
   */
  profile?: 'write';
  /**
   * The level of permission to grant the access token to list and manage repositories a user is starring.
   */
  starring?: 'read' | 'write';
};
/**
 * Installation
 * Installation
 */
export type Installation = {
  /**
   * The ID of the installation.
   * @example 1
   */
  id: number;
  account: (SimpleUser | Enterprise) | null;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  /**
   * @example "https://api.github.com/app/installations/1/access_tokens"
   */
  access_tokens_url: string;
  /**
   * @example "https://api.github.com/installation/repositories"
   */
  repositories_url: string;
  /**
   * @example "https://github.com/organizations/github/settings/installations/1"
   */
  html_url: string;
  /**
   * @example 1
   */
  app_id: number;
  /**
   * The ID of the user or organization this token is being scoped to.
   */
  target_id: number;
  /**
   * @example "Organization"
   */
  target_type: string;
  permissions: AppPermissions;
  events: string[];
  created_at: Date;
  updated_at: Date;
  /**
   * @example "config.yaml"
   */
  single_file_name: string | null;
  /**
   * @example true
   */
  has_multiple_single_files?: boolean;
  /**
   * @example
   * [
   *   "config.yml",
   *   ".github/issue_TEMPLATE.md"
   * ]
   */
  single_file_paths?: string[];
  /**
   * @example "github-actions"
   */
  app_slug: string;
  suspended_by: NullableSimpleUser;
  suspended_at: Date | null;
  /**
   * @example "\"test_13f1e99741e3e004@d7e1eb0bc0a1ba12.com\""
   */
  contact_email?: string | null;
};
/**
 * License Simple
 * License Simple
 */
export type NullableLicenseSimple = {
  /**
   * @example "mit"
   */
  key: string;
  /**
   * @example "MIT License"
   */
  name: string;
  /**
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /**
   * @example "MIT"
   */
  spdx_id: string | null;
  /**
   * @example "MDc6TGljZW5zZW1pdA=="
   */
  node_id: string;
  html_url?: string;
} | null;
/**
 * Repository
 * A repository on GitHub.
 */
export type Repository = {
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @example true
   * @defaultValue true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @example true
   * @defaultValue true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @example true
   * @defaultValue true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @example true
   * @defaultValue true
   * @deprecated
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @defaultValue "public"
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: Date | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   * @deprecated
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * Whether to allow merge commits for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /**
   * @example "\"2020-07-09T00:17:42Z\""
   */
  starred_at?: string;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
};
/**
 * Installation Token
 * Authentication token for a GitHub App installed on a user or org.
 */
export type InstallationToken = {
  token: string;
  expires_at: string;
  permissions?: AppPermissions;
  repository_selection?: 'all' | 'selected';
  repositories?: Repository[];
  /**
   * @example "README.md"
   */
  single_file?: string;
  /**
   * @example true
   */
  has_multiple_single_files?: boolean;
  /**
   * @example
   * [
   *   "config.yml",
   *   ".github/issue_TEMPLATE.md"
   * ]
   */
  single_file_paths?: string[];
};
/**
 * Scoped Installation
 */
export type NullableScopedInstallation = {
  permissions: AppPermissions;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  /**
   * @example "config.yaml"
   */
  single_file_name: string | null;
  /**
   * @example true
   */
  has_multiple_single_files?: boolean;
  /**
   * @example
   * [
   *   "config.yml",
   *   ".github/issue_TEMPLATE.md"
   * ]
   */
  single_file_paths?: string[];
  /**
   * @example "https://api.github.com/users/octocat/repos"
   */
  repositories_url: string;
  account: SimpleUser;
} | null;
/**
 * Authorization
 * The authorization for an OAuth app, GitHub App, or a Personal Access Token.
 */
export type Authorization = {
  id: number;
  url: string;
  /**
   * A list of scopes that this authorization is in.
   */
  scopes: string[] | null;
  token: string;
  token_last_eight: string | null;
  hashed_token: string | null;
  app: {
    client_id: string;
    name: string;
    url: string;
  };
  note: string | null;
  note_url: string | null;
  updated_at: Date;
  created_at: Date;
  fingerprint: string | null;
  user?: NullableSimpleUser;
  installation?: NullableScopedInstallation;
  expires_at: Date | null;
};
/**
 * Simple Classroom Repository
 * A GitHub repository view for Classroom
 */
export type SimpleClassroomRepository = {
  /**
   * A unique identifier of the repository.
   * @example 1296269
   */
  id: number;
  /**
   * The full, globally unique name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  /**
   * The URL to view the repository on GitHub.com.
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * Whether the repository is private.
   */
  private: boolean;
  /**
   * The default branch for the repository.
   * @example "main"
   */
  default_branch: string;
};
/**
 * Organization Simple for Classroom
 * A GitHub organization.
 */
export type SimpleClassroomOrganization = {
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "github"
   */
  login: string;
  /**
   * @example "MDEyOk9yZ2FuaXphdGlvbjE="
   */
  node_id: string;
  /**
   * @example "https://github.com/github"
   */
  html_url: string;
  /**
   * @example "Github - Code thigns happen here"
   */
  name: string | null;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
};
/**
 * Classroom
 * A GitHub Classroom classroom
 */
export type Classroom = {
  /**
   * Unique identifier of the classroom.
   * @example 42
   */
  id: number;
  /**
   * The name of the classroom.
   * @example "Programming Elixir"
   */
  name: string;
  /**
   * Whether classroom is archived.
   */
  archived: boolean;
  organization: SimpleClassroomOrganization;
  /**
   * The URL of the classroom on GitHub Classroom.
   * @example "https://classroom.github.com/classrooms/1-programming-elixir"
   */
  url: string;
};
/**
 * Classroom Assignment
 * A GitHub Classroom assignment
 */
export type ClassroomAssignment = {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;
  /**
   * Assignment title.
   * @example "Intro to Binaries"
   */
  title: string;
  /**
   * Whether it's a group assignment or individual assignment.
   * @example "individual"
   */
  type: 'individual' | 'group';
  /**
   * The link that a student can use to accept the assignment.
   * @example "https://classroom.github.com/a/Lx7jiUgx"
   */
  invite_link: string;
  /**
   * Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;
  /**
   * Sluggified name of the assignment.
   * @example "intro-to-binaries"
   */
  slug: string;
  /**
   * Whether students are admins on created repository when a student accepts the assignment.
   * @example true
   */
  students_are_repo_admins: boolean;
  /**
   * Whether feedback pull request will be created when a student accepts the assignment.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;
  /**
   * The maximum allowable teams for the assignment.
   */
  max_teams: number | null;
  /**
   * The maximum allowable members per team.
   */
  max_members: number | null;
  /**
   * The selected editor for the assignment.
   * @example "codespaces"
   */
  editor: string;
  /**
   * The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;
  /**
   * The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;
  /**
   * The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;
  /**
   * The programming language used in the assignment.
   * @example "elixir"
   */
  language: string;
  /**
   * The time at which the assignment is due.
   * @example "2011-01-26T19:06:43Z"
   */
  deadline: Date | null;
  starter_code_repository: SimpleClassroomRepository;
  classroom: Classroom;
};
/**
 * Simple Classroom User
 * A GitHub user simplified for Classroom.
 */
export type SimpleClassroomUser = {
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "octocat"
   */
  login: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
};
/**
 * Simple Classroom
 * A GitHub Classroom classroom
 */
export type SimpleClassroom = {
  /**
   * Unique identifier of the classroom.
   * @example 42
   */
  id: number;
  /**
   * The name of the classroom.
   * @example "Programming Elixir"
   */
  name: string;
  /**
   * Returns whether classroom is archived or not.
   */
  archived: boolean;
  /**
   * The url of the classroom on GitHub Classroom.
   * @example "https://classroom.github.com/classrooms/1-programming-elixir"
   */
  url: string;
};
/**
 * Simple Classroom Assignment
 * A GitHub Classroom assignment
 */
export type SimpleClassroomAssignment = {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment creates a public repository.
   * @example true
   */
  public_repo: boolean;
  /**
   * Assignment title.
   * @example "Intro to Binaries"
   */
  title: string;
  /**
   * Whether it's a Group Assignment or Individual Assignment.
   * @example "individual"
   */
  type: 'individual' | 'group';
  /**
   * The link that a student can use to accept the assignment.
   * @example "https://classroom.github.com/a/Lx7jiUgx"
   */
  invite_link: string;
  /**
   * Whether the invitation link is enabled. Visiting an enabled invitation link will accept the assignment.
   * @example true
   */
  invitations_enabled: boolean;
  /**
   * Sluggified name of the assignment.
   * @example "intro-to-binaries"
   */
  slug: string;
  /**
   * Whether students are admins on created repository on accepted assignment.
   * @example true
   */
  students_are_repo_admins: boolean;
  /**
   * Whether feedback pull request will be created on assignment acceptance.
   * @example true
   */
  feedback_pull_requests_enabled: boolean;
  /**
   * The maximum allowable teams for the assignment.
   */
  max_teams?: number | null;
  /**
   * The maximum allowable members per team.
   */
  max_members?: number | null;
  /**
   * The selected editor for the assignment.
   * @example "codespaces"
   */
  editor: string;
  /**
   * The number of students that have accepted the assignment.
   * @example 25
   */
  accepted: number;
  /**
   * The number of students that have submitted the assignment.
   * @example 10
   */
  submitted: number;
  /**
   * The number of students that have passed the assignment.
   * @example 10
   */
  passing: number;
  /**
   * The programming language used in the assignment.
   * @example "elixir"
   */
  language: string;
  /**
   * The time at which the assignment is due.
   * @example "2011-01-26T19:06:43Z"
   */
  deadline: Date | null;
  classroom: SimpleClassroom;
};
/**
 * Classroom Accepted Assignment
 * A GitHub Classroom accepted assignment
 */
export type ClassroomAcceptedAssignment = {
  /**
   * Unique identifier of the repository.
   * @example 42
   */
  id: number;
  /**
   * Whether an accepted assignment has been submitted.
   * @example true
   */
  submitted: boolean;
  /**
   * Whether a submission passed.
   * @example true
   */
  passing: boolean;
  /**
   * Count of student commits.
   * @example 5
   */
  commit_count: number;
  /**
   * Most recent grade.
   * @example "10/10"
   */
  grade: string;
  students: SimpleClassroomUser[];
  repository: SimpleClassroomRepository;
  assignment: SimpleClassroomAssignment;
};
/**
 * Classroom Assignment Grade
 * Grade for a student or groups GitHub Classroom assignment
 */
export type ClassroomAssignmentGrade = {
  /**
   * Name of the assignment
   */
  assignment_name: string;
  /**
   * URL of the assignment
   */
  assignment_url: string;
  /**
   * URL of the starter code for the assignment
   */
  starter_code_url: string;
  /**
   * GitHub username of the student
   */
  github_username: string;
  /**
   * Roster identifier of the student
   */
  roster_identifier: string;
  /**
   * Name of the student's assignment repository
   */
  student_repository_name: string;
  /**
   * URL of the student's assignment repository
   */
  student_repository_url: string;
  /**
   * Timestamp of the student's assignment submission
   */
  submission_timestamp: string;
  /**
   * Number of points awarded to the student
   */
  points_awarded: number;
  /**
   * Number of points available for the assignment
   */
  points_available: number;
  /**
   * If a group assignment, name of the group the student is in
   */
  group_name?: string;
};
/**
 * Code Of Conduct
 * Code Of Conduct
 */
export type CodeOfConduct = {
  /**
   * @example "contributor_covenant"
   */
  key: string;
  /**
   * @example "Contributor Covenant"
   */
  name: string;
  /**
   * @example "https://api.github.com/codes_of_conduct/contributor_covenant"
   */
  url: string;
  /**
   * @example "# Contributor Covenant Code of Conduct\n\n## Our Pledge\n\nIn the interest of fostering an open and welcoming environment, we as contributors and maintainers pledge to making participation in our project and our community a harassment-free experience for everyone, regardless of age, body size, disability, ethnicity, gender identity and expression, level of experience, nationality, personal appearance, race, religion, or sexual identity and orientation.\n\n## Our Standards\n\nExamples of behavior that contributes to creating a positive environment include:\n\n* Using welcoming and inclusive language\n* Being respectful of differing viewpoints and experiences\n* Gracefully accepting constructive criticism\n* Focusing on what is best for the community\n* Showing empathy towards other community members\n\nExamples of unacceptable behavior by participants include:\n\n* The use of sexualized language or imagery and unwelcome sexual attention or advances\n* Trolling, insulting/derogatory comments, and personal or political attacks\n* Public or private harassment\n* Publishing others' private information, such as a physical or electronic address, without explicit permission\n* Other conduct which could reasonably be considered inappropriate in a professional setting\n\n## Our Responsibilities\n\nProject maintainers are responsible for clarifying the standards of acceptable behavior and are expected to take appropriate and fair corrective action in response\n                  to any instances of unacceptable behavior.\n\nProject maintainers have the right and responsibility to remove, edit, or reject comments, commits, code, wiki edits, issues, and other contributions that are not aligned to this Code of Conduct, or to ban temporarily or permanently any contributor for other behaviors that they deem inappropriate, threatening, offensive, or harmful.\n\n## Scope\n\nThis Code of Conduct applies both within project spaces and in public spaces when an individual is representing the project or its community. Examples of representing a project or community include using an official project e-mail address,\n                  posting via an official social media account, or acting as an appointed representative at an online or offline event. Representation of a project may be further defined and clarified by project maintainers.\n\n## Enforcement\n\nInstances of abusive, harassing, or otherwise unacceptable behavior may be reported by contacting the project team at [EMAIL]. The project team will review and investigate all complaints, and will respond in a way that it deems appropriate to the circumstances. The project team is obligated to maintain confidentiality with regard to the reporter of an incident. Further details of specific enforcement policies may be posted separately.\n\nProject maintainers who do not follow or enforce the Code of Conduct in good faith may face temporary or permanent repercussions as determined by other members of the project's leadership.\n\n## Attribution\n\nThis Code of Conduct is adapted from the [Contributor Covenant](http://contributor-covenant.org), version 1.4, available at [http://contributor-covenant.org/version/1/4](http://contributor-covenant.org/version/1/4/).\n"
   */
  body?: string;
  html_url: string | null;
};
/**
 * The security alert number.
 */
export type AlertNumber = number;
/**
 * Details for the vulnerable package.
 */
export type DependabotAlertPackage = {
  /**
   * The package's language or package management ecosystem.
   */
  ecosystem: string;
  /**
   * The unique package name within its ecosystem.
   */
  name: string;
};
/**
 * Details pertaining to one vulnerable version range for the advisory.
 */
export type DependabotAlertSecurityVulnerability = {
  package: DependabotAlertPackage;
  /**
   * The severity of the vulnerability.
   */
  severity: 'low' | 'medium' | 'high' | 'critical';
  /**
   * Conditions that identify vulnerable versions of this vulnerability's package.
   */
  vulnerable_version_range: string;
  /**
   * Details pertaining to the package version that patches this vulnerability.
   */
  first_patched_version: {
    /**
     * The package version that patches this vulnerability.
     */
    identifier: string;
  } | null;
};
/**
 * Details for the GitHub Security Advisory.
 */
export type DependabotAlertSecurityAdvisory = {
  /**
   * The unique GitHub Security Advisory ID assigned to the advisory.
   */
  ghsa_id: string;
  /**
   * The unique CVE ID assigned to the advisory.
   */
  cve_id: string | null;
  /**
   * A short, plain text summary of the advisory.
   */
  summary: string;
  /**
   * A long-form Markdown-supported description of the advisory.
   */
  description: string;
  /**
   * Vulnerable version range information for the advisory.
   */
  vulnerabilities: DependabotAlertSecurityVulnerability[];
  /**
   * The severity of the advisory.
   */
  severity: 'low' | 'medium' | 'high' | 'critical';
  /**
   * Details for the advisory pertaining to the Common Vulnerability Scoring System.
   */
  cvss: {
    /**
     * The overall CVSS score of the advisory.
     */
    score: number;
    /**
     * The full CVSS vector string for the advisory.
     */
    vector_string: string | null;
  };
  /**
   * Details for the advisory pertaining to Common Weakness Enumeration.
   */
  cwes: {
    /**
     * The unique CWE ID.
     */
    cwe_id: string;
    /**
     * The short, plain text name of the CWE.
     */
    name: string;
  }[];
  /**
   * Values that identify this advisory among security information sources.
   */
  identifiers: {
    /**
     * The type of advisory identifier.
     */
    type: 'CVE' | 'GHSA';
    /**
     * The value of the advisory identifer.
     */
    value: string;
  }[];
  /**
   * Links to additional advisory information.
   */
  references: {
    /**
     * The URL of the reference.
     */
    url: string;
  }[];
  /**
   * The time that the advisory was published in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  published_at: Date;
  /**
   * The time that the advisory was last modified in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  updated_at: Date;
  /**
   * The time that the advisory was withdrawn in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  withdrawn_at: Date | null;
};
/**
 * The REST API URL of the alert resource.
 */
export type AlertUrl = string;
/**
 * The GitHub URL of the alert resource.
 */
export type AlertHtmlUrl = string;
/**
 * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type AlertCreatedAt = Date;
/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type AlertUpdatedAt = Date;
/**
 * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type AlertDismissedAt = Date | null;
/**
 * The time that the alert was no longer detected and was considered fixed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type AlertFixedAt = Date | null;
/**
 * The time that the alert was auto-dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type AlertAutoDismissedAt = Date | null;
/**
 * Simple Repository
 * A GitHub repository.
 */
export type SimpleRepository = {
  /**
   * A unique identifier of the repository.
   * @example 1296269
   */
  id: number;
  /**
   * The GraphQL identifier of the repository.
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Hello-World"
   */
  name: string;
  /**
   * The full, globally unique, name of the repository.
   * @example "octocat/Hello-World"
   */
  full_name: string;
  owner: SimpleUser;
  /**
   * Whether the repository is private.
   */
  private: boolean;
  /**
   * The URL to view the repository on GitHub.com.
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * The repository description.
   * @example "This your first repo!"
   */
  description: string | null;
  /**
   * Whether the repository is a fork.
   */
  fork: boolean;
  /**
   * The URL to get more information about the repository from the GitHub API.
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * A template for the API URL to download the repository as an archive.
   * @example "https://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * A template for the API URL to list the available assignees for issues in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git blob in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * A template for the API URL to get information about branches in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * A template for the API URL to get information about collaborators of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * A template for the API URL to get information about comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * A template for the API URL to get information about commits on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * A template for the API URL to compare two commits or refs.
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * A template for the API URL to get the contents of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * A template for the API URL to list the contributors to the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * The API URL to list the deployments of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * The API URL to list the downloads on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * The API URL to list the events of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * The API URL to list the forks of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * A template for the API URL to get information about Git commits of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * A template for the API URL to get information about Git refs of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * A template for the API URL to get information about Git tags of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * A template for the API URL to get information about issue comments on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * A template for the API URL to get information about issue events on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * A template for the API URL to get information about issues on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * A template for the API URL to get information about deploy keys on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * A template for the API URL to get information about labels of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * The API URL to get information about the languages of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * The API URL to merge branches in the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * A template for the API URL to get information about milestones of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * A template for the API URL to get information about notifications on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * A template for the API URL to get information about pull requests on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * A template for the API URL to get information about releases on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * The API URL to list the stargazers on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * A template for the API URL to get information about statuses of a commit.
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * The API URL to list the subscribers on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * The API URL to subscribe to notifications for this repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * The API URL to get information about tags on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * The API URL to list the teams on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * A template for the API URL to create or retrieve a raw Git tree of the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * The API URL to list the hooks on the repository.
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
};
/**
 * A Dependabot alert.
 */
export type DependabotAlertWithRepository = {
  number: AlertNumber;
  /**
   * The state of the Dependabot alert.
   */
  state: 'auto_dismissed' | 'dismissed' | 'fixed' | 'open';
  /**
   * Details for the vulnerable dependency.
   */
  dependency: {
    package?: DependabotAlertPackage;
    /**
     * The full path to the dependency manifest file, relative to the root of the repository.
     */
    manifest_path?: string;
    /**
     * The execution scope of the vulnerable dependency.
     */
    scope?: ('development' | 'runtime') | null;
  };
  security_advisory: DependabotAlertSecurityAdvisory;
  security_vulnerability: DependabotAlertSecurityVulnerability;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  created_at: AlertCreatedAt;
  updated_at: AlertUpdatedAt;
  dismissed_at: AlertDismissedAt;
  dismissed_by: NullableSimpleUser;
  /**
   * The reason that the alert was dismissed.
   */
  dismissed_reason:
    | (
        | 'fix_started'
        | 'inaccurate'
        | 'no_bandwidth'
        | 'not_used'
        | 'tolerable_risk'
      )
    | null;
  /**
   * An optional comment associated with the alert's dismissal.
   */
  dismissed_comment: string | null;
  fixed_at: AlertFixedAt;
  auto_dismissed_at?: AlertAutoDismissedAt;
  repository: SimpleRepository;
};
/**
 * The time that the alert was last updated in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type NullableAlertUpdatedAt = Date | null;
/**
 * Sets the state of the secret scanning alert. You must provide `resolution` when you set the state to `resolved`.
 */
export enum SecretScanningAlertState {
  OPEN = 'open',
  RESOLVED = 'resolved',
}
/**
 * **Required when the `state` is `resolved`.** The reason for resolving the alert.
 */
export type SecretScanningAlertResolution =
  | ('false_positive' | 'wont_fix' | 'revoked' | 'used_in_tests')
  | null;
export type OrganizationSecretScanningAlert = {
  number?: AlertNumber;
  created_at?: AlertCreatedAt;
  updated_at?: NullableAlertUpdatedAt;
  url?: AlertUrl;
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  state?: SecretScanningAlertState;
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: Date | null;
  resolved_by?: NullableSimpleUser;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  secret_type_display_name?: string;
  /**
   * The secret that was detected.
   */
  secret?: string;
  repository?: SimpleRepository;
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: Date | null;
  /**
   * The comment that was optionally added when this alert was closed
   */
  resolution_comment?: string | null;
  /**
   * The token status as of the latest validity check.
   */
  validity?: 'active' | 'inactive' | 'unknown';
};
/**
 * Actor
 * Actor
 */
export type Actor = {
  id: number;
  login: string;
  display_login?: string;
  gravatar_id: string | null;
  url: string;
  avatar_url: string;
};
/**
 * Milestone
 * A collection of related issues and pull requests.
 */
export type NullableMilestone = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   */
  url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   */
  labels_url: string;
  /**
   * @example 1002604
   */
  id: number;
  /**
   * @example "MDk6TWlsZXN0b25lMTAwMjYwNA=="
   */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   */
  number: number;
  /**
   * The state of the milestone.
   * @example "open"
   * @defaultValue "open"
   */
  state: 'open' | 'closed';
  /**
   * The title of the milestone.
   * @example "v1.0"
   */
  title: string;
  /**
   * @example "Tracking milestone for version 1.0"
   */
  description: string | null;
  creator: NullableSimpleUser;
  /**
   * @example 4
   */
  open_issues: number;
  /**
   * @example 8
   */
  closed_issues: number;
  /**
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: Date;
  /**
   * @example "2013-02-12T13:22:01Z"
   */
  closed_at: Date | null;
  /**
   * @example "2012-10-09T23:39:01Z"
   */
  due_on: Date | null;
} | null;
/**
 * GitHub app
 * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
 */
export type NullableIntegration = {
  /**
   * Unique identifier of the GitHub app
   * @example 37
   */
  id: number;
  /**
   * The slug name of the GitHub app
   * @example "probot-owners"
   */
  slug?: string;
  /**
   * @example "MDExOkludGVncmF0aW9uMQ=="
   */
  node_id: string;
  owner: NullableSimpleUser;
  /**
   * The name of the GitHub app
   * @example "Probot Owners"
   */
  name: string;
  /**
   * @example "The description of the app."
   */
  description: string | null;
  /**
   * @example "https://example.com"
   */
  external_url: string;
  /**
   * @example "https://github.com/apps/super-ci"
   */
  html_url: string;
  /**
   * @example "2017-07-08T16:18:44-04:00"
   */
  created_at: Date;
  /**
   * @example "2017-07-08T16:18:44-04:00"
   */
  updated_at: Date;
  /**
   * The set of permissions for the GitHub app
   * @example
   * {
   *   "issues": "read",
   *   "deployments": "write"
   * }
   */
  permissions: {
    issues?: string;
    checks?: string;
    metadata?: string;
    contents?: string;
    deployments?: string;
  } & {
    [key: string]: string;
  };
  /**
   * The list of events for the GitHub app
   * @example
   * [
   *   "label",
   *   "deployment"
   * ]
   */
  events: string[];
  /**
   * The number of installations associated with the GitHub app
   * @example 5
   */
  installations_count?: number;
  /**
   * @example "\"Iv1.25b5d1e65ffc4022\""
   */
  client_id?: string;
  /**
   * @example "\"1d4b2097ac622ba702d19de498f005747a8b21d3\""
   */
  client_secret?: string;
  /**
   * @example "\"6fba8f2fc8a7e8f2cca5577eddd82ca7586b3b6b\""
   */
  webhook_secret?: string | null;
  /**
   * @example "\"-----BEGIN RSA PRIVATE KEY-----\\nMIIEogIBAAKCAQEArYxrNYD/iT5CZVpRJu4rBKmmze3PVmT/gCo2ATUvDvZTPTey\\nxcGJ3vvrJXazKk06pN05TN29o98jrYz4cengG3YGsXPNEpKsIrEl8NhbnxapEnM9\\nJCMRe0P5JcPsfZlX6hmiT7136GRWiGOUba2X9+HKh8QJVLG5rM007TBER9/z9mWm\\nrJuNh+m5l320oBQY/Qq3A7wzdEfZw8qm/mIN0FCeoXH1L6B8xXWaAYBwhTEh6SSn\\nZHlO1Xu1JWDmAvBCi0RO5aRSKM8q9QEkvvHP4yweAtK3N8+aAbZ7ovaDhyGz8r6r\\nzhU1b8Uo0Z2ysf503WqzQgIajr7Fry7/kUwpgQIDAQABAoIBADwJp80Ko1xHPZDy\\nfcCKBDfIuPvkmSW6KumbsLMaQv1aGdHDwwTGv3t0ixSay8CGlxMRtRDyZPib6SvQ\\n6OH/lpfpbMdW2ErkksgtoIKBVrDilfrcAvrNZu7NxRNbhCSvN8q0s4ICecjbbVQh\\nnueSdlA6vGXbW58BHMq68uRbHkP+k+mM9U0mDJ1HMch67wlg5GbayVRt63H7R2+r\\nVxcna7B80J/lCEjIYZznawgiTvp3MSanTglqAYi+m1EcSsP14bJIB9vgaxS79kTu\\noiSo93leJbBvuGo8QEiUqTwMw4tDksmkLsoqNKQ1q9P7LZ9DGcujtPy4EZsamSJT\\ny8OJt0ECgYEA2lxOxJsQk2kI325JgKFjo92mQeUObIvPfSNWUIZQDTjniOI6Gv63\\nGLWVFrZcvQBWjMEQraJA9xjPbblV8PtfO87MiJGLWCHFxmPz2dzoedN+2Coxom8m\\nV95CLz8QUShuao6u/RYcvUaZEoYs5bHcTmy5sBK80JyEmafJPtCQVxMCgYEAy3ar\\nZr3yv4xRPEPMat4rseswmuMooSaK3SKub19WFI5IAtB/e7qR1Rj9JhOGcZz+OQrl\\nT78O2OFYlgOIkJPvRMrPpK5V9lslc7tz1FSh3BZMRGq5jSyD7ETSOQ0c8T2O/s7v\\nbeEPbVbDe4mwvM24XByH0GnWveVxaDl51ABD65sCgYB3ZAspUkOA5egVCh8kNpnd\\nSd6SnuQBE3ySRlT2WEnCwP9Ph6oPgn+oAfiPX4xbRqkL8q/k0BdHQ4h+zNwhk7+h\\nWtPYRAP1Xxnc/F+jGjb+DVaIaKGU18MWPg7f+FI6nampl3Q0KvfxwX0GdNhtio8T\\nTj1E+SnFwh56SRQuxSh2gwKBgHKjlIO5NtNSflsUYFM+hyQiPiqnHzddfhSG+/3o\\nm5nNaSmczJesUYreH5San7/YEy2UxAugvP7aSY2MxB+iGsiJ9WD2kZzTUlDZJ7RV\\nUzWsoqBR+eZfVJ2FUWWvy8TpSG6trh4dFxImNtKejCR1TREpSiTV3Zb1dmahK9GV\\nrK9NAoGAbBxRLoC01xfxCTgt5BDiBcFVh4fp5yYKwavJPLzHSpuDOrrI9jDn1oKN\\nonq5sDU1i391zfQvdrbX4Ova48BN+B7p63FocP/MK5tyyBoT8zQEk2+vWDOw7H/Z\\nu5dTCPxTIsoIwUw1I+7yIxqJzLPFgR2gVBwY1ra/8iAqCj+zeBw=\\n-----END RSA PRIVATE KEY-----\\n\""
   */
  pem?: string;
} | null;
/**
 * author_association
 * How the author is associated with the repository.
 * @example "OWNER"
 */
export enum AuthorAssociation {
  COLLABORATOR = 'COLLABORATOR',
  CONTRIBUTOR = 'CONTRIBUTOR',
  FIRST_TIMER = 'FIRST_TIMER',
  FIRST_TIME_CONTRIBUTOR = 'FIRST_TIME_CONTRIBUTOR',
  MANNEQUIN = 'MANNEQUIN',
  MEMBER = 'MEMBER',
  NONE = 'NONE',
  OWNER = 'OWNER',
}
/**
 * Reaction Rollup
 */
export type ReactionRollup = {
  url: string;
  total_count: number;
  '+1': number;
  '-1': number;
  laugh: number;
  confused: number;
  heart: number;
  hooray: number;
  eyes: number;
  rocket: number;
};
/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type Issue = {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   * @example "https://api.github.com/repositories/42/issues/1"
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /**
   * The reason for the current state
   * @example "not_planned"
   */
  state_reason?: ('completed' | 'reopened' | 'not_planned') | null;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   */
  title: string;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   */
  body?: string | null;
  user: NullableSimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example
   * [
   *   "bug",
   *   "registration"
   * ]
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    merged_at?: Date | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  closed_at: Date | null;
  created_at: Date;
  updated_at: Date;
  draft?: boolean;
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  repository?: Repository;
  performed_via_github_app?: NullableIntegration;
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
};
/**
 * Issue Comment
 * Comments provide a way for people to collaborate on an issue.
 */
export type IssueComment = {
  /**
   * Unique identifier of the issue comment
   * @example 42
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: NullableSimpleUser;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: Date;
  issue_url: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
};
/**
 * Event
 * Event
 */
export type Event = {
  id: string;
  type: string | null;
  actor: Actor;
  repo: {
    id: number;
    name: string;
    url: string;
  };
  org?: Actor;
  payload: {
    action?: string;
    issue?: Issue;
    comment?: IssueComment;
    pages?: {
      page_name?: string;
      title?: string;
      summary?: string | null;
      action?: string;
      sha?: string;
      html_url?: string;
    }[];
  };
  public: boolean;
  created_at: Date | null;
};
/**
 * Link With Type
 * Hypermedia Link with Type
 */
export type LinkWithType = {
  href: string;
  type: string;
};
/**
 * Feed
 * Feed
 */
export type Feed = {
  /**
   * @example "https://github.com/timeline"
   */
  timeline_url: string;
  /**
   * @example "https://github.com/{user}"
   */
  user_url: string;
  /**
   * @example "https://github.com/octocat"
   */
  current_user_public_url?: string;
  /**
   * @example "https://github.com/octocat.private?token=abc123"
   */
  current_user_url?: string;
  /**
   * @example "https://github.com/octocat.private.actor?token=abc123"
   */
  current_user_actor_url?: string;
  /**
   * @example "https://github.com/octocat-org"
   */
  current_user_organization_url?: string;
  /**
   * @example
   * [
   *   "https://github.com/organizations/github/octocat.private.atom?token=abc123"
   * ]
   */
  current_user_organization_urls?: string[];
  /**
   * @example "https://github.com/security-advisories"
   */
  security_advisories_url?: string;
  /**
   * A feed of discussions for a given repository.
   * @example "https://github.com/{user}/{repo}/discussions"
   */
  repository_discussions_url?: string;
  /**
   * A feed of discussions for a given repository and category.
   * @example "https://github.com/{user}/{repo}/discussions/categories/{category}"
   */
  repository_discussions_category_url?: string;
  _links: {
    timeline: LinkWithType;
    user: LinkWithType;
    security_advisories?: LinkWithType;
    current_user?: LinkWithType;
    current_user_public?: LinkWithType;
    current_user_actor?: LinkWithType;
    current_user_organization?: LinkWithType;
    current_user_organizations?: LinkWithType[];
    repository_discussions?: LinkWithType;
    repository_discussions_category?: LinkWithType;
  };
};
/**
 * Base Gist
 * Base Gist
 */
export type BaseGist = {
  url: string;
  forks_url: string;
  commits_url: string;
  id: string;
  node_id: string;
  git_pull_url: string;
  git_push_url: string;
  html_url: string;
  files: {
    [key: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
    };
  };
  public: boolean;
  created_at: Date;
  updated_at: Date;
  description: string | null;
  comments: number;
  user: NullableSimpleUser;
  comments_url: string;
  owner?: SimpleUser;
  truncated?: boolean;
  forks?: any[];
  history?: any[];
};
/**
 * Public User
 * Public User
 */
export type PublicUser = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  following_url: string;
  gists_url: string;
  starred_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  events_url: string;
  received_events_url: string;
  type: string;
  site_admin: boolean;
  name: string | null;
  company: string | null;
  blog: string | null;
  location: string | null;
  email: string | null;
  hireable: boolean | null;
  bio: string | null;
  twitter_username?: string | null;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  created_at: Date;
  updated_at: Date;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  suspended_at?: Date | null;
  /**
   * @example 1
   */
  private_gists?: number;
  /**
   * @example 2
   */
  total_private_repos?: number;
  /**
   * @example 2
   */
  owned_private_repos?: number;
  /**
   * @example 1
   */
  disk_usage?: number;
  /**
   * @example 3
   */
  collaborators?: number;
};
/**
 * Gist History
 * Gist History
 */
export type GistHistory = {
  user?: NullableSimpleUser;
  version?: string;
  committed_at?: Date;
  change_status?: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  url?: string;
};
/**
 * Gist Simple
 * Gist Simple
 */
export type GistSimple = {
  /**
   * @deprecated
   */
  forks?:
    | {
        id?: string;
        url?: string;
        user?: PublicUser;
        created_at?: Date;
        updated_at?: Date;
      }[]
    | null;
  /**
   * @deprecated
   */
  history?: GistHistory[] | null;
  /**
   * Gist
   * Gist
   */
  fork_of?: {
    url: string;
    forks_url: string;
    commits_url: string;
    id: string;
    node_id: string;
    git_pull_url: string;
    git_push_url: string;
    html_url: string;
    files: {
      [key: string]: {
        filename?: string;
        type?: string;
        language?: string;
        raw_url?: string;
        size?: number;
      };
    };
    public: boolean;
    created_at: Date;
    updated_at: Date;
    description: string | null;
    comments: number;
    user: NullableSimpleUser;
    comments_url: string;
    owner?: NullableSimpleUser;
    truncated?: boolean;
    forks?: any[];
    history?: any[];
  } | null;
  url?: string;
  forks_url?: string;
  commits_url?: string;
  id?: string;
  node_id?: string;
  git_pull_url?: string;
  git_push_url?: string;
  html_url?: string;
  files?: {
    [key: string]: {
      filename?: string;
      type?: string;
      language?: string;
      raw_url?: string;
      size?: number;
      truncated?: boolean;
      content?: string;
    } | null;
  };
  public?: boolean;
  created_at?: string;
  updated_at?: string;
  description?: string | null;
  comments?: number;
  user?: string | null;
  comments_url?: string;
  owner?: SimpleUser;
  truncated?: boolean;
};
/**
 * Gist Comment
 * A comment made to a gist.
 */
export type GistComment = {
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDExOkdpc3RDb21tZW50MQ=="
   */
  node_id: string;
  /**
   * @example "https://api.github.com/gists/a6db0bec360bb87e9418/comments/1"
   */
  url: string;
  /**
   * The comment text.
   * @example "Body of the attachment"
   */
  body: string;
  user: NullableSimpleUser;
  /**
   * @example "2011-04-18T23:23:56Z"
   */
  created_at: Date;
  /**
   * @example "2011-04-18T23:23:56Z"
   */
  updated_at: Date;
  author_association: AuthorAssociation;
};
/**
 * Gist Commit
 * Gist Commit
 */
export type GistCommit = {
  /**
   * @example "https://api.github.com/gists/aa5a315d61ae9438b18d/57a7f021a713b1c5a6a199b54cc514735d2d462f"
   */
  url: string;
  /**
   * @example "57a7f021a713b1c5a6a199b54cc514735d2d462f"
   */
  version: string;
  user: NullableSimpleUser;
  change_status: {
    total?: number;
    additions?: number;
    deletions?: number;
  };
  /**
   * @example "2010-04-14T02:15:15Z"
   */
  committed_at: Date;
};
/**
 * Gitignore Template
 * Gitignore Template
 */
export type GitignoreTemplate = {
  /**
   * @example "C"
   */
  name: string;
  /**
   * @example "# Object files\n*.o\n\n# Libraries\n*.lib\n*.a\n\n# Shared objects (inc. Windows DLLs)\n*.dll\n*.so\n*.so.*\n*.dylib\n\n# Executables\n*.exe\n*.out\n*.app\n"
   */
  source: string;
};
/**
 * License Simple
 * License Simple
 */
export type LicenseSimple = {
  /**
   * @example "mit"
   */
  key: string;
  /**
   * @example "MIT License"
   */
  name: string;
  /**
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /**
   * @example "MIT"
   */
  spdx_id: string | null;
  /**
   * @example "MDc6TGljZW5zZW1pdA=="
   */
  node_id: string;
  html_url?: string;
};
/**
 * License
 * License
 */
export type License = {
  /**
   * @example "mit"
   */
  key: string;
  /**
   * @example "MIT License"
   */
  name: string;
  /**
   * @example "MIT"
   */
  spdx_id: string | null;
  /**
   * @example "https://api.github.com/licenses/mit"
   */
  url: string | null;
  /**
   * @example "MDc6TGljZW5zZW1pdA=="
   */
  node_id: string;
  /**
   * @example "http://choosealicense.com/licenses/mit/"
   */
  html_url: string;
  /**
   * @example "A permissive license that is short and to the point. It lets people do anything with your code with proper attribution and without warranty."
   */
  description: string;
  /**
   * @example "Create a text file (typically named LICENSE or LICENSE.txt) in the root of your source code and copy the text of the license into the file. Replace [year] with the current year and [fullname] with the name (or names) of the copyright holders."
   */
  implementation: string;
  /**
   * @example
   * [
   *   "commercial-use",
   *   "modifications",
   *   "distribution",
   *   "sublicense",
   *   "private-use"
   * ]
   */
  permissions: string[];
  /**
   * @example
   * [
   *   "include-copyright"
   * ]
   */
  conditions: string[];
  /**
   * @example
   * [
   *   "no-liability"
   * ]
   */
  limitations: string[];
  /**
   * @example "\n\nThe MIT License (MIT)\n\nCopyright (c) [year] [fullname]\n\nPermission is hereby granted, free of charge, to any person obtaining a copy\nof this software and associated documentation files (the \"Software\"), to deal\nin the Software without restriction, including without limitation the rights\nto use, copy, modify, merge, publish, distribute, sublicense, and/or sell\ncopies of the Software, and to permit persons to whom the Software is\nfurnished to do so, subject to the following conditions:\n\nThe above copyright notice and this permission notice shall be included in all\ncopies or substantial portions of the Software.\n\nTHE SOFTWARE IS PROVIDED \"AS IS\", WITHOUT WARRANTY OF ANY KIND, EXPRESS OR\nIMPLIED, INCLUDING BUT NOT LIMITED TO THE WARRANTIES OF MERCHANTABILITY,\nFITNESS FOR A PARTICULAR PURPOSE AND NONINFRINGEMENT. IN NO EVENT SHALL THE\nAUTHORS OR COPYRIGHT HOLDERS BE LIABLE FOR ANY CLAIM, DAMAGES OR OTHER\nLIABILITY, WHETHER IN AN ACTION OF CONTRACT, TORT OR OTHERWISE, ARISING FROM,\nOUT OF OR IN CONNECTION WITH THE SOFTWARE OR THE USE OR OTHER DEALINGS IN THE\nSOFTWARE.\n"
   */
  body: string;
  /**
   * @example true
   */
  featured: boolean;
};
/**
 * Marketplace Listing Plan
 * Marketplace Listing Plan
 */
export type MarketplaceListingPlan = {
  /**
   * @example "https://api.github.com/marketplace_listing/plans/1313"
   */
  url: string;
  /**
   * @example "https://api.github.com/marketplace_listing/plans/1313/accounts"
   */
  accounts_url: string;
  /**
   * @example 1313
   */
  id: number;
  /**
   * @example 3
   */
  number: number;
  /**
   * @example "Pro"
   */
  name: string;
  /**
   * @example "A professional-grade CI solution"
   */
  description: string;
  /**
   * @example 1099
   */
  monthly_price_in_cents: number;
  /**
   * @example 11870
   */
  yearly_price_in_cents: number;
  /**
   * @example "FLAT_RATE"
   */
  price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
  /**
   * @example true
   */
  has_free_trial: boolean;
  unit_name: string | null;
  /**
   * @example "published"
   */
  state: string;
  /**
   * @example
   * [
   *   "Up to 25 private repositories",
   *   "11 concurrent builds"
   * ]
   */
  bullets: string[];
};
/**
 * Marketplace Purchase
 * Marketplace Purchase
 */
export type MarketplacePurchase = {
  url: string;
  type: string;
  id: number;
  login: string;
  organization_billing_email?: string;
  email?: string | null;
  marketplace_pending_change?: {
    is_installed?: boolean;
    effective_date?: string;
    unit_count?: number | null;
    id?: number;
    plan?: MarketplaceListingPlan;
  } | null;
  marketplace_purchase: {
    billing_cycle?: string;
    next_billing_date?: string | null;
    is_installed?: boolean;
    unit_count?: number | null;
    on_free_trial?: boolean;
    free_trial_ends_on?: string | null;
    updated_at?: string;
    plan?: MarketplaceListingPlan;
  };
};
/**
 * Api Overview
 * Api Overview
 */
export type ApiOverview = {
  /**
   * @example true
   */
  verifiable_password_authentication: boolean;
  ssh_key_fingerprints?: {
    SHA256_RSA?: string;
    SHA256_DSA?: string;
    SHA256_ECDSA?: string;
    SHA256_ED25519?: string;
  };
  /**
   * @example
   * [
   *   "ssh-ed25519 ABCDEFGHIJKLMNOPQRSTUVWXYZ"
   * ]
   */
  ssh_keys?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  hooks?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  github_enterprise_importer?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  web?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  api?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  git?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  packages?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  pages?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  importer?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  actions?: string[];
  /**
   * @example
   * [
   *   "192.0.2.1"
   * ]
   */
  dependabot?: string[];
  domains?: {
    website?: string[];
    codespaces?: string[];
    copilot?: string[];
    packages?: string[];
    actions?: string[];
  };
};
export type SecurityAndAnalysis = {
  advanced_security?: {
    status?: 'enabled' | 'disabled';
  };
  /**
   * Enable or disable Dependabot security updates for the repository.
   */
  dependabot_security_updates?: {
    /**
     * The enablement status of Dependabot security updates for the repository.
     */
    status?: 'enabled' | 'disabled';
  };
  secret_scanning?: {
    status?: 'enabled' | 'disabled';
  };
  secret_scanning_push_protection?: {
    status?: 'enabled' | 'disabled';
  };
} | null;
/**
 * Minimal Repository
 * Minimal Repository
 */
export type MinimalRepository = {
  /**
   * @example 1296269
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * @example "Hello-World"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  git_url?: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  ssh_url?: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at?: Date | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };
  /**
   * @example "admin"
   */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  forks?: number;
  open_issues?: number;
  watchers?: number;
  allow_forking?: boolean;
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysis;
};
/**
 * Thread
 * Thread
 */
export type Thread = {
  id: string;
  repository: MinimalRepository;
  subject: {
    title: string;
    url: string;
    latest_comment_url: string;
    type: string;
  };
  reason: string;
  unread: boolean;
  updated_at: string;
  last_read_at: string | null;
  url: string;
  /**
   * @example "https://api.github.com/notifications/threads/2/subscription"
   */
  subscription_url: string;
};
/**
 * Thread Subscription
 * Thread Subscription
 */
export type ThreadSubscription = {
  /**
   * @example true
   */
  subscribed: boolean;
  ignored: boolean;
  reason: string | null;
  /**
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: Date | null;
  /**
   * @example "https://api.github.com/notifications/threads/1/subscription"
   */
  url: string;
  /**
   * @example "https://api.github.com/notifications/threads/1"
   */
  thread_url?: string;
  /**
   * @example "https://api.github.com/repos/1"
   */
  repository_url?: string;
};
/**
 * Organization Simple
 * A GitHub organization.
 */
export type OrganizationSimple = {
  /**
   * @example "github"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDEyOk9yZ2FuaXphdGlvbjE="
   */
  node_id: string;
  /**
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/orgs/github/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://api.github.com/orgs/github/issues"
   */
  issues_url: string;
  /**
   * @example "https://api.github.com/orgs/github/members{/member}"
   */
  members_url: string;
  /**
   * @example "https://api.github.com/orgs/github/public_members{/member}"
   */
  public_members_url: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "A great organization"
   */
  description: string | null;
};
/**
 * Organization Full
 * Organization Full
 */
export type OrganizationFull = {
  /**
   * @example "github"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDEyOk9yZ2FuaXphdGlvbjE="
   */
  node_id: string;
  /**
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/orgs/github/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://api.github.com/orgs/github/issues"
   */
  issues_url: string;
  /**
   * @example "https://api.github.com/orgs/github/members{/member}"
   */
  members_url: string;
  /**
   * @example "https://api.github.com/orgs/github/public_members{/member}"
   */
  public_members_url: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "A great organization"
   */
  description: string | null;
  /**
   * @example "github"
   */
  name?: string;
  /**
   * @example "GitHub"
   */
  company?: string;
  /**
   * @example "https://github.com/blog"
   */
  blog?: string;
  /**
   * @example "San Francisco"
   */
  location?: string;
  /**
   * @example "octocat@github.com"
   */
  email?: string;
  /**
   * @example "github"
   */
  twitter_username?: string | null;
  /**
   * @example true
   */
  is_verified?: boolean;
  /**
   * @example true
   */
  has_organization_projects: boolean;
  /**
   * @example true
   */
  has_repository_projects: boolean;
  /**
   * @example 2
   */
  public_repos: number;
  /**
   * @example 1
   */
  public_gists: number;
  /**
   * @example 20
   */
  followers: number;
  following: number;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "Organization"
   */
  type: string;
  /**
   * @example 100
   */
  total_private_repos?: number;
  /**
   * @example 100
   */
  owned_private_repos?: number;
  /**
   * @example 81
   */
  private_gists?: number | null;
  /**
   * @example 10000
   */
  disk_usage?: number | null;
  /**
   * @example 8
   */
  collaborators?: number | null;
  /**
   * @example "org@example.com"
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;
  /**
   * @example true
   */
  members_can_create_repositories?: boolean | null;
  /**
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;
  /**
   * @example "all"
   */
  members_allowed_repository_creation_type?: string;
  /**
   * @example true
   */
  members_can_create_public_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_private_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_internal_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_public_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_private_pages?: boolean;
  members_can_fork_private_repositories?: boolean | null;
  web_commit_signoff_required?: boolean;
  /**
   * Whether GitHub Advanced Security is enabled for new repositories and repositories transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  advanced_security_enabled_for_new_repositories?: boolean;
  /**
   * Whether GitHub Advanced Security is automatically enabled for new repositories and repositories transferred to
   * this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  dependabot_alerts_enabled_for_new_repositories?: boolean;
  /**
   * Whether dependabot security updates are automatically enabled for new repositories and repositories transferred
   * to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  dependabot_security_updates_enabled_for_new_repositories?: boolean;
  /**
   * Whether dependency graph is automatically enabled for new repositories and repositories transferred to this
   * organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  dependency_graph_enabled_for_new_repositories?: boolean;
  /**
   * Whether secret scanning is automatically enabled for new repositories and repositories transferred to this
   * organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  secret_scanning_enabled_for_new_repositories?: boolean;
  /**
   * Whether secret scanning push protection is automatically enabled for new repositories and repositories
   * transferred to this organization.
   *
   * This field is only visible to organization owners or members of a team with the security manager role.
   */
  secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
  /**
   * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
   */
  secret_scanning_push_protection_custom_link_enabled?: boolean;
  /**
   * An optional URL string to display to contributors who are blocked from pushing a secret.
   * @example "https://github.com/test-org/test-repo/blob/main/README.md"
   */
  secret_scanning_push_protection_custom_link?: string | null;
  /**
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: Date;
  updated_at: Date;
  archived_at: Date | null;
};
export type ActionsCacheUsageOrgEnterprise = {
  /**
   * The count of active caches across all repositories of an enterprise or an organization.
   */
  total_active_caches_count: number;
  /**
   * The total size in bytes of all active cache items across all repositories of an enterprise or an organization.
   */
  total_active_caches_size_in_bytes: number;
};
/**
 * Actions Cache Usage by repository
 * GitHub Actions Cache Usage by repository.
 */
export type ActionsCacheUsageByRepository = {
  /**
   * The repository owner and name for the cache usage being shown.
   * @example "octo-org/Hello-World"
   */
  full_name: string;
  /**
   * The sum of the size in bytes of all the active cache items in the repository.
   * @example 2322142
   */
  active_caches_size_in_bytes: number;
  /**
   * The number of active caches in the repository.
   * @example 3
   */
  active_caches_count: number;
};
/**
 * Actions OIDC Subject customization
 * Actions OIDC Subject customization
 */
export type OidcCustomSub = {
  /**
   * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys: string[];
};
/**
 * Empty Object
 * An object without any properties.
 */
export type EmptyObject = any;
/**
 * The policy that controls the repositories in the organization that are allowed to run GitHub Actions.
 */
export enum EnabledRepositories {
  ALL = 'all',
  NONE = 'none',
  SELECTED = 'selected',
}
/**
 * The permissions policy that controls the actions and reusable workflows that are allowed to run.
 */
export enum AllowedActions {
  ALL = 'all',
  LOCAL_ONLY = 'local_only',
  SELECTED = 'selected',
}
/**
 * The API URL to use to get or set the actions and reusable workflows that are allowed to run, when `allowed_actions` is set to `selected`.
 */
export type SelectedActionsUrl = string;
export type ActionsOrganizationPermissions = {
  enabled_repositories: EnabledRepositories;
  /**
   * The API URL to use to get or set the selected repositories that are allowed to run GitHub Actions, when `enabled_repositories` is set to `selected`.
   */
  selected_repositories_url?: string;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};
export type SelectedActions = {
  /**
   * Whether GitHub-owned actions are allowed. For example, this includes the actions in the `actions` organization.
   */
  github_owned_allowed?: boolean;
  /**
   * Whether actions from GitHub Marketplace verified creators are allowed. Set to `true` to allow all actions by GitHub Marketplace verified creators.
   */
  verified_allowed?: boolean;
  /**
   * Specifies a list of string-matching patterns to allow specific action(s) and reusable workflow(s). Wildcards, tags, and SHAs are allowed. For example, `monalisa/octocat@*`, `monalisa/octocat@v2`, `monalisa/*`.
   *
   * **Note**: The `patterns_allowed` setting only applies to public repositories.
   */
  patterns_allowed?: string[];
};
/**
 * The default workflow permissions granted to the GITHUB_TOKEN when running workflows.
 */
export enum ActionsDefaultWorkflowPermissions {
  READ = 'read',
  WRITE = 'write',
}
/**
 * Whether GitHub Actions can approve pull requests. Enabling this can be a security risk.
 */
export type ActionsCanApprovePullRequestReviews = boolean;
export type ActionsGetDefaultWorkflowPermissions = {
  default_workflow_permissions: ActionsDefaultWorkflowPermissions;
  can_approve_pull_request_reviews: ActionsCanApprovePullRequestReviews;
};
export type ActionsSetDefaultWorkflowPermissions = {
  default_workflow_permissions?: ActionsDefaultWorkflowPermissions;
  can_approve_pull_request_reviews?: ActionsCanApprovePullRequestReviews;
};
/**
 * Self hosted runner label
 * A label for a self hosted runner
 */
export type RunnerLabel = {
  /**
   * Unique identifier of the label.
   */
  id?: number;
  /**
   * Name of the label.
   */
  name: string;
  /**
   * The type of label. Read-only labels are applied automatically when the runner is configured.
   */
  type?: 'read-only' | 'custom';
};
/**
 * Self hosted runners
 * A self hosted runner
 */
export type Runner = {
  /**
   * The id of the runner.
   * @example 5
   */
  id: number;
  /**
   * The id of the runner group.
   * @example 1
   */
  runner_group_id?: number;
  /**
   * The name of the runner.
   * @example "iMac"
   */
  name: string;
  /**
   * The Operating System of the runner.
   * @example "macos"
   */
  os: string;
  /**
   * The status of the runner.
   * @example "online"
   */
  status: string;
  busy: boolean;
  labels: RunnerLabel[];
};
/**
 * Runner Application
 * Runner Application
 */
export type RunnerApplication = {
  os: string;
  architecture: string;
  download_url: string;
  filename: string;
  /**
   * A short lived bearer token used to download the runner, if needed.
   */
  temp_download_token?: string;
  sha256_checksum?: string;
};
/**
 * Authentication Token
 * Authentication Token
 */
export type AuthenticationToken = {
  /**
   * The token used for authentication
   * @example "v1.1f699f1069f60xxx"
   */
  token: string;
  /**
   * The time this token expires
   * @example "2016-07-11T22:14:10Z"
   */
  expires_at: Date;
  /**
   * @example
   * {
   *   "issues": "read",
   *   "deployments": "write"
   * }
   */
  permissions?: any;
  /**
   * The repositories this token has access to
   */
  repositories?: Repository[];
  /**
   * @example "config.yaml"
   */
  single_file?: string | null;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection?: 'all' | 'selected';
};
/**
 * Actions Secret for an Organization
 * Secrets for GitHub Actions for an organization.
 */
export type OrganizationActionsSecret = {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  created_at: Date;
  updated_at: Date;
  /**
   * Visibility of a secret
   */
  visibility: 'all' | 'private' | 'selected';
  /**
   * @example "https://api.github.com/organizations/org/secrets/my_secret/repositories"
   */
  selected_repositories_url?: string;
};
/**
 * ActionsPublicKey
 * The public key used for setting Actions Secrets.
 */
export type ActionsPublicKey = {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
  /**
   * @example 2
   */
  id?: number;
  /**
   * @example "https://api.github.com/user/keys/2"
   */
  url?: string;
  /**
   * @example "ssh-rsa AAAAB3NzaC1yc2EAAA"
   */
  title?: string;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string;
};
/**
 * Actions Variable for an Organization
 * Organization variable for GitHub Actions.
 */
export type OrganizationActionsVariable = {
  /**
   * The name of the variable.
   * @example "USERNAME"
   */
  name: string;
  /**
   * The value of the variable.
   * @example "octocat"
   */
  value: string;
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example "2019-01-24T22:45:36.000Z"
   */
  created_at: Date;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example "2019-01-24T22:45:36.000Z"
   */
  updated_at: Date;
  /**
   * Visibility of a variable
   */
  visibility: 'all' | 'private' | 'selected';
  /**
   * @example "https://api.github.com/organizations/org/variables/USERNAME/repositories"
   */
  selected_repositories_url?: string;
};
/**
 * The name of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolName = string;
/**
 * The GUID of the tool used to generate the code scanning analysis, if provided in the uploaded SARIF data.
 */
export type CodeScanningAnalysisToolGuid = string | null;
/**
 * State of a code scanning alert.
 */
export enum CodeScanningAlertStateQuery {
  OPEN = 'open',
  CLOSED = 'closed',
  DISMISSED = 'dismissed',
  FIXED = 'fixed',
}
/**
 * Severity of a code scanning alert.
 */
export enum CodeScanningAlertSeverity {
  CRITICAL = 'critical',
  HIGH = 'high',
  MEDIUM = 'medium',
  LOW = 'low',
  WARNING = 'warning',
  NOTE = 'note',
  ERROR = 'error',
}
/**
 * The REST API URL for fetching the list of instances for an alert.
 */
export type AlertInstancesUrl = string;
/**
 * State of a code scanning alert.
 */
export enum CodeScanningAlertState {
  OPEN = 'open',
  DISMISSED = 'dismissed',
  FIXED = 'fixed',
}
/**
 * **Required when the state is dismissed.** The reason for dismissing or closing the alert.
 */
export type CodeScanningAlertDismissedReason =
  | (null | 'false positive' | "won't fix" | 'used in tests')
  | null;
/**
 * The dismissal comment associated with the dismissal of the alert.
 */
export type CodeScanningAlertDismissedComment = string | null;
export type CodeScanningAlertRuleSummary = {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /**
   * A set of tags applicable for the rule.
   */
  tags?: string[] | null;
  /**
   * The severity of the alert.
   */
  severity?: ('none' | 'note' | 'warning' | 'error') | null;
  /**
   * The security severity of the alert.
   */
  security_severity_level?: ('low' | 'medium' | 'high' | 'critical') | null;
  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
};
/**
 * The version of the tool used to generate the code scanning analysis.
 */
export type CodeScanningAnalysisToolVersion = string | null;
export type CodeScanningAnalysisTool = {
  name?: CodeScanningAnalysisToolName;
  version?: CodeScanningAnalysisToolVersion;
  guid?: CodeScanningAnalysisToolGuid;
};
/**
 * The Git reference, formatted as `refs/pull/<number>/merge`, `refs/pull/<number>/head`,
 * `refs/heads/<branch name>` or simply `<branch name>`.
 */
export type CodeScanningRef = string;
/**
 * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
 */
export type CodeScanningAnalysisAnalysisKey = string;
/**
 * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
 */
export type CodeScanningAlertEnvironment = string;
/**
 * Identifies the configuration under which the analysis was executed. Used to distinguish between multiple analyses for the same tool and commit, but performed on different languages or different parts of the code.
 */
export type CodeScanningAnalysisCategory = string;
/**
 * Describe a region within a file for the alert.
 */
export type CodeScanningAlertLocation = {
  path?: string;
  start_line?: number;
  end_line?: number;
  start_column?: number;
  end_column?: number;
};
/**
 * A classification of the file. For example to identify it as generated.
 */
export type CodeScanningAlertClassification =
  | ('source' | 'generated' | 'test' | 'library')
  | null;
export type CodeScanningAlertInstance = {
  ref?: CodeScanningRef;
  analysis_key?: CodeScanningAnalysisAnalysisKey;
  environment?: CodeScanningAlertEnvironment;
  category?: CodeScanningAnalysisCategory;
  state?: CodeScanningAlertState;
  commit_sha?: string;
  message?: {
    text?: string;
  };
  location?: CodeScanningAlertLocation;
  html_url?: string;
  /**
   * Classifications that have been applied to the file that triggered the alert.
   * For example identifying it as documentation, or a generated file.
   */
  classifications?: CodeScanningAlertClassification[];
};
export type CodeScanningOrganizationAlertItems = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  fixed_at?: AlertFixedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_at: AlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
  repository: SimpleRepository;
};
/**
 * Codespace machine
 * A description of the machine powering a codespace.
 */
export type NullableCodespaceMachine = {
  /**
   * The name of the machine.
   * @example "standardLinux"
   */
  name: string;
  /**
   * The display name of the machine includes cores, memory, and storage.
   * @example "4 cores, 16 GB RAM, 64 GB storage"
   */
  display_name: string;
  /**
   * The operating system of the machine.
   * @example "linux"
   */
  operating_system: string;
  /**
   * How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;
  /**
   * How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;
  /**
   * How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example "ready"
   */
  prebuild_availability: ('none' | 'ready' | 'in_progress') | null;
} | null;
/**
 * Codespace
 * A codespace.
 */
export type Codespace = {
  /**
   * @example 1
   */
  id: number;
  /**
   * Automatically generated name of this codespace.
   * @example "monalisa-octocat-hello-world-g4wpq6h95q"
   */
  name: string;
  /**
   * Display name for this codespace.
   * @example "bookish space pancake"
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   * @example "26a7c758-7299-4a73-b978-5a92a7ae98a0"
   */
  environment_id: string | null;
  owner: SimpleUser;
  billable_owner: SimpleUser;
  repository: MinimalRepository;
  machine: NullableCodespaceMachine;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   * @example ".devcontainer/example/devcontainer.json"
   */
  devcontainer_path?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   */
  prebuild: boolean | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: Date;
  /**
   * Last known time this codespace was started.
   * @example "2011-01-26T19:01:12Z"
   */
  last_used_at: Date;
  /**
   * State of this codespace.
   * @example "Available"
   */
  state:
    | 'Unknown'
    | 'Created'
    | 'Queued'
    | 'Provisioning'
    | 'Available'
    | 'Awaiting'
    | 'Unavailable'
    | 'Deleted'
    | 'Moved'
    | 'Shutdown'
    | 'Archived'
    | 'Starting'
    | 'ShuttingDown'
    | 'Failed'
    | 'Exporting'
    | 'Updating'
    | 'Rebuilding';
  /**
   * API URL for this codespace.
   */
  url: string;
  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     */
    behind?: number;
    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;
    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     * @example "main"
     */
    ref?: string;
  };
  /**
   * The initally assigned location of a new codespace.
   * @example "WestUs2"
   */
  location: 'EastUs' | 'SouthEastAsia' | 'WestEurope' | 'WestUs2';
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * URL to access this codespace on the web.
   */
  web_url: string;
  /**
   * API URL to access available alternate machine types for this codespace.
   */
  machines_url: string;
  /**
   * API URL to start this codespace.
   */
  start_url: string;
  /**
   * API URL to stop this codespace.
   */
  stop_url: string;
  /**
   * API URL to publish this codespace to a new repository.
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   */
  pulls_url: string | null;
  recent_folders: string[];
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: string[] | null;
  };
  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean | null;
  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string | null;
  /**
   * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  idle_timeout_notice?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   * @example 60
   */
  retention_period_minutes?: number | null;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   * @example "2011-01-26T20:01:12Z"
   */
  retention_expires_at?: Date | null;
  /**
   * The text to display to a user when a codespace has been stopped for a potentially actionable reason.
   * @example "you've used 100% of your spending limit for Codespaces"
   */
  last_known_stop_notice?: string | null;
};
/**
 * Codespaces Secret
 * Secrets for a GitHub Codespace.
 */
export type CodespacesOrgSecret = {
  /**
   * The name of the secret
   * @example "SECRET_NAME"
   */
  name: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: Date;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: Date;
  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: 'all' | 'private' | 'selected';
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   * @example "https://api.github.com/orgs/ORGANIZATION/codespaces/secrets/SECRET_NAME/repositories"
   */
  selected_repositories_url?: string;
};
/**
 * CodespacesPublicKey
 * The public key used for setting Codespaces secrets.
 */
export type CodespacesPublicKey = {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
  /**
   * @example 2
   */
  id?: number;
  /**
   * @example "https://api.github.com/user/keys/2"
   */
  url?: string;
  /**
   * @example "ssh-rsa AAAAB3NzaC1yc2EAAA"
   */
  title?: string;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string;
};
/**
 * Copilot Business Seat Breakdown
 * The breakdown of Copilot Business seats for the organization.
 */
export type CopilotSeatBreakdown = {
  /**
   * The total number of seats being billed for the organization as of the current billing cycle.
   */
  total?: number;
  /**
   * Seats added during the current billing cycle.
   */
  added_this_cycle?: number;
  /**
   * The number of seats that are pending cancellation at the end of the current billing cycle.
   */
  pending_cancellation?: number;
  /**
   * The number of seats that have been assigned to users that have not yet accepted an invitation to this organization.
   */
  pending_invitation?: number;
  /**
   * The number of seats that have used Copilot during the current billing cycle.
   */
  active_this_cycle?: number;
  /**
   * The number of seats that have not used Copilot during the current billing cycle.
   */
  inactive_this_cycle?: number;
};
/**
 * Copilot Business Organization Details
 * Information about the seat breakdown and policies set for an organization with a Copilot Business subscription.
 */
export type CopilotOrganizationDetails = {
  seat_breakdown: CopilotSeatBreakdown;
  /**
   * The organization policy for allowing or disallowing Copilot to make suggestions that match public code.
   */
  public_code_suggestions: 'allow' | 'block' | 'unconfigured' | 'unknown';
  /**
   * The organization policy for allowing or disallowing organization members to use Copilot Chat within their editor.
   */
  ide_chat?: 'enabled' | 'disabled' | 'unconfigured';
  /**
   * The organization policy for allowing or disallowing organization members to use Copilot features within github.com.
   */
  platform_chat?: 'enabled' | 'disabled' | 'unconfigured';
  /**
   * The organization policy for allowing or disallowing organization members to use Copilot within their CLI.
   */
  cli?: 'enabled' | 'disabled' | 'unconfigured';
  /**
   * The mode of assigning new seats.
   */
  seat_management_setting:
    | 'assign_all'
    | 'assign_selected'
    | 'disabled'
    | 'unconfigured';
} & {
  [key: string]: any;
};
/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
export type NullableTeamSimple = {
  /**
   * Unique identifier of the team
   * @example 1
   */
  id: number;
  /**
   * @example "MDQ6VGVhbTE="
   */
  node_id: string;
  /**
   * URL for the team
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/members{/member}"
   */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   */
  name: string;
  /**
   * Description of the team
   * @example "A great team."
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: string;
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: string;
  /**
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /**
   * @example "justice-league"
   */
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
} | null;
/**
 * Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export type Team = {
  id: number;
  node_id: string;
  name: string;
  slug: string;
  description: string | null;
  privacy?: string;
  notification_setting?: string;
  permission: string;
  permissions?: {
    pull: boolean;
    triage: boolean;
    push: boolean;
    maintain: boolean;
    admin: boolean;
  };
  url: string;
  /**
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  members_url: string;
  repositories_url: string;
  parent: NullableTeamSimple;
};
/**
 * Organization
 * GitHub account for managing multiple users, teams, and repositories
 */
export type Organization = {
  /**
   * Unique login name of the organization
   * @example "new-org"
   */
  login: string;
  /**
   * URL for the organization
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  id: number;
  node_id: string;
  repos_url: string;
  events_url: string;
  hooks_url: string;
  issues_url: string;
  members_url: string;
  public_members_url: string;
  avatar_url: string;
  description: string | null;
  /**
   * Display blog url for the organization
   * @example "blog.example-org.com"
   */
  blog?: string;
  html_url: string;
  /**
   * Display name for the organization
   * @example "New Org"
   */
  name?: string;
  /**
   * Display company name for the organization
   * @example "Acme corporation"
   */
  company?: string;
  /**
   * Display location for the organization
   * @example "Berlin, Germany"
   */
  location?: string;
  /**
   * Display email for the organization
   * @example "org@example.com"
   */
  email?: string;
  /**
   * Specifies if organization projects are enabled for this org
   */
  has_organization_projects: boolean;
  /**
   * Specifies if repository projects are enabled for repositories that belong to this org
   */
  has_repository_projects: boolean;
  is_verified?: boolean;
  public_repos: number;
  public_gists: number;
  followers: number;
  following: number;
  type: string;
  created_at: Date;
  updated_at: Date;
  plan?: {
    name?: string;
    space?: number;
    private_repos?: number;
    filled_seats?: number;
    seats?: number;
  };
};
/**
 * Copilot Business Seat Detail
 * Information about a Copilot Business seat assignment for a user, team, or organization.
 */
export type CopilotSeatDetails = {
  /**
   * The assignee that has been granted access to GitHub Copilot.
   */
  assignee: SimpleUser | Team | Organization;
  /**
   * The team that granted access to GitHub Copilot to the assignee. This will be null if the user was assigned a seat individually.
   */
  assigning_team?: Team | null;
  /**
   * The pending cancellation date for the seat, in `YYYY-MM-DD` format. This will be null unless the assignee's Copilot access has been canceled during the current billing cycle. If the seat has been cancelled, this corresponds to the start of the organization's next billing cycle.
   */
  pending_cancellation_date?: string | null;
  /**
   * Timestamp of user's last GitHub Copilot activity, in ISO 8601 format.
   */
  last_activity_at?: Date | null;
  /**
   * Last editor that was used by the user for a GitHub Copilot completion.
   */
  last_activity_editor?: string | null;
  /**
   * Timestamp of when the assignee was last granted access to GitHub Copilot, in ISO 8601 format.
   */
  created_at: Date;
  /**
   * Timestamp of when the assignee's GitHub Copilot access was last updated, in ISO 8601 format.
   */
  updated_at?: Date;
};
/**
 * Dependabot Secret for an Organization
 * Secrets for GitHub Dependabot for an organization.
 */
export type OrganizationDependabotSecret = {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  created_at: Date;
  updated_at: Date;
  /**
   * Visibility of a secret
   */
  visibility: 'all' | 'private' | 'selected';
  /**
   * @example "https://api.github.com/organizations/org/dependabot/secrets/my_secret/repositories"
   */
  selected_repositories_url?: string;
};
/**
 * DependabotPublicKey
 * The public key used for setting Dependabot Secrets.
 */
export type DependabotPublicKey = {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
};
/**
 * Minimal Repository
 * Minimal Repository
 */
export type NullableMinimalRepository = {
  /**
   * @example 1296269
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * @example "Hello-World"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  git_url?: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  ssh_url?: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  clone_url?: string;
  mirror_url?: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  svn_url?: string;
  homepage?: string | null;
  language?: string | null;
  forks_count?: number;
  stargazers_count?: number;
  watchers_count?: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   */
  size?: number;
  default_branch?: string;
  open_issues_count?: number;
  is_template?: boolean;
  topics?: string[];
  has_issues?: boolean;
  has_projects?: boolean;
  has_wiki?: boolean;
  has_pages?: boolean;
  has_downloads?: boolean;
  has_discussions?: boolean;
  archived?: boolean;
  disabled?: boolean;
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at?: Date | null;
  permissions?: {
    admin?: boolean;
    maintain?: boolean;
    push?: boolean;
    triage?: boolean;
    pull?: boolean;
  };
  /**
   * @example "admin"
   */
  role_name?: string;
  temp_clone_token?: string;
  delete_branch_on_merge?: boolean;
  subscribers_count?: number;
  network_count?: number;
  code_of_conduct?: CodeOfConduct;
  license?: {
    key?: string;
    name?: string;
    spdx_id?: string;
    url?: string;
    node_id?: string;
  } | null;
  forks?: number;
  open_issues?: number;
  watchers?: number;
  allow_forking?: boolean;
  web_commit_signoff_required?: boolean;
  security_and_analysis?: SecurityAndAnalysis;
} | null;
/**
 * Package
 * A software package
 */
export type Package = {
  /**
   * Unique identifier of the package.
   * @example 1
   */
  id: number;
  /**
   * The name of the package.
   * @example "super-linter"
   */
  name: string;
  /**
   * @example "docker"
   */
  package_type: 'npm' | 'maven' | 'rubygems' | 'docker' | 'nuget' | 'container';
  /**
   * @example "https://api.github.com/orgs/github/packages/container/super-linter"
   */
  url: string;
  /**
   * @example "https://github.com/orgs/github/packages/container/package/super-linter"
   */
  html_url: string;
  /**
   * The number of versions of the package.
   * @example 1
   */
  version_count: number;
  /**
   * @example "private"
   */
  visibility: 'private' | 'public';
  owner?: NullableSimpleUser;
  repository?: NullableMinimalRepository;
  created_at: Date;
  updated_at: Date;
};
/**
 * Organization Invitation
 * Organization Invitation
 */
export type OrganizationInvitation = {
  id: number;
  login: string | null;
  email: string | null;
  role: string;
  created_at: string;
  failed_at?: string | null;
  failed_reason?: string | null;
  inviter: SimpleUser;
  team_count: number;
  /**
   * @example "\"MDIyOk9yZ2FuaXphdGlvbkludml0YXRpb24x\""
   */
  node_id: string;
  /**
   * @example "\"https://api.github.com/organizations/16/invitations/1/teams\""
   */
  invitation_teams_url: string;
  /**
   * @example "\"member\""
   */
  invitation_source?: string;
};
/**
 * Org Hook
 * Org Hook
 */
export type OrgHook = {
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "https://api.github.com/orgs/octocat/hooks/1"
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/octocat/hooks/1/pings"
   */
  ping_url: string;
  /**
   * @example "https://api.github.com/orgs/octocat/hooks/1/deliveries"
   */
  deliveries_url?: string;
  /**
   * @example "web"
   */
  name: string;
  /**
   * @example
   * [
   *   "push",
   *   "pull_request"
   * ]
   */
  events: string[];
  /**
   * @example true
   */
  active: boolean;
  config: {
    /**
     * @example "\"http://example.com/2\""
     */
    url?: string;
    /**
     * @example "\"0\""
     */
    insecure_ssl?: string;
    /**
     * @example "\"form\""
     */
    content_type?: string;
    /**
     * @example "\"********\""
     */
    secret?: string;
  };
  /**
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: Date;
  /**
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: Date;
  type: string;
};
/**
 * The type of GitHub user that can comment, open issues, or create pull requests while the interaction limit is in effect.
 * @example "collaborators_only"
 */
export enum InteractionGroup {
  EXISTING_USERS = 'existing_users',
  CONTRIBUTORS_ONLY = 'contributors_only',
  COLLABORATORS_ONLY = 'collaborators_only',
}
/**
 * Interaction Limits
 * Interaction limit settings.
 */
export type InteractionLimitResponse = {
  limit: InteractionGroup;
  /**
   * @example "repository"
   */
  origin: string;
  /**
   * @example "2018-08-17T04:18:39Z"
   */
  expires_at: Date;
};
/**
 * The duration of the interaction restriction. Default: `one_day`.
 * @example "one_month"
 */
export enum InteractionExpiry {
  ONE_DAY = 'one_day',
  THREE_DAYS = 'three_days',
  ONE_WEEK = 'one_week',
  ONE_MONTH = 'one_month',
  SIX_MONTHS = 'six_months',
}
/**
 * Interaction Restrictions
 * Limit interactions to a specific type of user for a specified duration
 */
export type InteractionLimit = {
  limit: InteractionGroup;
  expiry?: InteractionExpiry;
};
/**
 * Org Membership
 * Org Membership
 */
export type OrgMembership = {
  /**
   * @example "https://api.github.com/orgs/octocat/memberships/defunkt"
   */
  url: string;
  /**
   * The state of the member in the organization. The `pending` state indicates the user has not yet accepted an invitation.
   * @example "active"
   */
  state: 'active' | 'pending';
  /**
   * The user's membership type in the organization.
   * @example "admin"
   */
  role: 'admin' | 'member' | 'billing_manager';
  /**
   * @example "https://api.github.com/orgs/octocat"
   */
  organization_url: string;
  organization: OrganizationSimple;
  user: NullableSimpleUser;
  permissions?: {
    can_create_repository: boolean;
  };
};
/**
 * Migration
 * A migration.
 */
export type Migration = {
  /**
   * @example 79
   */
  id: number;
  owner: NullableSimpleUser;
  /**
   * @example "0b989ba4-242f-11e5-81e1-c7b6966d2516"
   */
  guid: string;
  /**
   * @example "pending"
   */
  state: string;
  /**
   * @example true
   */
  lock_repositories: boolean;
  exclude_metadata: boolean;
  exclude_git_data: boolean;
  exclude_attachments: boolean;
  exclude_releases: boolean;
  exclude_owner_projects: boolean;
  org_metadata_only: boolean;
  /**
   * The repositories included in the migration. Only returned for export migrations.
   */
  repositories: Repository[];
  /**
   * @example "https://api.github.com/orgs/octo-org/migrations/79"
   */
  url: string;
  /**
   * @example "2015-07-06T15:33:38-07:00"
   */
  created_at: Date;
  /**
   * @example "2015-07-06T15:33:38-07:00"
   */
  updated_at: Date;
  node_id: string;
  archive_url?: string;
  /**
   * Exclude related items from being returned in the response in order to improve performance of the request. The array can include any of: `"repositories"`.
   */
  exclude?: string[];
};
/**
 * Organization Fine-Grained Permission
 * A fine-grained permission that protects organization resources.
 */
export type OrganizationFineGrainedPermission = {
  name: string;
  description: string;
};
/**
 * Organization Role
 * Organization roles
 */
export type OrganizationRole = {
  /**
   * The unique identifier of the role.
   */
  id: number;
  /**
   * The name of the role.
   */
  name: string;
  /**
   * A short description about who this role is for or what permissions it grants.
   */
  description?: string | null;
  /**
   * A list of permissions included in this role.
   */
  permissions: string[];
  organization: NullableSimpleUser;
  /**
   * The date and time the role was created.
   */
  created_at: Date;
  /**
   * The date and time the role was last updated.
   */
  updated_at: Date;
};
/**
 * Package Version
 * A version of a software package
 */
export type PackageVersion = {
  /**
   * Unique identifier of the package version.
   * @example 1
   */
  id: number;
  /**
   * The name of the package version.
   * @example "latest"
   */
  name: string;
  /**
   * @example "https://api.github.com/orgs/github/packages/container/super-linter/versions/786068"
   */
  url: string;
  /**
   * @example "https://github.com/orgs/github/packages/container/package/super-linter"
   */
  package_html_url: string;
  /**
   * @example "https://github.com/orgs/github/packages/container/super-linter/786068"
   */
  html_url?: string;
  /**
   * @example "MIT"
   */
  license?: string;
  description?: string;
  /**
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   */
  deleted_at?: Date;
  /**
   * Package Version Metadata
   */
  metadata?: {
    /**
     * @example "docker"
     */
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    /**
     * Container Metadata
     */
    container?: {
      tags: string[];
    };
    /**
     * Docker Metadata
     */
    docker?: {
      tag?: string[];
    };
  };
};
/**
 * Simple Organization Programmatic Access Grant Request
 * Minimal representation of an organization programmatic access grant request for enumerations
 */
export type OrganizationProgrammaticAccessGrantRequest = {
  /**
   * Unique identifier of the request for access via fine-grained personal access token. The `pat_request_id` used to review PAT requests.
   */
  id: number;
  /**
   * Reason for requesting access.
   */
  reason: string | null;
  owner: SimpleUser;
  /**
   * Type of repository selection requested.
   */
  repository_selection: 'none' | 'all' | 'subset';
  /**
   * URL to the list of repositories requested to be accessed via fine-grained personal access token. Should only be followed when `repository_selection` is `subset`.
   */
  repositories_url: string;
  /**
   * Permissions requested, categorized by type of permission.
   */
  permissions: {
    organization?: {
      [key: string]: string;
    };
    repository?: {
      [key: string]: string;
    };
    other?: {
      [key: string]: string;
    };
  };
  /**
   * Date and time when the request for access was created.
   */
  created_at: string;
  /**
   * Whether the associated fine-grained personal access token has expired.
   */
  token_expired: boolean;
  /**
   * Date and time when the associated fine-grained personal access token expires.
   */
  token_expires_at: string | null;
  /**
   * Date and time when the associated fine-grained personal access token was last used for authentication.
   */
  token_last_used_at: string | null;
};
/**
 * Organization Programmatic Access Grant
 * Minimal representation of an organization programmatic access grant for enumerations
 */
export type OrganizationProgrammaticAccessGrant = {
  /**
   * Unique identifier of the fine-grained personal access token. The `pat_id` used to get details about an approved fine-grained personal access token.
   */
  id: number;
  owner: SimpleUser;
  /**
   * Type of repository selection requested.
   */
  repository_selection: 'none' | 'all' | 'subset';
  /**
   * URL to the list of repositories the fine-grained personal access token can access. Only follow when `repository_selection` is `subset`.
   */
  repositories_url: string;
  /**
   * Permissions requested, categorized by type of permission.
   */
  permissions: {
    organization?: {
      [key: string]: string;
    };
    repository?: {
      [key: string]: string;
    };
    other?: {
      [key: string]: string;
    };
  };
  /**
   * Date and time when the fine-grained personal access token was approved to access the organization.
   */
  access_granted_at: string;
  /**
   * Whether the associated fine-grained personal access token has expired.
   */
  token_expired: boolean;
  /**
   * Date and time when the associated fine-grained personal access token expires.
   */
  token_expires_at: string | null;
  /**
   * Date and time when the associated fine-grained personal access token was last used for authentication.
   */
  token_last_used_at: string | null;
};
/**
 * Project
 * Projects are a way to organize columns and cards of work.
 */
export type Project = {
  /**
   * @example "https://api.github.com/repos/api-playground/projects-test"
   */
  owner_url: string;
  /**
   * @example "https://api.github.com/projects/1002604"
   */
  url: string;
  /**
   * @example "https://github.com/api-playground/projects-test/projects/12"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/projects/1002604/columns"
   */
  columns_url: string;
  /**
   * @example 1002604
   */
  id: number;
  /**
   * @example "MDc6UHJvamVjdDEwMDI2MDQ="
   */
  node_id: string;
  /**
   * Name of the project
   * @example "Week One Sprint"
   */
  name: string;
  /**
   * Body of the project
   * @example "This project represents the sprint of the first week in January"
   */
  body: string | null;
  /**
   * @example 1
   */
  number: number;
  /**
   * State of the project; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  creator: NullableSimpleUser;
  /**
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: Date;
  /**
   * The baseline permission that all organization members have on this project. Only present if owner is an organization.
   */
  organization_permission?: 'read' | 'write' | 'admin' | 'none';
  /**
   * Whether or not this project can be seen by everyone. Only present if owner is an organization.
   */
  private?: boolean;
};
/**
 * Organization Custom Property
 * Custom property defined on an organization
 */
export type OrgCustomProperty = {
  /**
   * The name of the property
   */
  property_name: string;
  /**
   * The type of the value for the property
   * @example "single_select"
   */
  value_type: 'string' | 'single_select';
  /**
   * Whether the property is required.
   */
  required?: boolean;
  /**
   * Default value of the property
   */
  default_value?: string | null;
  /**
   * Short description of the property
   */
  description?: string | null;
  /**
   * An ordered list of the allowed values of the property.
   * The property can have up to 200 allowed values.
   */
  allowed_values?: string[] | null;
  /**
   * Who can edit the values of the property
   * @example "org_actors"
   */
  values_editable_by?: ('org_actors' | 'org_and_repo_actors') | null;
};
/**
 * Custom Property Value
 * Custom property name and associated value
 */
export type CustomPropertyValue = {
  /**
   * The name of the property
   */
  property_name: string;
  /**
   * The value assigned to the property
   */
  value: (string | string[]) | null;
};
/**
 * Organization Repository Custom Property Values
 * List of custom property values for a repository
 */
export type OrgRepoCustomPropertyValues = {
  /**
   * @example 1296269
   */
  repository_id: number;
  /**
   * @example "Hello-World"
   */
  repository_name: string;
  /**
   * @example "octocat/Hello-World"
   */
  repository_full_name: string;
  /**
   * List of custom property names and associated values
   */
  properties: CustomPropertyValue[];
};
/**
 * Repository
 * A repository on GitHub.
 */
export type NullableRepository = {
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @example true
   * @defaultValue true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @example true
   * @defaultValue true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @example true
   * @defaultValue true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @example true
   * @defaultValue true
   * @deprecated
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @defaultValue "public"
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: Date | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   * @deprecated
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * Whether to allow merge commits for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /**
   * @example "\"2020-07-09T00:17:42Z\""
   */
  starred_at?: string;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
} | null;
/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
export type CodeOfConductSimple = {
  /**
   * @example "https://api.github.com/repos/github/docs/community/code_of_conduct"
   */
  url: string;
  /**
   * @example "citizen_code_of_conduct"
   */
  key: string;
  /**
   * @example "Citizen Code of Conduct"
   */
  name: string;
  /**
   * @example "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
   */
  html_url: string | null;
};
/**
 * Full Repository
 * Full Repository
 */
export type FullRepository = {
  /**
   * @example 1296269
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * @example "Hello-World"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  owner: SimpleUser;
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * @example "master"
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * @example true
   */
  is_template?: boolean;
  /**
   * @example
   * [
   *   "octocat",
   *   "atom",
   *   "electron",
   *   "API"
   * ]
   */
  topics?: string[];
  /**
   * @example true
   */
  has_issues: boolean;
  /**
   * @example true
   */
  has_projects: boolean;
  /**
   * @example true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * @example true
   */
  has_downloads?: boolean;
  /**
   * @example true
   */
  has_discussions: boolean;
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @example "public"
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: Date;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };
  /**
   * @example true
   */
  allow_rebase_merge?: boolean;
  template_repository?: NullableRepository;
  temp_clone_token?: string | null;
  /**
   * @example true
   */
  allow_squash_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  /**
   * @example true
   */
  allow_merge_commit?: boolean;
  /**
   * @example true
   */
  allow_update_branch?: boolean;
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   * @example "PR_TITLE"
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   * @example "PR_BODY"
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   *   - `PR_TITLE` - default to the pull request's title.
   *   - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   * @example "PR_TITLE"
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   * @example "PR_BODY"
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * @example true
   */
  allow_forking?: boolean;
  web_commit_signoff_required?: boolean;
  /**
   * @example 42
   */
  subscribers_count: number;
  network_count: number;
  license: NullableLicenseSimple;
  organization?: NullableSimpleUser;
  parent?: Repository;
  source?: Repository;
  forks: number;
  master_branch?: string;
  open_issues: number;
  watchers: number;
  /**
   * Whether anonymous git access is allowed.
   * @defaultValue true
   */
  anonymous_access_enabled?: boolean;
  code_of_conduct?: CodeOfConductSimple;
  security_and_analysis?: SecurityAndAnalysis;
  /**
   * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
   */
  custom_properties?: {
    [key: string]: any;
  };
};
/**
 * The enforcement level of the ruleset. `evaluate` allows admins to test rules before enforcing them. Admins can view insights on the Rule Insights page (`evaluate` is only available with GitHub Enterprise).
 */
export enum RepositoryRuleEnforcement {
  DISABLED = 'disabled',
  ACTIVE = 'active',
  EVALUATE = 'evaluate',
}
/**
 * Repository Ruleset Bypass Actor
 * An actor that can bypass rules in a ruleset
 */
export type RepositoryRulesetBypassActor = {
  /**
   * The ID of the actor that can bypass a ruleset. If `actor_type` is `OrganizationAdmin`, this should be `1`.
   */
  actor_id: number;
  /**
   * The type of actor that can bypass a ruleset
   */
  actor_type: 'RepositoryRole' | 'Team' | 'Integration' | 'OrganizationAdmin';
  /**
   * When the specified actor can bypass the ruleset. `pull_request` means that an actor can only bypass rules on pull requests.
   */
  bypass_mode: 'always' | 'pull_request';
};
/**
 * Repository ruleset conditions for ref names
 * Parameters for a repository ruleset ref name condition
 */
export type RepositoryRulesetConditions = {
  ref_name?: {
    /**
     * Array of ref names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~DEFAULT_BRANCH` to include the default branch or `~ALL` to include all branches.
     */
    include?: string[];
    /**
     * Array of ref names or patterns to exclude. The condition will not pass if any of these patterns match.
     */
    exclude?: string[];
  };
};
/**
 * Repository ruleset conditions for repository names
 * Parameters for a repository name condition
 */
export type RepositoryRulesetConditionsRepositoryNameTarget = {
  repository_name: {
    /**
     * Array of repository names or patterns to include. One of these patterns must match for the condition to pass. Also accepts `~ALL` to include all repositories.
     */
    include?: string[];
    /**
     * Array of repository names or patterns to exclude. The condition will not pass if any of these patterns match.
     */
    exclude?: string[];
    /**
     * Whether renaming of target repositories is prevented.
     */
    protected?: boolean;
  };
};
/**
 * Repository ruleset conditions for repository IDs
 * Parameters for a repository ID condition
 */
export type RepositoryRulesetConditionsRepositoryIdTarget = {
  repository_id: {
    /**
     * The repository IDs that the ruleset applies to. One of these IDs must match for the condition to pass.
     */
    repository_ids?: number[];
  };
};
/**
 * Repository ruleset property targeting definition
 * Parameters for a targeting a repository property
 */
export type RepositoryRulesetConditionsRepositoryPropertySpec = {
  /**
   * The name of the repository property to target
   */
  name: string;
  /**
   * The values to match for the repository property
   */
  property_values: string[];
};
/**
 * Repository ruleset conditions for repository properties
 * Parameters for a repository property condition
 */
export type RepositoryRulesetConditionsRepositoryPropertyTarget = {
  repository_property: {
    /**
     * The repository properties and values to include. All of these properties must match for the condition to pass.
     */
    include?: RepositoryRulesetConditionsRepositoryPropertySpec[];
    /**
     * The repository properties and values to exclude. The condition will not pass if any of these properties match.
     */
    exclude?: RepositoryRulesetConditionsRepositoryPropertySpec[];
  };
};
/**
 * Organization ruleset conditions
 * Conditions for an organization ruleset. The conditions object should contain both `repository_name` and `ref_name` properties or both `repository_id` and `ref_name` properties.
 */
export type OrgRulesetConditions =
  | (RepositoryRulesetConditions &
      RepositoryRulesetConditionsRepositoryNameTarget)
  | (RepositoryRulesetConditions &
      RepositoryRulesetConditionsRepositoryIdTarget)
  | (RepositoryRulesetConditions &
      RepositoryRulesetConditionsRepositoryPropertyTarget);
/**
 * creation
 * Only allow users with bypass permission to create matching refs.
 */
export type RepositoryRuleCreation = {
  type: 'creation';
};
/**
 * update
 * Only allow users with bypass permission to update matching refs.
 */
export type RepositoryRuleUpdate = {
  type: 'update';
  parameters?: {
    /**
     * Branch can pull changes from its upstream repository
     */
    update_allows_fetch_and_merge: boolean;
  };
};
/**
 * deletion
 * Only allow users with bypass permissions to delete matching refs.
 */
export type RepositoryRuleDeletion = {
  type: 'deletion';
};
/**
 * required_linear_history
 * Prevent merge commits from being pushed to matching refs.
 */
export type RepositoryRuleRequiredLinearHistory = {
  type: 'required_linear_history';
};
/**
 * required_deployments
 * Choose which environments must be successfully deployed to before refs can be pushed into a ref that matches this rule.
 */
export type RepositoryRuleRequiredDeployments = {
  type: 'required_deployments';
  parameters?: {
    /**
     * The environments that must be successfully deployed to before branches can be merged.
     */
    required_deployment_environments: string[];
  };
};
/**
 * required_signatures
 * Commits pushed to matching refs must have verified signatures.
 */
export type RepositoryRuleRequiredSignatures = {
  type: 'required_signatures';
};
/**
 * pull_request
 * Require all commits be made to a non-target branch and submitted via a pull request before they can be merged.
 */
export type RepositoryRulePullRequest = {
  type: 'pull_request';
  parameters?: {
    /**
     * New, reviewable commits pushed will dismiss previous pull request review approvals.
     */
    dismiss_stale_reviews_on_push: boolean;
    /**
     * Require an approving review in pull requests that modify files that have a designated code owner.
     */
    require_code_owner_review: boolean;
    /**
     * Whether the most recent reviewable push must be approved by someone other than the person who pushed it.
     */
    require_last_push_approval: boolean;
    /**
     * The number of approving reviews that are required before a pull request can be merged.
     */
    required_approving_review_count: number;
    /**
     * All conversations on code must be resolved before a pull request can be merged.
     */
    required_review_thread_resolution: boolean;
  };
};
/**
 * StatusCheckConfiguration
 * Required status check
 */
export type RepositoryRuleParamsStatusCheckConfiguration = {
  /**
   * The status check context name that must be present on the commit.
   */
  context: string;
  /**
   * The optional integration ID that this status check must originate from.
   */
  integration_id?: number;
};
/**
 * required_status_checks
 * Choose which status checks must pass before the ref is updated. When enabled, commits must first be pushed to another ref where the checks pass.
 */
export type RepositoryRuleRequiredStatusChecks = {
  type: 'required_status_checks';
  parameters?: {
    /**
     * Status checks that are required.
     */
    required_status_checks: RepositoryRuleParamsStatusCheckConfiguration[];
    /**
     * Whether pull requests targeting a matching branch must be tested with the latest code. This setting will not take effect unless at least one status check is enabled.
     */
    strict_required_status_checks_policy: boolean;
  };
};
/**
 * non_fast_forward
 * Prevent users with push access from force pushing to refs.
 */
export type RepositoryRuleNonFastForward = {
  type: 'non_fast_forward';
};
/**
 * commit_message_pattern
 * Parameters to be used for the commit_message_pattern rule
 */
export type RepositoryRuleCommitMessagePattern = {
  type: 'commit_message_pattern';
  parameters?: {
    /**
     * How this rule will appear to users.
     */
    name?: string;
    /**
     * If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;
    /**
     * The operator to use for matching.
     */
    operator: 'starts_with' | 'ends_with' | 'contains' | 'regex';
    /**
     * The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * commit_author_email_pattern
 * Parameters to be used for the commit_author_email_pattern rule
 */
export type RepositoryRuleCommitAuthorEmailPattern = {
  type: 'commit_author_email_pattern';
  parameters?: {
    /**
     * How this rule will appear to users.
     */
    name?: string;
    /**
     * If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;
    /**
     * The operator to use for matching.
     */
    operator: 'starts_with' | 'ends_with' | 'contains' | 'regex';
    /**
     * The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * committer_email_pattern
 * Parameters to be used for the committer_email_pattern rule
 */
export type RepositoryRuleCommitterEmailPattern = {
  type: 'committer_email_pattern';
  parameters?: {
    /**
     * How this rule will appear to users.
     */
    name?: string;
    /**
     * If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;
    /**
     * The operator to use for matching.
     */
    operator: 'starts_with' | 'ends_with' | 'contains' | 'regex';
    /**
     * The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * branch_name_pattern
 * Parameters to be used for the branch_name_pattern rule
 */
export type RepositoryRuleBranchNamePattern = {
  type: 'branch_name_pattern';
  parameters?: {
    /**
     * How this rule will appear to users.
     */
    name?: string;
    /**
     * If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;
    /**
     * The operator to use for matching.
     */
    operator: 'starts_with' | 'ends_with' | 'contains' | 'regex';
    /**
     * The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * tag_name_pattern
 * Parameters to be used for the tag_name_pattern rule
 */
export type RepositoryRuleTagNamePattern = {
  type: 'tag_name_pattern';
  parameters?: {
    /**
     * How this rule will appear to users.
     */
    name?: string;
    /**
     * If true, the rule will fail if the pattern matches.
     */
    negate?: boolean;
    /**
     * The operator to use for matching.
     */
    operator: 'starts_with' | 'ends_with' | 'contains' | 'regex';
    /**
     * The pattern to match with.
     */
    pattern: string;
  };
};
/**
 * RestrictedCommits
 * Restricted commit
 */
export type RepositoryRuleParamsRestrictedCommits = {
  /**
   * Full or abbreviated commit hash to reject
   */
  oid: string;
  /**
   * Reason for restriction
   */
  reason?: string;
};
/**
 * WorkflowFileReference
 * A workflow that must run for this rule to pass
 */
export type RepositoryRuleParamsWorkflowFileReference = {
  /**
   * The path to the workflow file
   */
  path: string;
  /**
   * The ref (branch or tag) of the workflow file to use
   */
  ref?: string;
  /**
   * The ID of the repository where the workflow is defined
   */
  repository_id: number;
  /**
   * The commit SHA of the workflow file to use
   */
  sha?: string;
};
/**
 * workflows
 * Require all changes made to a targeted branch to pass the specified workflows before they can be merged.
 */
export type RepositoryRuleWorkflows = {
  type: 'workflows';
  parameters?: {
    /**
     * Workflows that must pass for this rule to pass.
     */
    workflows: RepositoryRuleParamsWorkflowFileReference[];
  };
};
/**
 * Repository Rule
 * A repository rule.
 */
export type RepositoryRule =
  | RepositoryRuleCreation
  | RepositoryRuleUpdate
  | RepositoryRuleDeletion
  | RepositoryRuleRequiredLinearHistory
  | RepositoryRuleRequiredDeployments
  | RepositoryRuleRequiredSignatures
  | RepositoryRulePullRequest
  | RepositoryRuleRequiredStatusChecks
  | RepositoryRuleNonFastForward
  | RepositoryRuleCommitMessagePattern
  | RepositoryRuleCommitAuthorEmailPattern
  | RepositoryRuleCommitterEmailPattern
  | RepositoryRuleBranchNamePattern
  | RepositoryRuleTagNamePattern
  | RepositoryRuleWorkflows;
/**
 * Repository ruleset
 * A set of rules to apply when specified conditions are met.
 */
export type RepositoryRuleset = {
  /**
   * The ID of the ruleset
   */
  id: number;
  /**
   * The name of the ruleset
   */
  name: string;
  /**
   * The target of the ruleset
   */
  target?: 'branch' | 'tag';
  /**
   * The type of the source of the ruleset
   */
  source_type?: 'Repository' | 'Organization';
  /**
   * The name of the source
   */
  source: string;
  enforcement: RepositoryRuleEnforcement;
  /**
   * The actors that can bypass the rules in this ruleset
   */
  bypass_actors?: RepositoryRulesetBypassActor[];
  /**
   * The bypass type of the user making the API request for this ruleset. This field is only returned when
   * querying the repository-level endpoint.
   */
  current_user_can_bypass?: 'always' | 'pull_requests_only' | 'never';
  node_id?: string;
  _links?: {
    self?: {
      /**
       * The URL of the ruleset
       */
      href?: string;
    };
    html?: {
      /**
       * The html URL of the ruleset
       */
      href?: string;
    };
  };
  conditions?: (RepositoryRulesetConditions | OrgRulesetConditions) | null;
  rules?: RepositoryRule[];
  created_at?: Date;
  updated_at?: Date;
};
/**
 * Rule Suites
 * Response
 */
export type RuleSuites = {
  /**
   * The unique identifier of the rule insight.
   */
  id?: number;
  /**
   * The number that identifies the user.
   */
  actor_id?: number;
  /**
   * The handle for the GitHub user account.
   */
  actor_name?: string;
  /**
   * The first commit sha before the push evaluation.
   */
  before_sha?: string;
  /**
   * The last commit sha in the push evaluation.
   */
  after_sha?: string;
  /**
   * The ref name that the evaluation ran on.
   */
  ref?: string;
  /**
   * The ID of the repository associated with the rule evaluation.
   */
  repository_id?: number;
  /**
   * The name of the repository without the `.git` extension.
   */
  repository_name?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: Date;
  /**
   * The result of the rule evaluations for rules with the `active` enforcement status.
   */
  result?: 'pass' | 'fail' | 'bypass';
  /**
   * The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
   */
  evaluation_result?: 'pass' | 'fail';
}[];
/**
 * Rule Suite
 * Response
 */
export type RuleSuite = {
  /**
   * The unique identifier of the rule insight.
   */
  id?: number;
  /**
   * The number that identifies the user.
   */
  actor_id?: number | null;
  /**
   * The handle for the GitHub user account.
   */
  actor_name?: string | null;
  /**
   * The first commit sha before the push evaluation.
   */
  before_sha?: string;
  /**
   * The last commit sha in the push evaluation.
   */
  after_sha?: string;
  /**
   * The ref name that the evaluation ran on.
   */
  ref?: string;
  /**
   * The ID of the repository associated with the rule evaluation.
   */
  repository_id?: number;
  /**
   * The name of the repository without the `.git` extension.
   */
  repository_name?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at?: Date;
  /**
   * The result of the rule evaluations for rules with the `active` enforcement status.
   */
  result?: 'pass' | 'fail' | 'bypass';
  /**
   * The result of the rule evaluations for rules with the `active` and `evaluate` enforcement statuses, demonstrating whether rules would pass or fail if all rules in the rule suite were `active`.
   */
  evaluation_result?: 'pass' | 'fail';
  /**
   * Details on the evaluated rules.
   */
  rule_evaluations?: {
    rule_source?: {
      /**
       * The type of rule source.
       */
      type?: string;
      /**
       * The ID of the rule source.
       */
      id?: number | null;
      /**
       * The name of the rule source.
       */
      name?: string | null;
    };
    /**
     * The enforcement level of this rule source.
     */
    enforcement?: 'active' | 'evaluate' | 'deleted ruleset';
    /**
     * The result of the evaluation of the individual rule.
     */
    result?: 'pass' | 'fail';
    /**
     * The type of rule.
     */
    rule_type?: string;
    /**
     * Any associated details with the rule evaluation.
     */
    details?: string;
  }[];
};
/**
 * A product affected by the vulnerability detailed in a repository security advisory.
 */
export type RepositoryAdvisoryVulnerability = {
  /**
   * The name of the package affected by the vulnerability.
   */
  package: {
    ecosystem: SecurityAdvisoryEcosystems;
    /**
     * The unique package name within its ecosystem.
     */
    name: string | null;
  } | null;
  /**
   * The range of the package versions affected by the vulnerability.
   */
  vulnerable_version_range: string | null;
  /**
   * The package version(s) that resolve the vulnerability.
   */
  patched_versions: string | null;
  /**
   * The functions in the package that are affected.
   */
  vulnerable_functions: string[] | null;
};
/**
 * A credit given to a user for a repository security advisory.
 */
export type RepositoryAdvisoryCredit = {
  user: SimpleUser;
  type: SecurityAdvisoryCreditTypes;
  /**
   * The state of the user's acceptance of the credit.
   */
  state: 'accepted' | 'declined' | 'pending';
};
/**
 * A repository security advisory.
 */
export type RepositoryAdvisory = {
  /**
   * The GitHub Security Advisory ID.
   */
  ghsa_id: string;
  /**
   * The Common Vulnerabilities and Exposures (CVE) ID.
   */
  cve_id: string | null;
  /**
   * The API URL for the advisory.
   */
  url: string;
  /**
   * The URL for the advisory.
   */
  html_url: string;
  /**
   * A short summary of the advisory.
   */
  summary: string;
  /**
   * A detailed description of what the advisory entails.
   */
  description: string | null;
  /**
   * The severity of the advisory.
   */
  severity: ('critical' | 'high' | 'medium' | 'low') | null;
  /**
   * The author of the advisory.
   */
  author: SimpleUser | null;
  /**
   * The publisher of the advisory.
   */
  publisher: SimpleUser | null;
  identifiers: {
    /**
     * The type of identifier.
     */
    type: 'CVE' | 'GHSA';
    /**
     * The identifier value.
     */
    value: string;
  }[];
  /**
   * The state of the advisory.
   */
  state: 'published' | 'closed' | 'withdrawn' | 'draft' | 'triage';
  /**
   * The date and time of when the advisory was created, in ISO 8601 format.
   */
  created_at: Date | null;
  /**
   * The date and time of when the advisory was last updated, in ISO 8601 format.
   */
  updated_at: Date | null;
  /**
   * The date and time of when the advisory was published, in ISO 8601 format.
   */
  published_at: Date | null;
  /**
   * The date and time of when the advisory was closed, in ISO 8601 format.
   */
  closed_at: Date | null;
  /**
   * The date and time of when the advisory was withdrawn, in ISO 8601 format.
   */
  withdrawn_at: Date | null;
  submission: {
    /**
     * Whether a private vulnerability report was accepted by the repository's administrators.
     */
    accepted: boolean;
  } | null;
  vulnerabilities: RepositoryAdvisoryVulnerability[] | null;
  cvss: {
    /**
     * The CVSS vector.
     */
    vector_string: string | null;
    /**
     * The CVSS score.
     */
    score: number | null;
  } | null;
  cwes:
    | {
        /**
         * The Common Weakness Enumeration (CWE) identifier.
         */
        cwe_id: string;
        /**
         * The name of the CWE.
         */
        name: string;
      }[]
    | null;
  /**
   * A list of only the CWE IDs.
   */
  cwe_ids: string[] | null;
  credits:
    | {
        /**
         * The username of the user credited.
         */
        login?: string;
        type?: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  credits_detailed: RepositoryAdvisoryCredit[] | null;
  /**
   * A list of users that collaborate on the advisory.
   */
  collaborating_users: SimpleUser[] | null;
  /**
   * A list of teams that collaborate on the advisory.
   */
  collaborating_teams: Team[] | null;
  /**
   * A temporary private fork of the advisory's repository for collaborating on a fix.
   */
  private_fork: SimpleRepository | null;
};
/**
 * Team Simple
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamSimple = {
  /**
   * Unique identifier of the team
   * @example 1
   */
  id: number;
  /**
   * @example "MDQ6VGVhbTE="
   */
  node_id: string;
  /**
   * URL for the team
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/members{/member}"
   */
  members_url: string;
  /**
   * Name of the team
   * @example "Justice League"
   */
  name: string;
  /**
   * Description of the team
   * @example "A great team."
   */
  description: string | null;
  /**
   * Permission that the team will have for its repositories
   * @example "admin"
   */
  permission: string;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: string;
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: string;
  /**
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  /**
   * @example "justice-league"
   */
  slug: string;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
};
export type ActionsBillingUsage = {
  /**
   * The sum of the free and paid GitHub Actions minutes used.
   */
  total_minutes_used: number;
  /**
   * The total paid GitHub Actions minutes used.
   */
  total_paid_minutes_used: number;
  /**
   * The amount of free GitHub Actions minutes available.
   */
  included_minutes: number;
  minutes_used_breakdown: {
    /**
     * Total minutes used on Ubuntu runner machines.
     */
    UBUNTU?: number;
    /**
     * Total minutes used on macOS runner machines.
     */
    MACOS?: number;
    /**
     * Total minutes used on Windows runner machines.
     */
    WINDOWS?: number;
    /**
     * Total minutes used on Ubuntu 4 core runner machines.
     */
    ubuntu_4_core?: number;
    /**
     * Total minutes used on Ubuntu 8 core runner machines.
     */
    ubuntu_8_core?: number;
    /**
     * Total minutes used on Ubuntu 16 core runner machines.
     */
    ubuntu_16_core?: number;
    /**
     * Total minutes used on Ubuntu 32 core runner machines.
     */
    ubuntu_32_core?: number;
    /**
     * Total minutes used on Ubuntu 64 core runner machines.
     */
    ubuntu_64_core?: number;
    /**
     * Total minutes used on Windows 4 core runner machines.
     */
    windows_4_core?: number;
    /**
     * Total minutes used on Windows 8 core runner machines.
     */
    windows_8_core?: number;
    /**
     * Total minutes used on Windows 16 core runner machines.
     */
    windows_16_core?: number;
    /**
     * Total minutes used on Windows 32 core runner machines.
     */
    windows_32_core?: number;
    /**
     * Total minutes used on Windows 64 core runner machines.
     */
    windows_64_core?: number;
    /**
     * Total minutes used on macOS 12 core runner machines.
     */
    macos_12_core?: number;
    /**
     * Total minutes used on all runner machines.
     */
    total?: number;
  };
};
export type PackagesBillingUsage = {
  /**
   * Sum of the free and paid storage space (GB) for GitHuub Packages.
   */
  total_gigabytes_bandwidth_used: number;
  /**
   * Total paid storage space (GB) for GitHuub Packages.
   */
  total_paid_gigabytes_bandwidth_used: number;
  /**
   * Free storage space (GB) for GitHub Packages.
   */
  included_gigabytes_bandwidth: number;
};
export type CombinedBillingUsage = {
  /**
   * Numbers of days left in billing cycle.
   */
  days_left_in_billing_cycle: number;
  /**
   * Estimated storage space (GB) used in billing cycle.
   */
  estimated_paid_storage_for_month: number;
  /**
   * Estimated sum of free and paid storage space (GB) used in billing cycle.
   */
  estimated_storage_for_month: number;
};
/**
 * Team Organization
 * Team Organization
 */
export type TeamOrganization = {
  /**
   * @example "github"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDEyOk9yZ2FuaXphdGlvbjE="
   */
  node_id: string;
  /**
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/orgs/github/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://api.github.com/orgs/github/issues"
   */
  issues_url: string;
  /**
   * @example "https://api.github.com/orgs/github/members{/member}"
   */
  members_url: string;
  /**
   * @example "https://api.github.com/orgs/github/public_members{/member}"
   */
  public_members_url: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "A great organization"
   */
  description: string | null;
  /**
   * @example "github"
   */
  name?: string;
  /**
   * @example "GitHub"
   */
  company?: string;
  /**
   * @example "https://github.com/blog"
   */
  blog?: string;
  /**
   * @example "San Francisco"
   */
  location?: string;
  /**
   * @example "octocat@github.com"
   */
  email?: string;
  /**
   * @example "github"
   */
  twitter_username?: string | null;
  /**
   * @example true
   */
  is_verified?: boolean;
  /**
   * @example true
   */
  has_organization_projects: boolean;
  /**
   * @example true
   */
  has_repository_projects: boolean;
  /**
   * @example 2
   */
  public_repos: number;
  /**
   * @example 1
   */
  public_gists: number;
  /**
   * @example 20
   */
  followers: number;
  following: number;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: Date;
  /**
   * @example "Organization"
   */
  type: string;
  /**
   * @example 100
   */
  total_private_repos?: number;
  /**
   * @example 100
   */
  owned_private_repos?: number;
  /**
   * @example 81
   */
  private_gists?: number | null;
  /**
   * @example 10000
   */
  disk_usage?: number | null;
  /**
   * @example 8
   */
  collaborators?: number | null;
  /**
   * @example "org@example.com"
   */
  billing_email?: string | null;
  plan?: {
    name: string;
    space: number;
    private_repos: number;
    filled_seats?: number;
    seats?: number;
  };
  default_repository_permission?: string | null;
  /**
   * @example true
   */
  members_can_create_repositories?: boolean | null;
  /**
   * @example true
   */
  two_factor_requirement_enabled?: boolean | null;
  /**
   * @example "all"
   */
  members_allowed_repository_creation_type?: string;
  /**
   * @example true
   */
  members_can_create_public_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_private_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_internal_repositories?: boolean;
  /**
   * @example true
   */
  members_can_create_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_public_pages?: boolean;
  /**
   * @example true
   */
  members_can_create_private_pages?: boolean;
  members_can_fork_private_repositories?: boolean | null;
  web_commit_signoff_required?: boolean;
  updated_at: Date;
  archived_at: Date | null;
};
/**
 * Full Team
 * Groups of organization members that gives permissions on specified repositories.
 */
export type TeamFull = {
  /**
   * Unique identifier of the team
   * @example 42
   */
  id: number;
  /**
   * @example "MDQ6VGVhbTE="
   */
  node_id: string;
  /**
   * URL for the team
   * @example "https://api.github.com/organizations/1/team/1"
   */
  url: string;
  /**
   * @example "https://github.com/orgs/rails/teams/core"
   */
  html_url: string;
  /**
   * Name of the team
   * @example "Developers"
   */
  name: string;
  /**
   * @example "justice-league"
   */
  slug: string;
  /**
   * @example "A great team."
   */
  description: string | null;
  /**
   * The level of privacy this team should have
   * @example "closed"
   */
  privacy?: 'closed' | 'secret';
  /**
   * The notification setting the team has set
   * @example "notifications_enabled"
   */
  notification_setting?: 'notifications_enabled' | 'notifications_disabled';
  /**
   * Permission that the team will have for its repositories
   * @example "push"
   */
  permission: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/members{/member}"
   */
  members_url: string;
  /**
   * @example "https://api.github.com/organizations/1/team/1/repos"
   */
  repositories_url: string;
  parent?: NullableTeamSimple;
  /**
   * @example 3
   */
  members_count: number;
  /**
   * @example 10
   */
  repos_count: number;
  /**
   * @example "2017-07-14T16:53:42Z"
   */
  created_at: Date;
  /**
   * @example "2017-08-17T12:37:15Z"
   */
  updated_at: Date;
  organization: TeamOrganization;
  /**
   * Distinguished Name (DN) that team maps to within LDAP environment
   * @example "uid=example,ou=users,dc=github,dc=com"
   */
  ldap_dn?: string;
};
/**
 * Team Discussion
 * A team discussion is a persistent record of a free-form conversation within a team.
 */
export type TeamDiscussion = {
  author: NullableSimpleUser;
  /**
   * The main text of the discussion.
   * @example "Please suggest improvements to our workflow in comments."
   */
  body: string;
  /**
   * @example "<p>Hi! This is an area for us to collaborate as a team</p>"
   */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  comments_count: number;
  /**
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1/comments"
   */
  comments_url: string;
  /**
   * @example "2018-01-25T18:56:31Z"
   */
  created_at: Date;
  last_edited_at: Date | null;
  /**
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1"
   */
  html_url: string;
  /**
   * @example "MDE0OlRlYW1EaXNjdXNzaW9uMQ=="
   */
  node_id: string;
  /**
   * The unique sequence number of a team discussion.
   * @example 42
   */
  number: number;
  /**
   * Whether or not this discussion should be pinned for easy retrieval.
   * @example true
   */
  pinned: boolean;
  /**
   * Whether or not this discussion should be restricted to team members and organization owners.
   * @example true
   */
  private: boolean;
  /**
   * @example "https://api.github.com/organizations/1/team/2343027"
   */
  team_url: string;
  /**
   * The title of the discussion.
   * @example "How can we improve our workflow?"
   */
  title: string;
  /**
   * @example "2018-01-25T18:56:31Z"
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/organizations/1/team/2343027/discussions/1"
   */
  url: string;
  reactions?: ReactionRollup;
};
/**
 * Team Discussion Comment
 * A reply to a discussion within a team.
 */
export type TeamDiscussionComment = {
  author: NullableSimpleUser;
  /**
   * The main text of the comment.
   * @example "I agree with this suggestion."
   */
  body: string;
  /**
   * @example "<p>Do you like apples?</p>"
   */
  body_html: string;
  /**
   * The current version of the body content. If provided, this update operation will be rejected if the given version does not match the latest version on the server.
   * @example "0307116bbf7ced493b8d8a346c650b71"
   */
  body_version: string;
  /**
   * @example "2018-01-15T23:53:58Z"
   */
  created_at: Date;
  last_edited_at: Date | null;
  /**
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1"
   */
  discussion_url: string;
  /**
   * @example "https://github.com/orgs/github/teams/justice-league/discussions/1/comments/1"
   */
  html_url: string;
  /**
   * @example "MDIxOlRlYW1EaXNjdXNzaW9uQ29tbWVudDE="
   */
  node_id: string;
  /**
   * The unique sequence number of a team discussion comment.
   * @example 42
   */
  number: number;
  /**
   * @example "2018-01-15T23:53:58Z"
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/organizations/1/team/2403582/discussions/1/comments/1"
   */
  url: string;
  reactions?: ReactionRollup;
};
/**
 * Reaction
 * Reactions to conversations provide a way to help people express their feelings more simply and effectively.
 */
export type Reaction = {
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDg6UmVhY3Rpb24x"
   */
  node_id: string;
  user: NullableSimpleUser;
  /**
   * The reaction to use
   * @example "heart"
   */
  content:
    | '+1'
    | '-1'
    | 'laugh'
    | 'confused'
    | 'heart'
    | 'hooray'
    | 'rocket'
    | 'eyes';
  /**
   * @example "2016-05-20T20:09:31Z"
   */
  created_at: Date;
};
/**
 * Team Membership
 * Team Membership
 */
export type TeamMembership = {
  url: string;
  /**
   * The role of the user in the team.
   * @example "member"
   * @defaultValue "member"
   */
  role: 'member' | 'maintainer';
  /**
   * The state of the user's membership in the team.
   */
  state: 'active' | 'pending';
};
/**
 * Team Project
 * A team's access to a project.
 */
export type TeamProject = {
  owner_url: string;
  url: string;
  html_url: string;
  columns_url: string;
  id: number;
  node_id: string;
  name: string;
  body: string | null;
  number: number;
  state: string;
  creator: SimpleUser;
  created_at: string;
  updated_at: string;
  /**
   * The organization permission for this project. Only present when owner is an organization.
   */
  organization_permission?: string;
  /**
   * Whether the project is private or not. Only present when owner is an organization.
   */
  private?: boolean;
  permissions: {
    read: boolean;
    write: boolean;
    admin: boolean;
  };
};
/**
 * Team Repository
 * A team's access to a repository.
 */
export type TeamRepository = {
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  license: NullableLicenseSimple;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  /**
   * @example "admin"
   */
  role_name?: string;
  owner: NullableSimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * Whether issues are enabled.
   * @example true
   * @defaultValue true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @example true
   * @defaultValue true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @example true
   * @defaultValue true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @example true
   * @defaultValue true
   */
  has_downloads: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @defaultValue "public"
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: Date | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_rebase_merge?: boolean;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether to allow merge commits for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
};
/**
 * Project Card
 * Project cards represent a scope of work.
 */
export type ProjectCard = {
  /**
   * @example "https://api.github.com/projects/columns/cards/1478"
   */
  url: string;
  /**
   * The project card's ID
   * @example 42
   */
  id: number;
  /**
   * @example "MDExOlByb2plY3RDYXJkMTQ3OA=="
   */
  node_id: string;
  /**
   * @example "Add payload for delete Project column"
   */
  note: string | null;
  creator: NullableSimpleUser;
  /**
   * @example "2016-09-05T14:21:06Z"
   */
  created_at: Date;
  /**
   * @example "2016-09-05T14:20:22Z"
   */
  updated_at: Date;
  /**
   * Whether or not the card is archived
   */
  archived?: boolean;
  column_name?: string;
  project_id?: string;
  /**
   * @example "https://api.github.com/projects/columns/367"
   */
  column_url: string;
  /**
   * @example "https://api.github.com/repos/api-playground/projects-test/issues/3"
   */
  content_url?: string;
  /**
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
};
/**
 * Project Column
 * Project columns contain cards of work.
 */
export type ProjectColumn = {
  /**
   * @example "https://api.github.com/projects/columns/367"
   */
  url: string;
  /**
   * @example "https://api.github.com/projects/120"
   */
  project_url: string;
  /**
   * @example "https://api.github.com/projects/columns/367/cards"
   */
  cards_url: string;
  /**
   * The unique identifier of the project column
   * @example 42
   */
  id: number;
  /**
   * @example "MDEzOlByb2plY3RDb2x1bW4zNjc="
   */
  node_id: string;
  /**
   * Name of the project column
   * @example "Remaining tasks"
   */
  name: string;
  /**
   * @example "2016-09-05T14:18:44Z"
   */
  created_at: Date;
  /**
   * @example "2016-09-05T14:22:28Z"
   */
  updated_at: Date;
};
/**
 * Project Collaborator Permission
 * Project Collaborator Permission
 */
export type ProjectCollaboratorPermission = {
  permission: string;
  user: NullableSimpleUser;
};
/**
 * Rate Limit
 */
export type RateLimit = {
  limit: number;
  remaining: number;
  reset: number;
  used: number;
};
/**
 * Rate Limit Overview
 * Rate Limit Overview
 */
export type RateLimitOverview = {
  resources: {
    core: RateLimit;
    graphql?: RateLimit;
    search: RateLimit;
    code_search?: RateLimit;
    source_import?: RateLimit;
    integration_manifest?: RateLimit;
    code_scanning_upload?: RateLimit;
    actions_runner_registration?: RateLimit;
    scim?: RateLimit;
    dependency_snapshots?: RateLimit;
  };
  rate: RateLimit;
};
/**
 * Artifact
 * An artifact
 */
export type Artifact = {
  /**
   * @example 5
   */
  id: number;
  /**
   * @example "MDEwOkNoZWNrU3VpdGU1"
   */
  node_id: string;
  /**
   * The name of the artifact.
   * @example "AdventureWorks.Framework"
   */
  name: string;
  /**
   * The size in bytes of the artifact.
   * @example 12345
   */
  size_in_bytes: number;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5"
   */
  url: string;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/artifacts/5/zip"
   */
  archive_download_url: string;
  /**
   * Whether or not the artifact has expired.
   */
  expired: boolean;
  created_at: Date | null;
  expires_at: Date | null;
  updated_at: Date | null;
  workflow_run?: {
    /**
     * @example 10
     */
    id?: number;
    /**
     * @example 42
     */
    repository_id?: number;
    /**
     * @example 42
     */
    head_repository_id?: number;
    /**
     * @example "main"
     */
    head_branch?: string;
    /**
     * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
     */
    head_sha?: string;
  } | null;
};
/**
 * Repository actions caches
 * Repository actions caches
 */
export type ActionsCacheList = {
  /**
   * Total number of caches
   * @example 2
   */
  total_count: number;
  /**
   * Array of caches
   */
  actions_caches: {
    /**
     * @example 2
     */
    id?: number;
    /**
     * @example "refs/heads/main"
     */
    ref?: string;
    /**
     * @example "Linux-node-958aff96db2d75d67787d1e634ae70b659de937b"
     */
    key?: string;
    /**
     * @example "73885106f58cc52a7df9ec4d4a5622a5614813162cb516c759a30af6bf56e6f0"
     */
    version?: string;
    /**
     * @example "2019-01-24T22:45:36.000Z"
     */
    last_accessed_at?: Date;
    /**
     * @example "2019-01-24T22:45:36.000Z"
     */
    created_at?: Date;
    /**
     * @example 1024
     */
    size_in_bytes?: number;
  }[];
};
/**
 * Job
 * Information of a job execution in a workflow run
 */
export type Job = {
  /**
   * The id of the job.
   * @example 21
   */
  id: number;
  /**
   * The id of the associated workflow run.
   * @example 5
   */
  run_id: number;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5"
   */
  run_url: string;
  /**
   * Attempt number of the associated workflow run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;
  /**
   * @example "MDg6Q2hlY2tSdW40"
   */
  node_id: string;
  /**
   * The SHA of the commit that is being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * @example "https://api.github.com/repos/github/hello-world/actions/jobs/21"
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/runs/4"
   */
  html_url: string | null;
  /**
   * The phase of the lifecycle that the job is currently in.
   * @example "queued"
   */
  status: 'queued' | 'in_progress' | 'completed' | 'waiting';
  /**
   * The outcome of the job.
   * @example "success"
   */
  conclusion:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
      )
    | null;
  /**
   * The time that the job created, in ISO 8601 format.
   * @example "2019-08-08T08:00:00-07:00"
   */
  created_at: Date;
  /**
   * The time that the job started, in ISO 8601 format.
   * @example "2019-08-08T08:00:00-07:00"
   */
  started_at: Date;
  /**
   * The time that the job finished, in ISO 8601 format.
   * @example "2019-08-08T08:00:00-07:00"
   */
  completed_at: Date | null;
  /**
   * The name of the job.
   * @example "test-coverage"
   */
  name: string;
  /**
   * Steps in this job.
   */
  steps?: {
    /**
     * The phase of the lifecycle that the job is currently in.
     * @example "queued"
     */
    status: 'queued' | 'in_progress' | 'completed';
    /**
     * The outcome of the job.
     * @example "success"
     */
    conclusion: string | null;
    /**
     * The name of the job.
     * @example "test-coverage"
     */
    name: string;
    /**
     * @example 1
     */
    number: number;
    /**
     * The time that the step started, in ISO 8601 format.
     * @example "2019-08-08T08:00:00-07:00"
     */
    started_at?: Date | null;
    /**
     * The time that the job finished, in ISO 8601 format.
     * @example "2019-08-08T08:00:00-07:00"
     */
    completed_at?: Date | null;
  }[];
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-runs/4"
   */
  check_run_url: string;
  /**
   * Labels for the workflow job. Specified by the "runs_on" attribute in the action's workflow file.
   * @example
   * [
   *   "self-hosted",
   *   "foo",
   *   "bar"
   * ]
   */
  labels: string[];
  /**
   * The ID of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 1
   */
  runner_id: number | null;
  /**
   * The name of the runner to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example "my runner"
   */
  runner_name: string | null;
  /**
   * The ID of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example 2
   */
  runner_group_id: number | null;
  /**
   * The name of the runner group to which this job has been assigned. (If a runner hasn't yet been assigned, this will be null.)
   * @example "my runner group"
   */
  runner_group_name: string | null;
  /**
   * The name of the workflow.
   * @example "Build"
   */
  workflow_name: string | null;
  /**
   * The name of the current branch.
   * @example "main"
   */
  head_branch: string | null;
};
/**
 * Actions OIDC subject customization for a repository
 * Actions OIDC subject customization for a repository
 */
export type OidcCustomSubRepo = {
  /**
   * Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
   */
  use_default: boolean;
  /**
   * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
   */
  include_claim_keys?: string[];
};
/**
 * Actions Secret
 * Set secrets for GitHub Actions.
 */
export type ActionsSecret = {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  created_at: Date;
  updated_at: Date;
};
/**
 * Actions Variable
 */
export type ActionsVariable = {
  /**
   * The name of the variable.
   * @example "USERNAME"
   */
  name: string;
  /**
   * The value of the variable.
   * @example "octocat"
   */
  value: string;
  /**
   * The date and time at which the variable was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example "2019-01-24T22:45:36.000Z"
   */
  created_at: Date;
  /**
   * The date and time at which the variable was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   * @example "2019-01-24T22:45:36.000Z"
   */
  updated_at: Date;
};
/**
 * Whether GitHub Actions is enabled on the repository.
 */
export type ActionsEnabled = boolean;
export type ActionsRepositoryPermissions = {
  enabled: ActionsEnabled;
  allowed_actions?: AllowedActions;
  selected_actions_url?: SelectedActionsUrl;
};
export type ActionsWorkflowAccessToRepository = {
  /**
   * Defines the level of access that workflows outside of the repository have to actions and reusable workflows within the
   * repository.
   *
   * `none` means the access is only possible from workflows in this repository. `user` level access allows sharing across user owned private repositories only. `organization` level access allows sharing across the organization.
   */
  access_level: 'none' | 'user' | 'organization';
};
/**
 * Referenced workflow
 * A workflow referenced/reused by the initial caller workflow
 */
export type ReferencedWorkflow = {
  path: string;
  sha: string;
  ref?: string;
};
/**
 * Pull Request Minimal
 */
export type PullRequestMinimal = {
  id: number;
  number: number;
  url: string;
  head: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
  base: {
    ref: string;
    sha: string;
    repo: {
      id: number;
      url: string;
      name: string;
    };
  };
};
/**
 * Simple Commit
 * A commit.
 */
export type NullableSimpleCommit = {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  id: string;
  /**
   * SHA for the commit's tree
   */
  tree_id: string;
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  /**
   * Timestamp of the commit
   * @example "2014-08-09T08:02:04+12:00"
   */
  timestamp: Date;
  /**
   * Information about the Git author
   */
  author: {
    /**
     * Name of the commit's author
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's author
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
  /**
   * Information about the Git committer
   */
  committer: {
    /**
     * Name of the commit's committer
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's committer
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
} | null;
/**
 * Workflow Run
 * An invocation of a workflow
 */
export type WorkflowRun = {
  /**
   * The ID of the workflow run.
   * @example 5
   */
  id: number;
  /**
   * The name of the workflow run.
   * @example "Build"
   */
  name?: string | null;
  /**
   * @example "MDEwOkNoZWNrU3VpdGU1"
   */
  node_id: string;
  /**
   * The ID of the associated check suite.
   * @example 42
   */
  check_suite_id?: number;
  /**
   * The node ID of the associated check suite.
   * @example "MDEwOkNoZWNrU3VpdGU0Mg=="
   */
  check_suite_node_id?: string;
  /**
   * @example "master"
   */
  head_branch: string | null;
  /**
   * The SHA of the head commit that points to the version of the workflow being run.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * The full path of the workflow
   * @example "octocat/octo-repo/.github/workflows/ci.yml@main"
   */
  path: string;
  /**
   * The auto incrementing run number for the workflow run.
   * @example 106
   */
  run_number: number;
  /**
   * Attempt number of the run, 1 for first attempt and higher if the workflow was re-run.
   * @example 1
   */
  run_attempt?: number;
  referenced_workflows?: ReferencedWorkflow[] | null;
  /**
   * @example "push"
   */
  event: string;
  /**
   * @example "completed"
   */
  status: string | null;
  /**
   * @example "neutral"
   */
  conclusion: string | null;
  /**
   * The ID of the parent workflow.
   * @example 5
   */
  workflow_id: number;
  /**
   * The URL to the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5"
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/suites/4"
   */
  html_url: string;
  /**
   * Pull requests that are open with a `head_sha` or `head_branch` that matches the workflow run. The returned pull requests do not necessarily indicate pull requests that triggered the run.
   */
  pull_requests: PullRequestMinimal[] | null;
  created_at: Date;
  updated_at: Date;
  actor?: SimpleUser;
  triggering_actor?: SimpleUser;
  /**
   * The start time of the latest run. Resets on re-run.
   */
  run_started_at?: Date;
  /**
   * The URL to the jobs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/jobs"
   */
  jobs_url: string;
  /**
   * The URL to download the logs for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/logs"
   */
  logs_url: string;
  /**
   * The URL to the associated check suite.
   * @example "https://api.github.com/repos/github/hello-world/check-suites/12"
   */
  check_suite_url: string;
  /**
   * The URL to the artifacts for the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun/artifacts"
   */
  artifacts_url: string;
  /**
   * The URL to cancel the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/cancel"
   */
  cancel_url: string;
  /**
   * The URL to rerun the workflow run.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/rerun"
   */
  rerun_url: string;
  /**
   * The URL to the previous attempted run of this workflow, if one exists.
   * @example "https://api.github.com/repos/github/hello-world/actions/runs/5/attempts/3"
   */
  previous_attempt_url?: string | null;
  /**
   * The URL to the workflow.
   * @example "https://api.github.com/repos/github/hello-world/actions/workflows/main.yaml"
   */
  workflow_url: string;
  head_commit: NullableSimpleCommit;
  repository: MinimalRepository;
  head_repository: MinimalRepository;
  /**
   * @example 5
   */
  head_repository_id?: number;
  /**
   * The event-specific title associated with the run or the run-name if set, or the value of `run-name` if it is set in the workflow.
   * @example "Simple Workflow"
   */
  display_title: string;
};
/**
 * Environment Approval
 * An entry in the reviews log for environment deployments
 */
export type EnvironmentApprovals = {
  /**
   * The list of environments that were approved or rejected
   */
  environments: {
    /**
     * The id of the environment.
     * @example 56780428
     */
    id?: number;
    /**
     * @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg="
     */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     */
    name?: string;
    /**
     * @example "https://api.github.com/repos/github/hello-world/environments/staging"
     */
    url?: string;
    /**
     * @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
     */
    html_url?: string;
    /**
     * The time that the environment was created, in ISO 8601 format.
     * @example "2020-11-23T22:00:40Z"
     */
    created_at?: Date;
    /**
     * The time that the environment was last updated, in ISO 8601 format.
     * @example "2020-11-23T22:00:40Z"
     */
    updated_at?: Date;
  }[];
  /**
   * Whether deployment to the environment(s) was approved or rejected or pending (with comments)
   * @example "approved"
   */
  state: 'approved' | 'rejected' | 'pending';
  user: SimpleUser;
  /**
   * The comment submitted with the deployment review
   * @example "Ship it!"
   */
  comment: string;
};
export type ReviewCustomGatesCommentRequired = {
  /**
   * The name of the environment to approve or reject.
   */
  environment_name: string;
  /**
   * Comment associated with the pending deployment protection rule. **Required when state is not provided.**
   */
  comment: string;
};
export type ReviewCustomGatesStateRequired = {
  /**
   * The name of the environment to approve or reject.
   */
  environment_name: string;
  /**
   * Whether to approve or reject deployment to the specified environments.
   */
  state: 'approved' | 'rejected';
  /**
   * Optional comment to include with the review.
   */
  comment?: string;
};
/**
 * The type of reviewer.
 * @example "User"
 */
export enum DeploymentReviewerType {
  USER = 'User',
  TEAM = 'Team',
}
/**
 * Pending Deployment
 * Details of a deployment that is waiting for protection rules to pass
 */
export type PendingDeployment = {
  environment: {
    /**
     * The id of the environment.
     * @example 56780428
     */
    id?: number;
    /**
     * @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg="
     */
    node_id?: string;
    /**
     * The name of the environment.
     * @example "staging"
     */
    name?: string;
    /**
     * @example "https://api.github.com/repos/github/hello-world/environments/staging"
     */
    url?: string;
    /**
     * @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
     */
    html_url?: string;
  };
  /**
   * The set duration of the wait timer
   * @example 30
   */
  wait_timer: number;
  /**
   * The time that the wait timer began.
   * @example "2020-11-23T22:00:40Z"
   */
  wait_timer_started_at: Date | null;
  /**
   * Whether the currently authenticated user can approve the deployment
   * @example true
   */
  current_user_can_approve: boolean;
  /**
   * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
   */
  reviewers: {
    type?: DeploymentReviewerType;
    reviewer?: SimpleUser | Team;
  }[];
};
/**
 * Deployment
 * A request for a specific ref(branch,sha,tag) to be deployed
 */
export type Deployment = {
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOkRlcGxveW1lbnQx"
   */
  node_id: string;
  /**
   * @example "a84d88e7554fc1fa21bcbc4efae3c782a70d2b9d"
   */
  sha: string;
  /**
   * The ref to deploy. This can be a branch, tag, or sha.
   * @example "topic-branch"
   */
  ref: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   */
  task: string;
  payload:
    | {
        [key: string]: any;
      }
    | string;
  /**
   * @example "staging"
   */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   */
  environment: string;
  /**
   * @example "Deploy request from hubot"
   */
  description: string | null;
  creator: NullableSimpleUser;
  /**
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: Date;
  /**
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   */
  statuses_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  performed_via_github_app?: NullableIntegration;
};
/**
 * Workflow Run Usage
 * Workflow Run Usage
 */
export type WorkflowRunUsage = {
  billable: {
    UBUNTU?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    MACOS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
    WINDOWS?: {
      total_ms: number;
      jobs: number;
      job_runs?: {
        job_id: number;
        duration_ms: number;
      }[];
    };
  };
  run_duration_ms?: number;
};
/**
 * Workflow
 * A GitHub Actions workflow
 */
export type Workflow = {
  /**
   * @example 5
   */
  id: number;
  /**
   * @example "MDg6V29ya2Zsb3cxMg=="
   */
  node_id: string;
  /**
   * @example "CI"
   */
  name: string;
  /**
   * @example "ruby.yaml"
   */
  path: string;
  /**
   * @example "active"
   */
  state:
    | 'active'
    | 'deleted'
    | 'disabled_fork'
    | 'disabled_inactivity'
    | 'disabled_manually';
  /**
   * @example "2019-12-06T14:20:20.000Z"
   */
  created_at: Date;
  /**
   * @example "2019-12-06T14:20:20.000Z"
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/actions/setup-ruby/workflows/5"
   */
  url: string;
  /**
   * @example "https://github.com/actions/setup-ruby/blob/master/.github/workflows/ruby.yaml"
   */
  html_url: string;
  /**
   * @example "https://github.com/actions/setup-ruby/workflows/CI/badge.svg"
   */
  badge_url: string;
  /**
   * @example "2019-12-06T14:20:20.000Z"
   */
  deleted_at?: Date;
};
/**
 * Workflow Usage
 * Workflow Usage
 */
export type WorkflowUsage = {
  billable: {
    UBUNTU?: {
      total_ms?: number;
    };
    MACOS?: {
      total_ms?: number;
    };
    WINDOWS?: {
      total_ms?: number;
    };
  };
};
/**
 * Activity
 * Activity
 */
export type Activity = {
  /**
   * @example 1296269
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The SHA of the commit before the activity.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  before: string;
  /**
   * The SHA of the commit after the activity.
   * @example "827efc6d56897b048c772eb4087f854f46256132"
   */
  after: string;
  /**
   * The full Git reference, formatted as `refs/heads/<branch name>`.
   * @example "refs/heads/main"
   */
  ref: string;
  /**
   * The time when the activity occurred.
   * @example "2011-01-26T19:06:43Z"
   */
  timestamp: Date;
  /**
   * The type of the activity that was performed.
   * @example "force_push"
   */
  activity_type:
    | 'push'
    | 'force_push'
    | 'branch_deletion'
    | 'branch_creation'
    | 'pr_merge'
    | 'merge_queue_merge';
  actor: NullableSimpleUser;
};
/**
 * Autolink reference
 * An autolink reference.
 */
export type Autolink = {
  /**
   * @example 3
   */
  id: number;
  /**
   * The prefix of a key that is linkified.
   * @example "TICKET-"
   */
  key_prefix: string;
  /**
   * A template for the target URL that is generated if a key was found.
   * @example "https://example.com/TICKET?query=<num>"
   */
  url_template: string;
  /**
   * Whether this autolink reference matches alphanumeric characters. If false, this autolink reference only matches numeric characters.
   * @example true
   */
  is_alphanumeric: boolean;
};
/**
 * Check Automated Security Fixes
 * Check Automated Security Fixes
 */
export type CheckAutomatedSecurityFixes = {
  /**
   * Whether automated security fixes are enabled for the repository.
   * @example true
   */
  enabled: boolean;
  /**
   * Whether automated security fixes are paused for the repository.
   */
  paused: boolean;
};
/**
 * Protected Branch Required Status Check
 * Protected Branch Required Status Check
 */
export type ProtectedBranchRequiredStatusCheck = {
  url?: string;
  enforcement_level?: string;
  contexts: string[];
  checks: {
    context: string;
    app_id: number | null;
  }[];
  contexts_url?: string;
  strict?: boolean;
};
/**
 * Protected Branch Admin Enforced
 * Protected Branch Admin Enforced
 */
export type ProtectedBranchAdminEnforced = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/enforce_admins"
   */
  url: string;
  /**
   * @example true
   */
  enabled: boolean;
};
/**
 * Protected Branch Pull Request Review
 * Protected Branch Pull Request Review
 */
export type ProtectedBranchPullRequestReview = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/dismissal_restrictions"
   */
  url?: string;
  dismissal_restrictions?: {
    /**
     * The list of users with review dismissal access.
     */
    users?: SimpleUser[];
    /**
     * The list of teams with review dismissal access.
     */
    teams?: Team[];
    /**
     * The list of apps with review dismissal access.
     */
    apps?: Integration[];
    /**
     * @example "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions\""
     */
    url?: string;
    /**
     * @example "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/users\""
     */
    users_url?: string;
    /**
     * @example "\"https://api.github.com/repos/the-org/an-org-repo/branches/master/protection/dismissal_restrictions/teams\""
     */
    teams_url?: string;
  };
  /**
   * Allow specific users, teams, or apps to bypass pull request requirements.
   */
  bypass_pull_request_allowances?: {
    /**
     * The list of users allowed to bypass pull request requirements.
     */
    users?: SimpleUser[];
    /**
     * The list of teams allowed to bypass pull request requirements.
     */
    teams?: Team[];
    /**
     * The list of apps allowed to bypass pull request requirements.
     */
    apps?: Integration[];
  };
  /**
   * @example true
   */
  dismiss_stale_reviews: boolean;
  /**
   * @example true
   */
  require_code_owner_reviews: boolean;
  /**
   * @example 2
   */
  required_approving_review_count?: number;
  /**
   * Whether the most recent push must be approved by someone other than the person who pushed it.
   * @example true
   */
  require_last_push_approval?: boolean;
};
/**
 * Branch Restriction Policy
 * Branch Restriction Policy
 */
export type BranchRestrictionPolicy = {
  url: string;
  users_url: string;
  teams_url: string;
  apps_url: string;
  users: {
    login?: string;
    id?: number;
    node_id?: string;
    avatar_url?: string;
    gravatar_id?: string;
    url?: string;
    html_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    starred_url?: string;
    subscriptions_url?: string;
    organizations_url?: string;
    repos_url?: string;
    events_url?: string;
    received_events_url?: string;
    type?: string;
    site_admin?: boolean;
  }[];
  teams: {
    id?: number;
    node_id?: string;
    url?: string;
    html_url?: string;
    name?: string;
    slug?: string;
    description?: string | null;
    privacy?: string;
    notification_setting?: string;
    permission?: string;
    members_url?: string;
    repositories_url?: string;
    parent?: string | null;
  }[];
  apps: {
    id?: number;
    slug?: string;
    node_id?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      url?: string;
      repos_url?: string;
      events_url?: string;
      hooks_url?: string;
      issues_url?: string;
      members_url?: string;
      public_members_url?: string;
      avatar_url?: string;
      description?: string;
      /**
       * @example "\"\""
       */
      gravatar_id?: string;
      /**
       * @example "\"https://github.com/testorg-ea8ec76d71c3af4b\""
       */
      html_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/followers\""
       */
      followers_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/following{/other_user}\""
       */
      following_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/gists{/gist_id}\""
       */
      gists_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/starred{/owner}{/repo}\""
       */
      starred_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/subscriptions\""
       */
      subscriptions_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/orgs\""
       */
      organizations_url?: string;
      /**
       * @example "\"https://api.github.com/users/testorg-ea8ec76d71c3af4b/received_events\""
       */
      received_events_url?: string;
      /**
       * @example "\"Organization\""
       */
      type?: string;
      site_admin?: boolean;
    };
    name?: string;
    description?: string;
    external_url?: string;
    html_url?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      metadata?: string;
      contents?: string;
      issues?: string;
      single_file?: string;
    };
    events?: string[];
  }[];
};
/**
 * Branch Protection
 * Branch Protection
 */
export type BranchProtection = {
  url?: string;
  enabled?: boolean;
  required_status_checks?: ProtectedBranchRequiredStatusCheck;
  enforce_admins?: ProtectedBranchAdminEnforced;
  required_pull_request_reviews?: ProtectedBranchPullRequestReview;
  restrictions?: BranchRestrictionPolicy;
  required_linear_history?: {
    enabled?: boolean;
  };
  allow_force_pushes?: {
    enabled?: boolean;
  };
  allow_deletions?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled?: boolean;
  };
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  /**
   * @example "\"branch/with/protection\""
   */
  name?: string;
  /**
   * @example "\"https://api.github.com/repos/owner-79e94e2d36b3fd06a32bb213/AAA_Public_Repo/branches/branch/with/protection/protection\""
   */
  protection_url?: string;
  required_signatures?: {
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     */
    url: string;
    /**
     * @example true
     */
    enabled: boolean;
  };
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    enabled?: boolean;
  };
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    enabled?: boolean;
  };
};
/**
 * Short Branch
 * Short Branch
 */
export type ShortBranch = {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
  protection?: BranchProtection;
  protection_url?: string;
};
/**
 * Git User
 * Metaproperties for Git author/committer information.
 */
export type NullableGitUser = {
  /**
   * @example "\"Chris Wanstrath\""
   */
  name?: string;
  /**
   * @example "\"chris@ozmm.org\""
   */
  email?: string;
  /**
   * @example "\"2007-10-29T02:42:39.000-07:00\""
   */
  date?: string;
} | null;
/**
 * Verification
 */
export type Verification = {
  verified: boolean;
  reason: string;
  payload: string | null;
  signature: string | null;
};
/**
 * Diff Entry
 * Diff Entry
 */
export type DiffEntry = {
  /**
   * @example "bbcd538c8e72b8c175046e27cc8f907076331401"
   */
  sha: string;
  /**
   * @example "file1.txt"
   */
  filename: string;
  /**
   * @example "added"
   */
  status:
    | 'added'
    | 'removed'
    | 'modified'
    | 'renamed'
    | 'copied'
    | 'changed'
    | 'unchanged';
  /**
   * @example 103
   */
  additions: number;
  /**
   * @example 21
   */
  deletions: number;
  /**
   * @example 124
   */
  changes: number;
  /**
   * @example "https://github.com/octocat/Hello-World/blob/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  blob_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/raw/6dcb09b5b57875f334f61aebed695e2e4193db5e/file1.txt"
   */
  raw_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/contents/file1.txt?ref=6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  contents_url: string;
  /**
   * @example "@@ -132,7 +132,7 @@ module Test @@ -1000,7 +1000,7 @@ module Test"
   */
  patch?: string;
  /**
   * @example "file.txt"
   */
  previous_filename?: string;
};
/**
 * Commit
 * Commit
 */
export type Commit = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  url: string;
  /**
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  sha: string;
  /**
   * @example "MDY6Q29tbWl0NmRjYjA5YjViNTc4NzVmMzM0ZjYxYWViZWQ2OTVlMmU0MTkzZGI1ZQ=="
   */
  node_id: string;
  /**
   * @example "https://github.com/octocat/Hello-World/commit/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e/comments"
   */
  comments_url: string;
  commit: {
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
     */
    url: string;
    author: NullableGitUser;
    committer: NullableGitUser;
    /**
     * @example "Fix all the bugs"
     */
    message: string;
    comment_count: number;
    tree: {
      /**
       * @example "827efc6d56897b048c772eb4087f854f46256132"
       */
      sha: string;
      /**
       * @example "https://api.github.com/repos/octocat/Hello-World/tree/827efc6d56897b048c772eb4087f854f46256132"
       */
      url: string;
    };
    verification?: Verification;
  };
  author: NullableSimpleUser;
  committer: NullableSimpleUser;
  parents: {
    /**
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/commits/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    url: string;
    /**
     * @example "https://github.com/octocat/Hello-World/commit/7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    html_url?: string;
  }[];
  stats?: {
    additions?: number;
    deletions?: number;
    total?: number;
  };
  files?: DiffEntry[];
};
/**
 * Branch With Protection
 * Branch With Protection
 */
export type BranchWithProtection = {
  name: string;
  commit: Commit;
  _links: {
    html: string;
    self: string;
  };
  protected: boolean;
  protection: BranchProtection;
  protection_url: string;
  /**
   * @example "\"mas*\""
   */
  pattern?: string;
  /**
   * @example 1
   */
  required_approving_review_count?: number;
};
/**
 * Status Check Policy
 * Status Check Policy
 */
export type StatusCheckPolicy = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks"
   */
  url: string;
  /**
   * @example true
   */
  strict: boolean;
  /**
   * @example
   * [
   *   "continuous-integration/travis-ci"
   * ]
   */
  contexts: string[];
  checks: {
    /**
     * @example "continuous-integration/travis-ci"
     */
    context: string;
    app_id: number | null;
  }[];
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_status_checks/contexts"
   */
  contexts_url: string;
};
/**
 * Protected Branch
 * Branch protections protect branches
 */
export type ProtectedBranch = {
  url: string;
  required_status_checks?: StatusCheckPolicy;
  required_pull_request_reviews?: {
    url: string;
    dismiss_stale_reviews?: boolean;
    require_code_owner_reviews?: boolean;
    required_approving_review_count?: number;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it.
     */
    require_last_push_approval?: boolean;
    dismissal_restrictions?: {
      url: string;
      users_url: string;
      teams_url: string;
      users: SimpleUser[];
      teams: Team[];
      apps?: Integration[];
    };
    bypass_pull_request_allowances?: {
      users: SimpleUser[];
      teams: Team[];
      apps?: Integration[];
    };
  };
  required_signatures?: {
    /**
     * @example "https://api.github.com/repos/octocat/Hello-World/branches/master/protection/required_signatures"
     */
    url: string;
    /**
     * @example true
     */
    enabled: boolean;
  };
  enforce_admins?: {
    url: string;
    enabled: boolean;
  };
  required_linear_history?: {
    enabled: boolean;
  };
  allow_force_pushes?: {
    enabled: boolean;
  };
  allow_deletions?: {
    enabled: boolean;
  };
  restrictions?: BranchRestrictionPolicy;
  required_conversation_resolution?: {
    enabled?: boolean;
  };
  block_creations?: {
    enabled: boolean;
  };
  /**
   * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch.
   */
  lock_branch?: {
    enabled?: boolean;
  };
  /**
   * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing.
   */
  allow_fork_syncing?: {
    enabled?: boolean;
  };
};
/**
 * Deployment
 * A deployment created as the result of an Actions check run from a workflow that references an environment
 */
export type DeploymentSimple = {
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1"
   */
  url: string;
  /**
   * Unique identifier of the deployment
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOkRlcGxveW1lbnQx"
   */
  node_id: string;
  /**
   * Parameter to specify a task to execute
   * @example "deploy"
   */
  task: string;
  /**
   * @example "staging"
   */
  original_environment?: string;
  /**
   * Name for the target deployment environment.
   * @example "production"
   */
  environment: string;
  /**
   * @example "Deploy request from hubot"
   */
  description: string | null;
  /**
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: Date;
  /**
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/1/statuses"
   */
  statuses_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * Specifies if the given environment is will no longer exist at some point in the future. Default: false.
   * @example true
   */
  transient_environment?: boolean;
  /**
   * Specifies if the given environment is one that end-users directly interact with. Default: false.
   * @example true
   */
  production_environment?: boolean;
  performed_via_github_app?: NullableIntegration;
};
/**
 * CheckRun
 * A check performed on the code of a given code change
 */
export type CheckRun = {
  /**
   * The id of the check.
   * @example 21
   */
  id: number;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * @example "MDg6Q2hlY2tSdW40"
   */
  node_id: string;
  /**
   * @example "42"
   */
  external_id: string | null;
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-runs/4"
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/runs/4"
   */
  html_url: string | null;
  /**
   * @example "https://example.com"
   */
  details_url: string | null;
  /**
   * The phase of the lifecycle that the check is currently in.
   * @example "queued"
   */
  status: 'queued' | 'in_progress' | 'completed';
  /**
   * @example "neutral"
   */
  conclusion:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
      )
    | null;
  /**
   * @example "2018-05-04T01:14:52Z"
   */
  started_at: Date | null;
  /**
   * @example "2018-05-04T01:14:52Z"
   */
  completed_at: Date | null;
  output: {
    title: string | null;
    summary: string | null;
    text: string | null;
    annotations_count: number;
    annotations_url: string;
  };
  /**
   * The name of the check.
   * @example "test-coverage"
   */
  name: string;
  check_suite: {
    id: number;
  } | null;
  app: NullableIntegration;
  /**
   * Pull requests that are open with a `head_sha` or `head_branch` that matches the check. The returned pull requests do not necessarily indicate pull requests that triggered the check.
   */
  pull_requests: PullRequestMinimal[];
  deployment?: DeploymentSimple;
};
/**
 * Check Annotation
 * Check Annotation
 */
export type CheckAnnotation = {
  /**
   * @example "README.md"
   */
  path: string;
  /**
   * @example 2
   */
  start_line: number;
  /**
   * @example 2
   */
  end_line: number;
  /**
   * @example 5
   */
  start_column: number | null;
  /**
   * @example 10
   */
  end_column: number | null;
  /**
   * @example "warning"
   */
  annotation_level: string | null;
  /**
   * @example "Spell Checker"
   */
  title: string | null;
  /**
   * @example "Check your spelling for 'banaas'."
   */
  message: string | null;
  /**
   * @example "Do you mean 'bananas' or 'banana'?"
   */
  raw_details: string | null;
  blob_href: string;
};
/**
 * Simple Commit
 * A commit.
 */
export type SimpleCommit = {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  id: string;
  /**
   * SHA for the commit's tree
   */
  tree_id: string;
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  /**
   * Timestamp of the commit
   * @example "2014-08-09T08:02:04+12:00"
   */
  timestamp: Date;
  /**
   * Information about the Git author
   */
  author: {
    /**
     * Name of the commit's author
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's author
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
  /**
   * Information about the Git committer
   */
  committer: {
    /**
     * Name of the commit's committer
     * @example "Monalisa Octocat"
     */
    name: string;
    /**
     * Git email address of the commit's committer
     * @example "monalisa.octocat@example.com"
     */
    email: string;
  } | null;
};
/**
 * CheckSuite
 * A suite of checks performed on the code of a given code change
 */
export type CheckSuite = {
  /**
   * @example 5
   */
  id: number;
  /**
   * @example "MDEwOkNoZWNrU3VpdGU1"
   */
  node_id: string;
  /**
   * @example "master"
   */
  head_branch: string | null;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * @example "completed"
   */
  status: ('queued' | 'in_progress' | 'completed') | null;
  /**
   * @example "neutral"
   */
  conclusion:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
        | 'startup_failure'
        | 'stale'
        | null
      )
    | null;
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-suites/5"
   */
  url: string | null;
  /**
   * @example "146e867f55c26428e5f9fade55a9bbf5e95a7912"
   */
  before: string | null;
  /**
   * @example "d6fde92930d4715a2b49857d24b940956b26d2d3"
   */
  after: string | null;
  pull_requests: PullRequestMinimal[] | null;
  app: NullableIntegration;
  repository: MinimalRepository;
  created_at: Date | null;
  updated_at: Date | null;
  head_commit: SimpleCommit;
  latest_check_runs_count: number;
  check_runs_url: string;
  rerequestable?: boolean;
  runs_rerequestable?: boolean;
};
/**
 * Check Suite Preference
 * Check suite configuration preferences for a repository.
 */
export type CheckSuitePreference = {
  preferences: {
    auto_trigger_checks?: {
      app_id: number;
      setting: boolean;
    }[];
  };
  repository: MinimalRepository;
};
export type CodeScanningAlertItems = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  fixed_at?: AlertFixedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_at: AlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRuleSummary;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
};
export type CodeScanningAlertRule = {
  /**
   * A unique identifier for the rule used to detect the alert.
   */
  id?: string | null;
  /**
   * The name of the rule used to detect the alert.
   */
  name?: string;
  /**
   * The severity of the alert.
   */
  severity?: ('none' | 'note' | 'warning' | 'error') | null;
  /**
   * The security severity of the alert.
   */
  security_severity_level?: ('low' | 'medium' | 'high' | 'critical') | null;
  /**
   * A short description of the rule used to detect the alert.
   */
  description?: string;
  /**
   * description of the rule used to detect the alert.
   */
  full_description?: string;
  /**
   * A set of tags applicable for the rule.
   */
  tags?: string[] | null;
  /**
   * Detailed documentation for the rule as GitHub Flavored Markdown.
   */
  help?: string | null;
  /**
   * A link to the documentation for the rule used to detect the alert.
   */
  help_uri?: string | null;
};
export type CodeScanningAlert = {
  number: AlertNumber;
  created_at: AlertCreatedAt;
  updated_at?: AlertUpdatedAt;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  instances_url: AlertInstancesUrl;
  state: CodeScanningAlertState;
  fixed_at?: AlertFixedAt;
  dismissed_by: NullableSimpleUser;
  dismissed_at: AlertDismissedAt;
  dismissed_reason: CodeScanningAlertDismissedReason;
  dismissed_comment?: CodeScanningAlertDismissedComment;
  rule: CodeScanningAlertRule;
  tool: CodeScanningAnalysisTool;
  most_recent_instance: CodeScanningAlertInstance;
};
/**
 * Sets the state of the code scanning alert. You must provide `dismissed_reason` when you set the state to `dismissed`.
 */
export enum CodeScanningAlertSetState {
  OPEN = 'open',
  DISMISSED = 'dismissed',
}
/**
 * An identifier for the upload.
 * @example "6c81cd8e-b078-4ac3-a3be-1dad7dbd0b53"
 */
export type CodeScanningAnalysisSarifId = string;
/**
 * The SHA of the commit to which the analysis you are uploading relates.
 */
export type CodeScanningAnalysisCommitSha = string;
/**
 * Identifies the variable values associated with the environment in which this analysis was performed.
 */
export type CodeScanningAnalysisEnvironment = string;
/**
 * The time that the analysis was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
 */
export type CodeScanningAnalysisCreatedAt = Date;
/**
 * The REST API URL of the analysis resource.
 */
export type CodeScanningAnalysisUrl = string;
export type CodeScanningAnalysis = {
  ref: CodeScanningRef;
  commit_sha: CodeScanningAnalysisCommitSha;
  analysis_key: CodeScanningAnalysisAnalysisKey;
  environment: CodeScanningAnalysisEnvironment;
  category?: CodeScanningAnalysisCategory;
  /**
   * @example "error reading field xyz"
   */
  error: string;
  created_at: CodeScanningAnalysisCreatedAt;
  /**
   * The total number of results in the analysis.
   */
  results_count: number;
  /**
   * The total number of rules used in the analysis.
   */
  rules_count: number;
  /**
   * Unique identifier for this analysis.
   */
  id: number;
  url: CodeScanningAnalysisUrl;
  sarif_id: CodeScanningAnalysisSarifId;
  tool: CodeScanningAnalysisTool;
  deletable: boolean;
  /**
   * Warning generated when processing the analysis
   * @example "123 results were ignored"
   */
  warning: string;
};
/**
 * Analysis deletion
 * Successful deletion of a code scanning analysis
 */
export type CodeScanningAnalysisDeletion = {
  /**
   * Next deletable analysis in chain, without last analysis deletion confirmation
   */
  next_analysis_url: string | null;
  /**
   * Next deletable analysis in chain, with last analysis deletion confirmation
   */
  confirm_delete_url: string | null;
};
/**
 * CodeQL Database
 * A CodeQL database.
 */
export type CodeScanningCodeqlDatabase = {
  /**
   * The ID of the CodeQL database.
   */
  id: number;
  /**
   * The name of the CodeQL database.
   */
  name: string;
  /**
   * The language of the CodeQL database.
   */
  language: string;
  uploader: SimpleUser;
  /**
   * The MIME type of the CodeQL database file.
   */
  content_type: string;
  /**
   * The size of the CodeQL database file in bytes.
   */
  size: number;
  /**
   * The date and time at which the CodeQL database was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: Date;
  /**
   * The date and time at which the CodeQL database was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: Date;
  /**
   * The URL at which to download the CodeQL database. The `Accept` header must be set to the value of the `content_type` property.
   */
  url: string;
  /**
   * The commit SHA of the repository at the time the CodeQL database was created.
   */
  commit_oid?: string | null;
};
/**
 * Configuration for code scanning default setup.
 */
export type CodeScanningDefaultSetup = {
  /**
   * Code scanning default setup has been configured or not.
   */
  state?: 'configured' | 'not-configured';
  /**
   * Languages to be analyzed.
   */
  languages?: (
    | 'c-cpp'
    | 'csharp'
    | 'go'
    | 'java-kotlin'
    | 'javascript-typescript'
    | 'javascript'
    | 'python'
    | 'ruby'
    | 'typescript'
    | 'swift'
  )[];
  /**
   * CodeQL query suite to be used.
   */
  query_suite?: 'default' | 'extended';
  /**
   * Timestamp of latest configuration update.
   * @example "2023-12-06T14:20:20.000Z"
   */
  updated_at?: Date | null;
  /**
   * The frequency of the periodic analysis.
   */
  schedule?: 'weekly' | null;
};
/**
 * Configuration for code scanning default setup.
 */
export type CodeScanningDefaultSetupUpdate = {
  /**
   * The desired state of code scanning default setup.
   */
  state?: 'configured' | 'not-configured';
  /**
   * CodeQL query suite to be used.
   */
  query_suite?: 'default' | 'extended';
  /**
   * CodeQL languages to be analyzed.
   */
  languages?: (
    | 'c-cpp'
    | 'csharp'
    | 'go'
    | 'java-kotlin'
    | 'javascript-typescript'
    | 'python'
    | 'ruby'
    | 'swift'
  )[];
};
/**
 * You can use `run_url` to track the status of the run. This includes a property status and conclusion.
 * You should not rely on this always being an actions workflow run object.
 */
export type CodeScanningDefaultSetupUpdateResponse = {
  /**
   * ID of the corresponding run.
   */
  run_id?: number;
  /**
   * URL of the corresponding run.
   */
  run_url?: string;
};
/**
 * The full Git reference, formatted as `refs/heads/<branch name>`,
 * `refs/tags/<tag>`, `refs/pull/<number>/merge`, or `refs/pull/<number>/head`.
 * @example "refs/heads/main"
 */
export type CodeScanningRefFull = string;
/**
 * A Base64 string representing the SARIF file to upload. You must first compress your SARIF file using [`gzip`](http://www.gnu.org/software/gzip/manual/gzip.html) and then translate the contents of the file into a Base64 encoding string. For more information, see "[SARIF support for code scanning](https://docs.github.com/code-security/secure-coding/sarif-support-for-code-scanning)."
 */
export type CodeScanningAnalysisSarifFile = string;
export type CodeScanningSarifsReceipt = {
  id?: CodeScanningAnalysisSarifId;
  /**
   * The REST API URL for checking the status of the upload.
   */
  url?: string;
};
export type CodeScanningSarifsStatus = {
  /**
   * `pending` files have not yet been processed, while `complete` means results from the SARIF have been stored. `failed` files have either not been processed at all, or could only be partially processed.
   */
  processing_status?: 'pending' | 'complete' | 'failed';
  /**
   * The REST API URL for getting the analyses associated with the upload.
   */
  analyses_url?: string | null;
  /**
   * Any errors that ocurred during processing of the delivery.
   */
  errors?: string[] | null;
};
/**
 * CODEOWNERS errors
 * A list of errors found in a repo's CODEOWNERS file
 */
export type CodeownersErrors = {
  errors: {
    /**
     * The line number where this errors occurs.
     * @example 7
     */
    line: number;
    /**
     * The column number where this errors occurs.
     * @example 3
     */
    column: number;
    /**
     * The contents of the line where the error occurs.
     * @example "* user"
     */
    source?: string;
    /**
     * The type of error.
     * @example "Invalid owner"
     */
    kind: string;
    /**
     * Suggested action to fix the error. This will usually be `null`, but is provided for some common errors.
     * @example "The pattern `/` will never match anything, did you mean `*` instead?"
     */
    suggestion?: string | null;
    /**
     * A human-readable description of the error, combining information from multiple fields, laid out for display in a monospaced typeface (for example, a command-line setting).
     * @example "Invalid owner on line 7:\n\n  * user\n    ^"
     */
    message: string;
    /**
     * The path of the file where the error occured.
     * @example ".github/CODEOWNERS"
     */
    path: string;
  }[];
};
/**
 * Codespace machine
 * A description of the machine powering a codespace.
 */
export type CodespaceMachine = {
  /**
   * The name of the machine.
   * @example "standardLinux"
   */
  name: string;
  /**
   * The display name of the machine includes cores, memory, and storage.
   * @example "4 cores, 16 GB RAM, 64 GB storage"
   */
  display_name: string;
  /**
   * The operating system of the machine.
   * @example "linux"
   */
  operating_system: string;
  /**
   * How much storage is available to the codespace.
   * @example 68719476736
   */
  storage_in_bytes: number;
  /**
   * How much memory is available to the codespace.
   * @example 17179869184
   */
  memory_in_bytes: number;
  /**
   * How many cores are available to the codespace.
   * @example 4
   */
  cpus: number;
  /**
   * Whether a prebuild is currently available when creating a codespace for this machine and repository. If a branch was not specified as a ref, the default branch will be assumed. Value will be "null" if prebuilds are not supported or prebuild availability could not be determined. Value will be "none" if no prebuild is available. Latest values "ready" and "in_progress" indicate the prebuild availability status.
   * @example "ready"
   */
  prebuild_availability: ('none' | 'ready' | 'in_progress') | null;
};
/**
 * Codespaces Permissions Check
 * Permission check result for a given devcontainer config.
 */
export type CodespacesPermissionsCheckForDevcontainer = {
  /**
   * Whether the user has accepted the permissions defined by the devcontainer config
   * @example true
   */
  accepted: boolean;
};
/**
 * Codespaces Secret
 * Set repository secrets for GitHub Codespaces.
 */
export type RepoCodespacesSecret = {
  /**
   * The name of the secret.
   * @example "SECRET_TOKEN"
   */
  name: string;
  created_at: Date;
  updated_at: Date;
};
/**
 * Collaborator
 * Collaborator
 */
export type Collaborator = {
  /**
   * @example "octocat"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;
  /**
   * @example "MDQ6VXNlcjE="
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @example "User"
   */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };
  /**
   * @example "admin"
   */
  role_name: string;
};
/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositoryInvitation = {
  /**
   * Unique identifier of the repository invitation.
   * @example 42
   */
  id: number;
  repository: MinimalRepository;
  invitee: NullableSimpleUser;
  inviter: NullableSimpleUser;
  /**
   * The permission associated with the invitation.
   * @example "read"
   */
  permissions: 'read' | 'write' | 'admin' | 'triage' | 'maintain';
  /**
   * @example "2016-06-13T14:52:50-05:00"
   */
  created_at: Date;
  /**
   * Whether or not the invitation has expired
   */
  expired?: boolean;
  /**
   * URL for the repository invitation
   * @example "https://api.github.com/user/repository-invitations/1"
   */
  url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/invitations"
   */
  html_url: string;
  node_id: string;
};
/**
 * Collaborator
 * Collaborator
 */
export type NullableCollaborator = {
  /**
   * @example "octocat"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  email?: string | null;
  name?: string | null;
  /**
   * @example "MDQ6VXNlcjE="
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @example "User"
   */
  type: string;
  site_admin: boolean;
  permissions?: {
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
    admin: boolean;
  };
  /**
   * @example "admin"
   */
  role_name: string;
} | null;
/**
 * Repository Collaborator Permission
 * Repository Collaborator Permission
 */
export type RepositoryCollaboratorPermission = {
  permission: string;
  /**
   * @example "admin"
   */
  role_name: string;
  user: NullableCollaborator;
};
/**
 * Commit Comment
 * Commit Comment
 */
export type CommitComment = {
  html_url: string;
  url: string;
  id: number;
  node_id: string;
  body: string;
  path: string | null;
  position: number | null;
  line: number | null;
  commit_id: string;
  user: NullableSimpleUser;
  created_at: Date;
  updated_at: Date;
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
};
/**
 * Branch Short
 * Branch Short
 */
export type BranchShort = {
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  protected: boolean;
};
/**
 * Link
 * Hypermedia Link
 */
export type Link = {
  href: string;
};
/**
 * Auto merge
 * The status of auto merging a pull request.
 */
export type AutoMerge = {
  enabled_by: SimpleUser;
  /**
   * The merge method to use.
   */
  merge_method: 'merge' | 'squash' | 'rebase';
  /**
   * Title for the merge commit message.
   */
  commit_title: string;
  /**
   * Commit message for the merge commit.
   */
  commit_message: string;
} | null;
/**
 * Pull Request Simple
 * Pull Request Simple
 */
export type PullRequestSimple = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDExOlB1bGxSZXF1ZXN0MQ=="
   */
  node_id: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
   */
  review_comment_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /**
   * @example 1347
   */
  number: number;
  /**
   * @example "open"
   */
  state: string;
  /**
   * @example true
   */
  locked: boolean;
  /**
   * @example "new-feature"
   */
  title: string;
  user: NullableSimpleUser;
  /**
   * @example "Please pull these awesome changes"
   */
  body: string | null;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string;
    color: string;
    default: boolean;
  }[];
  milestone: NullableMilestone;
  /**
   * @example "too heated"
   */
  active_lock_reason?: string | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: Date | null;
  /**
   * @example "e5bd3914e2e596debea16f433f57875b5b90bcd6"
   */
  merge_commit_sha: string | null;
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: Team[] | null;
  head: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: NullableSimpleUser;
  };
  base: {
    label: string;
    ref: string;
    repo: Repository;
    sha: string;
    user: NullableSimpleUser;
  };
  _links: {
    comments: Link;
    commits: Link;
    statuses: Link;
    html: Link;
    issue: Link;
    review_comments: Link;
    review_comment: Link;
    self: Link;
  };
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
};
/**
 * Simple Commit Status
 */
export type SimpleCommitStatus = {
  description: string | null;
  id: number;
  node_id: string;
  state: string;
  context: string;
  target_url: string | null;
  required?: boolean | null;
  avatar_url: string | null;
  url: string;
  created_at: Date;
  updated_at: Date;
};
/**
 * Combined Commit Status
 * Combined Commit Status
 */
export type CombinedCommitStatus = {
  state: string;
  statuses: SimpleCommitStatus[];
  sha: string;
  total_count: number;
  repository: MinimalRepository;
  commit_url: string;
  url: string;
};
/**
 * Status
 * The status of a commit.
 */
export type Status = {
  url: string;
  avatar_url: string | null;
  id: number;
  node_id: string;
  state: string;
  description: string | null;
  target_url: string | null;
  context: string;
  created_at: string;
  updated_at: string;
  creator: NullableSimpleUser;
};
/**
 * Code Of Conduct Simple
 * Code of Conduct Simple
 */
export type NullableCodeOfConductSimple = {
  /**
   * @example "https://api.github.com/repos/github/docs/community/code_of_conduct"
   */
  url: string;
  /**
   * @example "citizen_code_of_conduct"
   */
  key: string;
  /**
   * @example "Citizen Code of Conduct"
   */
  name: string;
  /**
   * @example "https://github.com/github/docs/blob/main/CODE_OF_CONDUCT.md"
   */
  html_url: string | null;
} | null;
/**
 * Community Health File
 */
export type NullableCommunityHealthFile = {
  url: string;
  html_url: string;
} | null;
/**
 * Community Profile
 * Community Profile
 */
export type CommunityProfile = {
  /**
   * @example 100
   */
  health_percentage: number;
  /**
   * @example "My first repository on GitHub!"
   */
  description: string | null;
  /**
   * @example "example.com"
   */
  documentation: string | null;
  files: {
    code_of_conduct: NullableCodeOfConductSimple;
    code_of_conduct_file: NullableCommunityHealthFile;
    license: NullableLicenseSimple;
    contributing: NullableCommunityHealthFile;
    readme: NullableCommunityHealthFile;
    issue_template: NullableCommunityHealthFile;
    pull_request_template: NullableCommunityHealthFile;
  };
  /**
   * @example "2017-02-28T19:09:29Z"
   */
  updated_at: Date | null;
  /**
   * @example true
   */
  content_reports_enabled?: boolean;
};
/**
 * Commit Comparison
 * Commit Comparison
 */
export type CommitComparison = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/compare/master...topic"
   */
  url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/master...topic"
   */
  html_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/octocat:bbcd538c8e72b8c175046e27cc8f907076331401...octocat:0328041d1152db8ae77652d1618a02e57f745f17"
   */
  permalink_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.diff"
   */
  diff_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/compare/master...topic.patch"
   */
  patch_url: string;
  base_commit: Commit;
  merge_base_commit: Commit;
  /**
   * @example "ahead"
   */
  status: 'diverged' | 'ahead' | 'behind' | 'identical';
  /**
   * @example 4
   */
  ahead_by: number;
  /**
   * @example 5
   */
  behind_by: number;
  /**
   * @example 6
   */
  total_commits: number;
  commits: Commit[];
  files?: DiffEntry[];
};
/**
 * Content Tree
 * Content Tree
 */
export type ContentTree = {
  type: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  entries?: {
    type: string;
    size: number;
    name: string;
    path: string;
    content?: string;
    sha: string;
    url: string;
    git_url: string | null;
    html_url: string | null;
    download_url: string | null;
    _links: {
      git: string | null;
      html: string | null;
      self: string;
    };
  }[];
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * Content Directory
 * A list of directory items
 */
export type ContentDirectory = {
  type: 'dir' | 'file' | 'submodule' | 'symlink';
  size: number;
  name: string;
  path: string;
  content?: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
}[];
/**
 * Content File
 * Content File
 */
export type ContentFile = {
  type: 'file';
  encoding: string;
  size: number;
  name: string;
  path: string;
  content: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  /**
   * @example "\"actual/actual.md\""
   */
  target?: string;
  /**
   * @example "\"git://example.com/defunkt/dotjs.git\""
   */
  submodule_git_url?: string;
};
/**
 * Symlink Content
 * An object describing a symlink
 */
export type ContentSymlink = {
  type: 'symlink';
  target: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * Submodule Content
 * An object describing a submodule
 */
export type ContentSubmodule = {
  type: 'submodule';
  submodule_git_url: string;
  size: number;
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string | null;
  html_url: string | null;
  download_url: string | null;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
};
/**
 * File Commit
 * File Commit
 */
export type FileCommit = {
  content: {
    name?: string;
    path?: string;
    sha?: string;
    size?: number;
    url?: string;
    html_url?: string;
    git_url?: string;
    download_url?: string;
    type?: string;
    _links?: {
      self?: string;
      git?: string;
      html?: string;
    };
  } | null;
  commit: {
    sha?: string;
    node_id?: string;
    url?: string;
    html_url?: string;
    author?: {
      date?: string;
      name?: string;
      email?: string;
    };
    committer?: {
      date?: string;
      name?: string;
      email?: string;
    };
    message?: string;
    tree?: {
      url?: string;
      sha?: string;
    };
    parents?: {
      url?: string;
      html_url?: string;
      sha?: string;
    }[];
    verification?: {
      verified?: boolean;
      reason?: string;
      signature?: string | null;
      payload?: string | null;
    };
  };
};
/**
 * Contributor
 * Contributor
 */
export type Contributor = {
  login?: string;
  id?: number;
  node_id?: string;
  avatar_url?: string;
  gravatar_id?: string | null;
  url?: string;
  html_url?: string;
  followers_url?: string;
  following_url?: string;
  gists_url?: string;
  starred_url?: string;
  subscriptions_url?: string;
  organizations_url?: string;
  repos_url?: string;
  events_url?: string;
  received_events_url?: string;
  type: string;
  site_admin?: boolean;
  contributions: number;
  email?: string;
  name?: string;
};
/**
 * A Dependabot alert.
 */
export type DependabotAlert = {
  number: AlertNumber;
  /**
   * The state of the Dependabot alert.
   */
  state: 'auto_dismissed' | 'dismissed' | 'fixed' | 'open';
  /**
   * Details for the vulnerable dependency.
   */
  dependency: {
    package?: DependabotAlertPackage;
    /**
     * The full path to the dependency manifest file, relative to the root of the repository.
     */
    manifest_path?: string;
    /**
     * The execution scope of the vulnerable dependency.
     */
    scope?: ('development' | 'runtime') | null;
  };
  security_advisory: DependabotAlertSecurityAdvisory;
  security_vulnerability: DependabotAlertSecurityVulnerability;
  url: AlertUrl;
  html_url: AlertHtmlUrl;
  created_at: AlertCreatedAt;
  updated_at: AlertUpdatedAt;
  dismissed_at: AlertDismissedAt;
  dismissed_by: NullableSimpleUser;
  /**
   * The reason that the alert was dismissed.
   */
  dismissed_reason:
    | (
        | 'fix_started'
        | 'inaccurate'
        | 'no_bandwidth'
        | 'not_used'
        | 'tolerable_risk'
      )
    | null;
  /**
   * An optional comment associated with the alert's dismissal.
   */
  dismissed_comment: string | null;
  fixed_at: AlertFixedAt;
  auto_dismissed_at?: AlertAutoDismissedAt;
};
/**
 * Dependabot Secret
 * Set secrets for Dependabot.
 */
export type DependabotSecret = {
  /**
   * The name of the secret.
   * @example "MY_ARTIFACTORY_PASSWORD"
   */
  name: string;
  created_at: Date;
  updated_at: Date;
};
/**
 * Dependency Graph Diff
 * A diff of the dependencies between two commits.
 */
export type DependencyGraphDiff = {
  change_type: 'added' | 'removed';
  /**
   * @example "path/to/package-lock.json"
   */
  manifest: string;
  /**
   * @example "npm"
   */
  ecosystem: string;
  /**
   * @example "@actions/core"
   */
  name: string;
  /**
   * @example "1.0.0"
   */
  version: string;
  /**
   * @example "pkg:/npm/%40actions/core@1.1.0"
   */
  package_url: string | null;
  /**
   * @example "MIT"
   */
  license: string | null;
  /**
   * @example "https://github.com/github/actions"
   */
  source_repository_url: string | null;
  vulnerabilities: {
    /**
     * @example "critical"
     */
    severity: string;
    /**
     * @example "GHSA-rf4j-j272-fj86"
     */
    advisory_ghsa_id: string;
    /**
     * @example "A summary of the advisory."
     */
    advisory_summary: string;
    /**
     * @example "https://github.com/advisories/GHSA-rf4j-j272-fj86"
     */
    advisory_url: string;
  }[];
  /**
   * Where the dependency is utilized. `development` means that the dependency is only utilized in the development environment. `runtime` means that the dependency is utilized at runtime and in the development environment.
   */
  scope: 'unknown' | 'runtime' | 'development';
}[];
/**
 * Dependency Graph SPDX SBOM
 * A schema for the SPDX JSON format returned by the Dependency Graph.
 */
export type DependencyGraphSpdxSbom = {
  sbom: {
    /**
     * The SPDX identifier for the SPDX document.
     * @example "SPDXRef-DOCUMENT"
     */
    SPDXID: string;
    /**
     * The version of the SPDX specification that this document conforms to.
     * @example "SPDX-2.3"
     */
    spdxVersion: string;
    creationInfo: {
      /**
       * The date and time the SPDX document was created.
       * @example "2021-11-03T00:00:00Z"
       */
      created: string;
      /**
       * The tools that were used to generate the SPDX document.
       */
      creators: string[];
    };
    /**
     * The name of the SPDX document.
     * @example "github/github"
     */
    name: string;
    /**
     * The license under which the SPDX document is licensed.
     * @example "CC0-1.0"
     */
    dataLicense: string;
    /**
     * The name of the repository that the SPDX document describes.
     */
    documentDescribes: string[];
    /**
     * The namespace for the SPDX document.
     * @example "https://github.com/example/dependency_graph/sbom-123"
     */
    documentNamespace: string;
    packages: {
      /**
       * A unique SPDX identifier for the package.
       * @example "SPDXRef-Package"
       */
      SPDXID?: string;
      /**
       * The name of the package.
       * @example "rubygems:github/github"
       */
      name?: string;
      /**
       * The version of the package. If the package does not have an exact version specified,
       * a version range is given.
       * @example "1.0.0"
       */
      versionInfo?: string;
      /**
       * The location where the package can be downloaded,
       * or NOASSERTION if this has not been determined.
       * @example "NOASSERTION"
       */
      downloadLocation?: string;
      /**
       * Whether the package's file content has been subjected to
       * analysis during the creation of the SPDX document.
       */
      filesAnalyzed?: boolean;
      /**
       * The license of the package as determined while creating the SPDX document.
       * @example "MIT"
       */
      licenseConcluded?: string;
      /**
       * The license of the package as declared by its author, or NOASSERTION if this information
       * was not available when the SPDX document was created.
       * @example "NOASSERTION"
       */
      licenseDeclared?: string;
      /**
       * The distribution source of this package, or NOASSERTION if this was not determined.
       * @example "NOASSERTION"
       */
      supplier?: string;
      externalRefs?: {
        /**
         * The category of reference to an external resource this reference refers to.
         * @example "PACKAGE-MANAGER"
         */
        referenceCategory: string;
        /**
         * A locator for the particular external resource this reference refers to.
         * @example "pkg:gem/rails@6.0.1"
         */
        referenceLocator: string;
        /**
         * The category of reference to an external resource this reference refers to.
         * @example "purl"
         */
        referenceType: string;
      }[];
    }[];
  };
};
/**
 * metadata
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
export type Metadata = {
  [key: string]: (string | number | boolean) | null;
};
export type Dependency = {
  /**
   * Package-url (PURL) of dependency. See https://github.com/package-url/purl-spec for more details.
   * @example "pkg:/npm/%40actions/http-client@1.0.11"
   */
  package_url?: string;
  metadata?: Metadata;
  /**
   * A notation of whether a dependency is requested directly by this manifest or is a dependency of another dependency.
   * @example "direct"
   */
  relationship?: 'direct' | 'indirect';
  /**
   * A notation of whether the dependency is required for the primary build artifact (runtime) or is only used for development. Future versions of this specification may allow for more granular scopes.
   * @example "runtime"
   */
  scope?: 'runtime' | 'development';
  /**
   * Array of package-url (PURLs) of direct child dependencies.
   * @example "@actions/http-client"
   */
  dependencies?: string[];
};
export type Manifest = {
  /**
   * The name of the manifest.
   * @example "package-lock.json"
   */
  name: string;
  file?: {
    /**
     * The path of the manifest file relative to the root of the Git repository.
     * @example "/src/build/package-lock.json"
     */
    source_location?: string;
  };
  metadata?: Metadata;
  /**
   * A collection of resolved package dependencies.
   */
  resolved?: {
    [key: string]: Dependency;
  };
};
/**
 * snapshot
 * Create a new snapshot of a repository's dependencies.
 */
export type Snapshot = {
  /**
   * The version of the repository snapshot submission.
   */
  version: number;
  job: {
    /**
     * The external ID of the job.
     * @example "5622a2b0-63f6-4732-8c34-a1ab27e102a11"
     */
    id: string;
    /**
     * Correlator provides a key that is used to group snapshots submitted over time. Only the "latest" submitted snapshot for a given combination of `job.correlator` and `detector.name` will be considered when calculating a repository's current dependencies. Correlator should be as unique as it takes to distinguish all detection runs for a given "wave" of CI workflow you run. If you're using GitHub Actions, a good default value for this could be the environment variables GITHUB_WORKFLOW and GITHUB_JOB concatenated together. If you're using a build matrix, then you'll also need to add additional key(s) to distinguish between each submission inside a matrix variation.
     * @example "yourworkflowname_yourjobname"
     */
    correlator: string;
    /**
     * The url for the job.
     * @example "http://example.com/build"
     */
    html_url?: string;
  };
  /**
   * The commit SHA associated with this dependency snapshot. Maximum length: 40 characters.
   * @example "ddc951f4b1293222421f2c8df679786153acf689"
   */
  sha: string;
  /**
   * The repository branch that triggered this snapshot.
   * @example "refs/heads/main"
   */
  ref: string;
  /**
   * A description of the detector used.
   */
  detector: {
    /**
     * The name of the detector used.
     * @example "docker buildtime detector"
     */
    name: string;
    /**
     * The version of the detector used.
     * @example "1.0.0"
     */
    version: string;
    /**
     * The url of the detector used.
     * @example "http://example.com/docker-buildtimer-detector"
     */
    url: string;
  };
  metadata?: Metadata;
  /**
   * A collection of package manifests, which are a collection of related dependencies declared in a file or representing a logical group of dependencies.
   */
  manifests?: {
    [key: string]: Manifest;
  };
  /**
   * The time at which the snapshot was scanned.
   * @example "2020-06-13T14:52:50-05:00"
   */
  scanned: Date;
};
/**
 * Deployment Status
 * The status of a deployment.
 */
export type DeploymentStatus = {
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/42/statuses/1"
   */
  url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDE2OkRlcGxveW1lbnRTdGF0dXMx"
   */
  node_id: string;
  /**
   * The state of the status.
   * @example "success"
   */
  state:
    | 'error'
    | 'failure'
    | 'inactive'
    | 'pending'
    | 'success'
    | 'queued'
    | 'in_progress';
  creator: NullableSimpleUser;
  /**
   * A short description of the status.
   * @example "Deployment finished successfully."
   */
  description: string;
  /**
   * The environment of the deployment that the status is for.
   * @example "production"
   */
  environment?: string;
  /**
   * Deprecated: the URL to associate with this status.
   * @example "https://example.com/deployment/42/output"
   */
  target_url: string;
  /**
   * @example "2012-07-20T01:19:13Z"
   */
  created_at: Date;
  /**
   * @example "2012-07-20T01:19:13Z"
   */
  updated_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/deployments/42"
   */
  deployment_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
  /**
   * The URL for accessing your environment.
   * @example "https://staging.example.com/"
   */
  environment_url?: string;
  /**
   * The URL to associate with this status.
   * @example "https://example.com/deployment/42/output"
   */
  log_url?: string;
  performed_via_github_app?: NullableIntegration;
};
/**
 * The amount of time to delay a job after the job is initially triggered. The time (in minutes) must be an integer between 0 and 43,200 (30 days).
 * @example 30
 */
export type WaitTimer = number;
/**
 * The type of deployment branch policy for this environment. To allow all branches to deploy, set to `null`.
 */
export type DeploymentBranchPolicySettings = {
  /**
   * Whether only branches with branch protection rules can deploy to this environment. If `protected_branches` is `true`, `custom_branch_policies` must be `false`; if `protected_branches` is `false`, `custom_branch_policies` must be `true`.
   */
  protected_branches: boolean;
  /**
   * Whether only branches that match the specified name patterns can deploy to this environment.  If `custom_branch_policies` is `true`, `protected_branches` must be `false`; if `custom_branch_policies` is `false`, `protected_branches` must be `true`.
   */
  custom_branch_policies: boolean;
} | null;
/**
 * Environment
 * Details of a deployment environment
 */
export type Environment = {
  /**
   * The id of the environment.
   * @example 56780428
   */
  id: number;
  /**
   * @example "MDExOkVudmlyb25tZW50NTY3ODA0Mjg="
   */
  node_id: string;
  /**
   * The name of the environment.
   * @example "staging"
   */
  name: string;
  /**
   * @example "https://api.github.com/repos/github/hello-world/environments/staging"
   */
  url: string;
  /**
   * @example "https://github.com/github/hello-world/deployments/activity_log?environments_filter=staging"
   */
  html_url: string;
  /**
   * The time that the environment was created, in ISO 8601 format.
   * @example "2020-11-23T22:00:40Z"
   */
  created_at: Date;
  /**
   * The time that the environment was last updated, in ISO 8601 format.
   * @example "2020-11-23T22:00:40Z"
   */
  updated_at: Date;
  /**
   * Built-in deployment protection rules for the environment.
   */
  protection_rules?: (
    | {
        /**
         * @example 3515
         */
        id: number;
        /**
         * @example "MDQ6R2F0ZTM1MTU="
         */
        node_id: string;
        /**
         * @example "wait_timer"
         */
        type: string;
        wait_timer?: WaitTimer;
      }
    | {
        /**
         * @example 3755
         */
        id: number;
        /**
         * @example "MDQ6R2F0ZTM3NTU="
         */
        node_id: string;
        /**
         * Whether deployments to this environment can be approved by the user who created the deployment.
         */
        prevent_self_review?: boolean;
        /**
         * @example "required_reviewers"
         */
        type: string;
        /**
         * The people or teams that may approve jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
         */
        reviewers?: {
          type?: DeploymentReviewerType;
          reviewer?: SimpleUser | Team;
        }[];
      }
    | {
        /**
         * @example 3515
         */
        id: number;
        /**
         * @example "MDQ6R2F0ZTM1MTU="
         */
        node_id: string;
        /**
         * @example "branch_policy"
         */
        type: string;
      }
  )[];
  deployment_branch_policy?: DeploymentBranchPolicySettings;
};
/**
 * Whether or not a user who created the job is prevented from approving their own job.
 */
export type PreventSelfReview = boolean;
/**
 * Deployment branch policy
 * Details of a deployment branch or tag policy.
 */
export type DeploymentBranchPolicy = {
  /**
   * The unique identifier of the branch or tag policy.
   * @example 361471
   */
  id?: number;
  /**
   * @example "MDE2OkdhdGVCcmFuY2hQb2xpY3kzNjE0NzE="
   */
  node_id?: string;
  /**
   * The name pattern that branches or tags must match in order to deploy to the environment.
   * @example "release/*"
   */
  name?: string;
  /**
   * Whether this rule targets a branch or tag.
   * @example "branch"
   */
  type?: 'branch' | 'tag';
};
/**
 * Deployment branch and tag policy name pattern
 */
export type DeploymentBranchPolicyNamePatternWithType = {
  /**
   * The name pattern that branches or tags must match in order to deploy to the environment.
   *
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*\/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   * @example "release/*"
   */
  name: string;
  /**
   * Whether this rule targets a branch or tag
   * @example "branch"
   */
  type?: 'branch' | 'tag';
};
/**
 * Deployment branch policy name pattern
 */
export type DeploymentBranchPolicyNamePattern = {
  /**
   * The name pattern that branches must match in order to deploy to the environment.
   *
   * Wildcard characters will not match `/`. For example, to match branches that begin with `release/` and contain an additional single slash, use `release/*\/*`.
   * For more information about pattern matching syntax, see the [Ruby File.fnmatch documentation](https://ruby-doc.org/core-2.5.1/File.html#method-c-fnmatch).
   * @example "release/*"
   */
  name: string;
};
/**
 * Custom deployment protection rule app
 * A GitHub App that is providing a custom deployment protection rule.
 */
export type CustomDeploymentRuleApp = {
  /**
   * The unique identifier of the deployment protection rule integration.
   * @example 3515
   */
  id: number;
  /**
   * The slugified name of the deployment protection rule integration.
   * @example "my-custom-app"
   */
  slug: string;
  /**
   * The URL for the endpoint to get details about the app.
   * @example "https://api.github.com/apps/custom-app-slug"
   */
  integration_url: string;
  /**
   * The node ID for the deployment protection rule integration.
   * @example "MDQ6R2F0ZTM1MTU="
   */
  node_id: string;
};
/**
 * Deployment protection rule
 * Deployment protection rule
 */
export type DeploymentProtectionRule = {
  /**
   * The unique identifier for the deployment protection rule.
   * @example 3515
   */
  id: number;
  /**
   * The node ID for the deployment protection rule.
   * @example "MDQ6R2F0ZTM1MTU="
   */
  node_id: string;
  /**
   * Whether the deployment protection rule is enabled for the environment.
   * @example true
   */
  enabled: boolean;
  app: CustomDeploymentRuleApp;
};
/**
 * Short Blob
 * Short Blob
 */
export type ShortBlob = {
  url: string;
  sha: string;
};
/**
 * Blob
 * Blob
 */
export type Blob = {
  content: string;
  encoding: string;
  url: string;
  sha: string;
  size: number | null;
  node_id: string;
  highlighted_content?: string;
};
/**
 * Git Commit
 * Low-level Git commit operations within a repository
 */
export type GitCommit = {
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  sha: string;
  node_id: string;
  url: string;
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
  };
  html_url: string;
};
/**
 * Git Reference
 * Git references within a repository
 */
export type GitRef = {
  ref: string;
  node_id: string;
  url: string;
  object: {
    type: string;
    /**
     * SHA for the reference
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    url: string;
  };
};
/**
 * Git Tag
 * Metadata for a Git tag
 */
export type GitTag = {
  /**
   * @example "MDM6VGFnOTQwYmQzMzYyNDhlZmFlMGY5ZWU1YmM3YjJkNWM5ODU4ODdiMTZhYw=="
   */
  node_id: string;
  /**
   * Name of the tag
   * @example "v0.0.1"
   */
  tag: string;
  /**
   * @example "940bd336248efae0f9ee5bc7b2d5c985887b16ac"
   */
  sha: string;
  /**
   * URL for the tag
   * @example "https://api.github.com/repositories/42/git/tags/940bd336248efae0f9ee5bc7b2d5c985887b16ac"
   */
  url: string;
  /**
   * Message describing the purpose of the tag
   * @example "Initial public release"
   */
  message: string;
  tagger: {
    date: string;
    email: string;
    name: string;
  };
  object: {
    sha: string;
    type: string;
    url: string;
  };
  verification?: Verification;
};
/**
 * Git Tree
 * The hierarchy between files in a Git repository.
 */
export type GitTree = {
  sha: string;
  url: string;
  truncated: boolean;
  /**
   * Objects specifying a tree structure
   * @example
   * [
   *   {
   *     "path": "file.rb",
   *     "mode": "100644",
   *     "type": "blob",
   *     "size": 30,
   *     "sha": "44b4fc6d56897b048c772eb4087f854f46256132",
   *     "url": "https://api.github.com/repos/octocat/Hello-World/git/blobs/44b4fc6d56897b048c772eb4087f854f46256132",
   *     "properties": {
   *       "path": {
   *         "type": "string"
   *       },
   *       "mode": {
   *         "type": "string"
   *       },
   *       "type": {
   *         "type": "string"
   *       },
   *       "size": {
   *         "type": "integer"
   *       },
   *       "sha": {
   *         "type": "string"
   *       },
   *       "url": {
   *         "type": "string"
   *       }
   *     },
   *     "required": [
   *       "path",
   *       "mode",
   *       "type",
   *       "sha",
   *       "url",
   *       "size"
   *     ]
   *   }
   * ]
   */
  tree: {
    /**
     * @example "test/file.rb"
     */
    path?: string;
    /**
     * @example "040000"
     */
    mode?: string;
    /**
     * @example "tree"
     */
    type?: string;
    /**
     * @example "23f6827669e43831def8a7ad935069c8bd418261"
     */
    sha?: string;
    /**
     * @example 12
     */
    size?: number;
    /**
     * @example "https://api.github.com/repos/owner-482f3203ecf01f67e9deb18e/BBB_Private_Repo/git/blobs/23f6827669e43831def8a7ad935069c8bd418261"
     */
    url?: string;
  }[];
};
/**
 * Hook Response
 */
export type HookResponse = {
  code: number | null;
  status: string | null;
  message: string | null;
};
/**
 * Webhook
 * Webhooks for repositories.
 */
export type Hook = {
  type: string;
  /**
   * Unique identifier of the webhook.
   * @example 42
   */
  id: number;
  /**
   * The name of a valid service, use 'web' for a webhook.
   * @example "web"
   */
  name: string;
  /**
   * Determines whether the hook is actually triggered on pushes.
   * @example true
   */
  active: boolean;
  /**
   * Determines what events the hook is triggered for. Default: ['push'].
   * @example
   * [
   *   "push",
   *   "pull_request"
   * ]
   */
  events: string[];
  config: WebhookConfig;
  /**
   * @example "2011-09-06T20:39:23Z"
   */
  updated_at: Date;
  /**
   * @example "2011-09-06T17:26:27Z"
   */
  created_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1"
   */
  url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/test"
   */
  test_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/pings"
   */
  ping_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/hooks/1/deliveries"
   */
  deliveries_url?: string;
  last_response: HookResponse;
};
/**
 * Import
 * A repository import from an external source.
 */
export type Import = {
  vcs: string | null;
  use_lfs?: boolean;
  /**
   * The URL of the originating repository.
   */
  vcs_url: string;
  svc_root?: string;
  tfvc_project?: string;
  status:
    | 'auth'
    | 'error'
    | 'none'
    | 'detecting'
    | 'choose'
    | 'auth_failed'
    | 'importing'
    | 'mapping'
    | 'waiting_to_push'
    | 'pushing'
    | 'complete'
    | 'setup'
    | 'unknown'
    | 'detection_found_multiple'
    | 'detection_found_nothing'
    | 'detection_needs_auth';
  status_text?: string | null;
  failed_step?: string | null;
  error_message?: string | null;
  import_percent?: number | null;
  commit_count?: number | null;
  push_percent?: number | null;
  has_large_files?: boolean;
  large_files_size?: number;
  large_files_count?: number;
  project_choices?: {
    vcs?: string;
    tfvc_project?: string;
    human_name?: string;
  }[];
  message?: string;
  authors_count?: number | null;
  url: string;
  html_url: string;
  authors_url: string;
  repository_url: string;
  svn_root?: string;
};
/**
 * Porter Author
 * Porter Author
 */
export type PorterAuthor = {
  id: number;
  remote_id: string;
  remote_name: string;
  email: string;
  name: string;
  url: string;
  import_url: string;
};
/**
 * Porter Large File
 * Porter Large File
 */
export type PorterLargeFile = {
  ref_name: string;
  path: string;
  oid: string;
  size: number;
};
/**
 * Issue
 * Issues are a great way to keep track of tasks, enhancements, and bugs for your projects.
 */
export type NullableIssue = {
  id: number;
  node_id: string;
  /**
   * URL for the issue
   * @example "https://api.github.com/repositories/42/issues/1"
   */
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  /**
   * Number uniquely identifying the issue within its repository
   * @example 42
   */
  number: number;
  /**
   * State of the issue; either 'open' or 'closed'
   * @example "open"
   */
  state: string;
  /**
   * The reason for the current state
   * @example "not_planned"
   */
  state_reason?: ('completed' | 'reopened' | 'not_planned') | null;
  /**
   * Title of the issue
   * @example "Widget creation fails in Safari on OS X 10.8"
   */
  title: string;
  /**
   * Contents of the issue
   * @example "It looks like the new widget form is broken on Safari. When I try and create the widget, Safari crashes. This is reproducible on 10.8, but not 10.9. Maybe a browser bug?"
   */
  body?: string | null;
  user: NullableSimpleUser;
  /**
   * Labels to associate with this issue; pass one or more label names to replace the set of labels on this issue; send an empty array to clear all labels from the issue; note that the labels are silently dropped for users without push access to the repository
   * @example
   * [
   *   "bug",
   *   "registration"
   * ]
   */
  labels: (
    | string
    | {
        id?: number;
        node_id?: string;
        url?: string;
        name?: string;
        description?: string | null;
        color?: string | null;
        default?: boolean;
      }
  )[];
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  milestone: NullableMilestone;
  locked: boolean;
  active_lock_reason?: string | null;
  comments: number;
  pull_request?: {
    merged_at?: Date | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  closed_at: Date | null;
  created_at: Date;
  updated_at: Date;
  draft?: boolean;
  closed_by?: NullableSimpleUser;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  repository?: Repository;
  performed_via_github_app?: NullableIntegration;
  author_association: AuthorAssociation;
  reactions?: ReactionRollup;
} | null;
/**
 * Issue Event Label
 * Issue Event Label
 */
export type IssueEventLabel = {
  name: string | null;
  color: string | null;
};
/**
 * Issue Event Dismissed Review
 */
export type IssueEventDismissedReview = {
  state: string;
  review_id: number;
  dismissal_message: string | null;
  dismissal_commit_id?: string | null;
};
/**
 * Issue Event Milestone
 * Issue Event Milestone
 */
export type IssueEventMilestone = {
  title: string;
};
/**
 * Issue Event Project Card
 * Issue Event Project Card
 */
export type IssueEventProjectCard = {
  url: string;
  id: number;
  project_url: string;
  project_id: number;
  column_name: string;
  previous_column_name?: string;
};
/**
 * Issue Event Rename
 * Issue Event Rename
 */
export type IssueEventRename = {
  from: string;
  to: string;
};
/**
 * Issue Event
 * Issue Event
 */
export type IssueEvent = {
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDEwOklzc3VlRXZlbnQx"
   */
  node_id: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/events/1"
   */
  url: string;
  actor: NullableSimpleUser;
  /**
   * @example "closed"
   */
  event: string;
  /**
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  commit_id: string | null;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/commits/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  commit_url: string | null;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: Date;
  issue?: NullableIssue;
  label?: IssueEventLabel;
  assignee?: NullableSimpleUser;
  assigner?: NullableSimpleUser;
  review_requester?: NullableSimpleUser;
  requested_reviewer?: NullableSimpleUser;
  requested_team?: Team;
  dismissed_review?: IssueEventDismissedReview;
  milestone?: IssueEventMilestone;
  project_card?: IssueEventProjectCard;
  rename?: IssueEventRename;
  author_association?: AuthorAssociation;
  lock_reason?: string | null;
  performed_via_github_app?: NullableIntegration;
};
/**
 * Labeled Issue Event
 * Labeled Issue Event
 */
export type LabeledIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;
    color: string;
  };
};
/**
 * Unlabeled Issue Event
 * Unlabeled Issue Event
 */
export type UnlabeledIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  label: {
    name: string;
    color: string;
  };
};
/**
 * Assigned Issue Event
 * Assigned Issue Event
 */
export type AssignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  assignee: SimpleUser;
  assigner: SimpleUser;
};
/**
 * Unassigned Issue Event
 * Unassigned Issue Event
 */
export type UnassignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  assignee: SimpleUser;
  assigner: SimpleUser;
};
/**
 * Milestoned Issue Event
 * Milestoned Issue Event
 */
export type MilestonedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
};
/**
 * Demilestoned Issue Event
 * Demilestoned Issue Event
 */
export type DemilestonedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  milestone: {
    title: string;
  };
};
/**
 * Renamed Issue Event
 * Renamed Issue Event
 */
export type RenamedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  rename: {
    from: string;
    to: string;
  };
};
/**
 * Review Requested Issue Event
 * Review Requested Issue Event
 */
export type ReviewRequestedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  review_requester: SimpleUser;
  requested_team?: Team;
  requested_reviewer?: SimpleUser;
};
/**
 * Review Request Removed Issue Event
 * Review Request Removed Issue Event
 */
export type ReviewRequestRemovedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  review_requester: SimpleUser;
  requested_team?: Team;
  requested_reviewer?: SimpleUser;
};
/**
 * Review Dismissed Issue Event
 * Review Dismissed Issue Event
 */
export type ReviewDismissedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  dismissed_review: {
    state: string;
    review_id: number;
    dismissal_message: string | null;
    dismissal_commit_id?: string;
  };
};
/**
 * Locked Issue Event
 * Locked Issue Event
 */
export type LockedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  /**
   * @example "\"off-topic\""
   */
  lock_reason: string | null;
};
/**
 * Added to Project Issue Event
 * Added to Project Issue Event
 */
export type AddedToProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Moved Column in Project Issue Event
 * Moved Column in Project Issue Event
 */
export type MovedColumnInProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Removed from Project Issue Event
 * Removed from Project Issue Event
 */
export type RemovedFromProjectIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Converted Note to Issue Issue Event
 * Converted Note to Issue Issue Event
 */
export type ConvertedNoteToIssueIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: Integration;
  project_card?: {
    id: number;
    url: string;
    project_id: number;
    project_url: string;
    column_name: string;
    previous_column_name?: string;
  };
};
/**
 * Issue Event for Issue
 * Issue Event for Issue
 */
export type IssueEventForIssue =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | AssignedIssueEvent
  | UnassignedIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent;
/**
 * Label
 * Color-coded labels help you categorize and filter your issues (just like labels in Gmail).
 */
export type Label = {
  /**
   * @example 208045946
   */
  id: number;
  /**
   * @example "MDU6TGFiZWwyMDgwNDU5NDY="
   */
  node_id: string;
  /**
   * URL for the label
   * @example "https://api.github.com/repositories/42/labels/bug"
   */
  url: string;
  /**
   * The name of the label.
   * @example "bug"
   */
  name: string;
  /**
   * @example "Something isn't working"
   */
  description: string | null;
  /**
   * 6-character hex code, without the leading #, identifying the color
   * @example "FFFFFF"
   */
  color: string;
  /**
   * @example true
   */
  default: boolean;
};
/**
 * Timeline Comment Event
 * Timeline Comment Event
 */
export type TimelineCommentEvent = {
  event: string;
  actor: SimpleUser;
  /**
   * Unique identifier of the issue comment
   * @example 42
   */
  id: number;
  node_id: string;
  /**
   * URL for the issue comment
   * @example "https://api.github.com/repositories/42/issues/comments/1"
   */
  url: string;
  /**
   * Contents of the issue comment
   * @example "What version of Safari were you using when you observed this bug?"
   */
  body?: string;
  body_text?: string;
  body_html?: string;
  html_url: string;
  user: SimpleUser;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: Date;
  issue_url: string;
  author_association: AuthorAssociation;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
};
/**
 * Timeline Cross Referenced Event
 * Timeline Cross Referenced Event
 */
export type TimelineCrossReferencedEvent = {
  event: string;
  actor?: SimpleUser;
  created_at: Date;
  updated_at: Date;
  source: {
    type?: string;
    issue?: Issue;
  };
};
/**
 * Timeline Committed Event
 * Timeline Committed Event
 */
export type TimelineCommittedEvent = {
  event?: string;
  /**
   * SHA for the commit
   * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
   */
  sha: string;
  node_id: string;
  url: string;
  /**
   * Identifying information for the git-user
   */
  author: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Identifying information for the git-user
   */
  committer: {
    /**
     * Timestamp of the commit
     * @example "2014-08-09T08:02:04+12:00"
     */
    date: Date;
    /**
     * Git email address of the user
     * @example "monalisa.octocat@example.com"
     */
    email: string;
    /**
     * Name of the git user
     * @example "Monalisa Octocat"
     */
    name: string;
  };
  /**
   * Message describing the purpose of the commit
   * @example "Fix #42"
   */
  message: string;
  tree: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    url: string;
  };
  parents: {
    /**
     * SHA for the commit
     * @example "7638417db6d59f3c431d3e1f261cc637155684cd"
     */
    sha: string;
    url: string;
    html_url: string;
  }[];
  verification: {
    verified: boolean;
    reason: string;
    signature: string | null;
    payload: string | null;
  };
  html_url: string;
};
/**
 * Timeline Reviewed Event
 * Timeline Reviewed Event
 */
export type TimelineReviewedEvent = {
  event: string;
  /**
   * Unique identifier of the review
   * @example 42
   */
  id: number;
  /**
   * @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA="
   */
  node_id: string;
  user: SimpleUser;
  /**
   * The text of the review.
   * @example "This looks great."
   */
  body: string | null;
  /**
   * @example "CHANGES_REQUESTED"
   */
  state: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at?: Date;
  /**
   * A commit SHA for the review.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   */
  commit_id: string;
  body_html?: string;
  body_text?: string;
  author_association: AuthorAssociation;
};
/**
 * Pull Request Review Comment
 * Pull Request Review Comments are comments on a portion of the Pull Request's diff.
 */
export type PullRequestReviewComment = {
  /**
   * URL for the pull request review comment
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  /**
   * The ID of the pull request review to which the comment belongs.
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * The ID of the pull request review comment.
   * @example 1
   */
  id: number;
  /**
   * The node ID of the pull request review comment.
   * @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
   */
  node_id: string;
  /**
   * The diff of the line that the comment refers to.
   * @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
   */
  diff_hunk: string;
  /**
   * The relative path of the file to which the comment applies.
   * @example "config/database.yaml"
   */
  path: string;
  /**
   * The line index in the diff to which the comment applies. This field is deprecated; use `line` instead.
   * @example 1
   */
  position?: number;
  /**
   * The index of the original line in the diff to which the comment applies. This field is deprecated; use `original_line` instead.
   * @example 4
   */
  original_position?: number;
  /**
   * The SHA of the commit to which the comment applies.
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  commit_id: string;
  /**
   * The SHA of the original commit to which the comment applies.
   * @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
   */
  original_commit_id: string;
  /**
   * The comment ID to reply to.
   * @example 8
   */
  in_reply_to_id?: number;
  user: SimpleUser;
  /**
   * The text of the comment.
   * @example "We should probably include a check for null values here."
   */
  body: string;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: Date;
  /**
   * HTML URL for the pull request review comment.
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /**
   * URL for the pull request that the review comment belongs to.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  author_association: AuthorAssociation;
  _links: {
    self: {
      /**
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
       */
      href: string;
    };
    html: {
      /**
       * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
       */
      href: string;
    };
    pull_request: {
      /**
       * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
       */
      href: string;
    };
  };
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @defaultValue "RIGHT"
   */
  start_side?: ('LEFT' | 'RIGHT') | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /**
   * The side of the diff to which the comment applies. The side of the last line of the range for a multi-line comment
   * @defaultValue "RIGHT"
   */
  side?: 'LEFT' | 'RIGHT';
  /**
   * The level at which the comment is targeted, can be a diff line or a file.
   */
  subject_type?: 'line' | 'file';
  reactions?: ReactionRollup;
  /**
   * @example "\"<p>comment body</p>\""
   */
  body_html?: string;
  /**
   * @example "\"comment body\""
   */
  body_text?: string;
};
/**
 * Timeline Line Commented Event
 * Timeline Line Commented Event
 */
export type TimelineLineCommentedEvent = {
  event?: string;
  node_id?: string;
  comments?: PullRequestReviewComment[];
};
/**
 * Timeline Commit Commented Event
 * Timeline Commit Commented Event
 */
export type TimelineCommitCommentedEvent = {
  event?: string;
  node_id?: string;
  commit_id?: string;
  comments?: CommitComment[];
};
/**
 * Timeline Assigned Issue Event
 * Timeline Assigned Issue Event
 */
export type TimelineAssignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  assignee: SimpleUser;
};
/**
 * Timeline Unassigned Issue Event
 * Timeline Unassigned Issue Event
 */
export type TimelineUnassignedIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  assignee: SimpleUser;
};
/**
 * State Change Issue Event
 * State Change Issue Event
 */
export type StateChangeIssueEvent = {
  id: number;
  node_id: string;
  url: string;
  actor: SimpleUser;
  event: string;
  commit_id: string | null;
  commit_url: string | null;
  created_at: string;
  performed_via_github_app: NullableIntegration;
  state_reason?: string | null;
};
/**
 * Timeline Event
 * Timeline Event
 */
export type TimelineIssueEvents =
  | LabeledIssueEvent
  | UnlabeledIssueEvent
  | MilestonedIssueEvent
  | DemilestonedIssueEvent
  | RenamedIssueEvent
  | ReviewRequestedIssueEvent
  | ReviewRequestRemovedIssueEvent
  | ReviewDismissedIssueEvent
  | LockedIssueEvent
  | AddedToProjectIssueEvent
  | MovedColumnInProjectIssueEvent
  | RemovedFromProjectIssueEvent
  | ConvertedNoteToIssueIssueEvent
  | TimelineCommentEvent
  | TimelineCrossReferencedEvent
  | TimelineCommittedEvent
  | TimelineReviewedEvent
  | TimelineLineCommentedEvent
  | TimelineCommitCommentedEvent
  | TimelineAssignedIssueEvent
  | TimelineUnassignedIssueEvent
  | StateChangeIssueEvent;
/**
 * Deploy Key
 * An SSH key granting access to a single repository.
 */
export type DeployKey = {
  id: number;
  key: string;
  url: string;
  title: string;
  verified: boolean;
  created_at: string;
  read_only: boolean;
  added_by?: string | null;
  last_used?: string | null;
};
/**
 * Language
 * Language
 */
export type Language = {
  [key: string]: number;
};
/**
 * License Content
 * License Content
 */
export type LicenseContent = {
  name: string;
  path: string;
  sha: string;
  size: number;
  url: string;
  html_url: string | null;
  git_url: string | null;
  download_url: string | null;
  type: string;
  content: string;
  encoding: string;
  _links: {
    git: string | null;
    html: string | null;
    self: string;
  };
  license: NullableLicenseSimple;
};
/**
 * Merged upstream
 * Results of a successful merge upstream request
 */
export type MergedUpstream = {
  message?: string;
  merge_type?: 'merge' | 'fast-forward' | 'none';
  base_branch?: string;
};
/**
 * Milestone
 * A collection of related issues and pull requests.
 */
export type Milestone = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1"
   */
  url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/milestones/v1.0"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/milestones/1/labels"
   */
  labels_url: string;
  /**
   * @example 1002604
   */
  id: number;
  /**
   * @example "MDk6TWlsZXN0b25lMTAwMjYwNA=="
   */
  node_id: string;
  /**
   * The number of the milestone.
   * @example 42
   */
  number: number;
  /**
   * The state of the milestone.
   * @example "open"
   * @defaultValue "open"
   */
  state: 'open' | 'closed';
  /**
   * The title of the milestone.
   * @example "v1.0"
   */
  title: string;
  /**
   * @example "Tracking milestone for version 1.0"
   */
  description: string | null;
  creator: NullableSimpleUser;
  /**
   * @example 4
   */
  open_issues: number;
  /**
   * @example 8
   */
  closed_issues: number;
  /**
   * @example "2011-04-10T20:09:31Z"
   */
  created_at: Date;
  /**
   * @example "2014-03-03T18:58:10Z"
   */
  updated_at: Date;
  /**
   * @example "2013-02-12T13:22:01Z"
   */
  closed_at: Date | null;
  /**
   * @example "2012-10-09T23:39:01Z"
   */
  due_on: Date | null;
};
/**
 * Pages Source Hash
 */
export type PagesSourceHash = {
  branch: string;
  path: string;
};
/**
 * Pages Https Certificate
 */
export type PagesHttpsCertificate = {
  /**
   * @example "approved"
   */
  state:
    | 'new'
    | 'authorization_created'
    | 'authorization_pending'
    | 'authorized'
    | 'authorization_revoked'
    | 'issued'
    | 'uploaded'
    | 'approved'
    | 'errored'
    | 'bad_authz'
    | 'destroy_pending'
    | 'dns_changed';
  /**
   * @example "Certificate is approved"
   */
  description: string;
  /**
   * Array of the domain set and its alternate name (if it is configured)
   * @example
   * [
   *   "example.com",
   *   "www.example.com"
   * ]
   */
  domains: string[];
  expires_at?: string;
};
/**
 * GitHub Pages
 * The configuration for GitHub Pages for a repository.
 */
export type Page = {
  /**
   * The API address for accessing this Page resource.
   * @example "https://api.github.com/repos/github/hello-world/pages"
   */
  url: string;
  /**
   * The status of the most recent build of the Page.
   * @example "built"
   */
  status: ('built' | 'building' | 'errored') | null;
  /**
   * The Pages site's custom domain
   * @example "example.com"
   */
  cname: string | null;
  /**
   * The state if the domain is verified
   * @example "pending"
   */
  protected_domain_state?: ('pending' | 'verified' | 'unverified') | null;
  /**
   * The timestamp when a pending domain becomes unverified.
   */
  pending_domain_unverified_at?: Date | null;
  /**
   * Whether the Page has a custom 404 page.
   */
  custom_404: boolean;
  /**
   * The web address the Page can be accessed from.
   * @example "https://example.com"
   */
  html_url?: string;
  /**
   * The process in which the Page will be built.
   * @example "legacy"
   */
  build_type?: ('legacy' | 'workflow') | null;
  source?: PagesSourceHash;
  /**
   * Whether the GitHub Pages site is publicly visible. If set to `true`, the site is accessible to anyone on the internet. If set to `false`, the site will only be accessible to users who have at least `read` access to the repository that published the site.
   * @example true
   */
  public: boolean;
  https_certificate?: PagesHttpsCertificate;
  /**
   * Whether https is enabled on the domain
   * @example true
   */
  https_enforced?: boolean;
};
/**
 * Page Build
 * Page Build
 */
export type PageBuild = {
  url: string;
  status: string;
  error: {
    message: string | null;
  };
  pusher: NullableSimpleUser;
  commit: string;
  duration: number;
  created_at: Date;
  updated_at: Date;
};
/**
 * Page Build Status
 * Page Build Status
 */
export type PageBuildStatus = {
  /**
   * @example "https://api.github.com/repos/github/hello-world/pages/builds/latest"
   */
  url: string;
  /**
   * @example "queued"
   */
  status: string;
};
/**
 * GitHub Pages
 * The GitHub Pages deployment status.
 */
export type PageDeployment = {
  /**
   * The ID of the GitHub Pages deployment. This is the Git SHA of the deployed commit.
   */
  id: number | string;
  /**
   * The URI to monitor GitHub Pages deployment status.
   * @example "https://api.github.com/repos/github/hello-world/pages/deployments/4fd754f7e594640989b406850d0bc8f06a121251"
   */
  status_url: string;
  /**
   * The URI to the deployed GitHub Pages.
   * @example "hello-world.github.io"
   */
  page_url: string;
  /**
   * The URI to the deployed GitHub Pages preview.
   * @example "monalisa-1231a2312sa32-23sda74.drafts.github.io"
   */
  preview_url?: string;
};
/**
 * GitHub Pages deployment status
 */
export type PagesDeploymentStatus = {
  /**
   * The current status of the deployment.
   */
  status?:
    | 'deployment_in_progress'
    | 'syncing_files'
    | 'finished_file_sync'
    | 'updating_pages'
    | 'purging_cdn'
    | 'deployment_cancelled'
    | 'deployment_failed'
    | 'deployment_content_failed'
    | 'deployment_attempt_error'
    | 'deployment_lost'
    | 'succeed';
};
/**
 * Pages Health Check Status
 * Pages Health Check Status
 */
export type PagesHealthCheck = {
  domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  };
  alt_domain?: {
    host?: string;
    uri?: string;
    nameservers?: string;
    dns_resolves?: boolean;
    is_proxied?: boolean | null;
    is_cloudflare_ip?: boolean | null;
    is_fastly_ip?: boolean | null;
    is_old_ip_address?: boolean | null;
    is_a_record?: boolean | null;
    has_cname_record?: boolean | null;
    has_mx_records_present?: boolean | null;
    is_valid_domain?: boolean;
    is_apex_domain?: boolean;
    should_be_a_record?: boolean | null;
    is_cname_to_github_user_domain?: boolean | null;
    is_cname_to_pages_dot_github_dot_com?: boolean | null;
    is_cname_to_fastly?: boolean | null;
    is_pointed_to_github_pages_ip?: boolean | null;
    is_non_github_pages_ip_present?: boolean | null;
    is_pages_domain?: boolean;
    is_served_by_pages?: boolean | null;
    is_valid?: boolean;
    reason?: string | null;
    responds_to_https?: boolean;
    enforces_https?: boolean;
    https_error?: string | null;
    is_https_eligible?: boolean | null;
    caa_error?: string | null;
  } | null;
};
/**
 * Pull Request
 * Pull requests let you tell others about changes you've pushed to a repository on GitHub. Once a pull request is sent, interested parties can review the set of changes, discuss potential modifications, and even push follow-up commits if necessary.
 */
export type PullRequest = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347"
   */
  url: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDExOlB1bGxSZXF1ZXN0MQ=="
   */
  node_id: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347"
   */
  html_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.diff"
   */
  diff_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1347.patch"
   */
  patch_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/commits"
   */
  commits_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1347/comments"
   */
  review_comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments{/number}"
   */
  review_comment_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347/comments"
   */
  comments_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/statuses/6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  statuses_url: string;
  /**
   * Number uniquely identifying the pull request within its repository.
   * @example 42
   */
  number: number;
  /**
   * State of this Pull Request. Either `open` or `closed`.
   * @example "open"
   */
  state: 'open' | 'closed';
  /**
   * @example true
   */
  locked: boolean;
  /**
   * The title of the pull request.
   * @example "Amazing new feature"
   */
  title: string;
  user: SimpleUser;
  /**
   * @example "Please pull these awesome changes"
   */
  body: string | null;
  labels: {
    id: number;
    node_id: string;
    url: string;
    name: string;
    description: string | null;
    color: string;
    default: boolean;
  }[];
  milestone: NullableMilestone;
  /**
   * @example "too heated"
   */
  active_lock_reason?: string | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  closed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  merged_at: Date | null;
  /**
   * @example "e5bd3914e2e596debea16f433f57875b5b90bcd6"
   */
  merge_commit_sha: string | null;
  assignee: NullableSimpleUser;
  assignees?: SimpleUser[] | null;
  requested_reviewers?: SimpleUser[] | null;
  requested_teams?: TeamSimple[] | null;
  head: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      has_discussions: boolean;
      homepage: string | null;
      language: string | null;
      master_branch?: string;
      archived: boolean;
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      mirror_url: string | null;
      open_issues: number;
      open_issues_count: number;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        push: boolean;
        triage?: boolean;
        pull: boolean;
      };
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      license: {
        key: string;
        name: string;
        url: string | null;
        spdx_id: string | null;
        node_id: string;
      } | null;
      pushed_at: Date;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics?: string[];
      watchers: number;
      watchers_count: number;
      created_at: Date;
      updated_at: Date;
      allow_forking?: boolean;
      is_template?: boolean;
      web_commit_signoff_required?: boolean;
    } | null;
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  base: {
    label: string;
    ref: string;
    repo: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      id: number;
      is_template?: boolean;
      node_id: string;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      name: string;
      notifications_url: string;
      owner: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string | null;
        html_url: string;
        id: number;
        node_id: string;
        login: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
      clone_url: string;
      default_branch: string;
      forks: number;
      forks_count: number;
      git_url: string;
      has_downloads: boolean;
      has_issues: boolean;
      has_projects: boolean;
      has_wiki: boolean;
      has_pages: boolean;
      has_discussions: boolean;
      homepage: string | null;
      language: string | null;
      master_branch?: string;
      archived: boolean;
      disabled: boolean;
      /**
       * The repository visibility: public, private, or internal.
       */
      visibility?: string;
      mirror_url: string | null;
      open_issues: number;
      open_issues_count: number;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        push: boolean;
        triage?: boolean;
        pull: boolean;
      };
      temp_clone_token?: string;
      allow_merge_commit?: boolean;
      allow_squash_merge?: boolean;
      allow_rebase_merge?: boolean;
      license: NullableLicenseSimple;
      pushed_at: Date;
      size: number;
      ssh_url: string;
      stargazers_count: number;
      svn_url: string;
      topics?: string[];
      watchers: number;
      watchers_count: number;
      created_at: Date;
      updated_at: Date;
      allow_forking?: boolean;
      web_commit_signoff_required?: boolean;
    };
    sha: string;
    user: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string | null;
      html_url: string;
      id: number;
      node_id: string;
      login: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
  };
  _links: {
    comments: Link;
    commits: Link;
    statuses: Link;
    html: Link;
    issue: Link;
    review_comments: Link;
    review_comment: Link;
    self: Link;
  };
  author_association: AuthorAssociation;
  auto_merge: AutoMerge;
  /**
   * Indicates whether or not the pull request is a draft.
   */
  draft?: boolean;
  merged: boolean;
  /**
   * @example true
   */
  mergeable: boolean | null;
  /**
   * @example true
   */
  rebaseable?: boolean | null;
  /**
   * @example "clean"
   */
  mergeable_state: string;
  merged_by: NullableSimpleUser;
  /**
   * @example 10
   */
  comments: number;
  review_comments: number;
  /**
   * Indicates whether maintainers can modify the pull request.
   * @example true
   */
  maintainer_can_modify: boolean;
  /**
   * @example 3
   */
  commits: number;
  /**
   * @example 100
   */
  additions: number;
  /**
   * @example 3
   */
  deletions: number;
  /**
   * @example 5
   */
  changed_files: number;
};
/**
 * Pull Request Merge Result
 * Pull Request Merge Result
 */
export type PullRequestMergeResult = {
  sha: string;
  merged: boolean;
  message: string;
};
/**
 * Pull Request Review Request
 * Pull Request Review Request
 */
export type PullRequestReviewRequest = {
  users: SimpleUser[];
  teams: Team[];
};
/**
 * Pull Request Review
 * Pull Request Reviews are reviews on pull requests.
 */
export type PullRequestReview = {
  /**
   * Unique identifier of the review
   * @example 42
   */
  id: number;
  /**
   * @example "MDE3OlB1bGxSZXF1ZXN0UmV2aWV3ODA="
   */
  node_id: string;
  user: NullableSimpleUser;
  /**
   * The text of the review.
   * @example "This looks great."
   */
  body: string;
  /**
   * @example "CHANGES_REQUESTED"
   */
  state: string;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/12#pullrequestreview-80"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/12"
   */
  pull_request_url: string;
  _links: {
    html: {
      href: string;
    };
    pull_request: {
      href: string;
    };
  };
  submitted_at?: Date;
  /**
   * A commit SHA for the review. If the commit object was garbage collected or forcibly deleted, then it no longer exists in Git and this value will be `null`.
   * @example "54bb654c9e6025347f57900a4a5c2313a96b8035"
   */
  commit_id: string | null;
  body_html?: string;
  body_text?: string;
  author_association: AuthorAssociation;
};
/**
 * Legacy Review Comment
 * Legacy Review Comment
 */
export type ReviewComment = {
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/1"
   */
  url: string;
  /**
   * @example 42
   */
  pull_request_review_id: number | null;
  /**
   * @example 10
   */
  id: number;
  /**
   * @example "MDI0OlB1bGxSZXF1ZXN0UmV2aWV3Q29tbWVudDEw"
   */
  node_id: string;
  /**
   * @example "@@ -16,33 +16,40 @@ public class Connection : IConnection..."
   */
  diff_hunk: string;
  /**
   * @example "file1.txt"
   */
  path: string;
  /**
   * @example 1
   */
  position: number | null;
  /**
   * @example 4
   */
  original_position: number;
  /**
   * @example "6dcb09b5b57875f334f61aebed695e2e4193db5e"
   */
  commit_id: string;
  /**
   * @example "9c48853fa3dc5c1c3d6f1f1cd1f2743e72652840"
   */
  original_commit_id: string;
  /**
   * @example 8
   */
  in_reply_to_id?: number;
  user: NullableSimpleUser;
  /**
   * @example "Great stuff"
   */
  body: string;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  created_at: Date;
  /**
   * @example "2011-04-14T16:00:49Z"
   */
  updated_at: Date;
  /**
   * @example "https://github.com/octocat/Hello-World/pull/1#discussion-diff-1"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/1"
   */
  pull_request_url: string;
  author_association: AuthorAssociation;
  _links: {
    self: Link;
    html: Link;
    pull_request: Link;
  };
  body_text?: string;
  body_html?: string;
  reactions?: ReactionRollup;
  /**
   * The side of the first line of the range for a multi-line comment.
   * @defaultValue "RIGHT"
   */
  side?: 'LEFT' | 'RIGHT';
  /**
   * The side of the first line of the range for a multi-line comment.
   * @defaultValue "RIGHT"
   */
  start_side?: ('LEFT' | 'RIGHT') | null;
  /**
   * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  line?: number;
  /**
   * The original line of the blob to which the comment applies. The last line of the range for a multi-line comment
   * @example 2
   */
  original_line?: number;
  /**
   * The first line of the range for a multi-line comment.
   * @example 2
   */
  start_line?: number | null;
  /**
   * The original first line of the range for a multi-line comment.
   * @example 2
   */
  original_start_line?: number | null;
};
/**
 * Release Asset
 * Data related to a release.
 */
export type ReleaseAsset = {
  url: string;
  browser_download_url: string;
  id: number;
  node_id: string;
  /**
   * The file name of the asset.
   * @example "Team Environment"
   */
  name: string;
  label: string | null;
  /**
   * State of the release asset.
   */
  state: 'uploaded' | 'open';
  content_type: string;
  size: number;
  download_count: number;
  created_at: Date;
  updated_at: Date;
  uploader: NullableSimpleUser;
};
/**
 * Release
 * A release.
 */
export type Release = {
  url: string;
  html_url: string;
  assets_url: string;
  upload_url: string;
  tarball_url: string | null;
  zipball_url: string | null;
  id: number;
  node_id: string;
  /**
   * The name of the tag.
   * @example "v1.0.0"
   */
  tag_name: string;
  /**
   * Specifies the commitish value that determines where the Git tag is created from.
   * @example "master"
   */
  target_commitish: string;
  name: string | null;
  body?: string | null;
  /**
   * true to create a draft (unpublished) release, false to create a published one.
   */
  draft: boolean;
  /**
   * Whether to identify the release as a prerelease or a full release.
   */
  prerelease: boolean;
  created_at: Date;
  published_at: Date | null;
  author: SimpleUser;
  assets: ReleaseAsset[];
  body_html?: string;
  body_text?: string;
  mentions_count?: number;
  /**
   * The URL of the release discussion.
   */
  discussion_url?: string;
  reactions?: ReactionRollup;
};
/**
 * Generated Release Notes Content
 * Generated name and body describing a release
 */
export type ReleaseNotesContent = {
  /**
   * The generated name of the release
   * @example "Release v1.0.0 is now available!"
   */
  name: string;
  /**
   * The generated body describing the contents of the release supporting markdown formatting
   */
  body: string;
};
/**
 * repository ruleset data for rule
 * User-defined metadata to store domain-specific information limited to 8 keys with scalar values.
 */
export type RepositoryRuleRulesetInfo = any;
/**
 * Repository Rule
 * A repository rule with ruleset details.
 */
export type RepositoryRuleDetailed =
  | (RepositoryRuleCreation & RepositoryRuleRulesetInfo)
  | (RepositoryRuleUpdate & RepositoryRuleRulesetInfo)
  | (RepositoryRuleDeletion & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredLinearHistory & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredDeployments & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredSignatures & RepositoryRuleRulesetInfo)
  | (RepositoryRulePullRequest & RepositoryRuleRulesetInfo)
  | (RepositoryRuleRequiredStatusChecks & RepositoryRuleRulesetInfo)
  | (RepositoryRuleNonFastForward & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitMessagePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitAuthorEmailPattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleCommitterEmailPattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleBranchNamePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleTagNamePattern & RepositoryRuleRulesetInfo)
  | (RepositoryRuleWorkflows & RepositoryRuleRulesetInfo);
export type SecretScanningAlert = {
  number?: AlertNumber;
  created_at?: AlertCreatedAt;
  updated_at?: NullableAlertUpdatedAt;
  url?: AlertUrl;
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  state?: SecretScanningAlertState;
  resolution?: SecretScanningAlertResolution;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: Date | null;
  resolved_by?: NullableSimpleUser;
  /**
   * An optional comment to resolve an alert.
   */
  resolution_comment?: string | null;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * User-friendly name for the detected secret, matching the `secret_type`.
   * For a list of built-in patterns, see "[Secret scanning patterns](https://docs.github.com/code-security/secret-scanning/secret-scanning-patterns#supported-secrets-for-advanced-security)."
   */
  secret_type_display_name?: string;
  /**
   * The secret that was detected.
   */
  secret?: string;
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: Date | null;
  /**
   * The token status as of the latest validity check.
   */
  validity?: 'active' | 'inactive' | 'unknown';
};
/**
 * An optional comment when closing an alert. Cannot be updated or deleted. Must be `null` when changing `state` to `open`.
 */
export type SecretScanningAlertResolutionComment = string | null;
/**
 * Represents a 'commit' secret scanning location type. This location type shows that a secret was detected inside a commit to a repository.
 */
export type SecretScanningLocationCommit = {
  /**
   * The file path in the repository
   * @example "/example/secrets.txt"
   */
  path: string;
  /**
   * Line number at which the secret starts in the file
   */
  start_line: number;
  /**
   * Line number at which the secret ends in the file
   */
  end_line: number;
  /**
   * The column at which the secret starts within the start line when the file is interpreted as 8BIT ASCII
   */
  start_column: number;
  /**
   * The column at which the secret ends within the end line when the file is interpreted as 8BIT ASCII
   */
  end_column: number;
  /**
   * SHA-1 hash ID of the associated blob
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  blob_sha: string;
  /**
   * The API URL to get the associated blob resource
   */
  blob_url: string;
  /**
   * SHA-1 hash ID of the associated commit
   * @example "af5626b4a114abcb82d63db7c8082c3c4756e51b"
   */
  commit_sha: string;
  /**
   * The API URL to get the associated commit resource
   */
  commit_url: string;
};
/**
 * Represents an 'issue_title' secret scanning location type. This location type shows that a secret was detected in the title of an issue.
 */
export type SecretScanningLocationIssueTitle = {
  /**
   * The API URL to get the issue where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_title_url: string;
};
/**
 * Represents an 'issue_body' secret scanning location type. This location type shows that a secret was detected in the body of an issue.
 */
export type SecretScanningLocationIssueBody = {
  /**
   * The API URL to get the issue where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/1347"
   */
  issue_body_url: string;
};
/**
 * Represents an 'issue_comment' secret scanning location type. This location type shows that a secret was detected in a comment on an issue.
 */
export type SecretScanningLocationIssueComment = {
  /**
   * The API URL to get the issue comment where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"
   */
  issue_comment_url: string;
};
/**
 * Represents a 'discussion_title' secret scanning location type. This location type shows that a secret was detected in the title of a discussion.
 */
export type SecretScanningLocationDiscussionTitle = {
  /**
   * The URL to the discussion where the secret was detected.
   * @example "https://github.com/community/community/discussions/39082"
   */
  discussion_title_url: string;
};
/**
 * Represents a 'discussion_body' secret scanning location type. This location type shows that a secret was detected in the body of a discussion.
 */
export type SecretScanningLocationDiscussionBody = {
  /**
   * The URL to the discussion where the secret was detected.
   * @example "https://github.com/community/community/discussions/39082#discussion-4566270"
   */
  discussion_body_url: string;
};
/**
 * Represents a 'discussion_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a discussion.
 */
export type SecretScanningLocationDiscussionComment = {
  /**
   * The API URL to get the discussion comment where the secret was detected.
   * @example "https://github.com/community/community/discussions/39082#discussioncomment-4158232"
   */
  discussion_comment_url: string;
};
/**
 * Represents a 'pull_request_title' secret scanning location type. This location type shows that a secret was detected in the title of a pull request.
 */
export type SecretScanningLocationPullRequestTitle = {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/pull/2846"
   */
  pull_request_title_url: string;
};
/**
 * Represents a 'pull_request_body' secret scanning location type. This location type shows that a secret was detected in the body of a pull request.
 */
export type SecretScanningLocationPullRequestBody = {
  /**
   * The API URL to get the pull request where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/pull/2846"
   */
  pull_request_body_url: string;
};
/**
 * Represents a 'pull_request_comment' secret scanning location type. This location type shows that a secret was detected in a comment on a pull request.
 */
export type SecretScanningLocationPullRequestComment = {
  /**
   * The API URL to get the pull request comment where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/issues/comments/1081119451"
   */
  pull_request_comment_url: string;
};
/**
 * Represents a 'pull_request_review' secret scanning location type. This location type shows that a secret was detected in a review on a pull request.
 */
export type SecretScanningLocationPullRequestReview = {
  /**
   * The API URL to get the pull request review where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/2846/reviews/80"
   */
  pull_request_review_url: string;
};
/**
 * Represents a 'pull_request_review_comment' secret scanning location type. This location type shows that a secret was detected in a review comment on a pull request.
 */
export type SecretScanningLocationPullRequestReviewComment = {
  /**
   * The API URL to get the pull request review comment where the secret was detected.
   * @example "https://api.github.com/repos/octocat/Hello-World/pulls/comments/12"
   */
  pull_request_review_comment_url: string;
};
export type SecretScanningLocation = {
  /**
   * The location type. Because secrets may be found in different types of resources (ie. code, comments, issues, pull requests, discussions), this field identifies the type of resource where the secret was found.
   * @example "commit"
   */
  type:
    | 'commit'
    | 'issue_title'
    | 'issue_body'
    | 'issue_comment'
    | 'discussion_title'
    | 'discussion_body'
    | 'discussion_comment'
    | 'pull_request_title'
    | 'pull_request_body'
    | 'pull_request_comment'
    | 'pull_request_review'
    | 'pull_request_review_comment';
  details:
    | SecretScanningLocationCommit
    | SecretScanningLocationIssueTitle
    | SecretScanningLocationIssueBody
    | SecretScanningLocationIssueComment
    | SecretScanningLocationDiscussionTitle
    | SecretScanningLocationDiscussionBody
    | SecretScanningLocationDiscussionComment
    | SecretScanningLocationPullRequestTitle
    | SecretScanningLocationPullRequestBody
    | SecretScanningLocationPullRequestComment
    | SecretScanningLocationPullRequestReview
    | SecretScanningLocationPullRequestReviewComment;
};
export type RepositoryAdvisoryCreate = {
  /**
   * A short summary of the advisory.
   */
  summary: string;
  /**
   * A detailed description of what the advisory impacts.
   */
  description: string;
  /**
   * The Common Vulnerabilities and Exposures (CVE) ID.
   */
  cve_id?: string | null;
  /**
   * A product affected by the vulnerability detailed in a repository security advisory.
   */
  vulnerabilities: {
    /**
     * The name of the package affected by the vulnerability.
     */
    package: {
      ecosystem: SecurityAdvisoryEcosystems;
      /**
       * The unique package name within its ecosystem.
       */
      name?: string | null;
    };
    /**
     * The range of the package versions affected by the vulnerability.
     */
    vulnerable_version_range?: string | null;
    /**
     * The package version(s) that resolve the vulnerability.
     */
    patched_versions?: string | null;
    /**
     * The functions in the package that are affected.
     */
    vulnerable_functions?: string[] | null;
  }[];
  /**
   * A list of Common Weakness Enumeration (CWE) IDs.
   */
  cwe_ids?: string[] | null;
  /**
   * A list of users receiving credit for their participation in the security advisory.
   */
  credits?:
    | {
        /**
         * The username of the user credited.
         */
        login: string;
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  /**
   * The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
   */
  severity?: ('critical' | 'high' | 'medium' | 'low') | null;
  /**
   * The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
   */
  cvss_vector_string?: string | null;
  /**
   * Whether to create a temporary private fork of the repository to collaborate on a fix.
   */
  start_private_fork?: boolean;
};
export type PrivateVulnerabilityReportCreate = {
  /**
   * A short summary of the advisory.
   */
  summary: string;
  /**
   * A detailed description of what the advisory impacts.
   */
  description: string;
  /**
   * An array of products affected by the vulnerability detailed in a repository security advisory.
   */
  vulnerabilities?:
    | {
        /**
         * The name of the package affected by the vulnerability.
         */
        package: {
          ecosystem: SecurityAdvisoryEcosystems;
          /**
           * The unique package name within its ecosystem.
           */
          name?: string | null;
        };
        /**
         * The range of the package versions affected by the vulnerability.
         */
        vulnerable_version_range?: string | null;
        /**
         * The package version(s) that resolve the vulnerability.
         */
        patched_versions?: string | null;
        /**
         * The functions in the package that are affected.
         */
        vulnerable_functions?: string[] | null;
      }[]
    | null;
  /**
   * A list of Common Weakness Enumeration (CWE) IDs.
   */
  cwe_ids?: string[] | null;
  /**
   * The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
   */
  severity?: ('critical' | 'high' | 'medium' | 'low') | null;
  /**
   * The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
   */
  cvss_vector_string?: string | null;
  /**
   * Whether to create a temporary private fork of the repository to collaborate on a fix.
   */
  start_private_fork?: boolean;
};
export type RepositoryAdvisoryUpdate = {
  /**
   * A short summary of the advisory.
   */
  summary?: string;
  /**
   * A detailed description of what the advisory impacts.
   */
  description?: string;
  /**
   * The Common Vulnerabilities and Exposures (CVE) ID.
   */
  cve_id?: string | null;
  /**
   * A product affected by the vulnerability detailed in a repository security advisory.
   */
  vulnerabilities?: {
    /**
     * The name of the package affected by the vulnerability.
     */
    package: {
      ecosystem: SecurityAdvisoryEcosystems;
      /**
       * The unique package name within its ecosystem.
       */
      name?: string | null;
    };
    /**
     * The range of the package versions affected by the vulnerability.
     */
    vulnerable_version_range?: string | null;
    /**
     * The package version(s) that resolve the vulnerability.
     */
    patched_versions?: string | null;
    /**
     * The functions in the package that are affected.
     */
    vulnerable_functions?: string[] | null;
  }[];
  /**
   * A list of Common Weakness Enumeration (CWE) IDs.
   */
  cwe_ids?: string[] | null;
  /**
   * A list of users receiving credit for their participation in the security advisory.
   */
  credits?:
    | {
        /**
         * The username of the user credited.
         */
        login: string;
        type: SecurityAdvisoryCreditTypes;
      }[]
    | null;
  /**
   * The severity of the advisory. You must choose between setting this field or `cvss_vector_string`.
   */
  severity?: ('critical' | 'high' | 'medium' | 'low') | null;
  /**
   * The CVSS vector that calculates the severity of the advisory. You must choose between setting this field or `severity`.
   */
  cvss_vector_string?: string | null;
  /**
   * The state of the advisory.
   */
  state?: 'published' | 'closed' | 'draft';
  /**
   * A list of usernames who have been granted write access to the advisory.
   */
  collaborating_users?: string[] | null;
  /**
   * A list of team slugs which have been granted write access to the advisory.
   */
  collaborating_teams?: string[] | null;
};
/**
 * Stargazer
 * Stargazer
 */
export type Stargazer = {
  starred_at: Date;
  user: NullableSimpleUser;
};
/**
 * Code Frequency Stat
 * Code Frequency Stat
 */
export type CodeFrequencyStat = number[];
/**
 * Commit Activity
 * Commit Activity
 */
export type CommitActivity = {
  /**
   * @example
   * [
   *   0,
   *   3,
   *   26,
   *   20,
   *   39,
   *   1,
   *   0
   * ]
   */
  days: number[];
  /**
   * @example 89
   */
  total: number;
  /**
   * @example 1336280400
   */
  week: number;
};
/**
 * Contributor Activity
 * Contributor Activity
 */
export type ContributorActivity = {
  author: NullableSimpleUser;
  /**
   * @example 135
   */
  total: number;
  /**
   * @example
   * [
   *   {
   *     "w": "1367712000",
   *     "a": 6898,
   *     "d": 77,
   *     "c": 10
   *   }
   * ]
   */
  weeks: {
    w?: number;
    a?: number;
    d?: number;
    c?: number;
  }[];
};
/**
 * Participation Stats
 */
export type ParticipationStats = {
  all: number[];
  owner: number[];
};
/**
 * Repository Invitation
 * Repository invitations let you manage who you collaborate with.
 */
export type RepositorySubscription = {
  /**
   * Determines if notifications should be received from this repository.
   * @example true
   */
  subscribed: boolean;
  /**
   * Determines if all notifications should be blocked from this repository.
   */
  ignored: boolean;
  reason: string | null;
  /**
   * @example "2012-10-06T21:34:12Z"
   */
  created_at: Date;
  /**
   * @example "https://api.github.com/repos/octocat/example/subscription"
   */
  url: string;
  /**
   * @example "https://api.github.com/repos/octocat/example"
   */
  repository_url: string;
};
/**
 * Tag
 * Tag
 */
export type Tag = {
  /**
   * @example "v0.1"
   */
  name: string;
  commit: {
    sha: string;
    url: string;
  };
  /**
   * @example "https://github.com/octocat/Hello-World/zipball/v0.1"
   */
  zipball_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World/tarball/v0.1"
   */
  tarball_url: string;
  node_id: string;
};
/**
 * Tag protection
 * Tag protection
 */
export type TagProtection = {
  /**
   * @example 2
   */
  id?: number;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at?: string;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at?: string;
  /**
   * @example true
   */
  enabled?: boolean;
  /**
   * @example "v1.*"
   */
  pattern: string;
};
/**
 * Topic
 * A topic aggregates entities that are related to a subject.
 */
export type Topic = {
  names: string[];
};
/**
 * Traffic
 */
export type Traffic = {
  timestamp: Date;
  uniques: number;
  count: number;
};
/**
 * Clone Traffic
 * Clone Traffic
 */
export type CloneTraffic = {
  /**
   * @example 173
   */
  count: number;
  /**
   * @example 128
   */
  uniques: number;
  clones: Traffic[];
};
/**
 * Content Traffic
 * Content Traffic
 */
export type ContentTraffic = {
  /**
   * @example "/github/hubot"
   */
  path: string;
  /**
   * @example "github/hubot: A customizable life embetterment robot."
   */
  title: string;
  /**
   * @example 3542
   */
  count: number;
  /**
   * @example 2225
   */
  uniques: number;
};
/**
 * Referrer Traffic
 * Referrer Traffic
 */
export type ReferrerTraffic = {
  /**
   * @example "Google"
   */
  referrer: string;
  /**
   * @example 4
   */
  count: number;
  /**
   * @example 3
   */
  uniques: number;
};
/**
 * View Traffic
 * View Traffic
 */
export type ViewTraffic = {
  /**
   * @example 14850
   */
  count: number;
  /**
   * @example 3782
   */
  uniques: number;
  views: Traffic[];
};
/**
 * Search Result Text Matches
 */
export type SearchResultTextMatches = {
  object_url?: string;
  object_type?: string | null;
  property?: string;
  fragment?: string;
  matches?: {
    text?: string;
    indices?: number[];
  }[];
}[];
/**
 * Code Search Result Item
 * Code Search Result Item
 */
export type CodeSearchResultItem = {
  name: string;
  path: string;
  sha: string;
  url: string;
  git_url: string;
  html_url: string;
  repository: MinimalRepository;
  score: number;
  file_size?: number;
  language?: string | null;
  last_modified_at?: Date;
  /**
   * @example
   * [
   *   "73..77",
   *   "77..78"
   * ]
   */
  line_numbers?: string[];
  text_matches?: SearchResultTextMatches;
};
/**
 * Commit Search Result Item
 * Commit Search Result Item
 */
export type CommitSearchResultItem = {
  url: string;
  sha: string;
  html_url: string;
  comments_url: string;
  commit: {
    author: {
      name: string;
      email: string;
      date: Date;
    };
    committer: NullableGitUser;
    comment_count: number;
    message: string;
    tree: {
      sha: string;
      url: string;
    };
    url: string;
    verification?: Verification;
  };
  author: NullableSimpleUser;
  committer: NullableGitUser;
  parents: {
    url?: string;
    html_url?: string;
    sha?: string;
  }[];
  repository: MinimalRepository;
  score: number;
  node_id: string;
  text_matches?: SearchResultTextMatches;
};
/**
 * Issue Search Result Item
 * Issue Search Result Item
 */
export type IssueSearchResultItem = {
  url: string;
  repository_url: string;
  labels_url: string;
  comments_url: string;
  events_url: string;
  html_url: string;
  id: number;
  node_id: string;
  number: number;
  title: string;
  locked: boolean;
  active_lock_reason?: string | null;
  assignees?: SimpleUser[] | null;
  user: NullableSimpleUser;
  labels: {
    id?: number;
    node_id?: string;
    url?: string;
    name?: string;
    color?: string;
    default?: boolean;
    description?: string | null;
  }[];
  state: string;
  state_reason?: string | null;
  assignee: NullableSimpleUser;
  milestone: NullableMilestone;
  comments: number;
  created_at: Date;
  updated_at: Date;
  closed_at: Date | null;
  text_matches?: SearchResultTextMatches;
  pull_request?: {
    merged_at?: Date | null;
    diff_url: string | null;
    html_url: string | null;
    patch_url: string | null;
    url: string | null;
  };
  body?: string;
  score: number;
  author_association: AuthorAssociation;
  draft?: boolean;
  repository?: Repository;
  body_html?: string;
  body_text?: string;
  timeline_url?: string;
  performed_via_github_app?: NullableIntegration;
  reactions?: ReactionRollup;
};
/**
 * Label Search Result Item
 * Label Search Result Item
 */
export type LabelSearchResultItem = {
  id: number;
  node_id: string;
  url: string;
  name: string;
  color: string;
  default: boolean;
  description: string | null;
  score: number;
  text_matches?: SearchResultTextMatches;
};
/**
 * Repo Search Result Item
 * Repo Search Result Item
 */
export type RepoSearchResultItem = {
  id: number;
  node_id: string;
  name: string;
  full_name: string;
  owner: NullableSimpleUser;
  private: boolean;
  html_url: string;
  description: string | null;
  fork: boolean;
  url: string;
  created_at: Date;
  updated_at: Date;
  pushed_at: Date;
  homepage: string | null;
  size: number;
  stargazers_count: number;
  watchers_count: number;
  language: string | null;
  forks_count: number;
  open_issues_count: number;
  master_branch?: string;
  default_branch: string;
  score: number;
  forks_url: string;
  keys_url: string;
  collaborators_url: string;
  teams_url: string;
  hooks_url: string;
  issue_events_url: string;
  events_url: string;
  assignees_url: string;
  branches_url: string;
  tags_url: string;
  blobs_url: string;
  git_tags_url: string;
  git_refs_url: string;
  trees_url: string;
  statuses_url: string;
  languages_url: string;
  stargazers_url: string;
  contributors_url: string;
  subscribers_url: string;
  subscription_url: string;
  commits_url: string;
  git_commits_url: string;
  comments_url: string;
  issue_comment_url: string;
  contents_url: string;
  compare_url: string;
  merges_url: string;
  archive_url: string;
  downloads_url: string;
  issues_url: string;
  pulls_url: string;
  milestones_url: string;
  notifications_url: string;
  labels_url: string;
  releases_url: string;
  deployments_url: string;
  git_url: string;
  ssh_url: string;
  clone_url: string;
  svn_url: string;
  forks: number;
  open_issues: number;
  watchers: number;
  topics?: string[];
  mirror_url: string | null;
  has_issues: boolean;
  has_projects: boolean;
  has_pages: boolean;
  has_wiki: boolean;
  has_downloads: boolean;
  has_discussions?: boolean;
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   */
  visibility?: string;
  license: NullableLicenseSimple;
  permissions?: {
    admin: boolean;
    maintain?: boolean;
    push: boolean;
    triage?: boolean;
    pull: boolean;
  };
  text_matches?: SearchResultTextMatches;
  temp_clone_token?: string;
  allow_merge_commit?: boolean;
  allow_squash_merge?: boolean;
  allow_rebase_merge?: boolean;
  allow_auto_merge?: boolean;
  delete_branch_on_merge?: boolean;
  allow_forking?: boolean;
  is_template?: boolean;
  web_commit_signoff_required?: boolean;
};
/**
 * Topic Search Result Item
 * Topic Search Result Item
 */
export type TopicSearchResultItem = {
  name: string;
  display_name: string | null;
  short_description: string | null;
  description: string | null;
  created_by: string | null;
  released: string | null;
  created_at: Date;
  updated_at: Date;
  featured: boolean;
  curated: boolean;
  score: number;
  repository_count?: number | null;
  logo_url?: string | null;
  text_matches?: SearchResultTextMatches;
  related?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
  aliases?:
    | {
        topic_relation?: {
          id?: number;
          name?: string;
          topic_id?: number;
          relation_type?: string;
        };
      }[]
    | null;
};
/**
 * User Search Result Item
 * User Search Result Item
 */
export type UserSearchResultItem = {
  login: string;
  id: number;
  node_id: string;
  avatar_url: string;
  gravatar_id: string | null;
  url: string;
  html_url: string;
  followers_url: string;
  subscriptions_url: string;
  organizations_url: string;
  repos_url: string;
  received_events_url: string;
  type: string;
  score: number;
  following_url: string;
  gists_url: string;
  starred_url: string;
  events_url: string;
  public_repos?: number;
  public_gists?: number;
  followers?: number;
  following?: number;
  created_at?: Date;
  updated_at?: Date;
  name?: string | null;
  bio?: string | null;
  email?: string | null;
  location?: string | null;
  site_admin: boolean;
  hireable?: boolean | null;
  text_matches?: SearchResultTextMatches;
  blog?: string | null;
  company?: string | null;
  suspended_at?: Date | null;
};
/**
 * Private User
 * Private User
 */
export type PrivateUser = {
  /**
   * @example "octocat"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDQ6VXNlcjE="
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @example "User"
   */
  type: string;
  site_admin: boolean;
  /**
   * @example "monalisa octocat"
   */
  name: string | null;
  /**
   * @example "GitHub"
   */
  company: string | null;
  /**
   * @example "https://github.com/blog"
   */
  blog: string | null;
  /**
   * @example "San Francisco"
   */
  location: string | null;
  /**
   * @example "octocat@github.com"
   */
  email: string | null;
  hireable: boolean | null;
  /**
   * @example "There once was..."
   */
  bio: string | null;
  /**
   * @example "monalisa"
   */
  twitter_username?: string | null;
  /**
   * @example 2
   */
  public_repos: number;
  /**
   * @example 1
   */
  public_gists: number;
  /**
   * @example 20
   */
  followers: number;
  following: number;
  /**
   * @example "2008-01-14T04:33:35Z"
   */
  created_at: Date;
  /**
   * @example "2008-01-14T04:33:35Z"
   */
  updated_at: Date;
  /**
   * @example 81
   */
  private_gists: number;
  /**
   * @example 100
   */
  total_private_repos: number;
  /**
   * @example 100
   */
  owned_private_repos: number;
  /**
   * @example 10000
   */
  disk_usage: number;
  /**
   * @example 8
   */
  collaborators: number;
  /**
   * @example true
   */
  two_factor_authentication: boolean;
  plan?: {
    collaborators: number;
    name: string;
    space: number;
    private_repos: number;
  };
  suspended_at?: Date | null;
  business_plus?: boolean;
  ldap_dn?: string;
};
/**
 * Codespaces Secret
 * Secrets for a GitHub Codespace.
 */
export type CodespacesSecret = {
  /**
   * The name of the secret
   * @example "SECRET_NAME"
   */
  name: string;
  /**
   * The date and time at which the secret was created, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  created_at: Date;
  /**
   * The date and time at which the secret was last updated, in ISO 8601 format':' YYYY-MM-DDTHH:MM:SSZ.
   */
  updated_at: Date;
  /**
   * The type of repositories in the organization that the secret is visible to
   */
  visibility: 'all' | 'private' | 'selected';
  /**
   * The API URL at which the list of repositories this secret is visible to can be retrieved
   * @example "https://api.github.com/user/secrets/SECRET_NAME/repositories"
   */
  selected_repositories_url: string;
};
/**
 * CodespacesUserPublicKey
 * The public key used for setting user Codespaces' Secrets.
 */
export type CodespacesUserPublicKey = {
  /**
   * The identifier for the key.
   * @example "1234567"
   */
  key_id: string;
  /**
   * The Base64 encoded public key.
   * @example "hBT5WZEj8ZoOv6TYJsfWq7MxTEQopZO5/IT3ZCVQPzs="
   */
  key: string;
};
/**
 * Fetches information about an export of a codespace.
 * An export of a codespace. Also, latest export details for a codespace can be fetched with id = latest
 */
export type CodespaceExportDetails = {
  /**
   * State of the latest export
   * @example "succeeded | failed | in_progress"
   */
  state?: string | null;
  /**
   * Completion time of the last export operation
   * @example "2021-01-01T19:01:12Z"
   */
  completed_at?: Date | null;
  /**
   * Name of the exported branch
   * @example "codespace-monalisa-octocat-hello-world-g4wpq6h95q"
   */
  branch?: string | null;
  /**
   * Git commit SHA of the exported branch
   * @example "fd95a81ca01e48ede9f39c799ecbcef817b8a3b2"
   */
  sha?: string | null;
  /**
   * Id for the export details
   * @example "latest"
   */
  id?: string;
  /**
   * Url for fetching export details
   * @example "https://api.github.com/user/codespaces/:name/exports/latest"
   */
  export_url?: string;
  /**
   * Web url for the exported branch
   * @example "https://github.com/octocat/hello-world/tree/:branch"
   */
  html_url?: string | null;
};
/**
 * Codespace
 * A codespace.
 */
export type CodespaceWithFullRepository = {
  /**
   * @example 1
   */
  id: number;
  /**
   * Automatically generated name of this codespace.
   * @example "monalisa-octocat-hello-world-g4wpq6h95q"
   */
  name: string;
  /**
   * Display name for this codespace.
   * @example "bookish space pancake"
   */
  display_name?: string | null;
  /**
   * UUID identifying this codespace's environment.
   * @example "26a7c758-7299-4a73-b978-5a92a7ae98a0"
   */
  environment_id: string | null;
  owner: SimpleUser;
  billable_owner: SimpleUser;
  repository: FullRepository;
  machine: NullableCodespaceMachine;
  /**
   * Path to devcontainer.json from repo root used to create Codespace.
   * @example ".devcontainer/example/devcontainer.json"
   */
  devcontainer_path?: string | null;
  /**
   * Whether the codespace was created from a prebuild.
   */
  prebuild: boolean | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  updated_at: Date;
  /**
   * Last known time this codespace was started.
   * @example "2011-01-26T19:01:12Z"
   */
  last_used_at: Date;
  /**
   * State of this codespace.
   * @example "Available"
   */
  state:
    | 'Unknown'
    | 'Created'
    | 'Queued'
    | 'Provisioning'
    | 'Available'
    | 'Awaiting'
    | 'Unavailable'
    | 'Deleted'
    | 'Moved'
    | 'Shutdown'
    | 'Archived'
    | 'Starting'
    | 'ShuttingDown'
    | 'Failed'
    | 'Exporting'
    | 'Updating'
    | 'Rebuilding';
  /**
   * API URL for this codespace.
   */
  url: string;
  /**
   * Details about the codespace's git repository.
   */
  git_status: {
    /**
     * The number of commits the local repository is ahead of the remote.
     */
    ahead?: number;
    /**
     * The number of commits the local repository is behind the remote.
     */
    behind?: number;
    /**
     * Whether the local repository has unpushed changes.
     */
    has_unpushed_changes?: boolean;
    /**
     * Whether the local repository has uncommitted changes.
     */
    has_uncommitted_changes?: boolean;
    /**
     * The current branch (or SHA if in detached HEAD state) of the local repository.
     * @example "main"
     */
    ref?: string;
  };
  /**
   * The initally assigned location of a new codespace.
   * @example "WestUs2"
   */
  location: 'EastUs' | 'SouthEastAsia' | 'WestEurope' | 'WestUs2';
  /**
   * The number of minutes of inactivity after which this codespace will be automatically stopped.
   * @example 60
   */
  idle_timeout_minutes: number | null;
  /**
   * URL to access this codespace on the web.
   */
  web_url: string;
  /**
   * API URL to access available alternate machine types for this codespace.
   */
  machines_url: string;
  /**
   * API URL to start this codespace.
   */
  start_url: string;
  /**
   * API URL to stop this codespace.
   */
  stop_url: string;
  /**
   * API URL to publish this codespace to a new repository.
   */
  publish_url?: string | null;
  /**
   * API URL for the Pull Request associated with this codespace, if any.
   */
  pulls_url: string | null;
  recent_folders: string[];
  runtime_constraints?: {
    /**
     * The privacy settings a user can select from when forwarding a port.
     */
    allowed_port_privacy_settings?: string[] | null;
  };
  /**
   * Whether or not a codespace has a pending async operation. This would mean that the codespace is temporarily unavailable. The only thing that you can do with a codespace in this state is delete it.
   */
  pending_operation?: boolean | null;
  /**
   * Text to show user when codespace is disabled by a pending operation
   */
  pending_operation_disabled_reason?: string | null;
  /**
   * Text to show user when codespace idle timeout minutes has been overriden by an organization policy
   */
  idle_timeout_notice?: string | null;
  /**
   * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
   * @example 60
   */
  retention_period_minutes?: number | null;
  /**
   * When a codespace will be auto-deleted based on the "retention_period_minutes" and "last_used_at"
   * @example "2011-01-26T20:01:12Z"
   */
  retention_expires_at?: Date | null;
};
/**
 * Email
 * Email
 */
export type Email = {
  /**
   * @example "octocat@github.com"
   */
  email: string;
  /**
   * @example true
   */
  primary: boolean;
  /**
   * @example true
   */
  verified: boolean;
  /**
   * @example "public"
   */
  visibility: string | null;
};
/**
 * GPG Key
 * A unique encryption key
 */
export type GpgKey = {
  /**
   * @example 3
   */
  id: number;
  /**
   * @example "Octocat's GPG Key"
   */
  name?: string | null;
  primary_key_id: number | null;
  /**
   * @example "3262EFF25BA0D270"
   */
  key_id: string;
  /**
   * @example "xsBNBFayYZ..."
   */
  public_key: string;
  /**
   * @example
   * [
   *   {
   *     "email": "octocat@users.noreply.github.com",
   *     "verified": true
   *   }
   * ]
   */
  emails: {
    email?: string;
    verified?: boolean;
  }[];
  /**
   * @example
   * [
   *   {
   *     "id": 4,
   *     "primary_key_id": 3,
   *     "key_id": "4A595D4C72EE49C7",
   *     "public_key": "zsBNBFayYZ...",
   *     "emails": [],
   *     "can_sign": false,
   *     "can_encrypt_comms": true,
   *     "can_encrypt_storage": true,
   *     "can_certify": false,
   *     "created_at": "2016-03-24T11:31:04-06:00",
   *     "expires_at": null,
   *     "revoked": false
   *   }
   * ]
   */
  subkeys: {
    id?: number;
    primary_key_id?: number;
    key_id?: string;
    public_key?: string;
    emails?: {
      email?: string;
      verified?: boolean;
    }[];
    subkeys?: any[];
    can_sign?: boolean;
    can_encrypt_comms?: boolean;
    can_encrypt_storage?: boolean;
    can_certify?: boolean;
    created_at?: string;
    expires_at?: string | null;
    raw_key?: string | null;
    revoked?: boolean;
  }[];
  /**
   * @example true
   */
  can_sign: boolean;
  can_encrypt_comms: boolean;
  can_encrypt_storage: boolean;
  /**
   * @example true
   */
  can_certify: boolean;
  /**
   * @example "2016-03-24T11:31:04-06:00"
   */
  created_at: Date;
  expires_at: Date | null;
  /**
   * @example true
   */
  revoked: boolean;
  raw_key: string | null;
};
/**
 * Key
 * Key
 */
export type Key = {
  key: string;
  id: number;
  url: string;
  title: string;
  created_at: Date;
  verified: boolean;
  read_only: boolean;
};
/**
 * Marketplace Account
 */
export type MarketplaceAccount = {
  url: string;
  id: number;
  type: string;
  node_id?: string;
  login: string;
  email?: string | null;
  organization_billing_email?: string | null;
};
/**
 * User Marketplace Purchase
 * User Marketplace Purchase
 */
export type UserMarketplacePurchase = {
  /**
   * @example "monthly"
   */
  billing_cycle: string;
  /**
   * @example "2017-11-11T00:00:00Z"
   */
  next_billing_date: Date | null;
  unit_count: number | null;
  /**
   * @example true
   */
  on_free_trial: boolean;
  /**
   * @example "2017-11-11T00:00:00Z"
   */
  free_trial_ends_on: Date | null;
  /**
   * @example "2017-11-02T01:12:12Z"
   */
  updated_at: Date | null;
  account: MarketplaceAccount;
  plan: MarketplaceListingPlan;
};
/**
 * Social account
 * Social media account
 */
export type SocialAccount = {
  /**
   * @example "linkedin"
   */
  provider: string;
  /**
   * @example "https://www.linkedin.com/company/github/"
   */
  url: string;
};
/**
 * SSH Signing Key
 * A public SSH key used to sign Git commits
 */
export type SshSigningKey = {
  key: string;
  id: number;
  title: string;
  created_at: Date;
};
/**
 * Starred Repository
 * Starred Repository
 */
export type StarredRepository = {
  starred_at: Date;
  repo: Repository;
};
/**
 * Hovercard
 * Hovercard
 */
export type Hovercard = {
  contexts: {
    message: string;
    octicon: string;
  }[];
};
/**
 * Key Simple
 * Key Simple
 */
export type KeySimple = {
  id: number;
  key: string;
};
/**
 * Enterprise
 * An enterprise on GitHub. Webhook payloads contain the `enterprise` property when the webhook is configured
 * on an enterprise account or an organization that's part of an enterprise account. For more information,
 * see "[About enterprise accounts](https://docs.github.com/admin/overview/about-enterprise-accounts)."
 */
export type EnterpriseWebhooks = {
  /**
   * A short description of the enterprise.
   */
  description?: string | null;
  /**
   * @example "https://github.com/enterprises/octo-business"
   */
  html_url: string;
  /**
   * The enterprise's website URL.
   */
  website_url?: string | null;
  /**
   * Unique identifier of the enterprise
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the enterprise.
   * @example "Octo Business"
   */
  name: string;
  /**
   * The slug url identifier for the enterprise.
   * @example "octo-business"
   */
  slug: string;
  /**
   * @example "2019-01-26T19:01:12Z"
   */
  created_at: Date | null;
  /**
   * @example "2019-01-26T19:14:43Z"
   */
  updated_at: Date | null;
  avatar_url: string;
};
/**
 * Simple Installation
 * The GitHub App installation. Webhook payloads contain the `installation` property when the event is configured
 * for and sent to a GitHub App. For more information,
 * see "[Using webhooks with GitHub Apps](https://docs.github.com/apps/creating-github-apps/registering-a-github-app/using-webhooks-with-github-apps)."
 */
export type SimpleInstallation = {
  /**
   * The ID of the installation.
   * @example 1
   */
  id: number;
  /**
   * The global node ID of the installation.
   * @example "MDQ6VXNlcjU4MzIzMQ=="
   */
  node_id: string;
};
/**
 * Organization Simple
 * A GitHub organization. Webhook payloads contain the `organization` property when the webhook is configured for an
 * organization, or when the event occurs from activity in a repository owned by an organization.
 */
export type OrganizationSimpleWebhooks = {
  /**
   * @example "github"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDEyOk9yZ2FuaXphdGlvbjE="
   */
  node_id: string;
  /**
   * @example "https://api.github.com/orgs/github"
   */
  url: string;
  /**
   * @example "https://api.github.com/orgs/github/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/orgs/github/events"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/orgs/github/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://api.github.com/orgs/github/issues"
   */
  issues_url: string;
  /**
   * @example "https://api.github.com/orgs/github/members{/member}"
   */
  members_url: string;
  /**
   * @example "https://api.github.com/orgs/github/public_members{/member}"
   */
  public_members_url: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "A great organization"
   */
  description: string | null;
};
/**
 * Repository
 * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
export type RepositoryWebhooks = {
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  license: NullableLicenseSimple;
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
   */
  custom_properties?: {
    [key: string]: any;
  };
  /**
   * Whether issues are enabled.
   * @example true
   * @defaultValue true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @example true
   * @defaultValue true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @example true
   * @defaultValue true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @example true
   * @defaultValue true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @defaultValue "public"
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: Date | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_update_branch?: boolean;
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   * @deprecated
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * Whether to allow merge commits for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /**
   * @example "\"2020-07-09T00:17:42Z\""
   */
  starred_at?: string;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
};
/**
 * Simple User
 * The GitHub user that triggered the event. This property is included in every webhook payload.
 */
export type SimpleUserWebhooks = {
  name?: string | null;
  email?: string | null;
  /**
   * @example "octocat"
   */
  login: string;
  /**
   * @example 1
   */
  id: number;
  /**
   * @example "MDQ6VXNlcjE="
   */
  node_id: string;
  /**
   * @example "https://github.com/images/error/octocat_happy.gif"
   */
  avatar_url: string;
  /**
   * @example "41d064eb2195891e12d0413f63227ea7"
   */
  gravatar_id: string | null;
  /**
   * @example "https://api.github.com/users/octocat"
   */
  url: string;
  /**
   * @example "https://github.com/octocat"
   */
  html_url: string;
  /**
   * @example "https://api.github.com/users/octocat/followers"
   */
  followers_url: string;
  /**
   * @example "https://api.github.com/users/octocat/following{/other_user}"
   */
  following_url: string;
  /**
   * @example "https://api.github.com/users/octocat/gists{/gist_id}"
   */
  gists_url: string;
  /**
   * @example "https://api.github.com/users/octocat/starred{/owner}{/repo}"
   */
  starred_url: string;
  /**
   * @example "https://api.github.com/users/octocat/subscriptions"
   */
  subscriptions_url: string;
  /**
   * @example "https://api.github.com/users/octocat/orgs"
   */
  organizations_url: string;
  /**
   * @example "https://api.github.com/users/octocat/repos"
   */
  repos_url: string;
  /**
   * @example "https://api.github.com/users/octocat/events{/privacy}"
   */
  events_url: string;
  /**
   * @example "https://api.github.com/users/octocat/received_events"
   */
  received_events_url: string;
  /**
   * @example "User"
   */
  type: string;
  site_admin: boolean;
  /**
   * @example "\"2020-07-09T00:17:55Z\""
   */
  starred_at?: string;
};
/**
 * A suite of checks performed on the code of a given code change
 */
export type SimpleCheckSuite = {
  /**
   * @example "d6fde92930d4715a2b49857d24b940956b26d2d3"
   */
  after?: string | null;
  app?: Integration;
  /**
   * @example "146e867f55c26428e5f9fade55a9bbf5e95a7912"
   */
  before?: string | null;
  /**
   * @example "neutral"
   */
  conclusion?:
    | (
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
        | 'stale'
        | 'startup_failure'
      )
    | null;
  created_at?: Date;
  /**
   * @example "master"
   */
  head_branch?: string | null;
  /**
   * The SHA of the head commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha?: string;
  /**
   * @example 5
   */
  id?: number;
  /**
   * @example "MDEwOkNoZWNrU3VpdGU1"
   */
  node_id?: string;
  pull_requests?: PullRequestMinimal[];
  repository?: MinimalRepository;
  /**
   * @example "completed"
   */
  status?: 'queued' | 'in_progress' | 'completed' | 'pending' | 'waiting';
  updated_at?: Date;
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-suites/5"
   */
  url?: string;
};
/**
 * CheckRun
 * A check performed on the code of a given code change
 */
export type CheckRunWithSimpleCheckSuite = {
  app: NullableIntegration;
  check_suite: SimpleCheckSuite;
  /**
   * @example "2018-05-04T01:14:52Z"
   */
  completed_at: Date | null;
  /**
   * @example "neutral"
   */
  conclusion:
    | (
        | 'waiting'
        | 'pending'
        | 'startup_failure'
        | 'stale'
        | 'success'
        | 'failure'
        | 'neutral'
        | 'cancelled'
        | 'skipped'
        | 'timed_out'
        | 'action_required'
      )
    | null;
  deployment?: DeploymentSimple;
  /**
   * @example "https://example.com"
   */
  details_url: string;
  /**
   * @example "42"
   */
  external_id: string;
  /**
   * The SHA of the commit that is being checked.
   * @example "009b8a3a9ccbb128af87f9b1c0f4c62e8a304f6d"
   */
  head_sha: string;
  /**
   * @example "https://github.com/github/hello-world/runs/4"
   */
  html_url: string;
  /**
   * The id of the check.
   * @example 21
   */
  id: number;
  /**
   * The name of the check.
   * @example "test-coverage"
   */
  name: string;
  /**
   * @example "MDg6Q2hlY2tSdW40"
   */
  node_id: string;
  output: {
    annotations_count: number;
    annotations_url: string;
    summary: string | null;
    text: string | null;
    title: string | null;
  };
  pull_requests: PullRequestMinimal[];
  /**
   * @example "2018-05-04T01:14:52Z"
   */
  started_at: Date;
  /**
   * The phase of the lifecycle that the check is currently in.
   * @example "queued"
   */
  status: 'queued' | 'in_progress' | 'completed' | 'pending';
  /**
   * @example "https://api.github.com/repos/github/hello-world/check-runs/4"
   */
  url: string;
};
/**
 * Discussion
 * A Discussion in a repository.
 */
export type Discussion = {
  active_lock_reason: string | null;
  answer_chosen_at: string | null;
  /**
   * User
   */
  answer_chosen_by: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  answer_html_url: string | null;
  /**
   * AuthorAssociation
   * How the author is associated with the repository.
   */
  author_association:
    | 'COLLABORATOR'
    | 'CONTRIBUTOR'
    | 'FIRST_TIMER'
    | 'FIRST_TIME_CONTRIBUTOR'
    | 'MANNEQUIN'
    | 'MEMBER'
    | 'NONE'
    | 'OWNER';
  body: string;
  category: {
    created_at: Date;
    description: string;
    emoji: string;
    id: number;
    is_answerable: boolean;
    name: string;
    node_id?: string;
    repository_id: number;
    slug: string;
    updated_at: string;
  };
  comments: number;
  created_at: Date;
  html_url: string;
  id: number;
  locked: boolean;
  node_id: string;
  number: number;
  /**
   * Reactions
   */
  reactions?: {
    '+1': number;
    '-1': number;
    confused: number;
    eyes: number;
    heart: number;
    hooray: number;
    laugh: number;
    rocket: number;
    total_count: number;
    url: string;
  };
  repository_url: string;
  /**
   * The current state of the discussion.
   * `converting` means that the discussion is being converted from an issue.
   * `transferring` means that the discussion is being transferred from another repository.
   */
  state: 'open' | 'closed' | 'locked' | 'converting' | 'transferring';
  /**
   * The reason for the current state
   * @example "resolved"
   */
  state_reason: ('resolved' | 'outdated' | 'duplicate' | 'reopened') | null;
  timeline_url?: string;
  title: string;
  updated_at: Date;
  /**
   * User
   */
  user: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
};
/**
 * Merge Group
 * A group of pull requests that the merge queue has grouped together to be merged.
 */
export type MergeGroup = {
  /**
   * The SHA of the merge group.
   */
  head_sha: string;
  /**
   * The full ref of the merge group.
   */
  head_ref: string;
  /**
   * The SHA of the merge group's parent commit.
   */
  base_sha: string;
  /**
   * The full ref of the branch the merge group will be merged into.
   */
  base_ref: string;
  head_commit: SimpleCommit;
};
/**
 * Repository
 * The repository on GitHub where the event occurred. Webhook payloads contain the `repository` property
 * when the event occurs from activity in a repository.
 */
export type NullableRepositoryWebhooks = {
  /**
   * Unique identifier of the repository
   * @example 42
   */
  id: number;
  /**
   * @example "MDEwOlJlcG9zaXRvcnkxMjk2MjY5"
   */
  node_id: string;
  /**
   * The name of the repository.
   * @example "Team Environment"
   */
  name: string;
  /**
   * @example "octocat/Hello-World"
   */
  full_name: string;
  license: NullableLicenseSimple;
  organization?: NullableSimpleUser;
  forks: number;
  permissions?: {
    admin: boolean;
    pull: boolean;
    triage?: boolean;
    push: boolean;
    maintain?: boolean;
  };
  owner: SimpleUser;
  /**
   * Whether the repository is private or public.
   */
  private: boolean;
  /**
   * @example "https://github.com/octocat/Hello-World"
   */
  html_url: string;
  /**
   * @example "This your first repo!"
   */
  description: string | null;
  fork: boolean;
  /**
   * @example "https://api.github.com/repos/octocat/Hello-World"
   */
  url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/{archive_format}{/ref}"
   */
  archive_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/assignees{/user}"
   */
  assignees_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/blobs{/sha}"
   */
  blobs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/branches{/branch}"
   */
  branches_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/collaborators{/collaborator}"
   */
  collaborators_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/comments{/number}"
   */
  comments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/commits{/sha}"
   */
  commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/compare/{base}...{head}"
   */
  compare_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contents/{+path}"
   */
  contents_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/contributors"
   */
  contributors_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/deployments"
   */
  deployments_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/downloads"
   */
  downloads_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/events"
   */
  events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/forks"
   */
  forks_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/commits{/sha}"
   */
  git_commits_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/refs{/sha}"
   */
  git_refs_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/tags{/sha}"
   */
  git_tags_url: string;
  /**
   * @example "git:github.com/octocat/Hello-World.git"
   */
  git_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/comments{/number}"
   */
  issue_comment_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues/events{/number}"
   */
  issue_events_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/issues{/number}"
   */
  issues_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/keys{/key_id}"
   */
  keys_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/labels{/name}"
   */
  labels_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/languages"
   */
  languages_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/merges"
   */
  merges_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/milestones{/number}"
   */
  milestones_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/notifications{?since,all,participating}"
   */
  notifications_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/pulls{/number}"
   */
  pulls_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/releases{/id}"
   */
  releases_url: string;
  /**
   * @example "git@github.com:octocat/Hello-World.git"
   */
  ssh_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/stargazers"
   */
  stargazers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/statuses/{sha}"
   */
  statuses_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscribers"
   */
  subscribers_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/subscription"
   */
  subscription_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/tags"
   */
  tags_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/teams"
   */
  teams_url: string;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/git/trees{/sha}"
   */
  trees_url: string;
  /**
   * @example "https://github.com/octocat/Hello-World.git"
   */
  clone_url: string;
  /**
   * @example "git:git.example.com/octocat/Hello-World"
   */
  mirror_url: string | null;
  /**
   * @example "http://api.github.com/repos/octocat/Hello-World/hooks"
   */
  hooks_url: string;
  /**
   * @example "https://svn.github.com/octocat/Hello-World"
   */
  svn_url: string;
  /**
   * @example "https://github.com"
   */
  homepage: string | null;
  language: string | null;
  /**
   * @example 9
   */
  forks_count: number;
  /**
   * @example 80
   */
  stargazers_count: number;
  /**
   * @example 80
   */
  watchers_count: number;
  /**
   * The size of the repository, in kilobytes. Size is calculated hourly. When a repository is initially created, the size is 0.
   * @example 108
   */
  size: number;
  /**
   * The default branch of the repository.
   * @example "master"
   */
  default_branch: string;
  open_issues_count: number;
  /**
   * Whether this repository acts as a template that can be used to generate new repositories.
   * @example true
   */
  is_template?: boolean;
  topics?: string[];
  /**
   * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
   */
  custom_properties?: {
    [key: string]: any;
  };
  /**
   * Whether issues are enabled.
   * @example true
   * @defaultValue true
   */
  has_issues: boolean;
  /**
   * Whether projects are enabled.
   * @example true
   * @defaultValue true
   */
  has_projects: boolean;
  /**
   * Whether the wiki is enabled.
   * @example true
   * @defaultValue true
   */
  has_wiki: boolean;
  has_pages: boolean;
  /**
   * Whether downloads are enabled.
   * @example true
   * @defaultValue true
   */
  has_downloads: boolean;
  /**
   * Whether discussions are enabled.
   * @example true
   */
  has_discussions?: boolean;
  /**
   * Whether the repository is archived.
   */
  archived: boolean;
  /**
   * Returns whether or not this repository disabled.
   */
  disabled: boolean;
  /**
   * The repository visibility: public, private, or internal.
   * @defaultValue "public"
   */
  visibility?: string;
  /**
   * @example "2011-01-26T19:06:43Z"
   */
  pushed_at: Date | null;
  /**
   * @example "2011-01-26T19:01:12Z"
   */
  created_at: Date | null;
  /**
   * @example "2011-01-26T19:14:43Z"
   */
  updated_at: Date | null;
  /**
   * Whether to allow rebase merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_rebase_merge?: boolean;
  template_repository?: {
    id?: number;
    node_id?: string;
    name?: string;
    full_name?: string;
    owner?: {
      login?: string;
      id?: number;
      node_id?: string;
      avatar_url?: string;
      gravatar_id?: string;
      url?: string;
      html_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      starred_url?: string;
      subscriptions_url?: string;
      organizations_url?: string;
      repos_url?: string;
      events_url?: string;
      received_events_url?: string;
      type?: string;
      site_admin?: boolean;
    };
    private?: boolean;
    html_url?: string;
    description?: string;
    fork?: boolean;
    url?: string;
    archive_url?: string;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    deployments_url?: string;
    downloads_url?: string;
    events_url?: string;
    forks_url?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    languages_url?: string;
    merges_url?: string;
    milestones_url?: string;
    notifications_url?: string;
    pulls_url?: string;
    releases_url?: string;
    ssh_url?: string;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    tags_url?: string;
    teams_url?: string;
    trees_url?: string;
    clone_url?: string;
    mirror_url?: string;
    hooks_url?: string;
    svn_url?: string;
    homepage?: string;
    language?: string;
    forks_count?: number;
    stargazers_count?: number;
    watchers_count?: number;
    size?: number;
    default_branch?: string;
    open_issues_count?: number;
    is_template?: boolean;
    topics?: string[];
    has_issues?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    has_pages?: boolean;
    has_downloads?: boolean;
    archived?: boolean;
    disabled?: boolean;
    visibility?: string;
    pushed_at?: string;
    created_at?: string;
    updated_at?: string;
    permissions?: {
      admin?: boolean;
      maintain?: boolean;
      push?: boolean;
      triage?: boolean;
      pull?: boolean;
    };
    allow_rebase_merge?: boolean;
    temp_clone_token?: string;
    allow_squash_merge?: boolean;
    allow_auto_merge?: boolean;
    delete_branch_on_merge?: boolean;
    allow_update_branch?: boolean;
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    allow_merge_commit?: boolean;
    subscribers_count?: number;
    network_count?: number;
  } | null;
  temp_clone_token?: string;
  /**
   * Whether to allow squash merges for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_squash_merge?: boolean;
  /**
   * Whether to allow Auto-merge to be used on pull requests.
   */
  allow_auto_merge?: boolean;
  /**
   * Whether to delete head branches when pull requests are merged
   */
  delete_branch_on_merge?: boolean;
  /**
   * Whether or not a pull request head branch that is behind its base branch can always be updated even if it is not required to be up to date before merging.
   */
  allow_update_branch?: boolean;
  /**
   * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
   * @deprecated
   */
  use_squash_pr_title_as_default?: boolean;
  /**
   * The default value for a squash merge commit title:
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
   */
  squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
  /**
   * The default value for a squash merge commit message:
   *
   * - `PR_BODY` - default to the pull request's body.
   * - `COMMIT_MESSAGES` - default to the branch's commit messages.
   * - `BLANK` - default to a blank commit message.
   */
  squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
  /**
   * The default value for a merge commit title.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
   */
  merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
  /**
   * The default value for a merge commit message.
   *
   * - `PR_TITLE` - default to the pull request's title.
   * - `PR_BODY` - default to the pull request's body.
   * - `BLANK` - default to a blank commit message.
   */
  merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
  /**
   * Whether to allow merge commits for pull requests.
   * @example true
   * @defaultValue true
   */
  allow_merge_commit?: boolean;
  /**
   * Whether to allow forking this repo
   */
  allow_forking?: boolean;
  /**
   * Whether to require contributors to sign off on web-based commits
   */
  web_commit_signoff_required?: boolean;
  subscribers_count?: number;
  network_count?: number;
  open_issues: number;
  watchers: number;
  master_branch?: string;
  /**
   * @example "\"2020-07-09T00:17:42Z\""
   */
  starred_at?: string;
  /**
   * Whether anonymous git access is enabled for this repository
   */
  anonymous_access_enabled?: boolean;
} | null;
/**
 * Personal Access Token Request
 * Details of a Personal Access Token Request.
 */
export type PersonalAccessTokenRequest = {
  /**
   * Unique identifier of the request for access via fine-grained personal access token. Used as the `pat_request_id` parameter in the list and review API calls.
   */
  id: number;
  owner: SimpleUser;
  /**
   * New requested permissions, categorized by type of permission.
   */
  permissions_added: {
    organization?: {
      [key: string]: string;
    };
    repository?: {
      [key: string]: string;
    };
    other?: {
      [key: string]: string;
    };
  };
  /**
   * Requested permissions that elevate access for a previously approved request for access, categorized by type of permission.
   */
  permissions_upgraded: {
    organization?: {
      [key: string]: string;
    };
    repository?: {
      [key: string]: string;
    };
    other?: {
      [key: string]: string;
    };
  };
  /**
   * Permissions requested, categorized by type of permission. This field incorporates `permissions_added` and `permissions_upgraded`.
   */
  permissions_result: {
    organization?: {
      [key: string]: string;
    };
    repository?: {
      [key: string]: string;
    };
    other?: {
      [key: string]: string;
    };
  };
  /**
   * Type of repository selection requested.
   */
  repository_selection: 'none' | 'all' | 'subset';
  /**
   * The number of repositories the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
   */
  repository_count: number | null;
  /**
   * An array of repository objects the token is requesting access to. This field is only populated when `repository_selection` is `subset`.
   */
  repositories:
    | {
        full_name: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
      }[]
    | null;
  /**
   * Date and time when the request for access was created.
   */
  created_at: string;
  /**
   * Whether the associated fine-grained personal access token has expired.
   */
  token_expired: boolean;
  /**
   * Date and time when the associated fine-grained personal access token expires.
   */
  token_expires_at: string | null;
  /**
   * Date and time when the associated fine-grained personal access token was last used for authentication.
   */
  token_last_used_at: string | null;
};
/**
 * Projects v2 Project
 * A projects v2 project
 */
export type ProjectsV2 = {
  id: number;
  node_id: string;
  owner: SimpleUser;
  creator: SimpleUser;
  title: string;
  description: string | null;
  public: boolean;
  /**
   * @example "2022-04-28T12:00:00Z"
   */
  closed_at: Date | null;
  /**
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: Date;
  /**
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: Date;
  number: number;
  short_description: string | null;
  /**
   * @example "2022-04-28T12:00:00Z"
   */
  deleted_at: Date | null;
  deleted_by: NullableSimpleUser;
};
/**
 * Projects v2 Item Content Type
 * The type of content tracked in a project item
 */
export enum ProjectsV2ItemContentType {
  ISSUE = 'Issue',
  PULL_REQUEST = 'PullRequest',
  DRAFT_ISSUE = 'DraftIssue',
}
/**
 * Projects v2 Item
 * An item belonging to a project
 */
export type ProjectsV2Item = {
  id: number;
  node_id?: string;
  project_node_id?: string;
  content_node_id: string;
  content_type: ProjectsV2ItemContentType;
  creator?: SimpleUser;
  /**
   * @example "2022-04-28T12:00:00Z"
   */
  created_at: Date;
  /**
   * @example "2022-04-28T12:00:00Z"
   */
  updated_at: Date;
  /**
   * @example "2022-04-28T12:00:00Z"
   */
  archived_at: Date | null;
};
/**
 * The reason for resolving the alert.
 */
export type SecretScanningAlertResolutionWebhook =
  | (
      | 'false_positive'
      | 'wont_fix'
      | 'revoked'
      | 'used_in_tests'
      | 'pattern_deleted'
      | 'pattern_edited'
    )
  | null;
export type SecretScanningAlertWebhook = {
  number?: AlertNumber;
  created_at?: AlertCreatedAt;
  updated_at?: NullableAlertUpdatedAt;
  url?: AlertUrl;
  html_url?: AlertHtmlUrl;
  /**
   * The REST API URL of the code locations for this alert.
   */
  locations_url?: string;
  resolution?: SecretScanningAlertResolutionWebhook;
  /**
   * The time that the alert was resolved in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  resolved_at?: Date | null;
  resolved_by?: NullableSimpleUser;
  /**
   * An optional comment to resolve an alert.
   */
  resolution_comment?: string | null;
  /**
   * The type of secret that secret scanning detected.
   */
  secret_type?: string;
  /**
   * The token status as of the latest validity check.
   */
  validity?: 'active' | 'inactive' | 'unknown';
  /**
   * Whether push protection was bypassed for the detected secret.
   */
  push_protection_bypassed?: boolean | null;
  push_protection_bypassed_by?: NullableSimpleUser;
  /**
   * The time that push protection was bypassed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
   */
  push_protection_bypassed_at?: Date | null;
};
/**
 * branch protection configuration disabled event
 */
export type WebhookBranchProtectionConfigurationDisabled = {
  action: 'disabled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * branch protection configuration enabled event
 */
export type WebhookBranchProtectionConfigurationEnabled = {
  action: 'enabled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * branch protection rule created event
 */
export type WebhookBranchProtectionRuleCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  /**
   * branch protection rule
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: 'off' | 'non_admins' | 'everyone';
    allow_force_pushes_enforcement_level: 'off' | 'non_admins' | 'everyone';
    authorized_actor_names: string[];
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    created_at: Date;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level:
      | 'off'
      | 'non_admins'
      | 'everyone';
    merge_queue_enforcement_level: 'off' | 'non_admins' | 'everyone';
    name: string;
    pull_request_reviews_enforcement_level: 'off' | 'non_admins' | 'everyone';
    repository_id: number;
    require_code_owner_review: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it
     */
    require_last_push_approval?: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: 'off' | 'non_admins' | 'everyone';
    required_deployments_enforcement_level: 'off' | 'non_admins' | 'everyone';
    required_status_checks: string[];
    required_status_checks_enforcement_level: 'off' | 'non_admins' | 'everyone';
    signature_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    strict_required_status_checks_policy: boolean;
    updated_at: Date;
  };
  sender: SimpleUserWebhooks;
};
/**
 * branch protection rule deleted event
 */
export type WebhookBranchProtectionRuleDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  /**
   * branch protection rule
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: 'off' | 'non_admins' | 'everyone';
    allow_force_pushes_enforcement_level: 'off' | 'non_admins' | 'everyone';
    authorized_actor_names: string[];
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    created_at: Date;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level:
      | 'off'
      | 'non_admins'
      | 'everyone';
    merge_queue_enforcement_level: 'off' | 'non_admins' | 'everyone';
    name: string;
    pull_request_reviews_enforcement_level: 'off' | 'non_admins' | 'everyone';
    repository_id: number;
    require_code_owner_review: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it
     */
    require_last_push_approval?: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: 'off' | 'non_admins' | 'everyone';
    required_deployments_enforcement_level: 'off' | 'non_admins' | 'everyone';
    required_status_checks: string[];
    required_status_checks_enforcement_level: 'off' | 'non_admins' | 'everyone';
    signature_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    strict_required_status_checks_policy: boolean;
    updated_at: Date;
  };
  sender: SimpleUserWebhooks;
};
/**
 * branch protection rule edited event
 */
export type WebhookBranchProtectionRuleEdited = {
  action: 'edited';
  /**
   * If the action was `edited`, the changes to the rule.
   */
  changes?: {
    admin_enforced?: {
      from: boolean | null;
    };
    authorized_actor_names?: {
      from: string[];
    };
    authorized_actors_only?: {
      from: boolean | null;
    };
    authorized_dismissal_actors_only?: {
      from: boolean | null;
    };
    linear_history_requirement_enforcement_level?: {
      from: 'off' | 'non_admins' | 'everyone';
    };
    required_status_checks?: {
      from: string[];
    };
    required_status_checks_enforcement_level?: {
      from: 'off' | 'non_admins' | 'everyone';
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  /**
   * branch protection rule
   * The branch protection rule. Includes a `name` and all the [branch protection settings](https://docs.github.com/github/administering-a-repository/defining-the-mergeability-of-pull-requests/about-protected-branches#about-branch-protection-settings) applied to branches that match the name. Binary settings are boolean. Multi-level configurations are one of `off`, `non_admins`, or `everyone`. Actor and build lists are arrays of strings.
   */
  rule: {
    admin_enforced: boolean;
    allow_deletions_enforcement_level: 'off' | 'non_admins' | 'everyone';
    allow_force_pushes_enforcement_level: 'off' | 'non_admins' | 'everyone';
    authorized_actor_names: string[];
    authorized_actors_only: boolean;
    authorized_dismissal_actors_only: boolean;
    create_protected?: boolean;
    created_at: Date;
    dismiss_stale_reviews_on_push: boolean;
    id: number;
    ignore_approvals_from_contributors: boolean;
    linear_history_requirement_enforcement_level:
      | 'off'
      | 'non_admins'
      | 'everyone';
    merge_queue_enforcement_level: 'off' | 'non_admins' | 'everyone';
    name: string;
    pull_request_reviews_enforcement_level: 'off' | 'non_admins' | 'everyone';
    repository_id: number;
    require_code_owner_review: boolean;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it
     */
    require_last_push_approval?: boolean;
    required_approving_review_count: number;
    required_conversation_resolution_level: 'off' | 'non_admins' | 'everyone';
    required_deployments_enforcement_level: 'off' | 'non_admins' | 'everyone';
    required_status_checks: string[];
    required_status_checks_enforcement_level: 'off' | 'non_admins' | 'everyone';
    signature_requirement_enforcement_level: 'off' | 'non_admins' | 'everyone';
    strict_required_status_checks_policy: boolean;
    updated_at: Date;
  };
  sender: SimpleUserWebhooks;
};
/**
 * Check Run Completed Event
 */
export type WebhookCheckRunCompleted = {
  action?: 'completed';
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Check Run Completed Event
 * The check_run.completed webhook encoded with URL encoding
 */
export type WebhookCheckRunCompletedFormEncoded = {
  /**
   * A URL-encoded string of the check_run.completed JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};
/**
 * Check Run Created Event
 */
export type WebhookCheckRunCreated = {
  action?: 'created';
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Check Run Created Event
 * The check_run.created webhook encoded with URL encoding
 */
export type WebhookCheckRunCreatedFormEncoded = {
  /**
   * A URL-encoded string of the check_run.created JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};
/**
 * Check Run Requested Action Event
 */
export type WebhookCheckRunRequestedAction = {
  action: 'requested_action';
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  /**
   * The action requested by the user.
   */
  requested_action?: {
    /**
     * The integrator reference of the action requested by the user.
     */
    identifier?: string;
  };
  sender: SimpleUserWebhooks;
};
/**
 * Check Run Requested Action Event
 * The check_run.requested_action webhook encoded with URL encoding
 */
export type WebhookCheckRunRequestedActionFormEncoded = {
  /**
   * A URL-encoded string of the check_run.requested_action JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};
/**
 * Check Run Re-Requested Event
 */
export type WebhookCheckRunRerequested = {
  action?: 'rerequested';
  check_run: CheckRunWithSimpleCheckSuite;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Check Run Re-Requested Event
 * The check_run.rerequested webhook encoded with URL encoding
 */
export type WebhookCheckRunRerequestedFormEncoded = {
  /**
   * A URL-encoded string of the check_run.rerequested JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};
/**
 * check_suite completed event
 */
export type WebhookCheckSuiteCompleted = {
  action: 'completed';
  /**
   * The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
   */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'merge_group'
        | 'pull_request_review_thread'
        | 'workflow_job'
        | 'merge_queue_entry'
        | 'security_and_analysis'
        | 'projects_v2_item'
        | 'secret_scanning_alert_location'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    };
    before: string | null;
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has `completed`.
     */
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
          | 'skipped'
          | 'startup_failure'
        )
      | null;
    created_at: Date;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    /**
     * SimpleCommit
     */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status:
      | (
          | 'requested'
          | 'in_progress'
          | 'completed'
          | 'queued'
          | null
          | 'pending'
        )
      | null;
    updated_at: Date;
    /**
     * URL that points to the check suite API resource.
     */
    url: string;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * check_suite requested event
 */
export type WebhookCheckSuiteRequested = {
  action: 'requested';
  /**
   * The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
   */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'workflow_job'
        | 'merge_queue_entry'
        | 'security_and_analysis'
        | 'secret_scanning_alert_location'
        | 'projects_v2_item'
        | 'merge_group'
        | 'repository_import'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    };
    before: string | null;
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
     */
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
          | 'skipped'
        )
      | null;
    created_at: Date;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    /**
     * SimpleCommit
     */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status:
      | ('requested' | 'in_progress' | 'completed' | 'queued' | null)
      | null;
    updated_at: Date;
    /**
     * URL that points to the check suite API resource.
     */
    url: string;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * check_suite rerequested event
 */
export type WebhookCheckSuiteRerequested = {
  action: 'rerequested';
  /**
   * The [check_suite](https://docs.github.com/rest/checks/suites#get-a-check-suite).
   */
  check_suite: {
    after: string | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    app: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'merge_queue_entry'
        | 'workflow_job'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    };
    before: string | null;
    check_runs_url: string;
    /**
     * The summary conclusion for all check runs that are part of the check suite. This value will be `null` until the check run has completed.
     */
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
        )
      | null;
    created_at: Date;
    /**
     * The head branch name the changes are on.
     */
    head_branch: string | null;
    /**
     * SimpleCommit
     */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * The SHA of the head commit that is being checked.
     */
    head_sha: string;
    id: number;
    latest_check_runs_count: number;
    node_id: string;
    /**
     * An array of pull requests that match this check suite. A pull request matches a check suite if they have the same `head_sha` and `head_branch`. When the check suite's `head_branch` is in a forked repository it will be `null` and the `pull_requests` array will be empty.
     */
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    rerequestable?: boolean;
    runs_rerequestable?: boolean;
    /**
     * The summary status for all check runs that are part of the check suite. Can be `requested`, `in_progress`, or `completed`.
     */
    status:
      | ('requested' | 'in_progress' | 'completed' | 'queued' | null)
      | null;
    updated_at: Date;
    /**
     * URL that points to the check suite API resource.
     */
    url: string;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * code_scanning_alert appeared_in_branch event
 */
export type WebhookCodeScanningAlertAppearedInBranch = {
  action: 'appeared_in_branch';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: Date;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: Date | null;
    /**
     * User
     */
    dismissed_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert.
     */
    dismissed_reason:
      | ('false positive' | "won't fix" | 'used in tests' | null)
      | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    /**
     * Alert Instance
     */
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      /**
       * Identifies the configuration under which the analysis was executed.
       */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error' | null) | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'dismissed' | 'fixed';
    tool: {
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * code_scanning_alert closed_by_user event
 */
export type WebhookCodeScanningAlertClosedByUser = {
  action: 'closed_by_user';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: Date;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: Date;
    /**
     * User
     */
    dismissed_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert.
     */
    dismissed_reason:
      | ('false positive' | "won't fix" | 'used in tests' | null)
      | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    /**
     * Alert Instance
     */
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      /**
       * Identifies the configuration under which the analysis was executed.
       */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error' | null) | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'dismissed' | 'fixed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * code_scanning_alert created event
 */
export type WebhookCodeScanningAlertCreated = {
  action: 'created';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: Date | null;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: any | null;
    dismissed_by: any | null;
    dismissed_comment?: CodeScanningAlertDismissedComment;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: any | null;
    fixed_at?: any | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    instances_url?: string;
    /**
     * Alert Instance
     */
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      /**
       * Identifies the configuration under which the analysis was executed.
       */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error' | null) | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'dismissed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    } | null;
    updated_at?: string | null;
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * code_scanning_alert fixed event
 */
export type WebhookCodeScanningAlertFixed = {
  action: 'fixed';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: Date;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: Date | null;
    /**
     * User
     */
    dismissed_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The reason for dismissing or closing the alert.
     */
    dismissed_reason:
      | ('false positive' | "won't fix" | 'used in tests' | null)
      | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    instances_url?: string;
    /**
     * Alert Instance
     */
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      /**
       * Identifies the configuration under which the analysis was executed.
       */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error' | null) | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'fixed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * code_scanning_alert reopened event
 */
export type WebhookCodeScanningAlertReopened = {
  action: 'reopened';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: Date;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: string | null;
    dismissed_by: any | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: string | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    /**
     * Alert Instance
     */
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      /**
       * Identifies the configuration under which the analysis was executed.
       */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      full_description?: string;
      help?: string | null;
      /**
       * A link to the documentation for the rule used to detect the alert.
       */
      help_uri?: string | null;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      name?: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error' | null) | null;
      tags?: string[] | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'dismissed' | 'fixed';
    tool: {
      guid?: string | null;
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  } | null;
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string | null;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * code_scanning_alert reopened_by_user event
 */
export type WebhookCodeScanningAlertReopenedByUser = {
  action: 'reopened_by_user';
  /**
   * The code scanning alert involved in the event.
   */
  alert: {
    /**
     * The time that the alert was created in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ.`
     */
    created_at: Date;
    /**
     * The time that the alert was dismissed in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    dismissed_at: any | null;
    dismissed_by: any | null;
    /**
     * The reason for dismissing or closing the alert. Can be one of: `false positive`, `won't fix`, and `used in tests`.
     */
    dismissed_reason: any | null;
    /**
     * The GitHub URL of the alert resource.
     */
    html_url: string;
    /**
     * Alert Instance
     */
    most_recent_instance?: {
      /**
       * Identifies the configuration under which the analysis was executed. For example, in GitHub Actions this includes the workflow filename and job name.
       */
      analysis_key: string;
      /**
       * Identifies the configuration under which the analysis was executed.
       */
      category?: string;
      classifications?: string[];
      commit_sha?: string;
      /**
       * Identifies the variable values associated with the environment in which the analysis that generated this alert instance was performed, such as the language that was analyzed.
       */
      environment: string;
      location?: {
        end_column?: number;
        end_line?: number;
        path?: string;
        start_column?: number;
        start_line?: number;
      };
      message?: {
        text?: string;
      };
      /**
       * The full Git reference, formatted as `refs/heads/<branch name>`.
       */
      ref: string;
      /**
       * State of a code scanning alert.
       */
      state: 'open' | 'dismissed' | 'fixed';
    } | null;
    /**
     * The code scanning alert number.
     */
    number: number;
    rule: {
      /**
       * A short description of the rule used to detect the alert.
       */
      description: string;
      /**
       * A unique identifier for the rule used to detect the alert.
       */
      id: string;
      /**
       * The severity of the alert.
       */
      severity: ('none' | 'note' | 'warning' | 'error' | null) | null;
    };
    /**
     * State of a code scanning alert.
     */
    state: 'open' | 'fixed';
    tool: {
      /**
       * The name of the tool used to generate the code scanning analysis alert.
       */
      name: string;
      /**
       * The version of the tool used to detect the alert.
       */
      version: string | null;
    };
    url: string;
  };
  /**
   * The commit SHA of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  commit_oid: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The Git reference of the code scanning alert. When the action is `reopened_by_user` or `closed_by_user`, the event was triggered by the `sender` and this value will be empty.
   */
  ref: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * commit_comment created event
 */
export type WebhookCommitCommentCreated = {
  /**
   * The action performed. Can be `created`.
   */
  action: 'created';
  /**
   * The [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment) resource.
   */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: string;
    html_url: string;
    /**
     * The ID of the commit comment.
     */
    id: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the commit comment.
     */
    node_id: string;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string | null;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * create event
 */
export type WebhookCreate = {
  /**
   * The repository's current description.
   */
  description: string | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The name of the repository's default branch (usually `main`).
   */
  master_branch: string;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The pusher type for the event. Can be either `user` or a deploy key.
   */
  pusher_type: string;
  /**
   * The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
   */
  ref: string;
  /**
   * The type of Git ref object created in the repository.
   */
  ref_type: 'tag' | 'branch';
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * custom property created event
 */
export type WebhookCustomPropertyCreated = {
  action: 'created';
  definition: OrgCustomProperty;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * custom property deleted event
 */
export type WebhookCustomPropertyDeleted = {
  action: 'deleted';
  definition: {
    /**
     * The name of the property that was deleted.
     */
    property_name: string;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * custom property updated event
 */
export type WebhookCustomPropertyUpdated = {
  action: 'updated';
  definition: OrgCustomProperty;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * Custom property values updated event
 */
export type WebhookCustomPropertyValuesUpdated = {
  action: 'updated';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  repository: RepositoryWebhooks;
  organization: OrganizationSimpleWebhooks;
  sender?: SimpleUserWebhooks;
  /**
   * The new custom property values for the repository.
   */
  new_property_values: CustomPropertyValue[];
  /**
   * The old custom property values for the repository.
   */
  old_property_values: CustomPropertyValue[];
};
/**
 * delete event
 */
export type WebhookDelete = {
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The pusher type for the event. Can be either `user` or a deploy key.
   */
  pusher_type: string;
  /**
   * The [`git ref`](https://docs.github.com/rest/git/refs#get-a-reference) resource.
   */
  ref: string;
  /**
   * The type of Git ref object deleted in the repository.
   */
  ref_type: 'tag' | 'branch';
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Dependabot alert auto-dismissed event
 */
export type WebhookDependabotAlertAutoDismissed = {
  action: 'auto_dismissed';
  alert: DependabotAlert;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  enterprise?: EnterpriseWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Dependabot alert auto-reopened event
 */
export type WebhookDependabotAlertAutoReopened = {
  action: 'auto_reopened';
  alert: DependabotAlert;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  enterprise?: EnterpriseWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Dependabot alert created event
 */
export type WebhookDependabotAlertCreated = {
  action: 'created';
  alert: DependabotAlert;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  enterprise?: EnterpriseWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Dependabot alert dismissed event
 */
export type WebhookDependabotAlertDismissed = {
  action: 'dismissed';
  alert: DependabotAlert;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  enterprise?: EnterpriseWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Dependabot alert fixed event
 */
export type WebhookDependabotAlertFixed = {
  action: 'fixed';
  alert: DependabotAlert;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  enterprise?: EnterpriseWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Dependabot alert reintroduced event
 */
export type WebhookDependabotAlertReintroduced = {
  action: 'reintroduced';
  alert: DependabotAlert;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  enterprise?: EnterpriseWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Dependabot alert reopened event
 */
export type WebhookDependabotAlertReopened = {
  action: 'reopened';
  alert: DependabotAlert;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  enterprise?: EnterpriseWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * deploy_key created event
 */
export type WebhookDeployKeyCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
   */
  key: {
    added_by?: string | null;
    created_at: string;
    id: number;
    key: string;
    last_used?: string | null;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * deploy_key deleted event
 */
export type WebhookDeployKeyDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The [`deploy key`](https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key) resource.
   */
  key: {
    added_by?: string | null;
    created_at: string;
    id: number;
    key: string;
    last_used?: string | null;
    read_only: boolean;
    title: string;
    url: string;
    verified: boolean;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * deployment created event
 */
export type WebhookDeploymentCreated = {
  action: 'created';
  /**
   * Deployment
   * The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: any | string;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'workflow_job'
        | 'pull_request_review_thread'
        | 'merge_queue_entry'
        | 'secret_scanning_alert_location'
        | 'merge_group'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    production_environment?: boolean;
    ref: string;
    repository_url: string;
    sha: string;
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    url: string;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * Workflow
   */
  workflow: {
    badge_url: string;
    created_at: Date;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: Date;
    url: string;
  } | null;
  /**
   * Deployment Workflow Run
   */
  workflow_run: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
        )
      | null;
    created_at: Date;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: any | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: any | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status:
      | 'requested'
      | 'in_progress'
      | 'completed'
      | 'queued'
      | 'waiting'
      | 'pending';
    /**
     * User
     */
    triggering_actor?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url?: string;
  } | null;
};
/**
 * deployment protection rule requested event
 */
export type WebhookDeploymentProtectionRuleRequested = {
  action?: 'requested';
  /**
   * The name of the environment that has the deployment protection rule.
   */
  environment?: string;
  /**
   * The event that triggered the deployment protection rule.
   */
  event?: string;
  /**
   * The URL to review the deployment protection rule.
   */
  deployment_callback_url?: string;
  deployment?: Deployment;
  pull_requests?: PullRequest[];
  repository?: RepositoryWebhooks;
  organization?: OrganizationSimpleWebhooks;
  installation?: SimpleInstallation;
  sender?: SimpleUserWebhooks;
};
export type WebhookDeploymentReviewApproved = {
  action: 'approved';
  approver?: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
  };
  comment?: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  reviewers?: {
    /**
     * User
     */
    reviewer?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    type?: 'User';
  }[];
  sender: SimpleUserWebhooks;
  since: string;
  workflow_job_run?: {
    conclusion: any | null;
    created_at: string;
    environment: string;
    html_url: string;
    id: number;
    name: any | null;
    status: string;
    updated_at: string;
  };
  workflow_job_runs?: {
    conclusion?: any | null;
    created_at?: string;
    environment?: string;
    html_url?: string;
    id?: number;
    name?: string | null;
    status?: string;
    updated_at?: string;
  }[];
  /**
   * Deployment Workflow Run
   */
  workflow_run: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
        )
      | null;
    created_at: Date;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: any | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status:
      | 'requested'
      | 'in_progress'
      | 'completed'
      | 'queued'
      | 'waiting'
      | 'pending';
    /**
     * User
     */
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url?: string;
  } | null;
};
export type WebhookDeploymentReviewRejected = {
  action: 'rejected';
  approver?: {
    avatar_url?: string;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id?: number;
    login?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    url?: string;
  };
  comment?: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  reviewers?: {
    /**
     * User
     */
    reviewer?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    type?: 'User';
  }[];
  sender: SimpleUserWebhooks;
  since: string;
  workflow_job_run?: {
    conclusion: any | null;
    created_at: string;
    environment: string;
    html_url: string;
    id: number;
    name: any | null;
    status: string;
    updated_at: string;
  };
  workflow_job_runs?: {
    conclusion?: string | null;
    created_at?: string;
    environment?: string;
    html_url?: string;
    id?: number;
    name?: string | null;
    status?: string;
    updated_at?: string;
  }[];
  /**
   * Deployment Workflow Run
   */
  workflow_run: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
        )
      | null;
    created_at: Date;
    event: string;
    head_branch: string;
    head_commit?: any | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status: 'requested' | 'in_progress' | 'completed' | 'queued' | 'waiting';
    /**
     * User
     */
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url?: string;
    display_title: string;
  } | null;
};
export type WebhookDeploymentReviewRequested = {
  action: 'requested';
  enterprise?: EnterpriseWebhooks;
  environment: string;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  /**
   * User
   */
  requestor: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  reviewers: {
    /**
     * User
     */
    reviewer?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login?: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    type?: 'User' | 'Team';
  }[];
  sender: SimpleUserWebhooks;
  since: string;
  workflow_job_run: {
    conclusion: any | null;
    created_at: string;
    environment: string;
    html_url: string;
    id: number;
    name: string | null;
    status: string;
    updated_at: string;
  };
  /**
   * Deployment Workflow Run
   */
  workflow_run: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
        )
      | null;
    created_at: Date;
    event: string;
    head_branch: string;
    head_commit?: any | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: string | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status:
      | 'requested'
      | 'in_progress'
      | 'completed'
      | 'queued'
      | 'waiting'
      | 'pending';
    /**
     * User
     */
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url?: string;
    display_title: string;
  } | null;
};
/**
 * deployment_status created event
 */
export type WebhookDeploymentStatusCreated = {
  action: 'created';
  check_run?: {
    completed_at: Date | null;
    /**
     * The result of the completed check run. This value will be `null` until the check run has completed.
     */
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | 'skipped'
          | null
        )
      | null;
    details_url: string;
    external_id: string;
    /**
     * The SHA of the commit that is being checked.
     */
    head_sha: string;
    html_url: string;
    /**
     * The id of the check.
     */
    id: number;
    /**
     * The name of the check run.
     */
    name: string;
    node_id: string;
    started_at: Date;
    /**
     * The current status of the check run. Can be `queued`, `in_progress`, or `completed`.
     */
    status: 'queued' | 'in_progress' | 'completed' | 'waiting' | 'pending';
    url: string;
  } | null;
  /**
   * Deployment
   * The [deployment](https://docs.github.com/rest/deployments/deployments#list-deployments).
   */
  deployment: {
    created_at: string;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    environment: string;
    id: number;
    node_id: string;
    original_environment: string;
    payload: (string | any) | null;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'merge_queue_entry'
        | 'workflow_job'
        | 'pull_request_review_thread'
        | 'secret_scanning_alert_location'
        | 'merge_group'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    production_environment?: boolean;
    ref: string;
    repository_url: string;
    sha: string;
    statuses_url: string;
    task: string;
    transient_environment?: boolean;
    updated_at: string;
    url: string;
  };
  /**
   * The [deployment status](https://docs.github.com/rest/deployments/statuses#list-deployment-statuses).
   */
  deployment_status: {
    created_at: string;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    deployment_url: string;
    /**
     * The optional human-readable description added to the status.
     */
    description: string;
    environment: string;
    environment_url?: string;
    id: number;
    log_url?: string;
    node_id: string;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'merge_queue_entry'
        | 'workflow_job'
        | 'merge_group'
        | 'secret_scanning_alert_location'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    repository_url: string;
    /**
     * The new state. Can be `pending`, `success`, `failure`, or `error`.
     */
    state: string;
    /**
     * The optional link added to the status.
     */
    target_url: string;
    updated_at: string;
    url: string;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * Workflow
   */
  workflow?: {
    badge_url: string;
    created_at: Date;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: Date;
    url: string;
  } | null;
  /**
   * Deployment Workflow Run
   */
  workflow_run?: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url?: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
          | 'startup_failure'
        )
      | null;
    created_at: Date;
    display_title: string;
    event: string;
    head_branch: string;
    head_commit?: any | null;
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url?: string;
    logs_url?: string;
    name: string;
    node_id: string;
    path: string;
    previous_attempt_url?: any | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: any | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status:
      | 'requested'
      | 'in_progress'
      | 'completed'
      | 'queued'
      | 'waiting'
      | 'pending';
    /**
     * User
     */
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url?: string;
  } | null;
};
/**
 * discussion answered event
 */
export type WebhookDiscussionAnswered = {
  action: 'answered';
  answer: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: Date;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: any | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: Date;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion category changed event
 */
export type WebhookDiscussionCategoryChanged = {
  action: 'category_changed';
  changes: {
    category: {
      from: {
        created_at: Date;
        description: string;
        emoji: string;
        id: number;
        is_answerable: boolean;
        name: string;
        node_id?: string;
        repository_id: number;
        slug: string;
        updated_at: string;
      };
    };
  };
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion closed event
 */
export type WebhookDiscussionClosed = {
  action: 'closed';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion_comment created event
 */
export type WebhookDiscussionCommentCreated = {
  action: 'created';
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion_comment deleted event
 */
export type WebhookDiscussionCommentDeleted = {
  action: 'deleted';
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion_comment edited event
 */
export type WebhookDiscussionCommentEdited = {
  action: 'edited';
  changes: {
    body: {
      from: string;
    };
  };
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: string;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: number | null;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion created event
 */
export type WebhookDiscussionCreated = {
  action: 'created';
  discussion: {
    active_lock_reason: string | null;
    answer_chosen_at: string | null;
    /**
     * User
     */
    answer_chosen_by: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    answer_html_url: string | null;
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string | null;
    category: {
      created_at: Date;
      description: string;
      emoji: string;
      id: number;
      is_answerable: boolean;
      name: string;
      node_id?: string;
      repository_id: number;
      slug: string;
      updated_at: string;
    };
    comments: number;
    created_at: Date;
    html_url: string;
    id: number;
    locked: boolean;
    node_id: string;
    number: number;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    state: 'open' | 'locked' | 'converting' | 'transferring';
    timeline_url?: string;
    title: string;
    updated_at: Date;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: any | null;
    answer_chosen_at: any | null;
    answer_chosen_by: any | null;
    answer_html_url: string | null;
    author_association?: string;
    body?: string | null;
    category?: {
      created_at?: string;
      description?: string;
      emoji?: string;
      id?: number;
      is_answerable?: boolean;
      name?: string;
      node_id?: string;
      repository_id?: number;
      slug?: string;
      updated_at?: string;
    };
    comments?: number;
    created_at?: string;
    html_url?: string;
    id?: number;
    locked: false;
    node_id?: string;
    number?: number;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: 'open' | 'converting' | 'transferring';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion deleted event
 */
export type WebhookDiscussionDeleted = {
  action: 'deleted';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion edited event
 */
export type WebhookDiscussionEdited = {
  action: 'edited';
  changes?: {
    body?: {
      from: string;
    };
    title?: {
      from: string;
    };
  };
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion labeled event
 */
export type WebhookDiscussionLabeled = {
  action: 'labeled';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Label
   */
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion locked event
 */
export type WebhookDiscussionLocked = {
  action: 'locked';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion pinned event
 */
export type WebhookDiscussionPinned = {
  action: 'pinned';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion reopened event
 */
export type WebhookDiscussionReopened = {
  action: 'reopened';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion transferred event
 */
export type WebhookDiscussionTransferred = {
  action: 'transferred';
  changes: {
    new_discussion: Discussion;
    new_repository: RepositoryWebhooks;
  };
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion unanswered event
 */
export type WebhookDiscussionUnanswered = {
  action: 'unanswered';
  discussion: Discussion;
  old_answer: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    body: string;
    child_comment_count: number;
    created_at: Date;
    discussion_id: number;
    html_url: string;
    id: number;
    node_id: string;
    parent_id: any | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    updated_at: Date;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * discussion unlabeled event
 */
export type WebhookDiscussionUnlabeled = {
  action: 'unlabeled';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Label
   */
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion unlocked event
 */
export type WebhookDiscussionUnlocked = {
  action: 'unlocked';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * discussion unpinned event
 */
export type WebhookDiscussionUnpinned = {
  action: 'unpinned';
  discussion: Discussion;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * fork event
 * A user forks a repository.
 */
export type WebhookFork = {
  enterprise?: EnterpriseWebhooks;
  /**
   * The created [`repository`](https://docs.github.com/rest/repos/repos#get-a-repository) resource.
   */
  forkee: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | Date;
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @defaultValue true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @defaultValue true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @defaultValue true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @defaultValue true
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | Date) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: string[];
    trees_url: string;
    updated_at: Date;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
    /**
     * Whether to require contributors to sign off on web-based commits
     */
    web_commit_signoff_required?: boolean;
  } & {
    allow_forking?: boolean;
    archive_url?: string;
    archived?: boolean;
    assignees_url?: string;
    blobs_url?: string;
    branches_url?: string;
    clone_url?: string;
    collaborators_url?: string;
    comments_url?: string;
    commits_url?: string;
    compare_url?: string;
    contents_url?: string;
    contributors_url?: string;
    created_at?: string;
    default_branch?: string;
    deployments_url?: string;
    description?: string | null;
    disabled?: boolean;
    downloads_url?: string;
    events_url?: string;
    fork?: true;
    forks?: number;
    forks_count?: number;
    forks_url?: string;
    full_name?: string;
    git_commits_url?: string;
    git_refs_url?: string;
    git_tags_url?: string;
    git_url?: string;
    has_downloads?: boolean;
    has_issues?: boolean;
    has_pages?: boolean;
    has_projects?: boolean;
    has_wiki?: boolean;
    homepage?: string | null;
    hooks_url?: string;
    html_url?: string;
    id?: number;
    is_template?: boolean;
    issue_comment_url?: string;
    issue_events_url?: string;
    issues_url?: string;
    keys_url?: string;
    labels_url?: string;
    language?: any | null;
    languages_url?: string;
    license?: any | null;
    merges_url?: string;
    milestones_url?: string;
    mirror_url?: any | null;
    name?: string;
    node_id?: string;
    notifications_url?: string;
    open_issues?: number;
    open_issues_count?: number;
    owner?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    private?: boolean;
    public?: boolean;
    pulls_url?: string;
    pushed_at?: string;
    releases_url?: string;
    size?: number;
    ssh_url?: string;
    stargazers_count?: number;
    stargazers_url?: string;
    statuses_url?: string;
    subscribers_url?: string;
    subscription_url?: string;
    svn_url?: string;
    tags_url?: string;
    teams_url?: string;
    topics?: (any | null)[];
    trees_url?: string;
    updated_at?: string;
    url?: string;
    visibility?: string;
    watchers?: number;
    watchers_count?: number;
  };
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * github_app_authorization revoked event
 */
export type WebhookGithubAppAuthorizationRevoked = {
  action: 'revoked';
  sender: SimpleUserWebhooks;
};
/**
 * gollum event
 */
export type WebhookGollum = {
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * The pages that were updated.
   */
  pages: {
    /**
     * The action that was performed on the page. Can be `created` or `edited`.
     */
    action: 'created' | 'edited';
    /**
     * Points to the HTML wiki page.
     */
    html_url: string;
    /**
     * The name of the page.
     */
    page_name: string;
    /**
     * The latest commit SHA of the page.
     */
    sha: string;
    summary: string | null;
    /**
     * The current page title.
     */
    title: string;
  }[];
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * installation created event
 */
export type WebhookInstallationCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation: Installation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: RepositoryWebhooks;
  /**
   * User
   */
  requester?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  sender: SimpleUserWebhooks;
};
/**
 * installation deleted event
 */
export type WebhookInstallationDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation: Installation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: RepositoryWebhooks;
  requester?: any | null;
  sender: SimpleUserWebhooks;
};
/**
 * installation new_permissions_accepted event
 */
export type WebhookInstallationNewPermissionsAccepted = {
  action: 'new_permissions_accepted';
  enterprise?: EnterpriseWebhooks;
  installation: Installation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: RepositoryWebhooks;
  requester?: any | null;
  sender: SimpleUserWebhooks;
};
/**
 * installation_repositories added event
 */
export type WebhookInstallationRepositoriesAdded = {
  action: 'added';
  enterprise?: EnterpriseWebhooks;
  installation: Installation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * An array of repository objects, which were added to the installation.
   */
  repositories_added: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  /**
   * An array of repository objects, which were removed from the installation.
   */
  repositories_removed: {
    full_name?: string;
    /**
     * Unique identifier of the repository
     */
    id?: number;
    /**
     * The name of the repository.
     */
    name?: string;
    node_id?: string;
    /**
     * Whether the repository is private or public.
     */
    private?: boolean;
  }[];
  repository?: RepositoryWebhooks;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  /**
   * User
   */
  requester: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  sender: SimpleUserWebhooks;
};
/**
 * installation_repositories removed event
 */
export type WebhookInstallationRepositoriesRemoved = {
  action: 'removed';
  enterprise?: EnterpriseWebhooks;
  installation: Installation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * An array of repository objects, which were added to the installation.
   */
  repositories_added: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  /**
   * An array of repository objects, which were removed from the installation.
   */
  repositories_removed: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: RepositoryWebhooks;
  /**
   * Describe whether all repositories have been selected or there's a selection involved
   */
  repository_selection: 'all' | 'selected';
  /**
   * User
   */
  requester: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  sender: SimpleUserWebhooks;
};
/**
 * installation suspend event
 */
export type WebhookInstallationSuspend = {
  action: 'suspend';
  enterprise?: EnterpriseWebhooks;
  installation: Installation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: RepositoryWebhooks;
  requester?: any | null;
  sender: SimpleUserWebhooks;
};
export type WebhookInstallationTargetRenamed = {
  account: {
    archived_at?: string | null;
    avatar_url: string;
    created_at?: string;
    description?: any | null;
    events_url?: string;
    followers?: number;
    followers_url?: string;
    following?: number;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    has_organization_projects?: boolean;
    has_repository_projects?: boolean;
    hooks_url?: string;
    html_url: string;
    id: number;
    is_verified?: boolean;
    issues_url?: string;
    login?: string;
    members_url?: string;
    name?: string;
    node_id: string;
    organizations_url?: string;
    public_gists?: number;
    public_members_url?: string;
    public_repos?: number;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    slug?: string;
    starred_url?: string;
    subscriptions_url?: string;
    type?: string;
    updated_at?: string;
    url?: string;
    website_url?: any | null;
  };
  action: 'renamed';
  changes: {
    login?: {
      from: string;
    };
    slug?: {
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
  target_type: string;
};
/**
 * installation unsuspend event
 */
export type WebhookInstallationUnsuspend = {
  action: 'unsuspend';
  enterprise?: EnterpriseWebhooks;
  installation: Installation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * An array of repository objects that the installation can access.
   */
  repositories?: {
    full_name: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
  }[];
  repository?: RepositoryWebhooks;
  requester?: any | null;
  sender: SimpleUserWebhooks;
};
/**
 * issue_comment created event
 */
export type WebhookIssueCommentCreated = {
  action: 'created';
  /**
   * issue comment
   * The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
   */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue comment
     */
    body: string;
    created_at: Date;
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    issue_url: string;
    node_id: string;
    performed_via_github_app: NullableIntegration;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: Date;
    /**
     * URL for the issue comment
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: any | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issue_comment deleted event
 */
export type WebhookIssueCommentDeleted = {
  action: 'deleted';
  /**
   * issue comment
   * The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
   */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue comment
     */
    body: string;
    created_at: Date;
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    issue_url: string;
    node_id: string;
    performed_via_github_app: NullableIntegration;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: Date;
    /**
     * URL for the issue comment
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: any | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issue_comment edited event
 */
export type WebhookIssueCommentEdited = {
  action: 'edited';
  /**
   * The changes to the comment.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
  };
  /**
   * issue comment
   * The [comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment) itself.
   */
  comment: {
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue comment
     */
    body: string;
    created_at: Date;
    html_url: string;
    /**
     * Unique identifier of the issue comment
     */
    id: number;
    issue_url: string;
    node_id: string;
    performed_via_github_app: NullableIntegration;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    updated_at: Date;
    /**
     * URL for the issue comment
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) the comment belongs to.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url?: string;
    locked: boolean;
    milestone?: any | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues assigned event
 */
export type WebhookIssuesAssigned = {
  /**
   * The action that was performed.
   */
  action: 'assigned';
  /**
   * User
   */
  assignee?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues closed event
 */
export type WebhookIssuesClosed = {
  /**
   * The action that was performed.
   */
  action: 'closed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'security_and_analysis'
        | 'reminder'
        | 'pull_request_review_thread'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: any | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (any | null)[];
    labels_url?: string;
    locked?: boolean;
    milestone?: any | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: 'closed' | 'open';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues deleted event
 */
export type WebhookIssuesDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues demilestoned event
 */
export type WebhookIssuesDemilestoned = {
  action: 'demilestoned';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: any | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (any | null)[];
    labels_url?: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone?: {
    closed_at: Date | null;
    closed_issues: number;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: Date | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: Date;
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues edited event
 */
export type WebhookIssuesEdited = {
  action: 'edited';
  /**
   * The changes to the issue.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title.
       */
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'security_and_analysis'
        | 'pull_request_review_thread'
        | 'reminder'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  /**
   * Label
   */
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues labeled event
 */
export type WebhookIssuesLabeled = {
  action: 'labeled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'reminder'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  /**
   * Label
   */
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues locked event
 */
export type WebhookIssuesLocked = {
  action: 'locked';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'security_and_analysis'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    assignee?: any | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (any | null)[];
    labels_url?: string;
    locked: true;
    milestone?: any | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues milestoned event
 */
export type WebhookIssuesMilestoned = {
  action: 'milestoned';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: any | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (any | null)[];
    labels_url?: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    };
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: Date | null;
    closed_issues: number;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: Date | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: Date;
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues opened event
 */
export type WebhookIssuesOpened = {
  action: 'opened';
  changes?: {
    /**
     * Issue
     * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
     */
    old_issue: {
      active_lock_reason:
        | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
        | null;
      /**
       * User
       */
      assignee?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      assignees: ({
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null)[];
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * Contents of the issue
       */
      body: string | null;
      closed_at: Date | null;
      comments: number;
      comments_url: string;
      created_at: Date;
      draft?: boolean;
      events_url: string;
      html_url: string;
      id: number;
      labels?: {
        /**
         * 6-character hex code, without the leading #, identifying the color
         */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /**
         * The name of the label.
         */
        name: string;
        node_id: string;
        /**
         * URL for the label
         */
        url: string;
      }[];
      labels_url: string;
      locked?: boolean;
      /**
       * Milestone
       * A collection of related issues and pull requests.
       */
      milestone: {
        closed_at: Date | null;
        closed_issues: number;
        created_at: Date;
        /**
         * User
         */
        creator: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        description: string | null;
        due_on: Date | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        /**
         * The number of the milestone.
         */
        number: number;
        open_issues: number;
        /**
         * The state of the milestone.
         */
        state: 'open' | 'closed';
        /**
         * The title of the milestone.
         */
        title: string;
        updated_at: Date;
        url: string;
      } | null;
      node_id: string;
      number: number;
      /**
       * App
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        created_at: Date | null;
        description: string | null;
        /**
         * The list of events for the GitHub app
         */
        events?: (
          | 'branch_protection_rule'
          | 'check_run'
          | 'check_suite'
          | 'code_scanning_alert'
          | 'commit_comment'
          | 'content_reference'
          | 'create'
          | 'delete'
          | 'deployment'
          | 'deployment_review'
          | 'deployment_status'
          | 'deploy_key'
          | 'discussion'
          | 'discussion_comment'
          | 'fork'
          | 'gollum'
          | 'issues'
          | 'issue_comment'
          | 'label'
          | 'member'
          | 'membership'
          | 'milestone'
          | 'organization'
          | 'org_block'
          | 'page_build'
          | 'project'
          | 'project_card'
          | 'project_column'
          | 'public'
          | 'pull_request'
          | 'pull_request_review'
          | 'pull_request_review_comment'
          | 'push'
          | 'registry_package'
          | 'release'
          | 'repository'
          | 'repository_dispatch'
          | 'secret_scanning_alert'
          | 'star'
          | 'status'
          | 'team'
          | 'team_add'
          | 'watch'
          | 'workflow_dispatch'
          | 'workflow_run'
        )[];
        external_url: string | null;
        html_url: string;
        /**
         * Unique identifier of the GitHub app
         */
        id: number | null;
        /**
         * The name of the GitHub app
         */
        name: string;
        node_id: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * The set of permissions for the GitHub app
         */
        permissions?: {
          actions?: 'read' | 'write';
          administration?: 'read' | 'write';
          checks?: 'read' | 'write';
          content_references?: 'read' | 'write';
          contents?: 'read' | 'write';
          deployments?: 'read' | 'write';
          discussions?: 'read' | 'write';
          emails?: 'read' | 'write';
          environments?: 'read' | 'write';
          issues?: 'read' | 'write';
          keys?: 'read' | 'write';
          members?: 'read' | 'write';
          metadata?: 'read' | 'write';
          organization_administration?: 'read' | 'write';
          organization_hooks?: 'read' | 'write';
          organization_packages?: 'read' | 'write';
          organization_plan?: 'read' | 'write';
          organization_projects?: 'read' | 'write';
          organization_secrets?: 'read' | 'write';
          organization_self_hosted_runners?: 'read' | 'write';
          organization_user_blocking?: 'read' | 'write';
          packages?: 'read' | 'write';
          pages?: 'read' | 'write';
          pull_requests?: 'read' | 'write';
          repository_hooks?: 'read' | 'write';
          repository_projects?: 'read' | 'write';
          secret_scanning_alerts?: 'read' | 'write';
          secrets?: 'read' | 'write';
          security_events?: 'read' | 'write';
          security_scanning_alert?: 'read' | 'write';
          single_file?: 'read' | 'write';
          statuses?: 'read' | 'write';
          team_discussions?: 'read' | 'write';
          vulnerability_alerts?: 'read' | 'write';
          workflows?: 'read' | 'write';
        };
        /**
         * The slug name of the GitHub app
         */
        slug?: string;
        updated_at: Date | null;
      } | null;
      pull_request?: {
        diff_url?: string;
        html_url?: string;
        merged_at?: Date | null;
        patch_url?: string;
        url?: string;
      };
      /**
       * Reactions
       */
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state?: 'open' | 'closed';
      state_reason?: string | null;
      timeline_url?: string;
      /**
       * Title of the issue
       */
      title: string;
      updated_at: Date;
      /**
       * URL for the issue
       */
      url: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    } | null;
    /**
     * Repository
     * A git repository
     */
    old_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @defaultValue true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @defaultValue true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @defaultValue true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      archive_url: string;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: number | Date;
      /**
       * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
       */
      custom_properties?: {
        [key: string]: any;
      };
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      /**
       * Whether the repository has discussions enabled.
       */
      has_discussions?: boolean;
      /**
       * Whether downloads are enabled.
       * @defaultValue true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @defaultValue true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @defaultValue true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @defaultValue true
       */
      has_wiki: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      /**
       * License
       */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        url: string | null;
      } | null;
      master_branch?: string;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      pulls_url: string;
      pushed_at: (number | Date) | null;
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: string[];
      trees_url: string;
      updated_at: Date;
      url: string;
      visibility: 'public' | 'private' | 'internal';
      watchers: number;
      watchers_count: number;
      /**
       * Whether to require commit signoff.
       */
      web_commit_signoff_required?: boolean;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'security_and_analysis'
        | 'pull_request_review_thread'
        | 'reminder'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues pinned event
 */
export type WebhookIssuesPinned = {
  action: 'pinned';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues reopened event
 */
export type WebhookIssuesReopened = {
  action: 'reopened';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'pull_request_review_thread'
        | 'reminder'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write' | 'admin';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  } & {
    active_lock_reason?: string | null;
    assignee?: any | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (any | null)[];
    labels_url?: string;
    locked?: boolean;
    milestone?: any | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state: 'open' | 'closed';
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues transferred event
 */
export type WebhookIssuesTransferred = {
  action: 'transferred';
  changes: {
    /**
     * Issue
     * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
     */
    new_issue: {
      active_lock_reason:
        | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
        | null;
      /**
       * User
       */
      assignee?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      assignees: ({
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null)[];
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * Contents of the issue
       */
      body: string | null;
      closed_at: Date | null;
      comments: number;
      comments_url: string;
      created_at: Date;
      draft?: boolean;
      events_url: string;
      html_url: string;
      id: number;
      labels?: {
        /**
         * 6-character hex code, without the leading #, identifying the color
         */
        color: string;
        default: boolean;
        description: string | null;
        id: number;
        /**
         * The name of the label.
         */
        name: string;
        node_id: string;
        /**
         * URL for the label
         */
        url: string;
      }[];
      labels_url: string;
      locked?: boolean;
      /**
       * Milestone
       * A collection of related issues and pull requests.
       */
      milestone: {
        closed_at: Date | null;
        closed_issues: number;
        created_at: Date;
        /**
         * User
         */
        creator: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        description: string | null;
        due_on: Date | null;
        html_url: string;
        id: number;
        labels_url: string;
        node_id: string;
        /**
         * The number of the milestone.
         */
        number: number;
        open_issues: number;
        /**
         * The state of the milestone.
         */
        state: 'open' | 'closed';
        /**
         * The title of the milestone.
         */
        title: string;
        updated_at: Date;
        url: string;
      } | null;
      node_id: string;
      number: number;
      /**
       * App
       * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
       */
      performed_via_github_app?: {
        created_at: Date | null;
        description: string | null;
        /**
         * The list of events for the GitHub app
         */
        events?: (
          | 'branch_protection_rule'
          | 'check_run'
          | 'check_suite'
          | 'code_scanning_alert'
          | 'commit_comment'
          | 'content_reference'
          | 'create'
          | 'delete'
          | 'deployment'
          | 'deployment_review'
          | 'deployment_status'
          | 'deploy_key'
          | 'discussion'
          | 'discussion_comment'
          | 'fork'
          | 'gollum'
          | 'issues'
          | 'issue_comment'
          | 'label'
          | 'member'
          | 'membership'
          | 'milestone'
          | 'organization'
          | 'org_block'
          | 'page_build'
          | 'project'
          | 'project_card'
          | 'project_column'
          | 'public'
          | 'pull_request'
          | 'pull_request_review'
          | 'pull_request_review_comment'
          | 'push'
          | 'registry_package'
          | 'release'
          | 'repository'
          | 'repository_dispatch'
          | 'secret_scanning_alert'
          | 'star'
          | 'status'
          | 'team'
          | 'team_add'
          | 'watch'
          | 'workflow_dispatch'
          | 'workflow_run'
        )[];
        external_url: string | null;
        html_url: string;
        /**
         * Unique identifier of the GitHub app
         */
        id: number | null;
        /**
         * The name of the GitHub app
         */
        name: string;
        node_id: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * The set of permissions for the GitHub app
         */
        permissions?: {
          actions?: 'read' | 'write';
          administration?: 'read' | 'write';
          checks?: 'read' | 'write';
          content_references?: 'read' | 'write';
          contents?: 'read' | 'write';
          deployments?: 'read' | 'write';
          discussions?: 'read' | 'write';
          emails?: 'read' | 'write';
          environments?: 'read' | 'write';
          issues?: 'read' | 'write';
          keys?: 'read' | 'write';
          members?: 'read' | 'write';
          metadata?: 'read' | 'write';
          organization_administration?: 'read' | 'write';
          organization_hooks?: 'read' | 'write';
          organization_packages?: 'read' | 'write';
          organization_plan?: 'read' | 'write';
          organization_projects?: 'read' | 'write';
          organization_secrets?: 'read' | 'write';
          organization_self_hosted_runners?: 'read' | 'write';
          organization_user_blocking?: 'read' | 'write';
          packages?: 'read' | 'write';
          pages?: 'read' | 'write';
          pull_requests?: 'read' | 'write';
          repository_hooks?: 'read' | 'write';
          repository_projects?: 'read' | 'write';
          secret_scanning_alerts?: 'read' | 'write';
          secrets?: 'read' | 'write';
          security_events?: 'read' | 'write';
          security_scanning_alert?: 'read' | 'write';
          single_file?: 'read' | 'write';
          statuses?: 'read' | 'write';
          team_discussions?: 'read' | 'write';
          vulnerability_alerts?: 'read' | 'write';
          workflows?: 'read' | 'write';
        };
        /**
         * The slug name of the GitHub app
         */
        slug?: string;
        updated_at: Date | null;
      } | null;
      pull_request?: {
        diff_url?: string;
        html_url?: string;
        merged_at?: Date | null;
        patch_url?: string;
        url?: string;
      };
      /**
       * Reactions
       */
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      repository_url: string;
      /**
       * State of the issue; either 'open' or 'closed'
       */
      state?: 'open' | 'closed';
      state_reason?: string | null;
      timeline_url?: string;
      /**
       * Title of the issue
       */
      title: string;
      updated_at: Date;
      /**
       * URL for the issue
       */
      url: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    /**
     * Repository
     * A git repository
     */
    new_repository: {
      /**
       * Whether to allow auto-merge for pull requests.
       */
      allow_auto_merge?: boolean;
      /**
       * Whether to allow private forks
       */
      allow_forking?: boolean;
      /**
       * Whether to allow merge commits for pull requests.
       * @defaultValue true
       */
      allow_merge_commit?: boolean;
      /**
       * Whether to allow rebase merges for pull requests.
       * @defaultValue true
       */
      allow_rebase_merge?: boolean;
      /**
       * Whether to allow squash merges for pull requests.
       * @defaultValue true
       */
      allow_squash_merge?: boolean;
      allow_update_branch?: boolean;
      archive_url: string;
      /**
       * Whether the repository is archived.
       */
      archived: boolean;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      clone_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      created_at: number | Date;
      /**
       * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
       */
      custom_properties?: {
        [key: string]: any;
      };
      /**
       * The default branch of the repository.
       */
      default_branch: string;
      /**
       * Whether to delete head branches when pull requests are merged
       */
      delete_branch_on_merge?: boolean;
      deployments_url: string;
      description: string | null;
      /**
       * Returns whether or not this repository is disabled.
       */
      disabled?: boolean;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks: number;
      forks_count: number;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      git_url: string;
      /**
       * Whether downloads are enabled.
       * @defaultValue true
       */
      has_downloads: boolean;
      /**
       * Whether issues are enabled.
       * @defaultValue true
       */
      has_issues: boolean;
      has_pages: boolean;
      /**
       * Whether projects are enabled.
       * @defaultValue true
       */
      has_projects: boolean;
      /**
       * Whether the wiki is enabled.
       * @defaultValue true
       */
      has_wiki: boolean;
      /**
       * Whether discussions are enabled.
       */
      has_discussions: boolean;
      homepage: string | null;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      is_template?: boolean;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      language: string | null;
      languages_url: string;
      /**
       * License
       */
      license: {
        key: string;
        name: string;
        node_id: string;
        spdx_id: string;
        url: string | null;
      } | null;
      master_branch?: string;
      merges_url: string;
      milestones_url: string;
      mirror_url: string | null;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      open_issues: number;
      open_issues_count: number;
      organization?: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      permissions?: {
        admin: boolean;
        maintain?: boolean;
        pull: boolean;
        push: boolean;
        triage?: boolean;
      };
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      public?: boolean;
      pulls_url: string;
      pushed_at: (number | Date) | null;
      releases_url: string;
      role_name?: string | null;
      size: number;
      ssh_url: string;
      stargazers?: number;
      stargazers_count: number;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      svn_url: string;
      tags_url: string;
      teams_url: string;
      topics: string[];
      trees_url: string;
      updated_at: Date;
      url: string;
      visibility: 'public' | 'private' | 'internal';
      watchers: number;
      watchers_count: number;
      /**
       * Whether to require contributors to sign off on web-based commits
       */
      web_commit_signoff_required?: boolean;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues unassigned event
 */
export type WebhookIssuesUnassigned = {
  /**
   * The action that was performed.
   */
  action: 'unassigned';
  /**
   * User
   */
  assignee?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
    url?: string;
  } | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues unlabeled event
 */
export type WebhookIssuesUnlabeled = {
  action: 'unlabeled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
        | 'reminder'
        | 'pull_request_review_thread'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write' | 'admin';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  /**
   * Label
   */
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues unlocked event
 */
export type WebhookIssuesUnlocked = {
  action: 'unlocked';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  } & {
    active_lock_reason: any | null;
    assignee?: any | null;
    assignees?: (any | null)[];
    author_association?: string;
    body?: string | null;
    closed_at?: string | null;
    comments?: number;
    comments_url?: string;
    created_at?: string;
    events_url?: string;
    html_url?: string;
    id?: number;
    labels?: (any | null)[];
    labels_url?: string;
    locked: false;
    milestone?: any | null;
    node_id?: string;
    number?: number;
    performed_via_github_app?: any | null;
    reactions?: {
      '+1'?: number;
      '-1'?: number;
      confused?: number;
      eyes?: number;
      heart?: number;
      hooray?: number;
      laugh?: number;
      rocket?: number;
      total_count?: number;
      url?: string;
    };
    repository_url?: string;
    state?: string;
    timeline_url?: string;
    title?: string;
    updated_at?: string;
    url?: string;
    user?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * issues unpinned event
 */
export type WebhookIssuesUnpinned = {
  action: 'unpinned';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Issue
   * The [issue](https://docs.github.com/rest/issues/issues#get-an-issue) itself.
   */
  issue: {
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * Contents of the issue
     */
    body: string | null;
    closed_at: Date | null;
    comments: number;
    comments_url: string;
    created_at: Date;
    draft?: boolean;
    events_url: string;
    html_url: string;
    id: number;
    labels?: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    labels_url: string;
    locked?: boolean;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    /**
     * App
     * GitHub apps are a new way to extend GitHub. They can be installed directly on organizations and user accounts and granted access to specific repositories. They come with granular permissions and built-in webhooks. GitHub apps are first class actors within GitHub.
     */
    performed_via_github_app?: {
      created_at: Date | null;
      description: string | null;
      /**
       * The list of events for the GitHub app
       */
      events?: (
        | 'branch_protection_rule'
        | 'check_run'
        | 'check_suite'
        | 'code_scanning_alert'
        | 'commit_comment'
        | 'content_reference'
        | 'create'
        | 'delete'
        | 'deployment'
        | 'deployment_review'
        | 'deployment_status'
        | 'deploy_key'
        | 'discussion'
        | 'discussion_comment'
        | 'fork'
        | 'gollum'
        | 'issues'
        | 'issue_comment'
        | 'label'
        | 'member'
        | 'membership'
        | 'milestone'
        | 'organization'
        | 'org_block'
        | 'page_build'
        | 'project'
        | 'project_card'
        | 'project_column'
        | 'public'
        | 'pull_request'
        | 'pull_request_review'
        | 'pull_request_review_comment'
        | 'push'
        | 'registry_package'
        | 'release'
        | 'repository'
        | 'repository_dispatch'
        | 'secret_scanning_alert'
        | 'star'
        | 'status'
        | 'team'
        | 'team_add'
        | 'watch'
        | 'workflow_dispatch'
        | 'workflow_run'
      )[];
      external_url: string | null;
      html_url: string;
      /**
       * Unique identifier of the GitHub app
       */
      id: number | null;
      /**
       * The name of the GitHub app
       */
      name: string;
      node_id: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The set of permissions for the GitHub app
       */
      permissions?: {
        actions?: 'read' | 'write';
        administration?: 'read' | 'write';
        checks?: 'read' | 'write';
        content_references?: 'read' | 'write';
        contents?: 'read' | 'write';
        deployments?: 'read' | 'write';
        discussions?: 'read' | 'write';
        emails?: 'read' | 'write';
        environments?: 'read' | 'write';
        issues?: 'read' | 'write';
        keys?: 'read' | 'write';
        members?: 'read' | 'write';
        metadata?: 'read' | 'write';
        organization_administration?: 'read' | 'write';
        organization_hooks?: 'read' | 'write';
        organization_packages?: 'read' | 'write';
        organization_plan?: 'read' | 'write';
        organization_projects?: 'read' | 'write';
        organization_secrets?: 'read' | 'write';
        organization_self_hosted_runners?: 'read' | 'write';
        organization_user_blocking?: 'read' | 'write';
        packages?: 'read' | 'write';
        pages?: 'read' | 'write';
        pull_requests?: 'read' | 'write';
        repository_hooks?: 'read' | 'write';
        repository_projects?: 'read' | 'write';
        secret_scanning_alerts?: 'read' | 'write';
        secrets?: 'read' | 'write';
        security_events?: 'read' | 'write';
        security_scanning_alert?: 'read' | 'write';
        single_file?: 'read' | 'write';
        statuses?: 'read' | 'write';
        team_discussions?: 'read' | 'write';
        vulnerability_alerts?: 'read' | 'write';
        workflows?: 'read' | 'write';
      };
      /**
       * The slug name of the GitHub app
       */
      slug?: string;
      updated_at: Date | null;
    } | null;
    pull_request?: {
      diff_url?: string;
      html_url?: string;
      merged_at?: Date | null;
      patch_url?: string;
      url?: string;
    };
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    repository_url: string;
    /**
     * State of the issue; either 'open' or 'closed'
     */
    state?: 'open' | 'closed';
    state_reason?: string | null;
    timeline_url?: string;
    /**
     * Title of the issue
     */
    title: string;
    updated_at: Date;
    /**
     * URL for the issue
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * label created event
 */
export type WebhookLabelCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Label
   */
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * label deleted event
 */
export type WebhookLabelDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Label
   */
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * label edited event
 */
export type WebhookLabelEdited = {
  action: 'edited';
  /**
   * The changes to the label if the action was `edited`.
   */
  changes?: {
    color?: {
      /**
       * The previous version of the color if the action was `edited`.
       */
      from: string;
    };
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Label
   */
  label: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * marketplace_purchase cancelled event
 */
export type WebhookMarketplacePurchaseCancelled = {
  action: 'cancelled';
  effective_date: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: (string | null)[];
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: OrganizationSimpleWebhooks;
  /**
   * Marketplace Purchase
   */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: any | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * marketplace_purchase changed event
 */
export type WebhookMarketplacePurchaseChanged = {
  action: 'changed';
  effective_date: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: (string | null)[];
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: OrganizationSimpleWebhooks;
  /**
   * Marketplace Purchase
   */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean | null;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * marketplace_purchase pending_change event
 */
export type WebhookMarketplacePurchasePendingChange = {
  action: 'pending_change';
  effective_date: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: (string | null)[];
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: OrganizationSimpleWebhooks;
  /**
   * Marketplace Purchase
   */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * marketplace_purchase pending_change_cancelled event
 */
export type WebhookMarketplacePurchasePendingChangeCancelled = {
  action: 'pending_change_cancelled';
  effective_date: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: any | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    next_billing_date: string;
  };
  organization?: OrganizationSimpleWebhooks;
  /**
   * Marketplace Purchase
   */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: any | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * marketplace_purchase purchased event
 */
export type WebhookMarketplacePurchasePurchased = {
  action: 'purchased';
  effective_date: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  marketplace_purchase: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: string | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  } & {
    account?: {
      id?: number;
      login?: string;
      node_id?: string;
      organization_billing_email?: string | null;
      type?: string;
    };
    billing_cycle?: string;
    free_trial_ends_on?: string | null;
    next_billing_date: string | null;
    on_free_trial?: boolean;
    plan?: {
      bullets?: (string | null)[];
      description?: string;
      has_free_trial?: boolean;
      id?: number;
      monthly_price_in_cents?: number;
      name?: string;
      price_model?: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name?: string | null;
      yearly_price_in_cents?: number;
    };
    unit_count?: number;
  };
  organization?: OrganizationSimpleWebhooks;
  /**
   * Marketplace Purchase
   */
  previous_marketplace_purchase?: {
    account: {
      id: number;
      login: string;
      node_id: string;
      organization_billing_email: string | null;
      type: string;
    };
    billing_cycle: string;
    free_trial_ends_on: any | null;
    next_billing_date?: string | null;
    on_free_trial: boolean;
    plan: {
      bullets: string[];
      description: string;
      has_free_trial: boolean;
      id: number;
      monthly_price_in_cents: number;
      name: string;
      price_model: 'FREE' | 'FLAT_RATE' | 'PER_UNIT';
      unit_name: string | null;
      yearly_price_in_cents: number;
    };
    unit_count: number;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * member added event
 */
export type WebhookMemberAdded = {
  action: 'added';
  changes?: {
    permission?: {
      to: 'write' | 'admin' | 'read';
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * User
   */
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * member edited event
 */
export type WebhookMemberEdited = {
  action: 'edited';
  /**
   * The changes to the collaborator permissions
   */
  changes: {
    old_permission?: {
      /**
       * The previous permissions of the collaborator if the action was edited.
       */
      from: string;
    };
    permission?: {
      from?: string | null;
      to?: string | null;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * User
   */
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * member removed event
 */
export type WebhookMemberRemoved = {
  action: 'removed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * User
   */
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * membership added event
 */
export type WebhookMembershipAdded = {
  action: 'added';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * User
   */
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  /**
   * The scope of the membership. Currently, can only be `team`.
   */
  scope: 'team';
  /**
   * User
   */
  sender: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
/**
 * membership removed event
 */
export type WebhookMembershipRemoved = {
  action: 'removed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * User
   */
  member: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  /**
   * The scope of the membership. Currently, can only be `team`.
   */
  scope: 'team' | 'organization';
  /**
   * User
   */
  sender: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
export type WebhookMergeGroupChecksRequested = {
  action: 'checks_requested';
  installation?: SimpleInstallation;
  merge_group: MergeGroup;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
export type WebhookMergeGroupDestroyed = {
  action: 'destroyed';
  /**
   * Explains why the merge group is being destroyed. The group could have been merged, removed from the queue (dequeued), or invalidated by an earlier queue entry being dequeued (invalidated).
   */
  reason?: 'merged' | 'invalidated' | 'dequeued';
  installation?: SimpleInstallation;
  merge_group: MergeGroup;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * meta deleted event
 */
export type WebhookMetaDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  /**
   * The modified webhook. This will contain different keys based on the type of webhook it is: repository, organization, business, app, or GitHub Marketplace.
   */
  hook: {
    active: boolean;
    config: {
      content_type: 'json' | 'form';
      insecure_ssl: string;
      secret?: string;
      url: string;
    };
    created_at: string;
    events: (
      | '*'
      | 'branch_protection_rule'
      | 'check_run'
      | 'check_suite'
      | 'code_scanning_alert'
      | 'commit_comment'
      | 'create'
      | 'delete'
      | 'deployment'
      | 'deployment_status'
      | 'deploy_key'
      | 'discussion'
      | 'discussion_comment'
      | 'fork'
      | 'gollum'
      | 'issues'
      | 'issue_comment'
      | 'label'
      | 'member'
      | 'membership'
      | 'meta'
      | 'milestone'
      | 'organization'
      | 'org_block'
      | 'package'
      | 'page_build'
      | 'project'
      | 'project_card'
      | 'project_column'
      | 'public'
      | 'pull_request'
      | 'pull_request_review'
      | 'pull_request_review_comment'
      | 'pull_request_review_thread'
      | 'push'
      | 'registry_package'
      | 'release'
      | 'repository'
      | 'repository_import'
      | 'repository_vulnerability_alert'
      | 'secret_scanning_alert'
      | 'secret_scanning_alert_location'
      | 'security_and_analysis'
      | 'star'
      | 'status'
      | 'team'
      | 'team_add'
      | 'watch'
      | 'workflow_job'
      | 'workflow_run'
      | 'repository_dispatch'
      | 'projects_v2_item'
    )[];
    id: number;
    name: string;
    type: string;
    updated_at: string;
  };
  /**
   * The id of the modified webhook.
   */
  hook_id: number;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: NullableRepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * milestone closed event
 */
export type WebhookMilestoneClosed = {
  action: 'closed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: Date | null;
    closed_issues: number;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: Date | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: Date;
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * milestone created event
 */
export type WebhookMilestoneCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: Date | null;
    closed_issues: number;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    due_on: Date | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: Date;
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * milestone deleted event
 */
export type WebhookMilestoneDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: Date | null;
    closed_issues: number;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: Date | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: Date;
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * milestone edited event
 */
export type WebhookMilestoneEdited = {
  action: 'edited';
  /**
   * The changes to the milestone if the action was `edited`.
   */
  changes: {
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    due_on?: {
      /**
       * The previous version of the due date if the action was `edited`.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: Date | null;
    closed_issues: number;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    description: string | null;
    due_on: Date | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: Date;
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * milestone opened event
 */
export type WebhookMilestoneOpened = {
  action: 'opened';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Milestone
   * A collection of related issues and pull requests.
   */
  milestone: {
    closed_at: Date | null;
    closed_issues: number;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    description: string | null;
    due_on: Date | null;
    html_url: string;
    id: number;
    labels_url: string;
    node_id: string;
    /**
     * The number of the milestone.
     */
    number: number;
    open_issues: number;
    /**
     * The state of the milestone.
     */
    state: 'open' | 'closed';
    /**
     * The title of the milestone.
     */
    title: string;
    updated_at: Date;
    url: string;
  };
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * org_block blocked event
 */
export type WebhookOrgBlockBlocked = {
  action: 'blocked';
  /**
   * User
   */
  blocked_user: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * org_block unblocked event
 */
export type WebhookOrgBlockUnblocked = {
  action: 'unblocked';
  /**
   * User
   */
  blocked_user: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * organization deleted event
 */
export type WebhookOrganizationDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Membership
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership?: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * organization member_added event
 */
export type WebhookOrganizationMemberAdded = {
  action: 'member_added';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Membership
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * organization member_invited event
 */
export type WebhookOrganizationMemberInvited = {
  action: 'member_invited';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The invitation for the user or email if the action is `member_invited`.
   */
  invitation: {
    created_at: Date;
    email: string | null;
    failed_at: Date | null;
    failed_reason: string | null;
    id: number;
    invitation_teams_url: string;
    /**
     * User
     */
    inviter: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    login: string | null;
    node_id: string;
    role: string;
    team_count: number;
    invitation_source?: string;
  };
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * User
   */
  user?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
};
/**
 * organization member_removed event
 */
export type WebhookOrganizationMemberRemoved = {
  action: 'member_removed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Membership
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * organization renamed event
 */
export type WebhookOrganizationRenamed = {
  action: 'renamed';
  changes?: {
    login?: {
      from?: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Membership
   * The membership between the user and the organization. Not present when the action is `member_invited`.
   */
  membership?: {
    organization_url: string;
    role: string;
    state: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  organization: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Ruby Gems metadata
 */
export type WebhookRubygemsMetadata = {
  name?: string;
  description?: string;
  readme?: string;
  homepage?: string;
  version_info?: {
    version?: string;
  };
  platform?: string;
  metadata?: {
    [key: string]: string;
  };
  repo?: string;
  dependencies?: {
    [key: string]: string;
  }[];
  commit_oid?: string;
};
/**
 * package published event
 */
export type WebhookPackagePublished = {
  action: 'published';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Information about the package.
   */
  package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    package_type: string;
    package_version: {
      /**
       * User
       */
      author?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      body?: string | any;
      body_html?: string;
      container_metadata?: {
        labels?: any | null;
        manifest?: any | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      } | null;
      created_at?: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: {
        [key: string]: any;
      }[];
      name: string;
      npm_metadata?: {
        name?: string;
        version?: string;
        npm_user?: string;
        author?: any | null;
        bugs?: any | null;
        dependencies?: any;
        dev_dependencies?: any;
        peer_dependencies?: any;
        optional_dependencies?: any;
        description?: string;
        dist?: any | null;
        git_head?: string;
        homepage?: string;
        license?: string;
        main?: string;
        repository?: any | null;
        scripts?: any;
        id?: string;
        node_version?: string;
        npm_version?: string;
        has_shrinkwrap?: boolean;
        maintainers?: any[];
        contributors?: any[];
        engines?: any;
        keywords?: string[];
        files?: string[];
        bin?: any;
        man?: any;
        directories?: any | null;
        os?: string[];
        cpu?: string[];
        readme?: string;
        installation_command?: string;
        release_id?: number;
        commit_oid?: string;
        published_via_actions?: boolean;
        deleted_by_id?: number;
      } | null;
      nuget_metadata?:
        | {
            id?: number | string;
            name?: string;
            value?:
              | boolean
              | string
              | number
              | {
                  url?: string;
                  branch?: string;
                  commit?: string;
                  type?: string;
                };
          }[]
        | null;
      package_files: {
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        /**
         * User
         */
        author: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string | null;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    } | null;
    registry: {
      about_url: string;
      name: string;
      type: string;
      url: string;
      vendor: string;
    } | null;
    updated_at: string | null;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * package updated event
 */
export type WebhookPackageUpdated = {
  action: 'updated';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Information about the package.
   */
  package: {
    created_at: string;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    package_type: string;
    package_version: {
      /**
       * User
       */
      author: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: {
        [key: string]: any;
      }[];
      name: string;
      package_files: {
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string;
        size: number;
        state: string;
        updated_at: string;
      }[];
      package_url?: string;
      prerelease?: boolean;
      release?: {
        /**
         * User
         */
        author: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      source_url?: string;
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: {
      about_url: string;
      name: string;
      type: string;
      url: string;
      vendor: string;
    } | null;
    updated_at: string;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * page_build event
 */
export type WebhookPageBuild = {
  /**
   * The [List GitHub Pages builds](https://docs.github.com/rest/pages/pages#list-github-pages-builds) itself.
   */
  build: {
    commit: string | null;
    created_at: string;
    duration: number;
    error: {
      message: string | null;
    };
    /**
     * User
     */
    pusher: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    status: string;
    updated_at: string;
    url: string;
  };
  enterprise?: EnterpriseWebhooks;
  id: number;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * personal_access_token_request approved event
 */
export type WebhookPersonalAccessTokenRequestApproved = {
  action: 'approved';
  personal_access_token_request: PersonalAccessTokenRequest;
  organization: OrganizationSimpleWebhooks;
  sender: SimpleUserWebhooks;
  installation: SimpleInstallation;
};
/**
 * personal_access_token_request cancelled event
 */
export type WebhookPersonalAccessTokenRequestCancelled = {
  action: 'cancelled';
  personal_access_token_request: PersonalAccessTokenRequest;
  organization: OrganizationSimpleWebhooks;
  sender: SimpleUserWebhooks;
  installation: SimpleInstallation;
};
/**
 * personal_access_token_request created event
 */
export type WebhookPersonalAccessTokenRequestCreated = {
  action: 'created';
  personal_access_token_request: PersonalAccessTokenRequest;
  organization: OrganizationSimpleWebhooks;
  sender: SimpleUserWebhooks;
  installation: SimpleInstallation;
};
/**
 * personal_access_token_request denied event
 */
export type WebhookPersonalAccessTokenRequestDenied = {
  action: 'denied';
  personal_access_token_request: PersonalAccessTokenRequest;
  organization: OrganizationSimpleWebhooks;
  sender: SimpleUserWebhooks;
  installation: SimpleInstallation;
};
export type WebhookPing = {
  /**
   * Webhook
   * The webhook that is being pinged
   */
  hook?: {
    /**
     * Determines whether the hook is actually triggered for the events it subscribes to.
     */
    active: boolean;
    /**
     * Only included for GitHub Apps. When you register a new GitHub App, GitHub sends a ping event to the webhook URL you specified during registration. The GitHub App ID sent in this field is required for authenticating an app.
     */
    app_id?: number;
    config: {
      content_type?: WebhookConfigContentType;
      insecure_ssl?: WebhookConfigInsecureSsl;
      secret?: WebhookConfigSecret;
      url?: WebhookConfigUrl;
    };
    created_at: Date;
    deliveries_url?: string;
    /**
     * Determines what events the hook is triggered for. Default: ['push'].
     */
    events: string[];
    /**
     * Unique identifier of the webhook.
     */
    id: number;
    last_response?: HookResponse;
    /**
     * The type of webhook. The only valid value is 'web'.
     */
    name: 'web';
    ping_url?: string;
    test_url?: string;
    type: string;
    updated_at: Date;
    url?: string;
  };
  /**
   * The ID of the webhook that triggered the ping.
   */
  hook_id?: number;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
  /**
   * Random string of GitHub zen.
   */
  zen?: string;
};
/**
 * The webhooks ping payload encoded with URL encoding.
 */
export type WebhookPingFormEncoded = {
  /**
   * A URL-encoded string of the ping JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};
/**
 * project_card converted event
 */
export type WebhookProjectCardConverted = {
  action: 'converted';
  changes: {
    note: {
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Card
   */
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project_card created event
 */
export type WebhookProjectCardCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Card
   */
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project_card deleted event
 */
export type WebhookProjectCardDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Card
   */
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number | null;
    column_url: string;
    content_url?: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: NullableRepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project_card edited event
 */
export type WebhookProjectCardEdited = {
  action: 'edited';
  changes: {
    note: {
      from: string | null;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Card
   */
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project_card moved event
 */
export type WebhookProjectCardMoved = {
  action: 'moved';
  changes?: {
    column_id: {
      from: number;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  project_card: {
    after_id?: number | null;
    /**
     * Whether or not the card is archived
     */
    archived: boolean;
    column_id: number;
    column_url: string;
    content_url?: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * The project card's ID
     */
    id: number;
    node_id: string;
    note: string | null;
    project_url: string;
    updated_at: Date;
    url: string;
  } & {
    after_id: number | null;
    archived?: boolean;
    column_id?: number;
    column_url?: string;
    created_at?: string;
    creator?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    } | null;
    id?: number;
    node_id?: string;
    note?: string | null;
    project_url?: string;
    updated_at?: string;
    url?: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project closed event
 */
export type WebhookProjectClosed = {
  action: 'closed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project
   */
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project_column created event
 */
export type WebhookProjectColumnCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Column
   */
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: Date;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * project_column deleted event
 */
export type WebhookProjectColumnDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Column
   */
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: Date;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: NullableRepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * project_column edited event
 */
export type WebhookProjectColumnEdited = {
  action: 'edited';
  changes: {
    name?: {
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Column
   */
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: Date;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * project_column moved event
 */
export type WebhookProjectColumnMoved = {
  action: 'moved';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project Column
   */
  project_column: {
    after_id?: number | null;
    cards_url: string;
    created_at: Date;
    /**
     * The unique identifier of the project column
     */
    id: number;
    /**
     * Name of the project column
     */
    name: string;
    node_id: string;
    project_url: string;
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project created event
 */
export type WebhookProjectCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project
   */
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * project deleted event
 */
export type WebhookProjectDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project
   */
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: Date;
    url: string;
  };
  repository?: NullableRepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * project edited event
 */
export type WebhookProjectEdited = {
  action: 'edited';
  /**
   * The changes to the project if the action was `edited`.
   */
  changes?: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The changes to the project if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project
   */
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * project reopened event
 */
export type WebhookProjectReopened = {
  action: 'reopened';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Project
   */
  project: {
    /**
     * Body of the project
     */
    body: string | null;
    columns_url: string;
    created_at: Date;
    /**
     * User
     */
    creator: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    id: number;
    /**
     * Name of the project
     */
    name: string;
    node_id: string;
    number: number;
    owner_url: string;
    /**
     * State of the project; either 'open' or 'closed'
     */
    state: 'open' | 'closed';
    updated_at: Date;
    url: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Project Closed Event
 */
export type WebhookProjectsV2ProjectClosed = {
  action: 'closed';
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2: ProjectsV2;
  sender: SimpleUserWebhooks;
};
/**
 * A project was created
 */
export type WebhookProjectsV2ProjectCreated = {
  action: 'created';
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2: ProjectsV2;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Project Deleted Event
 */
export type WebhookProjectsV2ProjectDeleted = {
  action: 'deleted';
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2: ProjectsV2;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Project Edited Event
 */
export type WebhookProjectsV2ProjectEdited = {
  action: 'edited';
  changes: {
    description?: {
      from?: string | null;
      to?: string | null;
    };
    public?: {
      from?: boolean;
      to?: boolean;
    };
    short_description?: {
      from?: string | null;
      to?: string | null;
    };
    title?: {
      from?: string;
      to?: string;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2: ProjectsV2;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Item Archived Event
 */
export type WebhookProjectsV2ItemArchived = {
  action: 'archived';
  changes: {
    archived_at?: {
      from?: Date | null;
      to?: Date | null;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Item Converted Event
 */
export type WebhookProjectsV2ItemConverted = {
  action: 'converted';
  changes: {
    content_type?: {
      from?: string | null;
      to?: string;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Item Created Event
 */
export type WebhookProjectsV2ItemCreated = {
  action: 'created';
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Item Deleted Event
 */
export type WebhookProjectsV2ItemDeleted = {
  action: 'deleted';
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Item Edited Event
 */
export type WebhookProjectsV2ItemEdited = {
  action: 'edited';
  changes?:
    | {
        field_value: {
          field_node_id?: string;
          field_type?: string;
        };
      }
    | {
        body: {
          from?: string | null;
          to?: string | null;
        };
      };
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Item Reordered Event
 */
export type WebhookProjectsV2ItemReordered = {
  action: 'reordered';
  changes: {
    previous_projects_v2_item_node_id?: {
      from?: string | null;
      to?: string | null;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Item Restored Event
 */
export type WebhookProjectsV2ItemRestored = {
  action: 'restored';
  changes: {
    archived_at?: {
      from?: Date | null;
      to?: Date | null;
    };
  };
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2_item: ProjectsV2Item;
  sender: SimpleUserWebhooks;
};
/**
 * Projects v2 Project Reopened Event
 */
export type WebhookProjectsV2ProjectReopened = {
  action: 'reopened';
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  projects_v2: ProjectsV2;
  sender: SimpleUserWebhooks;
};
/**
 * public event
 */
export type WebhookPublic = {
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request assigned event
 */
export type WebhookPullRequestAssigned = {
  action: 'assigned';
  /**
   * User
   */
  assignee: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization';
    url?: string;
  } | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request auto_merge_disabled event
 */
export type WebhookPullRequestAutoMergeDisabled = {
  action: 'auto_merge_disabled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  reason: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request auto_merge_enabled event
 */
export type WebhookPullRequestAutoMergeEnabled = {
  action: 'auto_merge_enabled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  reason?: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request closed event
 */
export type WebhookPullRequestClosed = {
  action: 'closed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequest & {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow updating the pull request's branch.
     */
    allow_update_branch?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged.
     */
    delete_branch_on_merge?: boolean;
    /**
     * The default value for a merge commit message.
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a squash merge commit message:
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
     */
    use_squash_pr_title_as_default?: boolean;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request converted_to_draft event
 */
export type WebhookPullRequestConvertedToDraft = {
  action: 'converted_to_draft';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequest & {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow updating the pull request's branch.
     */
    allow_update_branch?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged.
     */
    delete_branch_on_merge?: boolean;
    /**
     * The default value for a merge commit message.
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a squash merge commit message:
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
     */
    use_squash_pr_title_as_default?: boolean;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request demilestoned event
 */
export type WebhookPullRequestDemilestoned = {
  action: 'demilestoned';
  enterprise?: EnterpriseWebhooks;
  milestone?: Milestone;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * pull_request dequeued event
 */
export type WebhookPullRequestDequeued = {
  action: 'dequeued';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  reason: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request edited event
 */
export type WebhookPullRequestEdited = {
  action: 'edited';
  /**
   * The changes to the comment if the action was `edited`.
   */
  changes: {
    base?: {
      ref: {
        from: string;
      };
      sha: {
        from: string;
      };
    };
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    title?: {
      /**
       * The previous version of the title if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequest & {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow updating the pull request's branch.
     */
    allow_update_branch?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged.
     */
    delete_branch_on_merge?: boolean;
    /**
     * The default value for a merge commit message.
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a squash merge commit message:
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     */
    use_squash_pr_title_as_default?: boolean;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * pull_request enqueued event
 */
export type WebhookPullRequestEnqueued = {
  action: 'enqueued';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request labeled event
 */
export type WebhookPullRequestLabeled = {
  action: 'labeled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Label
   */
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request locked event
 */
export type WebhookPullRequestLocked = {
  action: 'locked';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request milestoned event
 */
export type WebhookPullRequestMilestoned = {
  action: 'milestoned';
  enterprise?: EnterpriseWebhooks;
  milestone?: Milestone;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * pull_request opened event
 */
export type WebhookPullRequestOpened = {
  action: 'opened';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequest & {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow updating the pull request's branch.
     */
    allow_update_branch?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged.
     */
    delete_branch_on_merge?: boolean;
    /**
     * The default value for a merge commit message.
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a squash merge commit message:
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
     */
    use_squash_pr_title_as_default?: boolean;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request ready_for_review event
 */
export type WebhookPullRequestReadyForReview = {
  action: 'ready_for_review';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequest & {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow updating the pull request's branch.
     */
    allow_update_branch?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged.
     */
    delete_branch_on_merge?: boolean;
    /**
     * The default value for a merge commit message.
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a squash merge commit message:
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
     */
    use_squash_pr_title_as_default?: boolean;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request reopened event
 */
export type WebhookPullRequestReopened = {
  action: 'reopened';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  pull_request: PullRequest & {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow updating the pull request's branch.
     */
    allow_update_branch?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged.
     */
    delete_branch_on_merge?: boolean;
    /**
     * The default value for a merge commit message.
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The default value for a merge commit title.
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., "Merge pull request #123 from branch-name").
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a squash merge commit message:
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a squash merge commit title:
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.**
     */
    use_squash_pr_title_as_default?: boolean;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request_review_comment created event
 */
export type WebhookPullRequestReviewCommentCreated = {
  action: 'created';
  /**
   * Pull Request Review Comment
   * The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
   */
  comment: {
    _links: {
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      pull_request: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: Date;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number | null;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     */
    pull_request_url: string;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: 'LEFT' | 'RIGHT';
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     * @defaultValue "RIGHT"
     */
    start_side: ('LEFT' | 'RIGHT' | null) | null;
    /**
     * The level at which the comment is targeted, can be a diff line or a file.
     */
    subject_type?: 'line' | 'file';
    updated_at: Date;
    /**
     * URL for the pull request review comment
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions?: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request_review_comment deleted event
 */
export type WebhookPullRequestReviewCommentDeleted = {
  action: 'deleted';
  /**
   * Pull Request Review Comment
   * The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
   */
  comment: {
    _links: {
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      pull_request: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: Date;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     */
    pull_request_url: string;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: 'LEFT' | 'RIGHT';
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     * @defaultValue "RIGHT"
     */
    start_side: ('LEFT' | 'RIGHT' | null) | null;
    /**
     * The level at which the comment is targeted, can be a diff line or a file.
     */
    subject_type?: 'line' | 'file';
    updated_at: Date;
    /**
     * URL for the pull request review comment
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request_review_comment edited event
 */
export type WebhookPullRequestReviewCommentEdited = {
  action: 'edited';
  /**
   * The changes to the comment.
   */
  changes: {
    body?: {
      /**
       * The previous version of the body.
       */
      from: string;
    };
  };
  /**
   * Pull Request Review Comment
   * The [comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request) itself.
   */
  comment: {
    _links: {
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      pull_request: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the comment.
     */
    body: string;
    /**
     * The SHA of the commit to which the comment applies.
     */
    commit_id: string;
    created_at: Date;
    /**
     * The diff of the line that the comment refers to.
     */
    diff_hunk: string;
    /**
     * HTML URL for the pull request review comment.
     */
    html_url: string;
    /**
     * The ID of the pull request review comment.
     */
    id: number;
    /**
     * The comment ID to reply to.
     */
    in_reply_to_id?: number;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    line: number | null;
    /**
     * The node ID of the pull request review comment.
     */
    node_id: string;
    /**
     * The SHA of the original commit to which the comment applies.
     */
    original_commit_id: string;
    /**
     * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
     */
    original_line: number;
    /**
     * The index of the original line in the diff to which the comment applies.
     */
    original_position: number;
    /**
     * The first line of the range for a multi-line comment.
     */
    original_start_line: number | null;
    /**
     * The relative path of the file to which the comment applies.
     */
    path: string;
    /**
     * The line index in the diff to which the comment applies.
     */
    position: number | null;
    /**
     * The ID of the pull request review to which the comment belongs.
     */
    pull_request_review_id: number | null;
    /**
     * URL for the pull request that the review comment belongs to.
     */
    pull_request_url: string;
    /**
     * Reactions
     */
    reactions: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The side of the first line of the range for a multi-line comment.
     */
    side: 'LEFT' | 'RIGHT';
    /**
     * The first line of the range for a multi-line comment.
     */
    start_line: number | null;
    /**
     * The side of the first line of the range for a multi-line comment.
     * @defaultValue "RIGHT"
     */
    start_side: ('LEFT' | 'RIGHT' | null) | null;
    /**
     * The level at which the comment is targeted, can be a diff line or a file.
     */
    subject_type?: 'line' | 'file';
    updated_at: Date;
    /**
     * URL for the pull request review comment
     */
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge?: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft?: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request_review dismissed event
 */
export type WebhookPullRequestReviewDismissed = {
  action: 'dismissed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Simple Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      pull_request: {
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    pull_request_url: string;
    state: 'dismissed' | 'approved' | 'changes_requested';
    submitted_at: Date;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  sender: SimpleUserWebhooks;
};
/**
 * pull_request_review edited event
 */
export type WebhookPullRequestReviewEdited = {
  action: 'edited';
  changes: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Simple Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      pull_request: {
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    submitted_at: Date | null;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  sender: SimpleUserWebhooks;
};
/**
 * pull_request review_request_removed event
 */
export type WebhookPullRequestReviewRequestRemoved =
  | {
      action: 'review_request_removed';
      enterprise?: EnterpriseWebhooks;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimpleWebhooks;
      /**
       * Pull Request
       */
      pull_request: {
        _links: {
          /**
           * Link
           */
          comments: {
            href: string;
          };
          /**
           * Link
           */
          commits: {
            href: string;
          };
          /**
           * Link
           */
          html: {
            href: string;
          };
          /**
           * Link
           */
          issue: {
            href: string;
          };
          /**
           * Link
           */
          review_comment: {
            href: string;
          };
          /**
           * Link
           */
          review_comments: {
            href: string;
          };
          /**
           * Link
           */
          self: {
            href: string;
          };
          /**
           * Link
           */
          statuses: {
            href: string;
          };
        };
        active_lock_reason:
          | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
          | null;
        additions?: number;
        /**
         * User
         */
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        assignees: ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          /**
           * User
           */
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title.
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: Date | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: Date;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: Date | null;
        /**
         * User
         */
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: Date | null;
          closed_issues: number;
          created_at: Date;
          /**
           * User
           */
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          description: string | null;
          due_on: Date | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: Date;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: 'open' | 'closed' | 'secret';
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }[];
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: Date;
        url: string;
        /**
         * User
         */
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
      };
      repository: RepositoryWebhooks;
      /**
       * User
       */
      requested_reviewer: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      sender: SimpleUserWebhooks;
    }
  | {
      action: 'review_request_removed';
      enterprise?: EnterpriseWebhooks;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimpleWebhooks;
      /**
       * Pull Request
       */
      pull_request: {
        _links: {
          /**
           * Link
           */
          comments: {
            href: string;
          };
          /**
           * Link
           */
          commits: {
            href: string;
          };
          /**
           * Link
           */
          html: {
            href: string;
          };
          /**
           * Link
           */
          issue: {
            href: string;
          };
          /**
           * Link
           */
          review_comment: {
            href: string;
          };
          /**
           * Link
           */
          review_comments: {
            href: string;
          };
          /**
           * Link
           */
          self: {
            href: string;
          };
          /**
           * Link
           */
          statuses: {
            href: string;
          };
        };
        active_lock_reason:
          | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
          | null;
        additions?: number;
        /**
         * User
         */
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        assignees: ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          /**
           * User
           */
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: Date | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: Date;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: Date | null;
        /**
         * User
         */
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: Date | null;
          closed_issues: number;
          created_at: Date;
          /**
           * User
           */
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          description: string | null;
          due_on: Date | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: Date;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: 'open' | 'closed' | 'secret';
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }[];
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: Date;
        url: string;
        /**
         * User
         */
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
      };
      repository: RepositoryWebhooks;
      /**
       * Team
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        parent?: {
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        } | null;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      };
      sender: SimpleUserWebhooks;
    };
/**
 * pull_request review_requested event
 */
export type WebhookPullRequestReviewRequested =
  | {
      action: 'review_requested';
      enterprise?: EnterpriseWebhooks;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimpleWebhooks;
      /**
       * Pull Request
       */
      pull_request: {
        _links: {
          /**
           * Link
           */
          comments: {
            href: string;
          };
          /**
           * Link
           */
          commits: {
            href: string;
          };
          /**
           * Link
           */
          html: {
            href: string;
          };
          /**
           * Link
           */
          issue: {
            href: string;
          };
          /**
           * Link
           */
          review_comment: {
            href: string;
          };
          /**
           * Link
           */
          review_comments: {
            href: string;
          };
          /**
           * Link
           */
          self: {
            href: string;
          };
          /**
           * Link
           */
          statuses: {
            href: string;
          };
        };
        active_lock_reason:
          | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
          | null;
        additions?: number;
        /**
         * User
         */
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
        assignees: ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          /**
           * User
           */
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: Date | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: Date;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: Date | null;
        /**
         * User
         */
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: Date | null;
          closed_issues: number;
          created_at: Date;
          /**
           * User
           */
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
            url?: string;
          } | null;
          description: string | null;
          due_on: Date | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: Date;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description: string | null;
              html_url: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url: string;
              /**
               * Name of the team
               */
              name: string;
              node_id: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission: string;
              privacy: 'open' | 'closed' | 'secret';
              repositories_url: string;
              slug: string;
              /**
               * URL for the team
               */
              url: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }[];
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: Date;
        url: string;
        /**
         * User
         */
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
      };
      repository: RepositoryWebhooks;
      /**
       * User
       */
      requested_reviewer: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      sender: SimpleUserWebhooks;
    }
  | {
      action: 'review_requested';
      enterprise?: EnterpriseWebhooks;
      installation?: SimpleInstallation;
      /**
       * The pull request number.
       */
      number: number;
      organization?: OrganizationSimpleWebhooks;
      /**
       * Pull Request
       */
      pull_request: {
        _links: {
          /**
           * Link
           */
          comments: {
            href: string;
          };
          /**
           * Link
           */
          commits: {
            href: string;
          };
          /**
           * Link
           */
          html: {
            href: string;
          };
          /**
           * Link
           */
          issue: {
            href: string;
          };
          /**
           * Link
           */
          review_comment: {
            href: string;
          };
          /**
           * Link
           */
          review_comments: {
            href: string;
          };
          /**
           * Link
           */
          self: {
            href: string;
          };
          /**
           * Link
           */
          statuses: {
            href: string;
          };
        };
        active_lock_reason:
          | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
          | null;
        additions?: number;
        /**
         * User
         */
        assignee: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
        assignees: ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)[];
        /**
         * AuthorAssociation
         * How the author is associated with the repository.
         */
        author_association:
          | 'COLLABORATOR'
          | 'CONTRIBUTOR'
          | 'FIRST_TIMER'
          | 'FIRST_TIME_CONTRIBUTOR'
          | 'MANNEQUIN'
          | 'MEMBER'
          | 'NONE'
          | 'OWNER';
        /**
         * PullRequestAutoMerge
         * The status of auto merging a pull request.
         */
        auto_merge: {
          /**
           * Commit message for the merge commit.
           */
          commit_message: string | null;
          /**
           * Title for the merge commit message.
           */
          commit_title: string | null;
          /**
           * User
           */
          enabled_by: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
          /**
           * The merge method to use.
           */
          merge_method: 'merge' | 'squash' | 'rebase';
        } | null;
        base: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        body: string | null;
        changed_files?: number;
        closed_at: Date | null;
        comments?: number;
        comments_url: string;
        commits?: number;
        commits_url: string;
        created_at: Date;
        deletions?: number;
        diff_url: string;
        /**
         * Indicates whether or not the pull request is a draft.
         */
        draft: boolean;
        head: {
          label: string;
          ref: string;
          /**
           * Repository
           * A git repository
           */
          repo: {
            /**
             * Whether to allow auto-merge for pull requests.
             */
            allow_auto_merge?: boolean;
            /**
             * Whether to allow private forks
             */
            allow_forking?: boolean;
            /**
             * Whether to allow merge commits for pull requests.
             * @defaultValue true
             */
            allow_merge_commit?: boolean;
            /**
             * Whether to allow rebase merges for pull requests.
             * @defaultValue true
             */
            allow_rebase_merge?: boolean;
            /**
             * Whether to allow squash merges for pull requests.
             * @defaultValue true
             */
            allow_squash_merge?: boolean;
            allow_update_branch?: boolean;
            archive_url: string;
            /**
             * Whether the repository is archived.
             */
            archived: boolean;
            assignees_url: string;
            blobs_url: string;
            branches_url: string;
            clone_url: string;
            collaborators_url: string;
            comments_url: string;
            commits_url: string;
            compare_url: string;
            contents_url: string;
            contributors_url: string;
            created_at: number | Date;
            /**
             * The default branch of the repository.
             */
            default_branch: string;
            /**
             * Whether to delete head branches when pull requests are merged
             */
            delete_branch_on_merge?: boolean;
            deployments_url: string;
            description: string | null;
            /**
             * Returns whether or not this repository is disabled.
             */
            disabled?: boolean;
            downloads_url: string;
            events_url: string;
            fork: boolean;
            forks: number;
            forks_count: number;
            forks_url: string;
            full_name: string;
            git_commits_url: string;
            git_refs_url: string;
            git_tags_url: string;
            git_url: string;
            /**
             * Whether downloads are enabled.
             * @defaultValue true
             */
            has_downloads: boolean;
            /**
             * Whether issues are enabled.
             * @defaultValue true
             */
            has_issues: boolean;
            has_pages: boolean;
            /**
             * Whether projects are enabled.
             * @defaultValue true
             */
            has_projects: boolean;
            /**
             * Whether the wiki is enabled.
             * @defaultValue true
             */
            has_wiki: boolean;
            /**
             * Whether discussions are enabled.
             */
            has_discussions: boolean;
            homepage: string | null;
            hooks_url: string;
            html_url: string;
            /**
             * Unique identifier of the repository
             */
            id: number;
            is_template?: boolean;
            issue_comment_url: string;
            issue_events_url: string;
            issues_url: string;
            keys_url: string;
            labels_url: string;
            language: string | null;
            languages_url: string;
            /**
             * License
             */
            license: {
              key: string;
              name: string;
              node_id: string;
              spdx_id: string;
              url: string | null;
            } | null;
            master_branch?: string;
            /**
             * The default value for a merge commit message.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `PR_BODY` - default to the pull request's body.
             * - `BLANK` - default to a blank commit message.
             */
            merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
            /**
             * The default value for a merge commit title.
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
             */
            merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
            merges_url: string;
            milestones_url: string;
            mirror_url: string | null;
            /**
             * The name of the repository.
             */
            name: string;
            node_id: string;
            notifications_url: string;
            open_issues: number;
            open_issues_count: number;
            organization?: string;
            /**
             * User
             */
            owner: {
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null;
            permissions?: {
              admin: boolean;
              maintain?: boolean;
              pull: boolean;
              push: boolean;
              triage?: boolean;
            };
            /**
             * Whether the repository is private or public.
             */
            private: boolean;
            public?: boolean;
            pulls_url: string;
            pushed_at: (number | Date) | null;
            releases_url: string;
            role_name?: string | null;
            size: number;
            /**
             * The default value for a squash merge commit message:
             *
             * - `PR_BODY` - default to the pull request's body.
             * - `COMMIT_MESSAGES` - default to the branch's commit messages.
             * - `BLANK` - default to a blank commit message.
             */
            squash_merge_commit_message?:
              | 'PR_BODY'
              | 'COMMIT_MESSAGES'
              | 'BLANK';
            /**
             * The default value for a squash merge commit title:
             *
             * - `PR_TITLE` - default to the pull request's title.
             * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
             */
            squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
            ssh_url: string;
            stargazers?: number;
            stargazers_count: number;
            stargazers_url: string;
            statuses_url: string;
            subscribers_url: string;
            subscription_url: string;
            svn_url: string;
            tags_url: string;
            teams_url: string;
            topics: string[];
            trees_url: string;
            updated_at: Date;
            url: string;
            /**
             * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
             */
            use_squash_pr_title_as_default?: boolean;
            visibility: 'public' | 'private' | 'internal';
            watchers: number;
            watchers_count: number;
            /**
             * Whether to require contributors to sign off on web-based commits
             */
            web_commit_signoff_required?: boolean;
          };
          sha: string;
          /**
           * User
           */
          user: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization';
            url?: string;
          } | null;
        };
        html_url: string;
        id: number;
        issue_url: string;
        labels: {
          /**
           * 6-character hex code, without the leading #, identifying the color
           */
          color: string;
          default: boolean;
          description: string | null;
          id: number;
          /**
           * The name of the label.
           */
          name: string;
          node_id: string;
          /**
           * URL for the label
           */
          url: string;
        }[];
        locked: boolean;
        /**
         * Indicates whether maintainers can modify the pull request.
         */
        maintainer_can_modify?: boolean;
        merge_commit_sha: string | null;
        mergeable?: boolean | null;
        mergeable_state?: string;
        merged?: boolean | null;
        merged_at: Date | null;
        /**
         * User
         */
        merged_by?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        /**
         * Milestone
         * A collection of related issues and pull requests.
         */
        milestone: {
          closed_at: Date | null;
          closed_issues: number;
          created_at: Date;
          /**
           * User
           */
          creator: {
            avatar_url?: string;
            deleted?: boolean;
            email?: string | null;
            events_url?: string;
            followers_url?: string;
            following_url?: string;
            gists_url?: string;
            gravatar_id?: string;
            html_url?: string;
            id: number;
            login: string;
            name?: string;
            node_id?: string;
            organizations_url?: string;
            received_events_url?: string;
            repos_url?: string;
            site_admin?: boolean;
            starred_url?: string;
            subscriptions_url?: string;
            type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
            url?: string;
          } | null;
          description: string | null;
          due_on: Date | null;
          html_url: string;
          id: number;
          labels_url: string;
          node_id: string;
          /**
           * The number of the milestone.
           */
          number: number;
          open_issues: number;
          /**
           * The state of the milestone.
           */
          state: 'open' | 'closed';
          /**
           * The title of the milestone.
           */
          title: string;
          updated_at: Date;
          url: string;
        } | null;
        node_id: string;
        /**
         * Number uniquely identifying the pull request within its repository.
         */
        number: number;
        patch_url: string;
        rebaseable?: boolean | null;
        requested_reviewers: (
          | ({
              avatar_url?: string;
              deleted?: boolean;
              email?: string | null;
              events_url?: string;
              followers_url?: string;
              following_url?: string;
              gists_url?: string;
              gravatar_id?: string;
              html_url?: string;
              id: number;
              login: string;
              name?: string;
              node_id?: string;
              organizations_url?: string;
              received_events_url?: string;
              repos_url?: string;
              site_admin?: boolean;
              starred_url?: string;
              subscriptions_url?: string;
              type?: 'Bot' | 'User' | 'Organization';
              url?: string;
            } | null)
          | {
              deleted?: boolean;
              /**
               * Description of the team
               */
              description?: string | null;
              html_url?: string;
              /**
               * Unique identifier of the team
               */
              id: number;
              members_url?: string;
              /**
               * Name of the team
               */
              name: string;
              node_id?: string;
              parent?: {
                /**
                 * Description of the team
                 */
                description: string | null;
                html_url: string;
                /**
                 * Unique identifier of the team
                 */
                id: number;
                members_url: string;
                /**
                 * Name of the team
                 */
                name: string;
                node_id: string;
                /**
                 * Permission that the team will have for its repositories
                 */
                permission: string;
                privacy: 'open' | 'closed' | 'secret';
                repositories_url: string;
                slug: string;
                /**
                 * URL for the team
                 */
                url: string;
              } | null;
              /**
               * Permission that the team will have for its repositories
               */
              permission?: string;
              privacy?: 'open' | 'closed' | 'secret';
              repositories_url?: string;
              slug?: string;
              /**
               * URL for the team
               */
              url?: string;
            }
        )[];
        requested_teams: {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }[];
        review_comment_url: string;
        review_comments?: number;
        review_comments_url: string;
        /**
         * State of this Pull Request. Either `open` or `closed`.
         */
        state: 'open' | 'closed';
        statuses_url: string;
        /**
         * The title of the pull request.
         */
        title: string;
        updated_at: Date;
        url: string;
        /**
         * User
         */
        user: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null;
      };
      repository: RepositoryWebhooks;
      /**
       * Team
       * Groups of organization members that gives permissions on specified repositories.
       */
      requested_team: {
        deleted?: boolean;
        /**
         * Description of the team
         */
        description?: string | null;
        html_url?: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url?: string;
        /**
         * Name of the team
         */
        name: string;
        node_id?: string;
        parent?: {
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        } | null;
        /**
         * Permission that the team will have for its repositories
         */
        permission?: string;
        privacy?: 'open' | 'closed' | 'secret';
        repositories_url?: string;
        slug?: string;
        /**
         * URL for the team
         */
        url?: string;
      };
      sender: SimpleUserWebhooks;
    };
/**
 * pull_request_review submitted event
 */
export type WebhookPullRequestReviewSubmitted = {
  action: 'submitted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Simple Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  /**
   * The review that was affected.
   */
  review: {
    _links: {
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      pull_request: {
        href: string;
      };
    };
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * The text of the review.
     */
    body: string | null;
    /**
     * A commit SHA for the review.
     */
    commit_id: string;
    html_url: string;
    /**
     * Unique identifier of the review
     */
    id: number;
    node_id: string;
    pull_request_url: string;
    state: string;
    submitted_at: Date | null;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  sender: SimpleUserWebhooks;
};
/**
 * pull_request_review_thread resolved event
 */
export type WebhookPullRequestReviewThreadResolved = {
  action: 'resolved';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Simple Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
  thread: {
    comments: {
      _links: {
        /**
         * Link
         */
        html: {
          href: string;
        };
        /**
         * Link
         */
        pull_request: {
          href: string;
        };
        /**
         * Link
         */
        self: {
          href: string;
        };
      };
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * The text of the comment.
       */
      body: string;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      created_at: Date;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line: number | null;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line: number | null;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line: number | null;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number | null;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      /**
       * Reactions
       */
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side: 'LEFT' | 'RIGHT';
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       * @defaultValue "RIGHT"
       */
      start_side: ('LEFT' | 'RIGHT' | null) | null;
      /**
       * The level at which the comment is targeted, can be a diff line or a file.
       */
      subject_type?: 'line' | 'file';
      updated_at: Date;
      /**
       * URL for the pull request review comment
       */
      url: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
    }[];
    node_id: string;
  };
};
/**
 * pull_request_review_thread unresolved event
 */
export type WebhookPullRequestReviewThreadUnresolved = {
  action: 'unresolved';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Simple Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    closed_at: string | null;
    comments_url: string;
    commits_url: string;
    created_at: string;
    diff_url: string;
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    merge_commit_sha: string | null;
    merged_at: string | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    number: number;
    patch_url: string;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments_url: string;
    state: 'open' | 'closed';
    statuses_url: string;
    title: string;
    updated_at: string;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
  thread: {
    comments: {
      _links: {
        /**
         * Link
         */
        html: {
          href: string;
        };
        /**
         * Link
         */
        pull_request: {
          href: string;
        };
        /**
         * Link
         */
        self: {
          href: string;
        };
      };
      /**
       * AuthorAssociation
       * How the author is associated with the repository.
       */
      author_association:
        | 'COLLABORATOR'
        | 'CONTRIBUTOR'
        | 'FIRST_TIMER'
        | 'FIRST_TIME_CONTRIBUTOR'
        | 'MANNEQUIN'
        | 'MEMBER'
        | 'NONE'
        | 'OWNER';
      /**
       * The text of the comment.
       */
      body: string;
      /**
       * The SHA of the commit to which the comment applies.
       */
      commit_id: string;
      created_at: Date;
      /**
       * The diff of the line that the comment refers to.
       */
      diff_hunk: string;
      /**
       * HTML URL for the pull request review comment.
       */
      html_url: string;
      /**
       * The ID of the pull request review comment.
       */
      id: number;
      /**
       * The comment ID to reply to.
       */
      in_reply_to_id?: number;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      line: number | null;
      /**
       * The node ID of the pull request review comment.
       */
      node_id: string;
      /**
       * The SHA of the original commit to which the comment applies.
       */
      original_commit_id: string;
      /**
       * The line of the blob to which the comment applies. The last line of the range for a multi-line comment
       */
      original_line: number;
      /**
       * The index of the original line in the diff to which the comment applies.
       */
      original_position: number;
      /**
       * The first line of the range for a multi-line comment.
       */
      original_start_line: number | null;
      /**
       * The relative path of the file to which the comment applies.
       */
      path: string;
      /**
       * The line index in the diff to which the comment applies.
       */
      position: number | null;
      /**
       * The ID of the pull request review to which the comment belongs.
       */
      pull_request_review_id: number | null;
      /**
       * URL for the pull request that the review comment belongs to.
       */
      pull_request_url: string;
      /**
       * Reactions
       */
      reactions: {
        '+1': number;
        '-1': number;
        confused: number;
        eyes: number;
        heart: number;
        hooray: number;
        laugh: number;
        rocket: number;
        total_count: number;
        url: string;
      };
      /**
       * The side of the first line of the range for a multi-line comment.
       */
      side: 'LEFT' | 'RIGHT';
      /**
       * The first line of the range for a multi-line comment.
       */
      start_line: number | null;
      /**
       * The side of the first line of the range for a multi-line comment.
       * @defaultValue "RIGHT"
       */
      start_side: ('LEFT' | 'RIGHT' | null) | null;
      /**
       * The level at which the comment is targeted, can be a diff line or a file.
       */
      subject_type?: 'line' | 'file';
      updated_at: Date;
      /**
       * URL for the pull request review comment
       */
      url: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    }[];
    node_id: string;
  };
};
/**
 * pull_request synchronize event
 */
export type WebhookPullRequestSynchronize = {
  action: 'synchronize';
  after: string;
  before: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request unassigned event
 */
export type WebhookPullRequestUnassigned = {
  action: 'unassigned';
  /**
   * User
   */
  assignee?: {
    avatar_url?: string;
    deleted?: boolean;
    email?: string | null;
    events_url?: string;
    followers_url?: string;
    following_url?: string;
    gists_url?: string;
    gravatar_id?: string;
    html_url?: string;
    id: number;
    login: string;
    name?: string;
    node_id?: string;
    organizations_url?: string;
    received_events_url?: string;
    repos_url?: string;
    site_admin?: boolean;
    starred_url?: string;
    subscriptions_url?: string;
    type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
    url?: string;
  } | null;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * pull_request unlabeled event
 */
export type WebhookPullRequestUnlabeled = {
  action: 'unlabeled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * Label
   */
  label?: {
    /**
     * 6-character hex code, without the leading #, identifying the color
     */
    color: string;
    default: boolean;
    description: string | null;
    id: number;
    /**
     * The name of the label.
     */
    name: string;
    node_id: string;
    /**
     * URL for the label
     */
    url: string;
  };
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string | null;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string | null;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit message title.
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description: string | null;
          html_url: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url: string;
          /**
           * Name of the team
           */
          name: string;
          node_id: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission: string;
          privacy: 'open' | 'closed' | 'secret';
          repositories_url: string;
          slug: string;
          /**
           * URL for the team
           */
          url: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization' | 'Mannequin';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * pull_request unlocked event
 */
export type WebhookPullRequestUnlocked = {
  action: 'unlocked';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  /**
   * The pull request number.
   */
  number: number;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Pull Request
   */
  pull_request: {
    _links: {
      /**
       * Link
       */
      comments: {
        href: string;
      };
      /**
       * Link
       */
      commits: {
        href: string;
      };
      /**
       * Link
       */
      html: {
        href: string;
      };
      /**
       * Link
       */
      issue: {
        href: string;
      };
      /**
       * Link
       */
      review_comment: {
        href: string;
      };
      /**
       * Link
       */
      review_comments: {
        href: string;
      };
      /**
       * Link
       */
      self: {
        href: string;
      };
      /**
       * Link
       */
      statuses: {
        href: string;
      };
    };
    active_lock_reason:
      | ('resolved' | 'off-topic' | 'too heated' | 'spam' | null)
      | null;
    additions?: number;
    /**
     * User
     */
    assignee: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    assignees: ({
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null)[];
    /**
     * AuthorAssociation
     * How the author is associated with the repository.
     */
    author_association:
      | 'COLLABORATOR'
      | 'CONTRIBUTOR'
      | 'FIRST_TIMER'
      | 'FIRST_TIME_CONTRIBUTOR'
      | 'MANNEQUIN'
      | 'MEMBER'
      | 'NONE'
      | 'OWNER';
    /**
     * PullRequestAutoMerge
     * The status of auto merging a pull request.
     */
    auto_merge: {
      /**
       * Commit message for the merge commit.
       */
      commit_message: string | null;
      /**
       * Title for the merge commit message.
       */
      commit_title: string;
      /**
       * User
       */
      enabled_by: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * The merge method to use.
       */
      merge_method: 'merge' | 'squash' | 'rebase';
    } | null;
    base: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      };
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    body: string | null;
    changed_files?: number;
    closed_at: Date | null;
    comments?: number;
    comments_url: string;
    commits?: number;
    commits_url: string;
    created_at: Date;
    deletions?: number;
    diff_url: string;
    /**
     * Indicates whether or not the pull request is a draft.
     */
    draft: boolean;
    head: {
      label: string;
      ref: string;
      /**
       * Repository
       * A git repository
       */
      repo: {
        /**
         * Whether to allow auto-merge for pull requests.
         */
        allow_auto_merge?: boolean;
        /**
         * Whether to allow private forks
         */
        allow_forking?: boolean;
        /**
         * Whether to allow merge commits for pull requests.
         * @defaultValue true
         */
        allow_merge_commit?: boolean;
        /**
         * Whether to allow rebase merges for pull requests.
         * @defaultValue true
         */
        allow_rebase_merge?: boolean;
        /**
         * Whether to allow squash merges for pull requests.
         * @defaultValue true
         */
        allow_squash_merge?: boolean;
        allow_update_branch?: boolean;
        archive_url: string;
        /**
         * Whether the repository is archived.
         */
        archived: boolean;
        assignees_url: string;
        blobs_url: string;
        branches_url: string;
        clone_url: string;
        collaborators_url: string;
        comments_url: string;
        commits_url: string;
        compare_url: string;
        contents_url: string;
        contributors_url: string;
        created_at: number | Date;
        /**
         * The default branch of the repository.
         */
        default_branch: string;
        /**
         * Whether to delete head branches when pull requests are merged
         */
        delete_branch_on_merge?: boolean;
        deployments_url: string;
        description: string | null;
        /**
         * Returns whether or not this repository is disabled.
         */
        disabled?: boolean;
        downloads_url: string;
        events_url: string;
        fork: boolean;
        forks: number;
        forks_count: number;
        forks_url: string;
        full_name: string;
        git_commits_url: string;
        git_refs_url: string;
        git_tags_url: string;
        git_url: string;
        /**
         * Whether downloads are enabled.
         * @defaultValue true
         */
        has_downloads: boolean;
        /**
         * Whether issues are enabled.
         * @defaultValue true
         */
        has_issues: boolean;
        has_pages: boolean;
        /**
         * Whether projects are enabled.
         * @defaultValue true
         */
        has_projects: boolean;
        /**
         * Whether the wiki is enabled.
         * @defaultValue true
         */
        has_wiki: boolean;
        /**
         * Whether discussions are enabled.
         */
        has_discussions: boolean;
        homepage: string | null;
        hooks_url: string;
        html_url: string;
        /**
         * Unique identifier of the repository
         */
        id: number;
        is_template?: boolean;
        issue_comment_url: string;
        issue_events_url: string;
        issues_url: string;
        keys_url: string;
        labels_url: string;
        language: string | null;
        languages_url: string;
        /**
         * License
         */
        license: {
          key: string;
          name: string;
          node_id: string;
          spdx_id: string;
          url: string | null;
        } | null;
        master_branch?: string;
        /**
         * The default value for a merge commit message.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `PR_BODY` - default to the pull request's body.
         * - `BLANK` - default to a blank commit message.
         */
        merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
        /**
         * The default value for a merge commit title.
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
         */
        merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
        merges_url: string;
        milestones_url: string;
        mirror_url: string | null;
        /**
         * The name of the repository.
         */
        name: string;
        node_id: string;
        notifications_url: string;
        open_issues: number;
        open_issues_count: number;
        organization?: string;
        /**
         * User
         */
        owner: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
        permissions?: {
          admin: boolean;
          maintain?: boolean;
          pull: boolean;
          push: boolean;
          triage?: boolean;
        };
        /**
         * Whether the repository is private or public.
         */
        private: boolean;
        public?: boolean;
        pulls_url: string;
        pushed_at: (number | Date) | null;
        releases_url: string;
        role_name?: string | null;
        size: number;
        /**
         * The default value for a squash merge commit message:
         *
         * - `PR_BODY` - default to the pull request's body.
         * - `COMMIT_MESSAGES` - default to the branch's commit messages.
         * - `BLANK` - default to a blank commit message.
         */
        squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
        /**
         * The default value for a squash merge commit title:
         *
         * - `PR_TITLE` - default to the pull request's title.
         * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
         */
        squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
        ssh_url: string;
        stargazers?: number;
        stargazers_count: number;
        stargazers_url: string;
        statuses_url: string;
        subscribers_url: string;
        subscription_url: string;
        svn_url: string;
        tags_url: string;
        teams_url: string;
        topics: string[];
        trees_url: string;
        updated_at: Date;
        url: string;
        /**
         * Whether a squash merge commit can use the pull request title as default. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
         */
        use_squash_pr_title_as_default?: boolean;
        visibility: 'public' | 'private' | 'internal';
        watchers: number;
        watchers_count: number;
        /**
         * Whether to require contributors to sign off on web-based commits
         */
        web_commit_signoff_required?: boolean;
      } | null;
      sha: string;
      /**
       * User
       */
      user: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
    };
    html_url: string;
    id: number;
    issue_url: string;
    labels: {
      /**
       * 6-character hex code, without the leading #, identifying the color
       */
      color: string;
      default: boolean;
      description: string | null;
      id: number;
      /**
       * The name of the label.
       */
      name: string;
      node_id: string;
      /**
       * URL for the label
       */
      url: string;
    }[];
    locked: boolean;
    /**
     * Indicates whether maintainers can modify the pull request.
     */
    maintainer_can_modify?: boolean;
    merge_commit_sha: string | null;
    mergeable?: boolean | null;
    mergeable_state?: string;
    merged?: boolean | null;
    merged_at: Date | null;
    /**
     * User
     */
    merged_by?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Milestone
     * A collection of related issues and pull requests.
     */
    milestone: {
      closed_at: Date | null;
      closed_issues: number;
      created_at: Date;
      /**
       * User
       */
      creator: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      description: string | null;
      due_on: Date | null;
      html_url: string;
      id: number;
      labels_url: string;
      node_id: string;
      /**
       * The number of the milestone.
       */
      number: number;
      open_issues: number;
      /**
       * The state of the milestone.
       */
      state: 'open' | 'closed';
      /**
       * The title of the milestone.
       */
      title: string;
      updated_at: Date;
      url: string;
    } | null;
    node_id: string;
    /**
     * Number uniquely identifying the pull request within its repository.
     */
    number: number;
    patch_url: string;
    rebaseable?: boolean | null;
    requested_reviewers: (
      | ({
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null)
      | {
          deleted?: boolean;
          /**
           * Description of the team
           */
          description?: string | null;
          html_url?: string;
          /**
           * Unique identifier of the team
           */
          id: number;
          members_url?: string;
          /**
           * Name of the team
           */
          name: string;
          node_id?: string;
          parent?: {
            /**
             * Description of the team
             */
            description: string | null;
            html_url: string;
            /**
             * Unique identifier of the team
             */
            id: number;
            members_url: string;
            /**
             * Name of the team
             */
            name: string;
            node_id: string;
            /**
             * Permission that the team will have for its repositories
             */
            permission: string;
            privacy: 'open' | 'closed' | 'secret';
            repositories_url: string;
            slug: string;
            /**
             * URL for the team
             */
            url: string;
          } | null;
          /**
           * Permission that the team will have for its repositories
           */
          permission?: string;
          privacy?: 'open' | 'closed' | 'secret';
          repositories_url?: string;
          slug?: string;
          /**
           * URL for the team
           */
          url?: string;
        }
    )[];
    requested_teams: {
      deleted?: boolean;
      /**
       * Description of the team
       */
      description?: string | null;
      html_url?: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url?: string;
      /**
       * Name of the team
       */
      name: string;
      node_id?: string;
      parent?: {
        /**
         * Description of the team
         */
        description: string | null;
        html_url: string;
        /**
         * Unique identifier of the team
         */
        id: number;
        members_url: string;
        /**
         * Name of the team
         */
        name: string;
        node_id: string;
        /**
         * Permission that the team will have for its repositories
         */
        permission: string;
        privacy: 'open' | 'closed' | 'secret';
        repositories_url: string;
        slug: string;
        /**
         * URL for the team
         */
        url: string;
      } | null;
      /**
       * Permission that the team will have for its repositories
       */
      permission?: string;
      privacy?: 'open' | 'closed' | 'secret';
      repositories_url?: string;
      slug?: string;
      /**
       * URL for the team
       */
      url?: string;
    }[];
    review_comment_url: string;
    review_comments?: number;
    review_comments_url: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state: 'open' | 'closed';
    statuses_url: string;
    /**
     * The title of the pull request.
     */
    title: string;
    updated_at: Date;
    url: string;
    /**
     * User
     */
    user: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * push event
 */
export type WebhookPush = {
  /**
   * The SHA of the most recent commit on `ref` after the push.
   */
  after: string;
  base_ref: string | null;
  /**
   * The SHA of the most recent commit on `ref` before the push.
   */
  before: string;
  /**
   * An array of commit objects describing the pushed commits. (Pushed commits are all commits that are included in the `compare` between the `before` commit and the `after` commit.) The array includes a maximum of 2048 commits. If necessary, you can use the [Commits API](https://docs.github.com/rest/commits) to fetch additional commits.
   */
  commits: {
    /**
     * An array of files added in the commit. A maximum of 3000 changed files will be reported per commit.
     */
    added?: string[];
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    author: {
      date?: Date;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    committer: {
      date?: Date;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Whether this commit is distinct from any that have been pushed before.
     */
    distinct: boolean;
    id: string;
    /**
     * The commit message.
     */
    message: string;
    /**
     * An array of files modified by the commit. A maximum of 3000 changed files will be reported per commit.
     */
    modified?: string[];
    /**
     * An array of files removed in the commit. A maximum of 3000 changed files will be reported per commit.
     */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     */
    timestamp: Date;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     */
    url: string;
  }[];
  /**
   * URL that shows the changes in this `ref` update, from the `before` commit to the `after` commit. For a newly created `ref` that is directly based on the default branch, this is the comparison between the head of the default branch and the `after` commit. Otherwise, this shows all commits until the `after` commit.
   */
  compare: string;
  /**
   * Whether this push created the `ref`.
   */
  created: boolean;
  /**
   * Whether this push deleted the `ref`.
   */
  deleted: boolean;
  enterprise?: EnterpriseWebhooks;
  /**
   * Whether this push was a force push of the `ref`.
   */
  forced: boolean;
  /**
   * Commit
   */
  head_commit: {
    /**
     * An array of files added in the commit.
     */
    added?: string[];
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    author: {
      date?: Date;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Committer
     * Metaproperties for Git author/committer information.
     */
    committer: {
      date?: Date;
      email: string | null;
      /**
       * The git author's name.
       */
      name: string;
      username?: string;
    };
    /**
     * Whether this commit is distinct from any that have been pushed before.
     */
    distinct: boolean;
    id: string;
    /**
     * The commit message.
     */
    message: string;
    /**
     * An array of files modified by the commit.
     */
    modified?: string[];
    /**
     * An array of files removed in the commit.
     */
    removed?: string[];
    /**
     * The ISO 8601 timestamp of the commit.
     */
    timestamp: Date;
    tree_id: string;
    /**
     * URL that points to the commit API resource.
     */
    url: string;
  } | null;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Committer
   * Metaproperties for Git author/committer information.
   */
  pusher: {
    date?: Date;
    email?: string | null;
    /**
     * The git author's name.
     */
    name: string;
    username?: string;
  };
  /**
   * The full git ref that was pushed. Example: `refs/heads/main` or `refs/tags/v3.14.1`.
   */
  ref: string;
  /**
   * Repository
   * A git repository
   */
  repository: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | Date;
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @defaultValue true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @defaultValue true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @defaultValue true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @defaultValue true
     */
    has_wiki: boolean;
    /**
     * Whether discussions are enabled.
     */
    has_discussions: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | Date) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: string[];
    trees_url: string;
    updated_at: Date;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
    /**
     * Whether to require contributors to sign off on web-based commits
     */
    web_commit_signoff_required?: boolean;
  };
  sender?: SimpleUserWebhooks;
};
export type WebhookRegistryPackagePublished = {
  action: 'published';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  registry_package: {
    created_at: string | null;
    description: string | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
    package_type: string;
    package_version: {
      author?: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      body?: string | any;
      body_html?: string;
      container_metadata?: {
        labels?: any | null;
        manifest?: any | null;
        tag?: {
          digest?: string;
          name?: string;
        };
      };
      created_at?: string;
      description: string;
      docker_metadata?: {
        tags?: string[];
      }[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: {
        [key: string]: any;
      }[];
      name: string;
      npm_metadata?: {
        name?: string;
        version?: string;
        npm_user?: string;
        author?: (string | any) | null;
        bugs?: (string | any) | null;
        dependencies?: any;
        dev_dependencies?: any;
        peer_dependencies?: any;
        optional_dependencies?: any;
        description?: string;
        dist?: (string | any) | null;
        git_head?: string;
        homepage?: string;
        license?: string;
        main?: string;
        repository?: (string | any) | null;
        scripts?: any;
        id?: string;
        node_version?: string;
        npm_version?: string;
        has_shrinkwrap?: boolean;
        maintainers?: string[];
        contributors?: string[];
        engines?: any;
        keywords?: string[];
        files?: string[];
        bin?: any;
        man?: any;
        directories?: (string | any) | null;
        os?: string[];
        cpu?: string[];
        readme?: string;
        installation_command?: string;
        release_id?: number;
        commit_oid?: string;
        published_via_actions?: boolean;
        deleted_by_id?: number;
      } | null;
      nuget_metadata?:
        | {
            id?: (string | any | number) | null;
            name?: string;
            value?:
              | boolean
              | string
              | number
              | {
                  url?: string;
                  branch?: string;
                  commit?: string;
                  type?: string;
                };
          }[]
        | null;
      package_files: {
        content_type: string;
        created_at: string;
        download_url: string;
        id: number;
        md5: string | null;
        name: string;
        sha1: string | null;
        sha256: string | null;
        size: number;
        state: string | null;
        updated_at: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author?: {
          avatar_url?: string;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id?: number;
          login?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: string;
          url?: string;
        };
        created_at?: string;
        draft?: boolean;
        html_url?: string;
        id?: number;
        name?: string | null;
        prerelease?: boolean;
        published_at?: string;
        tag_name?: string;
        target_commitish?: string;
        url?: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      summary: string;
      tag_name?: string;
      target_commitish?: string;
      target_oid?: string;
      updated_at?: string;
      version: string;
    } | null;
    registry: {
      about_url?: string;
      name?: string;
      type?: string;
      url?: string;
      vendor?: string;
    } | null;
    updated_at: string | null;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
export type WebhookRegistryPackageUpdated = {
  action: 'updated';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  registry_package: {
    created_at: string;
    description: any | null;
    ecosystem: string;
    html_url: string;
    id: number;
    name: string;
    namespace: string;
    owner: {
      avatar_url: string;
      events_url: string;
      followers_url: string;
      following_url: string;
      gists_url: string;
      gravatar_id: string;
      html_url: string;
      id: number;
      login: string;
      node_id: string;
      organizations_url: string;
      received_events_url: string;
      repos_url: string;
      site_admin: boolean;
      starred_url: string;
      subscriptions_url: string;
      type: string;
      url: string;
    };
    package_type: string;
    package_version: {
      author: {
        avatar_url: string;
        events_url: string;
        followers_url: string;
        following_url: string;
        gists_url: string;
        gravatar_id: string;
        html_url: string;
        id: number;
        login: string;
        node_id: string;
        organizations_url: string;
        received_events_url: string;
        repos_url: string;
        site_admin: boolean;
        starred_url: string;
        subscriptions_url: string;
        type: string;
        url: string;
      };
      body: string;
      body_html: string;
      created_at: string;
      description: string;
      docker_metadata?: ({
        tags?: string[];
      } | null)[];
      draft?: boolean;
      html_url: string;
      id: number;
      installation_command: string;
      manifest?: string;
      metadata: {
        [key: string]: any;
      }[];
      name: string;
      package_files: {
        content_type?: string;
        created_at?: string;
        download_url?: string;
        id?: number;
        md5?: string | null;
        name?: string;
        sha1?: string | null;
        sha256?: string;
        size?: number;
        state?: string;
        updated_at?: string;
      }[];
      package_url: string;
      prerelease?: boolean;
      release?: {
        author: {
          avatar_url: string;
          events_url: string;
          followers_url: string;
          following_url: string;
          gists_url: string;
          gravatar_id: string;
          html_url: string;
          id: number;
          login: string;
          node_id: string;
          organizations_url: string;
          received_events_url: string;
          repos_url: string;
          site_admin: boolean;
          starred_url: string;
          subscriptions_url: string;
          type: string;
          url: string;
        };
        created_at: string;
        draft: boolean;
        html_url: string;
        id: number;
        name: string;
        prerelease: boolean;
        published_at: string;
        tag_name: string;
        target_commitish: string;
        url: string;
      };
      rubygems_metadata?: WebhookRubygemsMetadata[];
      summary: string;
      tag_name?: string;
      target_commitish: string;
      target_oid: string;
      updated_at: string;
      version: string;
    };
    registry: any | null;
    updated_at: string;
  };
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * release created event
 */
export type WebhookReleaseCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Release
   * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
   */
  release: {
    assets: {
      browser_download_url: string;
      content_type: string;
      created_at: Date;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: Date;
      /**
       * User
       */
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }[];
    assets_url: string;
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: Date | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: Date | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * release deleted event
 */
export type WebhookReleaseDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Release
   * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
   */
  release: {
    assets: {
      browser_download_url: string;
      content_type: string;
      created_at: Date;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: Date;
      /**
       * User
       */
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }[];
    assets_url: string;
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: Date | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: Date | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * release edited event
 */
export type WebhookReleaseEdited = {
  action: 'edited';
  changes: {
    body?: {
      /**
       * The previous version of the body if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
    make_latest?: {
      /**
       * Whether this release was explicitly `edited` to be the latest.
       */
      to: boolean;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Release
   * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
   */
  release: {
    assets: {
      browser_download_url: string;
      content_type: string;
      created_at: Date;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: Date;
      /**
       * User
       */
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }[];
    assets_url: string;
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: Date | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: Date | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * release prereleased event
 */
export type WebhookReleasePrereleased = {
  action: 'prereleased';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  release: {
    assets: {
      browser_download_url: string;
      content_type: string;
      created_at: Date;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: Date;
      /**
       * User
       */
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }[];
    assets_url: string;
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: Date | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: Date | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  } & {
    assets?: (any | null)[];
    assets_url?: string;
    author?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    body?: string | null;
    created_at?: string;
    draft?: boolean;
    html_url?: string;
    id?: number;
    name?: string | null;
    node_id?: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: true;
    published_at?: string | null;
    tag_name?: string;
    tarball_url?: string | null;
    target_commitish?: string;
    upload_url?: string;
    url?: string;
    zipball_url?: string | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * release published event
 */
export type WebhookReleasePublished = {
  action: 'published';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  release: {
    assets: {
      browser_download_url: string;
      content_type: string;
      created_at: Date;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: Date;
      /**
       * User
       */
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }[];
    assets_url: string;
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: Date | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: Date | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  } & {
    assets?: (any | null)[];
    assets_url?: string;
    author?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    body?: string | null;
    created_at?: string;
    draft?: boolean;
    html_url?: string;
    id?: number;
    name?: string | null;
    node_id?: string;
    prerelease?: boolean;
    published_at: Date | null;
    tag_name?: string;
    tarball_url?: string | null;
    target_commitish?: string;
    upload_url?: string;
    url?: string;
    zipball_url?: string | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * release released event
 */
export type WebhookReleaseReleased = {
  action: 'released';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  /**
   * Release
   * The [release](https://docs.github.com/rest/releases/releases/#get-a-release) object.
   */
  release: {
    assets: {
      browser_download_url: string;
      content_type: string;
      created_at: Date;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: Date;
      /**
       * User
       */
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }[];
    assets_url: string;
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: Date | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: Date | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * release unpublished event
 */
export type WebhookReleaseUnpublished = {
  action: 'unpublished';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  release: {
    assets: {
      browser_download_url: string;
      content_type: string;
      created_at: Date;
      download_count: number;
      id: number;
      label: string | null;
      /**
       * The file name of the asset.
       */
      name: string;
      node_id: string;
      size: number;
      /**
       * State of the release asset.
       */
      state: 'uploaded';
      updated_at: Date;
      /**
       * User
       */
      uploader?: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      url: string;
    }[];
    assets_url: string;
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    body: string | null;
    created_at: Date | null;
    discussion_url?: string;
    /**
     * Whether the release is a draft or published
     */
    draft: boolean;
    html_url: string;
    id: number;
    name: string | null;
    node_id: string;
    /**
     * Whether the release is identified as a prerelease or a full release.
     */
    prerelease: boolean;
    published_at: Date | null;
    /**
     * Reactions
     */
    reactions?: {
      '+1': number;
      '-1': number;
      confused: number;
      eyes: number;
      heart: number;
      hooray: number;
      laugh: number;
      rocket: number;
      total_count: number;
      url: string;
    };
    /**
     * The name of the tag.
     */
    tag_name: string;
    tarball_url: string | null;
    /**
     * Specifies the commitish value that determines where the Git tag is created from.
     */
    target_commitish: string;
    upload_url: string;
    url: string;
    zipball_url: string | null;
  } & {
    assets?: (any | null)[];
    assets_url?: string;
    author?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    body?: string | null;
    created_at?: string;
    draft?: boolean;
    html_url?: string;
    id?: number;
    name?: string | null;
    node_id?: string;
    prerelease?: boolean;
    published_at: string | null;
    tag_name?: string;
    tarball_url?: string | null;
    target_commitish?: string;
    upload_url?: string;
    url?: string;
    zipball_url?: string | null;
  };
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * Repository advisory published event
 */
export type WebhookRepositoryAdvisoryPublished = {
  action: 'published';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  repository_advisory: RepositoryAdvisory;
  sender?: SimpleUserWebhooks;
};
/**
 * Repository advisory reported event
 */
export type WebhookRepositoryAdvisoryReported = {
  action: 'reported';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  repository_advisory: RepositoryAdvisory;
  sender?: SimpleUserWebhooks;
};
/**
 * repository archived event
 */
export type WebhookRepositoryArchived = {
  action: 'archived';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository created event
 */
export type WebhookRepositoryCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository deleted event
 */
export type WebhookRepositoryDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository_dispatch event
 */
export type WebhookRepositoryDispatchSample = {
  action: 'sample.collected';
  branch: string;
  client_payload: {
    [key: string]: any;
  } | null;
  enterprise?: EnterpriseWebhooks;
  installation: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository edited event
 */
export type WebhookRepositoryEdited = {
  action: 'edited';
  changes: {
    default_branch?: {
      from: string;
    };
    description?: {
      from: string | null;
    };
    homepage?: {
      from: string | null;
    };
    topics?: {
      from?: string[] | null;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository_import event
 */
export type WebhookRepositoryImport = {
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  status: 'success' | 'cancelled' | 'failure';
};
/**
 * repository privatized event
 */
export type WebhookRepositoryPrivatized = {
  action: 'privatized';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository publicized event
 */
export type WebhookRepositoryPublicized = {
  action: 'publicized';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository renamed event
 */
export type WebhookRepositoryRenamed = {
  action: 'renamed';
  changes: {
    repository: {
      name: {
        from: string;
      };
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository ruleset created event
 */
export type WebhookRepositoryRulesetCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  repository_ruleset: RepositoryRuleset;
  sender: SimpleUserWebhooks;
};
/**
 * repository ruleset deleted event
 */
export type WebhookRepositoryRulesetDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  repository_ruleset: RepositoryRuleset;
  sender: SimpleUserWebhooks;
};
/**
 * repository ruleset edited event
 */
export type WebhookRepositoryRulesetEdited = {
  action: 'edited';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  repository_ruleset: RepositoryRuleset;
  changes?: {
    name?: {
      from?: string;
    };
    enforcement?: {
      from?: string;
    };
    conditions?: {
      added?: RepositoryRulesetConditions[];
      deleted?: RepositoryRulesetConditions[];
      updated?: {
        condition?: RepositoryRulesetConditions;
        changes?: {
          condition_type?: {
            from?: string;
          };
          target?: {
            from?: string;
          };
          include?: {
            from?: string[];
          };
          exclude?: {
            from?: string[];
          };
        };
      }[];
    };
    rules?: {
      added?: RepositoryRule[];
      deleted?: RepositoryRule[];
      updated?: {
        rule?: RepositoryRule;
        changes?: {
          configuration?: {
            from?: string;
          };
          rule_type?: {
            from?: string;
          };
          pattern?: {
            from?: string;
          };
        };
      }[];
    };
  };
  sender: SimpleUserWebhooks;
};
/**
 * repository transferred event
 */
export type WebhookRepositoryTransferred = {
  action: 'transferred';
  changes: {
    owner: {
      from: {
        /**
         * Organization
         */
        organization?: {
          avatar_url: string;
          description: string | null;
          events_url: string;
          hooks_url: string;
          html_url?: string;
          id: number;
          issues_url: string;
          login: string;
          members_url: string;
          node_id: string;
          public_members_url: string;
          repos_url: string;
          url: string;
        };
        /**
         * User
         */
        user?: {
          avatar_url?: string;
          deleted?: boolean;
          email?: string | null;
          events_url?: string;
          followers_url?: string;
          following_url?: string;
          gists_url?: string;
          gravatar_id?: string;
          html_url?: string;
          id: number;
          login: string;
          name?: string;
          node_id?: string;
          organizations_url?: string;
          received_events_url?: string;
          repos_url?: string;
          site_admin?: boolean;
          starred_url?: string;
          subscriptions_url?: string;
          type?: 'Bot' | 'User' | 'Organization';
          url?: string;
        } | null;
      };
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository unarchived event
 */
export type WebhookRepositoryUnarchived = {
  action: 'unarchived';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository_vulnerability_alert create event
 */
export type WebhookRepositoryVulnerabilityAlertCreate = {
  action: 'create';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    /**
     * User
     */
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: Date;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    external_identifier?: string;
    external_reference?: string | null;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'open';
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository_vulnerability_alert dismiss event
 */
export type WebhookRepositoryVulnerabilityAlertDismiss = {
  action: 'dismiss';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_comment?: string | null;
    dismiss_reason?: string;
    dismissed_at?: string;
    /**
     * User
     */
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: Date;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    dismiss_comment?: string | null;
    dismiss_reason: string;
    dismissed_at: string;
    /**
     * User
     */
    dismisser: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier?: string;
    external_reference?: string | null;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'dismissed';
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository_vulnerability_alert reopen event
 */
export type WebhookRepositoryVulnerabilityAlertReopen = {
  action: 'reopen';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    /**
     * User
     */
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: Date;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    external_identifier?: string;
    external_reference?: string | null;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'open';
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * repository_vulnerability_alert resolve event
 */
export type WebhookRepositoryVulnerabilityAlertResolve = {
  action: 'resolve';
  alert: {
    affected_package_name: string;
    affected_range: string;
    created_at: string;
    dismiss_reason?: string;
    dismissed_at?: string;
    /**
     * User
     */
    dismisser?: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    external_identifier: string;
    external_reference: string | null;
    fix_reason?: string;
    fixed_at?: Date;
    fixed_in?: string;
    ghsa_id: string;
    id: number;
    node_id: string;
    number: number;
    severity: string;
    state: 'open' | 'dismissed' | 'fixed';
  } & {
    affected_package_name?: string;
    affected_range?: string;
    created_at?: string;
    external_identifier?: string;
    external_reference?: string | null;
    fix_reason?: string;
    fixed_at?: Date;
    fixed_in?: string;
    ghsa_id?: string;
    id?: number;
    node_id?: string;
    number?: number;
    severity?: string;
    state: 'fixed' | 'open';
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * secret_scanning_alert created event
 */
export type WebhookSecretScanningAlertCreated = {
  action: 'created';
  alert: SecretScanningAlertWebhook;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * Secret Scanning Alert Location Created Event
 */
export type WebhookSecretScanningAlertLocationCreated = {
  action?: 'created';
  alert: SecretScanningAlertWebhook;
  installation?: SimpleInstallation;
  location: SecretScanningLocation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * Secret Scanning Alert Location Created Event
 */
export type WebhookSecretScanningAlertLocationCreatedFormEncoded = {
  /**
   * A URL-encoded string of the secret_scanning_alert_location.created JSON payload. The decoded payload is a JSON object.
   */
  payload: string;
};
/**
 * secret_scanning_alert reopened event
 */
export type WebhookSecretScanningAlertReopened = {
  action: 'reopened';
  alert: SecretScanningAlertWebhook;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * secret_scanning_alert resolved event
 */
export type WebhookSecretScanningAlertResolved = {
  action: 'resolved';
  alert: SecretScanningAlertWebhook;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * secret_scanning_alert revoked event
 */
export type WebhookSecretScanningAlertRevoked = {
  action: 'revoked';
  alert: SecretScanningAlertWebhook;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * secret_scanning_alert validated event
 */
export type WebhookSecretScanningAlertValidated = {
  action: 'validated';
  alert: SecretScanningAlertWebhook;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender?: SimpleUserWebhooks;
};
/**
 * security_advisory published event
 */
export type WebhookSecurityAdvisoryPublished = {
  action: 'published';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string | null;
  };
  sender?: SimpleUserWebhooks;
};
/**
 * security_advisory updated event
 */
export type WebhookSecurityAdvisoryUpdated = {
  action: 'updated';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string | null;
  };
  sender?: SimpleUserWebhooks;
};
/**
 * security_advisory withdrawn event
 */
export type WebhookSecurityAdvisoryWithdrawn = {
  action: 'withdrawn';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  /**
   * The details of the security advisory, including summary, description, and severity.
   */
  security_advisory: {
    cvss: {
      score: number;
      vector_string: string | null;
    };
    cwes: {
      cwe_id: string;
      name: string;
    }[];
    description: string;
    ghsa_id: string;
    identifiers: {
      type: string;
      value: string;
    }[];
    published_at: string;
    references: {
      url: string;
    }[];
    severity: string;
    summary: string;
    updated_at: string;
    vulnerabilities: {
      first_patched_version: {
        identifier: string;
      } | null;
      package: {
        ecosystem: string;
        name: string;
      };
      severity: string;
      vulnerable_version_range: string;
    }[];
    withdrawn_at: string;
  };
  sender?: SimpleUserWebhooks;
};
/**
 * security_and_analysis event
 */
export type WebhookSecurityAndAnalysis = {
  changes: {
    from?: {
      security_and_analysis?: SecurityAndAnalysis;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: FullRepository;
  sender?: SimpleUserWebhooks;
};
/**
 * sponsorship cancelled event
 */
export type WebhookSponsorshipCancelled = {
  action: 'cancelled';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    /**
     * User
     */
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * User
     */
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};
/**
 * sponsorship created event
 */
export type WebhookSponsorshipCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    /**
     * User
     */
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * User
     */
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};
/**
 * sponsorship edited event
 */
export type WebhookSponsorshipEdited = {
  action: 'edited';
  changes: {
    privacy_level?: {
      /**
       * The `edited` event types include the details about the change when someone edits a sponsorship to change the privacy.
       */
      from: string;
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    /**
     * User
     */
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * User
     */
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};
/**
 * sponsorship pending_cancellation event
 */
export type WebhookSponsorshipPendingCancellation = {
  action: 'pending_cancellation';
  /**
   * The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
   */
  effective_date?: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    /**
     * User
     */
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * User
     */
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};
/**
 * sponsorship pending_tier_change event
 */
export type WebhookSponsorshipPendingTierChange = {
  action: 'pending_tier_change';
  changes: {
    tier: {
      /**
       * Sponsorship Tier
       * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
       */
      from: {
        created_at: string;
        description: string;
        is_custom_ammount?: boolean;
        is_custom_amount?: boolean;
        is_one_time: boolean;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
        node_id: string;
      };
    };
  };
  /**
   * The `pending_cancellation` and `pending_tier_change` event types will include the date the cancellation or tier change will take effect.
   */
  effective_date?: string;
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    /**
     * User
     */
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * User
     */
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};
/**
 * sponsorship tier_changed event
 */
export type WebhookSponsorshipTierChanged = {
  action: 'tier_changed';
  changes: {
    tier: {
      /**
       * Sponsorship Tier
       * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
       */
      from: {
        created_at: string;
        description: string;
        is_custom_ammount?: boolean;
        is_custom_amount?: boolean;
        is_one_time: boolean;
        monthly_price_in_cents: number;
        monthly_price_in_dollars: number;
        name: string;
        node_id: string;
      };
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository?: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  sponsorship: {
    created_at: string;
    maintainer?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    node_id: string;
    privacy_level: string;
    /**
     * User
     */
    sponsor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * User
     */
    sponsorable: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    /**
     * Sponsorship Tier
     * The `tier_changed` and `pending_tier_change` will include the original tier before the change or pending change. For more information, see the pending tier change payload.
     */
    tier: {
      created_at: string;
      description: string;
      is_custom_ammount?: boolean;
      is_custom_amount?: boolean;
      is_one_time: boolean;
      monthly_price_in_cents: number;
      monthly_price_in_dollars: number;
      name: string;
      node_id: string;
    };
  };
};
/**
 * star created event
 */
export type WebhookStarCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
   */
  starred_at: string | null;
};
/**
 * star deleted event
 */
export type WebhookStarDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * The time the star was created. This is a timestamp in ISO 8601 format: `YYYY-MM-DDTHH:MM:SSZ`. Will be `null` for the `deleted` action.
   */
  starred_at: any | null;
};
/**
 * status event
 */
export type WebhookStatus = {
  avatar_url?: string | null;
  /**
   * An array of branch objects containing the status' SHA. Each branch contains the given SHA, but the SHA may or may not be the head of the branch. The array includes a maximum of 10 branches.
   */
  branches: {
    commit: {
      sha: string | null;
      url: string | null;
    };
    name: string;
    protected: boolean;
  }[];
  commit: {
    /**
     * User
     */
    author: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    comments_url: string;
    commit: {
      author: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      comment_count: number;
      committer: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      } & {
        date: string;
        email?: string;
        name?: string;
      };
      message: string;
      tree: {
        sha: string;
        url: string;
      };
      url: string;
      verification: {
        payload: string | null;
        reason:
          | 'expired_key'
          | 'not_signing_key'
          | 'gpgverify_error'
          | 'gpgverify_unavailable'
          | 'unsigned'
          | 'unknown_signature_type'
          | 'no_user'
          | 'unverified_email'
          | 'bad_email'
          | 'unknown_key'
          | 'malformed_signature'
          | 'invalid'
          | 'valid'
          | 'bad_cert'
          | 'ocsp_pending';
        signature: string | null;
        verified: boolean;
      };
    };
    /**
     * User
     */
    committer: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    html_url: string;
    node_id: string;
    parents: {
      html_url: string;
      sha: string;
      url: string;
    }[];
    sha: string;
    url: string;
  };
  context: string;
  created_at: string;
  /**
   * The optional human-readable description added to the status.
   */
  description: string | null;
  enterprise?: EnterpriseWebhooks;
  /**
   * The unique identifier of the status.
   */
  id: number;
  installation?: SimpleInstallation;
  name: string;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * The Commit SHA.
   */
  sha: string;
  /**
   * The new state. Can be `pending`, `success`, `failure`, or `error`.
   */
  state: 'pending' | 'success' | 'failure' | 'error';
  /**
   * The optional link added to the status.
   */
  target_url: string | null;
  updated_at: string;
};
/**
 * team_add event
 */
export type WebhookTeamAdd = {
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    /**
     * Whether team members will receive notifications when their team is @mentioned
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
/**
 * team added_to_repository event
 */
export type WebhookTeamAddedToRepository = {
  action: 'added_to_repository';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | Date;
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @defaultValue true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @defaultValue true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @defaultValue true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @defaultValue true
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | Date) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: string[];
    trees_url: string;
    updated_at: Date;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender?: SimpleUserWebhooks;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    /**
     * Whether team members will receive notifications when their team is @mentioned
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
/**
 * team created event
 */
export type WebhookTeamCreated = {
  action: 'created';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | Date;
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @defaultValue true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @defaultValue true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @defaultValue true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @defaultValue true
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | Date) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: string[];
    trees_url: string;
    updated_at: Date;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender: SimpleUserWebhooks;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    /**
     * Whether team members will receive notifications when their team is @mentioned
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
/**
 * team deleted event
 */
export type WebhookTeamDeleted = {
  action: 'deleted';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | Date;
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @defaultValue true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @defaultValue true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @defaultValue true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @defaultValue true
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | Date) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: string[];
    trees_url: string;
    updated_at: Date;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender?: SimpleUserWebhooks;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    /**
     * Whether team members will receive notifications when their team is @mentioned
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
/**
 * team edited event
 */
export type WebhookTeamEdited = {
  action: 'edited';
  /**
   * The changes to the team if the action was `edited`.
   */
  changes: {
    description?: {
      /**
       * The previous version of the description if the action was `edited`.
       */
      from: string;
    };
    name?: {
      /**
       * The previous version of the name if the action was `edited`.
       */
      from: string;
    };
    privacy?: {
      /**
       * The previous version of the team's privacy if the action was `edited`.
       */
      from: string;
    };
    notification_setting?: {
      /**
       * The previous version of the team's notification setting if the action was `edited`.
       */
      from: string;
    };
    repository?: {
      permissions: {
        from: {
          /**
           * The previous version of the team member's `admin` permission on a repository, if the action was `edited`.
           */
          admin?: boolean;
          /**
           * The previous version of the team member's `pull` permission on a repository, if the action was `edited`.
           */
          pull?: boolean;
          /**
           * The previous version of the team member's `push` permission on a repository, if the action was `edited`.
           */
          push?: boolean;
        };
      };
    };
  };
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | Date;
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @defaultValue true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @defaultValue true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @defaultValue true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @defaultValue true
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | Date) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: string[];
    trees_url: string;
    updated_at: Date;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender: SimpleUserWebhooks;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    /**
     * Whether team members will receive notifications when their team is @mentioned
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
/**
 * team removed_from_repository event
 */
export type WebhookTeamRemovedFromRepository = {
  action: 'removed_from_repository';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization: OrganizationSimpleWebhooks;
  /**
   * Repository
   * A git repository
   */
  repository?: {
    /**
     * Whether to allow auto-merge for pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to allow private forks
     */
    allow_forking?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow squash merges for pull requests.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    allow_update_branch?: boolean;
    archive_url: string;
    /**
     * Whether the repository is archived.
     */
    archived: boolean;
    assignees_url: string;
    blobs_url: string;
    branches_url: string;
    clone_url: string;
    collaborators_url: string;
    comments_url: string;
    commits_url: string;
    compare_url: string;
    contents_url: string;
    contributors_url: string;
    created_at: number | Date;
    /**
     * The custom properties that were defined for the repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
    /**
     * The default branch of the repository.
     */
    default_branch: string;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    deployments_url: string;
    description: string | null;
    /**
     * Returns whether or not this repository is disabled.
     */
    disabled?: boolean;
    downloads_url: string;
    events_url: string;
    fork: boolean;
    forks: number;
    forks_count: number;
    forks_url: string;
    full_name: string;
    git_commits_url: string;
    git_refs_url: string;
    git_tags_url: string;
    git_url: string;
    /**
     * Whether downloads are enabled.
     * @defaultValue true
     */
    has_downloads: boolean;
    /**
     * Whether issues are enabled.
     * @defaultValue true
     */
    has_issues: boolean;
    has_pages: boolean;
    /**
     * Whether projects are enabled.
     * @defaultValue true
     */
    has_projects: boolean;
    /**
     * Whether the wiki is enabled.
     * @defaultValue true
     */
    has_wiki: boolean;
    homepage: string | null;
    hooks_url: string;
    html_url: string;
    /**
     * Unique identifier of the repository
     */
    id: number;
    is_template?: boolean;
    issue_comment_url: string;
    issue_events_url: string;
    issues_url: string;
    keys_url: string;
    labels_url: string;
    language: string | null;
    languages_url: string;
    /**
     * License
     */
    license: {
      key: string;
      name: string;
      node_id: string;
      spdx_id: string;
      url: string | null;
    } | null;
    master_branch?: string;
    merges_url: string;
    milestones_url: string;
    mirror_url: string | null;
    /**
     * The name of the repository.
     */
    name: string;
    node_id: string;
    notifications_url: string;
    open_issues: number;
    open_issues_count: number;
    organization?: string;
    /**
     * User
     */
    owner: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    permissions?: {
      admin: boolean;
      maintain?: boolean;
      pull: boolean;
      push: boolean;
      triage?: boolean;
    };
    /**
     * Whether the repository is private or public.
     */
    private: boolean;
    public?: boolean;
    pulls_url: string;
    pushed_at: (number | Date) | null;
    releases_url: string;
    role_name?: string | null;
    size: number;
    ssh_url: string;
    stargazers?: number;
    stargazers_count: number;
    stargazers_url: string;
    statuses_url: string;
    subscribers_url: string;
    subscription_url: string;
    svn_url: string;
    tags_url: string;
    teams_url: string;
    topics: string[];
    trees_url: string;
    updated_at: Date;
    url: string;
    visibility: 'public' | 'private' | 'internal';
    watchers: number;
    watchers_count: number;
  };
  sender: SimpleUserWebhooks;
  /**
   * Team
   * Groups of organization members that gives permissions on specified repositories.
   */
  team: {
    deleted?: boolean;
    /**
     * Description of the team
     */
    description?: string | null;
    html_url?: string;
    /**
     * Unique identifier of the team
     */
    id: number;
    members_url?: string;
    /**
     * Name of the team
     */
    name: string;
    node_id?: string;
    parent?: {
      /**
       * Description of the team
       */
      description: string | null;
      html_url: string;
      /**
       * Unique identifier of the team
       */
      id: number;
      members_url: string;
      /**
       * Name of the team
       */
      name: string;
      node_id: string;
      /**
       * Permission that the team will have for its repositories
       */
      permission: string;
      privacy: 'open' | 'closed' | 'secret';
      /**
       * Whether team members will receive notifications when their team is @mentioned
       */
      notification_setting: 'notifications_enabled' | 'notifications_disabled';
      repositories_url: string;
      slug: string;
      /**
       * URL for the team
       */
      url: string;
    } | null;
    /**
     * Permission that the team will have for its repositories
     */
    permission?: string;
    privacy?: 'open' | 'closed' | 'secret';
    /**
     * Whether team members will receive notifications when their team is @mentioned
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    repositories_url?: string;
    slug?: string;
    /**
     * URL for the team
     */
    url?: string;
  };
};
/**
 * watch started event
 */
export type WebhookWatchStarted = {
  action: 'started';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
};
/**
 * workflow_dispatch event
 */
export type WebhookWorkflowDispatch = {
  enterprise?: EnterpriseWebhooks;
  inputs: {
    [key: string]: any;
  } | null;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  ref: string;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  workflow: string;
};
/**
 * workflow_job completed event
 */
export type WebhookWorkflowJobCompleted = {
  action: 'completed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | null
          | 'skipped'
          | 'cancelled'
          | 'action_required'
          | 'neutral'
          | 'timed_out'
        )
      | null;
    /**
     * The time that the job created.
     */
    created_at: string;
    head_sha: string;
    html_url: string;
    id: number;
    /**
     * Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
     */
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    /**
     * The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_id: number | null;
    /**
     * The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_name: string | null;
    /**
     * The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_id: number | null;
    /**
     * The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_name: string | null;
    started_at: string;
    /**
     * The current status of the job. Can be `queued`, `in_progress`, `waiting`, or `completed`.
     */
    status: 'queued' | 'in_progress' | 'completed' | 'waiting';
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion:
        | ('failure' | 'skipped' | 'success' | 'cancelled' | null)
        | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'in_progress' | 'completed' | 'queued';
    }[];
    url: string;
  } & {
    check_run_url?: string;
    completed_at?: string;
    conclusion:
      | 'success'
      | 'failure'
      | 'skipped'
      | 'cancelled'
      | 'action_required'
      | 'neutral'
      | 'timed_out';
    /**
     * The time that the job created.
     */
    created_at?: string;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: (string | null)[];
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status?: string;
    /**
     * The name of the current branch.
     */
    head_branch?: string | null;
    /**
     * The name of the workflow.
     */
    workflow_name?: string | null;
    steps?: (any | null)[];
    url?: string;
  };
  deployment?: Deployment;
};
/**
 * workflow_job in_progress event
 */
export type WebhookWorkflowJobInProgress = {
  action: 'in_progress';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion: ('success' | 'failure' | null | 'cancelled' | 'neutral') | null;
    /**
     * The time that the job created.
     */
    created_at: string;
    head_sha: string;
    html_url: string;
    id: number;
    /**
     * Custom labels for the job. Specified by the [`"runs-on"` attribute](https://docs.github.com/actions/reference/workflow-syntax-for-github-actions#jobsjob_idruns-on) in the workflow YAML.
     */
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    /**
     * The ID of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_id: number | null;
    /**
     * The name of the runner group that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_group_name: string | null;
    /**
     * The ID of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_id: number | null;
    /**
     * The name of the runner that is running this job. This will be `null` as long as `workflow_job[status]` is `queued`.
     */
    runner_name: string | null;
    started_at: string;
    /**
     * The current status of the job. Can be `queued`, `in_progress`, or `completed`.
     */
    status: 'queued' | 'in_progress' | 'completed';
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion:
        | ('failure' | 'skipped' | 'success' | null | 'cancelled')
        | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'in_progress' | 'completed' | 'queued' | 'pending';
    }[];
    url: string;
  } & {
    check_run_url?: string;
    completed_at?: string | null;
    conclusion?: string | null;
    /**
     * The time that the job created.
     */
    created_at?: string;
    head_sha?: string;
    html_url?: string;
    id?: number;
    labels?: string[];
    name?: string;
    node_id?: string;
    run_attempt?: number;
    run_id?: number;
    run_url?: string;
    runner_group_id?: number | null;
    runner_group_name?: string | null;
    runner_id?: number | null;
    runner_name?: string | null;
    started_at?: string;
    status: 'in_progress' | 'completed' | 'queued';
    /**
     * The name of the current branch.
     */
    head_branch?: string | null;
    /**
     * The name of the workflow.
     */
    workflow_name?: string | null;
    steps: {
      completed_at: string | null;
      conclusion: string | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'in_progress' | 'completed' | 'pending' | 'queued';
    }[];
    url?: string;
  };
  deployment?: Deployment;
};
/**
 * workflow_job queued event
 */
export type WebhookWorkflowJobQueued = {
  action: 'queued';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /**
     * The time that the job created.
     */
    created_at: string;
    head_sha: string;
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    started_at: Date;
    status: 'queued' | 'in_progress' | 'completed' | 'waiting';
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
    steps: {
      completed_at: string | null;
      conclusion:
        | ('failure' | 'skipped' | 'success' | 'cancelled' | null)
        | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'completed' | 'in_progress' | 'queued' | 'pending';
    }[];
    url: string;
  };
  deployment?: Deployment;
};
/**
 * workflow_job waiting event
 */
export type WebhookWorkflowJobWaiting = {
  action: 'waiting';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  workflow_job: {
    check_run_url: string;
    completed_at: string | null;
    conclusion: string | null;
    /**
     * The time that the job created.
     */
    created_at: string;
    head_sha: string;
    html_url: string;
    id: number;
    labels: string[];
    name: string;
    node_id: string;
    run_attempt: number;
    run_id: number;
    run_url: string;
    runner_group_id: number | null;
    runner_group_name: string | null;
    runner_id: number | null;
    runner_name: string | null;
    started_at: Date;
    /**
     * The name of the current branch.
     */
    head_branch: string | null;
    /**
     * The name of the workflow.
     */
    workflow_name: string | null;
    status: 'queued' | 'in_progress' | 'completed' | 'waiting';
    steps: {
      completed_at: string | null;
      conclusion:
        | ('failure' | 'skipped' | 'success' | 'cancelled' | null)
        | null;
      name: string;
      number: number;
      started_at: string | null;
      status: 'completed' | 'in_progress' | 'queued' | 'pending' | 'waiting';
    }[];
    url: string;
  };
  deployment?: Deployment;
};
/**
 * workflow_run completed event
 */
export type WebhookWorkflowRunCompleted = {
  action: 'completed';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * Workflow
   */
  workflow: {
    badge_url: string;
    created_at: Date;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: Date;
    url: string;
  } | null;
  workflow_run: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url: string;
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
          | 'skipped'
        )
      | null;
    created_at: Date;
    event: string;
    head_branch: string | null;
    /**
     * SimpleCommit
     */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * Repository Lite
     */
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    previous_attempt_url: string | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /**
     * Repository Lite
     */
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status:
      | 'requested'
      | 'in_progress'
      | 'completed'
      | 'queued'
      | 'pending'
      | 'waiting';
    /**
     * User
     */
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url: string;
  } & {
    actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id?: number;
    check_suite_node_id?: string;
    check_suite_url?: string;
    conclusion:
      | 'success'
      | 'failure'
      | 'neutral'
      | 'cancelled'
      | 'timed_out'
      | 'action_required'
      | 'stale'
      | 'skipped';
    created_at?: string;
    event?: string;
    head_branch?: string | null;
    head_commit?: {
      author?: {
        email?: string;
        name?: string;
      };
      committer?: {
        email?: string;
        name?: string;
      };
      id?: string;
      message?: string;
      timestamp?: string;
      tree_id?: string;
    };
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha?: string;
    html_url?: string;
    id?: number;
    jobs_url?: string;
    logs_url?: string;
    name?: string | null;
    node_id?: string;
    path?: string;
    previous_attempt_url?: string | null;
    pull_requests?: (any | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt?: number;
    run_number?: number;
    run_started_at?: string;
    status?: string;
    triggering_actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    } | null;
    updated_at?: string;
    url?: string;
    workflow_id?: number;
    workflow_url?: string;
  };
};
/**
 * workflow_run in_progress event
 */
export type WebhookWorkflowRunInProgress = {
  action: 'in_progress';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * Workflow
   */
  workflow: {
    badge_url: string;
    created_at: Date;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: Date;
    url: string;
  } | null;
  workflow_run: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url: string;
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | 'skipped'
          | null
        )
      | null;
    created_at: Date;
    event: string;
    head_branch: string | null;
    /**
     * SimpleCommit
     */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * Repository Lite
     */
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    previous_attempt_url: string | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /**
     * Repository Lite
     */
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status: 'requested' | 'in_progress' | 'completed' | 'queued' | 'pending';
    /**
     * User
     */
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url: string;
  } & {
    actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    artifacts_url?: string;
    cancel_url?: string;
    check_suite_id?: number;
    check_suite_node_id?: string;
    check_suite_url?: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'skipped'
          | 'stale'
        )
      | null;
    created_at?: string;
    event?: string;
    head_branch?: string | null;
    head_commit?: {
      author?: {
        email?: string;
        name?: string;
      };
      committer?: {
        email?: string;
        name?: string;
      };
      id?: string;
      message?: string;
      timestamp?: string;
      tree_id?: string;
    };
    head_repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string | null;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    head_sha?: string;
    html_url?: string;
    id?: number;
    jobs_url?: string;
    logs_url?: string;
    name?: string | null;
    node_id?: string;
    path?: string;
    previous_attempt_url?: string | null;
    pull_requests?: (any | null)[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    repository?: {
      archive_url?: string;
      assignees_url?: string;
      blobs_url?: string;
      branches_url?: string;
      collaborators_url?: string;
      comments_url?: string;
      commits_url?: string;
      compare_url?: string;
      contents_url?: string;
      contributors_url?: string;
      deployments_url?: string;
      description?: string | null;
      downloads_url?: string;
      events_url?: string;
      fork?: boolean;
      forks_url?: string;
      full_name?: string;
      git_commits_url?: string;
      git_refs_url?: string;
      git_tags_url?: string;
      hooks_url?: string;
      html_url?: string;
      id?: number;
      issue_comment_url?: string;
      issue_events_url?: string;
      issues_url?: string;
      keys_url?: string;
      labels_url?: string;
      languages_url?: string;
      merges_url?: string;
      milestones_url?: string;
      name?: string;
      node_id?: string;
      notifications_url?: string;
      owner?: {
        avatar_url?: string;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id?: number;
        login?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: string;
        url?: string;
      };
      private?: boolean;
      pulls_url?: string;
      releases_url?: string;
      stargazers_url?: string;
      statuses_url?: string;
      subscribers_url?: string;
      subscription_url?: string;
      tags_url?: string;
      teams_url?: string;
      trees_url?: string;
      url?: string;
    };
    rerun_url?: string;
    run_attempt?: number;
    run_number?: number;
    run_started_at?: string;
    status?: string;
    triggering_actor?: {
      avatar_url?: string;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id?: number;
      login?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: string;
      url?: string;
    };
    updated_at?: string;
    url?: string;
    workflow_id?: number;
    workflow_url?: string;
  };
};
/**
 * workflow_run requested event
 */
export type WebhookWorkflowRunRequested = {
  action: 'requested';
  enterprise?: EnterpriseWebhooks;
  installation?: SimpleInstallation;
  organization?: OrganizationSimpleWebhooks;
  repository: RepositoryWebhooks;
  sender: SimpleUserWebhooks;
  /**
   * Workflow
   */
  workflow: {
    badge_url: string;
    created_at: Date;
    html_url: string;
    id: number;
    name: string;
    node_id: string;
    path: string;
    state: string;
    updated_at: Date;
    url: string;
  } | null;
  /**
   * Workflow Run
   */
  workflow_run: {
    /**
     * User
     */
    actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    artifacts_url: string;
    cancel_url: string;
    check_suite_id: number;
    check_suite_node_id: string;
    check_suite_url: string;
    conclusion:
      | (
          | 'success'
          | 'failure'
          | 'neutral'
          | 'cancelled'
          | 'timed_out'
          | 'action_required'
          | 'stale'
          | null
          | 'skipped'
          | 'startup_failure'
        )
      | null;
    created_at: Date;
    event: string;
    head_branch: string | null;
    /**
     * SimpleCommit
     */
    head_commit: {
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      author: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      /**
       * Committer
       * Metaproperties for Git author/committer information.
       */
      committer: {
        date?: Date;
        email: string | null;
        /**
         * The git author's name.
         */
        name: string;
        username?: string;
      };
      id: string;
      message: string;
      timestamp: string;
      tree_id: string;
    };
    /**
     * Repository Lite
     */
    head_repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    head_sha: string;
    html_url: string;
    id: number;
    jobs_url: string;
    logs_url: string;
    name: string | null;
    node_id: string;
    path: string;
    previous_attempt_url: string | null;
    pull_requests: {
      base: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      head: {
        ref: string;
        /**
         * Repo Ref
         */
        repo: {
          id: number;
          name: string;
          url: string;
        };
        sha: string;
      };
      id: number;
      number: number;
      url: string;
    }[];
    referenced_workflows?:
      | {
          path: string;
          ref?: string;
          sha: string;
        }[]
      | null;
    /**
     * Repository Lite
     */
    repository: {
      archive_url: string;
      assignees_url: string;
      blobs_url: string;
      branches_url: string;
      collaborators_url: string;
      comments_url: string;
      commits_url: string;
      compare_url: string;
      contents_url: string;
      contributors_url: string;
      deployments_url: string;
      description: string | null;
      downloads_url: string;
      events_url: string;
      fork: boolean;
      forks_url: string;
      full_name: string;
      git_commits_url: string;
      git_refs_url: string;
      git_tags_url: string;
      hooks_url: string;
      html_url: string;
      /**
       * Unique identifier of the repository
       */
      id: number;
      issue_comment_url: string;
      issue_events_url: string;
      issues_url: string;
      keys_url: string;
      labels_url: string;
      languages_url: string;
      merges_url: string;
      milestones_url: string;
      /**
       * The name of the repository.
       */
      name: string;
      node_id: string;
      notifications_url: string;
      /**
       * User
       */
      owner: {
        avatar_url?: string;
        deleted?: boolean;
        email?: string | null;
        events_url?: string;
        followers_url?: string;
        following_url?: string;
        gists_url?: string;
        gravatar_id?: string;
        html_url?: string;
        id: number;
        login: string;
        name?: string;
        node_id?: string;
        organizations_url?: string;
        received_events_url?: string;
        repos_url?: string;
        site_admin?: boolean;
        starred_url?: string;
        subscriptions_url?: string;
        type?: 'Bot' | 'User' | 'Organization';
        url?: string;
      } | null;
      /**
       * Whether the repository is private or public.
       */
      private: boolean;
      pulls_url: string;
      releases_url: string;
      stargazers_url: string;
      statuses_url: string;
      subscribers_url: string;
      subscription_url: string;
      tags_url: string;
      teams_url: string;
      trees_url: string;
      url: string;
    };
    rerun_url: string;
    run_attempt: number;
    run_number: number;
    run_started_at: Date;
    status:
      | 'requested'
      | 'in_progress'
      | 'completed'
      | 'queued'
      | 'pending'
      | 'waiting';
    /**
     * User
     */
    triggering_actor: {
      avatar_url?: string;
      deleted?: boolean;
      email?: string | null;
      events_url?: string;
      followers_url?: string;
      following_url?: string;
      gists_url?: string;
      gravatar_id?: string;
      html_url?: string;
      id: number;
      login: string;
      name?: string;
      node_id?: string;
      organizations_url?: string;
      received_events_url?: string;
      repos_url?: string;
      site_admin?: boolean;
      starred_url?: string;
      subscriptions_url?: string;
      type?: 'Bot' | 'User' | 'Organization';
      url?: string;
    } | null;
    updated_at: Date;
    url: string;
    workflow_id: number;
    workflow_url: string;
    display_title: string;
  };
};
const $date_GlobalAdvisory = (): r.TransformField[] => [
  [['access', 'published_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'github_reviewed_at'], ['this']],
  [['access', 'nvd_published_at'], ['this']],
  [['access', 'withdrawn_at'], ['this']],
];
const $date_Integration = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_HookDeliveryItem = (): r.TransformField[] => [
  [['access', 'delivered_at'], ['this']],
];
const $date_HookDelivery = (): r.TransformField[] => [
  [['access', 'delivered_at'], ['this']],
];
const $date_Enterprise = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_IntegrationInstallationRequest = (): r.TransformField[] => [
  [
    ['access', 'account'],
    ['select', [[['ref', $date_Enterprise]]]],
  ],
  [['access', 'created_at'], ['this']],
];
const $date_Installation = (): r.TransformField[] => [
  [
    ['access', 'account'],
    ['select', [[['ref', $date_Enterprise]]]],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'suspended_at'], ['this']],
];
const $date_Repository = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_InstallationToken = (): r.TransformField[] => [
  [['access', 'repositories'], ['loop'], ['ref', $date_Repository]],
];
const $date_Authorization = (): r.TransformField[] => [
  [['access', 'updated_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'expires_at'], ['this']],
];
const $date_ClassroomAssignment = (): r.TransformField[] => [
  [['access', 'deadline'], ['this']],
];
const $date_SimpleClassroomAssignment = (): r.TransformField[] => [
  [['access', 'deadline'], ['this']],
];
const $date_ClassroomAcceptedAssignment = (): r.TransformField[] => [
  [
    ['access', 'assignment'],
    ['ref', $date_SimpleClassroomAssignment],
  ],
];
const $date_DependabotAlertSecurityAdvisory = (): r.TransformField[] => [
  [['access', 'published_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'withdrawn_at'], ['this']],
];
const $date_AlertCreatedAt = (): r.TransformField[] => [[['this']]];
const $date_AlertUpdatedAt = (): r.TransformField[] => [[['this']]];
const $date_AlertDismissedAt = (): r.TransformField[] => [[['this']]];
const $date_AlertFixedAt = (): r.TransformField[] => [[['this']]];
const $date_AlertAutoDismissedAt = (): r.TransformField[] => [[['this']]];
const $date_DependabotAlertWithRepository = (): r.TransformField[] => [
  [
    ['access', 'security_advisory'],
    ['ref', $date_DependabotAlertSecurityAdvisory],
  ],
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_AlertUpdatedAt],
  ],
  [
    ['access', 'dismissed_at'],
    ['ref', $date_AlertDismissedAt],
  ],
  [
    ['access', 'fixed_at'],
    ['ref', $date_AlertFixedAt],
  ],
  [
    ['access', 'auto_dismissed_at'],
    ['ref', $date_AlertAutoDismissedAt],
  ],
];
const $date_NullableAlertUpdatedAt = (): r.TransformField[] => [[['this']]];
const $date_OrganizationSecretScanningAlert = (): r.TransformField[] => [
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_NullableAlertUpdatedAt],
  ],
  [['access', 'resolved_at'], ['this']],
  [['access', 'push_protection_bypassed_at'], ['this']],
];
const $date_NullableMilestone = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'due_on'], ['this']],
];
const $date_NullableIntegration = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Issue = (): r.TransformField[] => [
  [
    ['access', 'milestone'],
    ['ref', $date_NullableMilestone],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_Repository],
  ],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_IssueComment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_Event = (): r.TransformField[] => [
  [
    ['access', 'payload'],
    ['access', 'issue'],
    ['ref', $date_Issue],
  ],
  [
    ['access', 'payload'],
    ['access', 'comment'],
    ['ref', $date_IssueComment],
  ],
  [['access', 'created_at'], ['this']],
];
const $date_BaseGist = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_PublicUser = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'suspended_at'], ['this']],
];
const $date_GistHistory = (): r.TransformField[] => [
  [['access', 'committed_at'], ['this']],
];
const $date_GistSimple = (): r.TransformField[] => [
  [
    ['access', 'forks'],
    ['loop'],
    ['access', 'user'],
    ['ref', $date_PublicUser],
  ],
  [['access', 'forks'], ['loop'], ['access', 'created_at'], ['this']],
  [['access', 'forks'], ['loop'], ['access', 'updated_at'], ['this']],
  [['access', 'history'], ['loop'], ['ref', $date_GistHistory]],
  [['access', 'fork_of'], ['access', 'created_at'], ['this']],
  [['access', 'fork_of'], ['access', 'updated_at'], ['this']],
];
const $date_GistComment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_GistCommit = (): r.TransformField[] => [
  [['access', 'committed_at'], ['this']],
];
const $date_MinimalRepository = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Thread = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
];
const $date_ThreadSubscription = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
];
const $date_OrganizationFull = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'archived_at'], ['this']],
];
const $date_AuthenticationToken = (): r.TransformField[] => [
  [['access', 'expires_at'], ['this']],
  [['access', 'repositories'], ['loop'], ['ref', $date_Repository]],
];
const $date_OrganizationActionsSecret = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_OrganizationActionsVariable = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_CodeScanningOrganizationAlertItems = (): r.TransformField[] => [
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_AlertUpdatedAt],
  ],
  [
    ['access', 'fixed_at'],
    ['ref', $date_AlertFixedAt],
  ],
  [
    ['access', 'dismissed_at'],
    ['ref', $date_AlertDismissedAt],
  ],
];
const $date_Codespace = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'last_used_at'], ['this']],
  [['access', 'retention_expires_at'], ['this']],
];
const $date_CodespacesOrgSecret = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Organization = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_CopilotSeatDetails = (): r.TransformField[] => [
  [
    ['access', 'assignee'],
    ['select', [[['ref', $date_Organization]]]],
  ],
  [['access', 'last_activity_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_OrganizationDependabotSecret = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_NullableMinimalRepository = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Package = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_NullableMinimalRepository],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_OrgHook = (): r.TransformField[] => [
  [['access', 'updated_at'], ['this']],
  [['access', 'created_at'], ['this']],
];
const $date_InteractionLimitResponse = (): r.TransformField[] => [
  [['access', 'expires_at'], ['this']],
];
const $date_Migration = (): r.TransformField[] => [
  [['access', 'repositories'], ['loop'], ['ref', $date_Repository]],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_OrganizationRole = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_PackageVersion = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'deleted_at'], ['this']],
];
const $date_Project = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_NullableRepository = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_FullRepository = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'template_repository'],
    ['ref', $date_NullableRepository],
  ],
  [
    ['access', 'parent'],
    ['ref', $date_Repository],
  ],
  [
    ['access', 'source'],
    ['ref', $date_Repository],
  ],
];
const $date_RepositoryRuleset = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_RuleSuites = (): r.TransformField[] => [
  [['loop'], ['access', 'pushed_at'], ['this']],
];
const $date_RuleSuite = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
];
const $date_RepositoryAdvisory = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'published_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'withdrawn_at'], ['this']],
];
const $date_TeamOrganization = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'archived_at'], ['this']],
];
const $date_TeamFull = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'organization'],
    ['ref', $date_TeamOrganization],
  ],
];
const $date_TeamDiscussion = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'last_edited_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_TeamDiscussionComment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'last_edited_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Reaction = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
];
const $date_TeamRepository = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_ProjectCard = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_ProjectColumn = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Artifact = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'expires_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_ActionsCacheList = (): r.TransformField[] => [
  [
    ['access', 'actions_caches'],
    ['loop'],
    ['access', 'last_accessed_at'],
    ['this'],
  ],
  [['access', 'actions_caches'], ['loop'], ['access', 'created_at'], ['this']],
];
const $date_Job = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'started_at'], ['this']],
  [['access', 'completed_at'], ['this']],
  [['access', 'steps'], ['loop'], ['access', 'started_at'], ['this']],
  [['access', 'steps'], ['loop'], ['access', 'completed_at'], ['this']],
];
const $date_ActionsSecret = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_ActionsVariable = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_NullableSimpleCommit = (): r.TransformField[] => [
  [['access', 'timestamp'], ['this']],
];
const $date_WorkflowRun = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'run_started_at'], ['this']],
  [
    ['access', 'head_commit'],
    ['ref', $date_NullableSimpleCommit],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
  [
    ['access', 'head_repository'],
    ['ref', $date_MinimalRepository],
  ],
];
const $date_EnvironmentApprovals = (): r.TransformField[] => [
  [['access', 'environments'], ['loop'], ['access', 'created_at'], ['this']],
  [['access', 'environments'], ['loop'], ['access', 'updated_at'], ['this']],
];
const $date_PendingDeployment = (): r.TransformField[] => [
  [['access', 'wait_timer_started_at'], ['this']],
];
const $date_Deployment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_Workflow = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'deleted_at'], ['this']],
];
const $date_Activity = (): r.TransformField[] => [
  [['access', 'timestamp'], ['this']],
];
const $date_ProtectedBranchPullRequestReview = (): r.TransformField[] => [
  [
    ['access', 'dismissal_restrictions'],
    ['access', 'apps'],
    ['loop'],
    ['ref', $date_Integration],
  ],
  [
    ['access', 'bypass_pull_request_allowances'],
    ['access', 'apps'],
    ['loop'],
    ['ref', $date_Integration],
  ],
];
const $date_ProtectedBranch = (): r.TransformField[] => [
  [
    ['access', 'required_pull_request_reviews'],
    ['access', 'dismissal_restrictions'],
    ['access', 'apps'],
    ['loop'],
    ['ref', $date_Integration],
  ],
  [
    ['access', 'required_pull_request_reviews'],
    ['access', 'bypass_pull_request_allowances'],
    ['access', 'apps'],
    ['loop'],
    ['ref', $date_Integration],
  ],
];
const $date_DeploymentSimple = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_CheckRun = (): r.TransformField[] => [
  [['access', 'started_at'], ['this']],
  [['access', 'completed_at'], ['this']],
  [
    ['access', 'app'],
    ['ref', $date_NullableIntegration],
  ],
  [
    ['access', 'deployment'],
    ['ref', $date_DeploymentSimple],
  ],
];
const $date_SimpleCommit = (): r.TransformField[] => [
  [['access', 'timestamp'], ['this']],
];
const $date_CheckSuite = (): r.TransformField[] => [
  [
    ['access', 'app'],
    ['ref', $date_NullableIntegration],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'head_commit'],
    ['ref', $date_SimpleCommit],
  ],
];
const $date_CheckSuitePreference = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
];
const $date_CodeScanningAlertItems = (): r.TransformField[] => [
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_AlertUpdatedAt],
  ],
  [
    ['access', 'fixed_at'],
    ['ref', $date_AlertFixedAt],
  ],
  [
    ['access', 'dismissed_at'],
    ['ref', $date_AlertDismissedAt],
  ],
];
const $date_CodeScanningAlert = (): r.TransformField[] => [
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_AlertUpdatedAt],
  ],
  [
    ['access', 'fixed_at'],
    ['ref', $date_AlertFixedAt],
  ],
  [
    ['access', 'dismissed_at'],
    ['ref', $date_AlertDismissedAt],
  ],
];
const $date_CodeScanningAnalysisCreatedAt = (): r.TransformField[] => [
  [['this']],
];
const $date_CodeScanningAnalysis = (): r.TransformField[] => [
  [
    ['access', 'created_at'],
    ['ref', $date_CodeScanningAnalysisCreatedAt],
  ],
];
const $date_CodeScanningCodeqlDatabase = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_CodeScanningDefaultSetup = (): r.TransformField[] => [
  [['access', 'updated_at'], ['this']],
];
const $date_RepoCodespacesSecret = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_RepositoryInvitation = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
  [['access', 'created_at'], ['this']],
];
const $date_CommitComment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_PullRequestSimple = (): r.TransformField[] => [
  [
    ['access', 'milestone'],
    ['ref', $date_NullableMilestone],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'merged_at'], ['this']],
  [
    ['access', 'head'],
    ['access', 'repo'],
    ['ref', $date_Repository],
  ],
  [
    ['access', 'base'],
    ['access', 'repo'],
    ['ref', $date_Repository],
  ],
];
const $date_SimpleCommitStatus = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_CombinedCommitStatus = (): r.TransformField[] => [
  [['access', 'statuses'], ['loop'], ['ref', $date_SimpleCommitStatus]],
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
];
const $date_CommunityProfile = (): r.TransformField[] => [
  [['access', 'updated_at'], ['this']],
];
const $date_DependabotAlert = (): r.TransformField[] => [
  [
    ['access', 'security_advisory'],
    ['ref', $date_DependabotAlertSecurityAdvisory],
  ],
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_AlertUpdatedAt],
  ],
  [
    ['access', 'dismissed_at'],
    ['ref', $date_AlertDismissedAt],
  ],
  [
    ['access', 'fixed_at'],
    ['ref', $date_AlertFixedAt],
  ],
  [
    ['access', 'auto_dismissed_at'],
    ['ref', $date_AlertAutoDismissedAt],
  ],
];
const $date_DependabotSecret = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Snapshot = (): r.TransformField[] => [
  [['access', 'scanned'], ['this']],
];
const $date_DeploymentStatus = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_Environment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_GitCommit = (): r.TransformField[] => [
  [['access', 'author'], ['access', 'date'], ['this']],
  [['access', 'committer'], ['access', 'date'], ['this']],
];
const $date_Hook = (): r.TransformField[] => [
  [['access', 'updated_at'], ['this']],
  [['access', 'created_at'], ['this']],
];
const $date_NullableIssue = (): r.TransformField[] => [
  [
    ['access', 'milestone'],
    ['ref', $date_NullableMilestone],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_Repository],
  ],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_IssueEvent = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['ref', $date_NullableIssue],
  ],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_LabeledIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_UnlabeledIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_AssignedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_Integration],
  ],
];
const $date_UnassignedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_MilestonedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_DemilestonedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_RenamedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_ReviewRequestedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_ReviewRequestRemovedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_ReviewDismissedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_LockedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_AddedToProjectIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_MovedColumnInProjectIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_RemovedFromProjectIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_ConvertedNoteToIssueIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_Integration],
  ],
];
const $date_TimelineCommentEvent = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_TimelineCrossReferencedEvent = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [
    ['access', 'source'],
    ['access', 'issue'],
    ['ref', $date_Issue],
  ],
];
const $date_TimelineCommittedEvent = (): r.TransformField[] => [
  [['access', 'author'], ['access', 'date'], ['this']],
  [['access', 'committer'], ['access', 'date'], ['this']],
];
const $date_TimelineReviewedEvent = (): r.TransformField[] => [
  [['access', 'submitted_at'], ['this']],
];
const $date_PullRequestReviewComment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_TimelineLineCommentedEvent = (): r.TransformField[] => [
  [['access', 'comments'], ['loop'], ['ref', $date_PullRequestReviewComment]],
];
const $date_TimelineCommitCommentedEvent = (): r.TransformField[] => [
  [['access', 'comments'], ['loop'], ['ref', $date_CommitComment]],
];
const $date_TimelineAssignedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_TimelineUnassignedIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_StateChangeIssueEvent = (): r.TransformField[] => [
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_TimelineIssueEvents = (): r.TransformField[] => [
  [
    [
      'select',
      [
        [['ref', $date_TimelineCommentEvent]],
        [['ref', $date_TimelineCrossReferencedEvent]],
        [['ref', $date_TimelineCommittedEvent]],
        [['ref', $date_TimelineReviewedEvent]],
      ],
    ],
  ],
];
const $date_Milestone = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'due_on'], ['this']],
];
const $date_Page = (): r.TransformField[] => [
  [['access', 'pending_domain_unverified_at'], ['this']],
];
const $date_PageBuild = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_PullRequest = (): r.TransformField[] => [
  [
    ['access', 'milestone'],
    ['ref', $date_NullableMilestone],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'merged_at'], ['this']],
  [['access', 'head'], ['access', 'repo'], ['access', 'pushed_at'], ['this']],
  [['access', 'head'], ['access', 'repo'], ['access', 'created_at'], ['this']],
  [['access', 'head'], ['access', 'repo'], ['access', 'updated_at'], ['this']],
  [['access', 'base'], ['access', 'repo'], ['access', 'pushed_at'], ['this']],
  [['access', 'base'], ['access', 'repo'], ['access', 'created_at'], ['this']],
  [['access', 'base'], ['access', 'repo'], ['access', 'updated_at'], ['this']],
];
const $date_PullRequestReview = (): r.TransformField[] => [
  [['access', 'submitted_at'], ['this']],
];
const $date_ReviewComment = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_ReleaseAsset = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_Release = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'published_at'], ['this']],
  [['access', 'assets'], ['loop'], ['ref', $date_ReleaseAsset]],
];
const $date_SecretScanningAlert = (): r.TransformField[] => [
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_NullableAlertUpdatedAt],
  ],
  [['access', 'resolved_at'], ['this']],
  [['access', 'push_protection_bypassed_at'], ['this']],
];
const $date_Stargazer = (): r.TransformField[] => [
  [['access', 'starred_at'], ['this']],
];
const $date_RepositorySubscription = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
];
const $date_Traffic = (): r.TransformField[] => [
  [['access', 'timestamp'], ['this']],
];
const $date_CloneTraffic = (): r.TransformField[] => [
  [['access', 'clones'], ['loop'], ['ref', $date_Traffic]],
];
const $date_ViewTraffic = (): r.TransformField[] => [
  [['access', 'views'], ['loop'], ['ref', $date_Traffic]],
];
const $date_CodeSearchResultItem = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
  [['access', 'last_modified_at'], ['this']],
];
const $date_CommitSearchResultItem = (): r.TransformField[] => [
  [['access', 'commit'], ['access', 'author'], ['access', 'date'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
];
const $date_IssueSearchResultItem = (): r.TransformField[] => [
  [
    ['access', 'milestone'],
    ['ref', $date_NullableMilestone],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_Repository],
  ],
  [
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
];
const $date_RepoSearchResultItem = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'pushed_at'], ['this']],
];
const $date_TopicSearchResultItem = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_UserSearchResultItem = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'suspended_at'], ['this']],
];
const $date_PrivateUser = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'suspended_at'], ['this']],
];
const $date_CodespacesSecret = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_CodespaceExportDetails = (): r.TransformField[] => [
  [['access', 'completed_at'], ['this']],
];
const $date_CodespaceWithFullRepository = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_FullRepository],
  ],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'last_used_at'], ['this']],
  [['access', 'retention_expires_at'], ['this']],
];
const $date_GpgKey = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'expires_at'], ['this']],
];
const $date_Key = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
];
const $date_UserMarketplacePurchase = (): r.TransformField[] => [
  [['access', 'next_billing_date'], ['this']],
  [['access', 'free_trial_ends_on'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_SshSigningKey = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
];
const $date_StarredRepository = (): r.TransformField[] => [
  [['access', 'starred_at'], ['this']],
  [
    ['access', 'repo'],
    ['ref', $date_Repository],
  ],
];
const $date_EnterpriseWebhooks = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_RepositoryWebhooks = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_SimpleCheckSuite = (): r.TransformField[] => [
  [
    ['access', 'app'],
    ['ref', $date_Integration],
  ],
  [['access', 'created_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_MinimalRepository],
  ],
  [['access', 'updated_at'], ['this']],
];
const $date_CheckRunWithSimpleCheckSuite = (): r.TransformField[] => [
  [
    ['access', 'app'],
    ['ref', $date_NullableIntegration],
  ],
  [
    ['access', 'check_suite'],
    ['ref', $date_SimpleCheckSuite],
  ],
  [['access', 'completed_at'], ['this']],
  [
    ['access', 'deployment'],
    ['ref', $date_DeploymentSimple],
  ],
  [['access', 'started_at'], ['this']],
];
const $date_Discussion = (): r.TransformField[] => [
  [['access', 'category'], ['access', 'created_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_MergeGroup = (): r.TransformField[] => [
  [
    ['access', 'head_commit'],
    ['ref', $date_SimpleCommit],
  ],
];
const $date_NullableRepositoryWebhooks = (): r.TransformField[] => [
  [['access', 'pushed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
];
const $date_ProjectsV2 = (): r.TransformField[] => [
  [['access', 'closed_at'], ['this']],
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'deleted_at'], ['this']],
];
const $date_ProjectsV2Item = (): r.TransformField[] => [
  [['access', 'created_at'], ['this']],
  [['access', 'updated_at'], ['this']],
  [['access', 'archived_at'], ['this']],
];
const $date_SecretScanningAlertWebhook = (): r.TransformField[] => [
  [
    ['access', 'created_at'],
    ['ref', $date_AlertCreatedAt],
  ],
  [
    ['access', 'updated_at'],
    ['ref', $date_NullableAlertUpdatedAt],
  ],
  [['access', 'resolved_at'], ['this']],
  [['access', 'push_protection_bypassed_at'], ['this']],
];
const $date_WebhookBranchProtectionConfigurationDisabled =
  (): r.TransformField[] => [
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookBranchProtectionConfigurationEnabled =
  (): r.TransformField[] => [
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookBranchProtectionRuleCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'rule'], ['access', 'created_at'], ['this']],
  [['access', 'rule'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookBranchProtectionRuleDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'rule'], ['access', 'created_at'], ['this']],
  [['access', 'rule'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookBranchProtectionRuleEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'rule'], ['access', 'created_at'], ['this']],
  [['access', 'rule'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookCheckRunCompleted = (): r.TransformField[] => [
  [
    ['access', 'check_run'],
    ['ref', $date_CheckRunWithSimpleCheckSuite],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCheckRunCreated = (): r.TransformField[] => [
  [
    ['access', 'check_run'],
    ['ref', $date_CheckRunWithSimpleCheckSuite],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCheckRunRequestedAction = (): r.TransformField[] => [
  [
    ['access', 'check_run'],
    ['ref', $date_CheckRunWithSimpleCheckSuite],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCheckRunRerequested = (): r.TransformField[] => [
  [
    ['access', 'check_run'],
    ['ref', $date_CheckRunWithSimpleCheckSuite],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCheckSuiteCompleted = (): r.TransformField[] => [
  [
    ['access', 'check_suite'],
    ['access', 'app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'check_suite'],
    ['access', 'app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'check_suite'], ['access', 'created_at'], ['this']],
  [
    ['access', 'check_suite'],
    ['access', 'head_commit'],
    ['access', 'author'],
    ['access', 'date'],
    ['this'],
  ],
  [
    ['access', 'check_suite'],
    ['access', 'head_commit'],
    ['access', 'committer'],
    ['access', 'date'],
    ['this'],
  ],
  [['access', 'check_suite'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCheckSuiteRequested = (): r.TransformField[] => [
  [
    ['access', 'check_suite'],
    ['access', 'app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'check_suite'],
    ['access', 'app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'check_suite'], ['access', 'created_at'], ['this']],
  [
    ['access', 'check_suite'],
    ['access', 'head_commit'],
    ['access', 'author'],
    ['access', 'date'],
    ['this'],
  ],
  [
    ['access', 'check_suite'],
    ['access', 'head_commit'],
    ['access', 'committer'],
    ['access', 'date'],
    ['this'],
  ],
  [['access', 'check_suite'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCheckSuiteRerequested = (): r.TransformField[] => [
  [
    ['access', 'check_suite'],
    ['access', 'app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'check_suite'],
    ['access', 'app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'check_suite'], ['access', 'created_at'], ['this']],
  [
    ['access', 'check_suite'],
    ['access', 'head_commit'],
    ['access', 'author'],
    ['access', 'date'],
    ['this'],
  ],
  [
    ['access', 'check_suite'],
    ['access', 'head_commit'],
    ['access', 'committer'],
    ['access', 'date'],
    ['this'],
  ],
  [['access', 'check_suite'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCodeScanningAlertAppearedInBranch =
  (): r.TransformField[] => [
    [['access', 'alert'], ['access', 'created_at'], ['this']],
    [['access', 'alert'], ['access', 'dismissed_at'], ['this']],
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookCodeScanningAlertClosedByUser = (): r.TransformField[] => [
  [['access', 'alert'], ['access', 'created_at'], ['this']],
  [['access', 'alert'], ['access', 'dismissed_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCodeScanningAlertCreated = (): r.TransformField[] => [
  [['access', 'alert'], ['access', 'created_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCodeScanningAlertFixed = (): r.TransformField[] => [
  [['access', 'alert'], ['access', 'created_at'], ['this']],
  [['access', 'alert'], ['access', 'dismissed_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCodeScanningAlertReopened = (): r.TransformField[] => [
  [['access', 'alert'], ['access', 'created_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCodeScanningAlertReopenedByUser = (): r.TransformField[] => [
  [['access', 'alert'], ['access', 'created_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCommitCommentCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCreate = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookCustomPropertyCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
];
const $date_WebhookCustomPropertyDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
];
const $date_WebhookCustomPropertyUpdated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
];
const $date_WebhookCustomPropertyValuesUpdated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDelete = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDependabotAlertAutoDismissed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDependabotAlertAutoReopened = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDependabotAlertCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDependabotAlertDismissed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDependabotAlertFixed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDependabotAlertReintroduced = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDependabotAlertReopened = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDeployKeyCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDeployKeyDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDeploymentCreated = (): r.TransformField[] => [
  [
    ['access', 'deployment'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'deployment'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow'], ['access', 'created_at'], ['this']],
  [['access', 'workflow'], ['access', 'updated_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'created_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'run_started_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookDeploymentProtectionRuleRequested =
  (): r.TransformField[] => [
    [
      ['access', 'deployment'],
      ['ref', $date_Deployment],
    ],
    [['access', 'pull_requests'], ['loop'], ['ref', $date_PullRequest]],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookDeploymentReviewApproved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow_run'], ['access', 'created_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'run_started_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookDeploymentReviewRejected = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow_run'], ['access', 'created_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'run_started_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookDeploymentReviewRequested = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow_run'], ['access', 'created_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'run_started_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookDeploymentStatusCreated = (): r.TransformField[] => [
  [['access', 'check_run'], ['access', 'completed_at'], ['this']],
  [['access', 'check_run'], ['access', 'started_at'], ['this']],
  [
    ['access', 'deployment'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'deployment'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'deployment_status'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'deployment_status'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow'], ['access', 'created_at'], ['this']],
  [['access', 'workflow'], ['access', 'updated_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'created_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'run_started_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookDiscussionAnswered = (): r.TransformField[] => [
  [['access', 'answer'], ['access', 'created_at'], ['this']],
  [['access', 'answer'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionCategoryChanged = (): r.TransformField[] => [
  [
    ['access', 'changes'],
    ['access', 'category'],
    ['access', 'from'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionClosed = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionCommentCreated = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionCommentDeleted = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionCommentEdited = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionCreated = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    [
      'select',
      [
        [['access', 'category'], ['access', 'created_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionDeleted = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionEdited = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionLabeled = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionLocked = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionPinned = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionReopened = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionTransferred = (): r.TransformField[] => [
  [
    ['access', 'changes'],
    ['access', 'new_discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionUnanswered = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [['access', 'old_answer'], ['access', 'created_at'], ['this']],
  [['access', 'old_answer'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionUnlabeled = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionUnlocked = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookDiscussionUnpinned = (): r.TransformField[] => [
  [
    ['access', 'discussion'],
    ['ref', $date_Discussion],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookFork = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'forkee'],
    [
      'select',
      [
        [
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookGollum = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookInstallationCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'installation'],
    ['ref', $date_Installation],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookInstallationDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'installation'],
    ['ref', $date_Installation],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookInstallationNewPermissionsAccepted =
  (): r.TransformField[] => [
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'installation'],
      ['ref', $date_Installation],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookInstallationRepositoriesAdded = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'installation'],
    ['ref', $date_Installation],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookInstallationRepositoriesRemoved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'installation'],
    ['ref', $date_Installation],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookInstallationSuspend = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'installation'],
    ['ref', $date_Installation],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookInstallationTargetRenamed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookInstallationUnsuspend = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'installation'],
    ['ref', $date_Installation],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssueCommentCreated = (): r.TransformField[] => [
  [['access', 'comment'], ['access', 'created_at'], ['this']],
  [
    ['access', 'comment'],
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
  [['access', 'comment'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssueCommentDeleted = (): r.TransformField[] => [
  [['access', 'comment'], ['access', 'created_at'], ['this']],
  [
    ['access', 'comment'],
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
  [['access', 'comment'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssueCommentEdited = (): r.TransformField[] => [
  [['access', 'comment'], ['access', 'created_at'], ['this']],
  [
    ['access', 'comment'],
    ['access', 'performed_via_github_app'],
    ['ref', $date_NullableIntegration],
  ],
  [['access', 'comment'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesAssigned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesClosed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesDemilestoned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [['access', 'milestone'], ['access', 'closed_at'], ['this']],
  [['access', 'milestone'], ['access', 'created_at'], ['this']],
  [['access', 'milestone'], ['access', 'due_on'], ['this']],
  [['access', 'milestone'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesLabeled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesLocked = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesMilestoned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [['access', 'milestone'], ['access', 'closed_at'], ['this']],
  [['access', 'milestone'], ['access', 'created_at'], ['this']],
  [['access', 'milestone'], ['access', 'due_on'], ['this']],
  [['access', 'milestone'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesOpened = (): r.TransformField[] => [
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_issue'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'changes'],
    ['access', 'old_repository'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesPinned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesReopened = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesTransferred = (): r.TransformField[] => [
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_issue'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'changes'],
    ['access', 'new_repository'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesUnassigned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesUnlabeled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesUnlocked = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'issue'],
    [
      'select',
      [
        [['access', 'closed_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'closed_at'], ['this']],
        [['access', 'milestone'], ['access', 'created_at'], ['this']],
        [['access', 'milestone'], ['access', 'due_on'], ['this']],
        [['access', 'milestone'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'performed_via_github_app'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookIssuesUnpinned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'issue'], ['access', 'closed_at'], ['this']],
  [['access', 'issue'], ['access', 'created_at'], ['this']],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'performed_via_github_app'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'issue'],
    ['access', 'pull_request'],
    ['access', 'merged_at'],
    ['this'],
  ],
  [['access', 'issue'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookLabelCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookLabelDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookLabelEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMarketplacePurchaseCancelled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMarketplacePurchaseChanged = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMarketplacePurchasePendingChange =
  (): r.TransformField[] => [
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookMarketplacePurchasePendingChangeCancelled =
  (): r.TransformField[] => [
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookMarketplacePurchasePurchased = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMemberAdded = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMemberEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMemberRemoved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMembershipAdded = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMembershipRemoved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMergeGroupChecksRequested = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMergeGroupDestroyed = (): r.TransformField[] => [
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMetaDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_NullableRepositoryWebhooks],
  ],
];
const $date_WebhookMilestoneClosed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'milestone'], ['access', 'closed_at'], ['this']],
  [['access', 'milestone'], ['access', 'created_at'], ['this']],
  [['access', 'milestone'], ['access', 'due_on'], ['this']],
  [['access', 'milestone'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMilestoneCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'milestone'], ['access', 'closed_at'], ['this']],
  [['access', 'milestone'], ['access', 'created_at'], ['this']],
  [['access', 'milestone'], ['access', 'due_on'], ['this']],
  [['access', 'milestone'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMilestoneDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'milestone'], ['access', 'closed_at'], ['this']],
  [['access', 'milestone'], ['access', 'created_at'], ['this']],
  [['access', 'milestone'], ['access', 'due_on'], ['this']],
  [['access', 'milestone'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMilestoneEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'milestone'], ['access', 'closed_at'], ['this']],
  [['access', 'milestone'], ['access', 'created_at'], ['this']],
  [['access', 'milestone'], ['access', 'due_on'], ['this']],
  [['access', 'milestone'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookMilestoneOpened = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'milestone'], ['access', 'closed_at'], ['this']],
  [['access', 'milestone'], ['access', 'created_at'], ['this']],
  [['access', 'milestone'], ['access', 'due_on'], ['this']],
  [['access', 'milestone'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookOrgBlockBlocked = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookOrgBlockUnblocked = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookOrganizationDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookOrganizationMemberAdded = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookOrganizationMemberInvited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'invitation'], ['access', 'created_at'], ['this']],
  [['access', 'invitation'], ['access', 'failed_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookOrganizationMemberRemoved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookOrganizationRenamed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPackagePublished = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPackageUpdated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPageBuild = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPing = (): r.TransformField[] => [
  [['access', 'hook'], ['access', 'created_at'], ['this']],
  [['access', 'hook'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectCardConverted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_card'], ['access', 'created_at'], ['this']],
  [['access', 'project_card'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectCardCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_card'], ['access', 'created_at'], ['this']],
  [['access', 'project_card'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectCardDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_card'], ['access', 'created_at'], ['this']],
  [['access', 'project_card'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_NullableRepositoryWebhooks],
  ],
];
const $date_WebhookProjectCardEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_card'], ['access', 'created_at'], ['this']],
  [['access', 'project_card'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectCardMoved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'project_card'],
    [
      'select',
      [
        [['access', 'created_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectClosed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project'], ['access', 'created_at'], ['this']],
  [['access', 'project'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectColumnCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_column'], ['access', 'created_at'], ['this']],
  [['access', 'project_column'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectColumnDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_column'], ['access', 'created_at'], ['this']],
  [['access', 'project_column'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_NullableRepositoryWebhooks],
  ],
];
const $date_WebhookProjectColumnEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_column'], ['access', 'created_at'], ['this']],
  [['access', 'project_column'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectColumnMoved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project_column'], ['access', 'created_at'], ['this']],
  [['access', 'project_column'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project'], ['access', 'created_at'], ['this']],
  [['access', 'project'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project'], ['access', 'created_at'], ['this']],
  [['access', 'project'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_NullableRepositoryWebhooks],
  ],
];
const $date_WebhookProjectEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project'], ['access', 'created_at'], ['this']],
  [['access', 'project'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectReopened = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [['access', 'project'], ['access', 'created_at'], ['this']],
  [['access', 'project'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookProjectsV2ProjectClosed = (): r.TransformField[] => [
  [
    ['access', 'projects_v2'],
    ['ref', $date_ProjectsV2],
  ],
];
const $date_WebhookProjectsV2ProjectCreated = (): r.TransformField[] => [
  [
    ['access', 'projects_v2'],
    ['ref', $date_ProjectsV2],
  ],
];
const $date_WebhookProjectsV2ProjectDeleted = (): r.TransformField[] => [
  [
    ['access', 'projects_v2'],
    ['ref', $date_ProjectsV2],
  ],
];
const $date_WebhookProjectsV2ProjectEdited = (): r.TransformField[] => [
  [
    ['access', 'projects_v2'],
    ['ref', $date_ProjectsV2],
  ],
];
const $date_WebhookProjectsV2ItemArchived = (): r.TransformField[] => [
  [
    ['access', 'changes'],
    ['access', 'archived_at'],
    ['access', 'from'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'archived_at'],
    ['access', 'to'],
    ['this'],
  ],
  [
    ['access', 'projects_v2_item'],
    ['ref', $date_ProjectsV2Item],
  ],
];
const $date_WebhookProjectsV2ItemConverted = (): r.TransformField[] => [
  [
    ['access', 'projects_v2_item'],
    ['ref', $date_ProjectsV2Item],
  ],
];
const $date_WebhookProjectsV2ItemCreated = (): r.TransformField[] => [
  [
    ['access', 'projects_v2_item'],
    ['ref', $date_ProjectsV2Item],
  ],
];
const $date_WebhookProjectsV2ItemDeleted = (): r.TransformField[] => [
  [
    ['access', 'projects_v2_item'],
    ['ref', $date_ProjectsV2Item],
  ],
];
const $date_WebhookProjectsV2ItemEdited = (): r.TransformField[] => [
  [
    ['access', 'projects_v2_item'],
    ['ref', $date_ProjectsV2Item],
  ],
];
const $date_WebhookProjectsV2ItemReordered = (): r.TransformField[] => [
  [
    ['access', 'projects_v2_item'],
    ['ref', $date_ProjectsV2Item],
  ],
];
const $date_WebhookProjectsV2ItemRestored = (): r.TransformField[] => [
  [
    ['access', 'changes'],
    ['access', 'archived_at'],
    ['access', 'from'],
    ['this'],
  ],
  [
    ['access', 'changes'],
    ['access', 'archived_at'],
    ['access', 'to'],
    ['this'],
  ],
  [
    ['access', 'projects_v2_item'],
    ['ref', $date_ProjectsV2Item],
  ],
];
const $date_WebhookProjectsV2ProjectReopened = (): r.TransformField[] => [
  [
    ['access', 'projects_v2'],
    ['ref', $date_ProjectsV2],
  ],
];
const $date_WebhookPublic = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestAssigned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestAutoMergeDisabled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestAutoMergeEnabled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestClosed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['select', [[['ref', $date_PullRequest]]]],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestConvertedToDraft = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['select', [[['ref', $date_PullRequest]]]],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestDemilestoned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'milestone'],
    ['ref', $date_Milestone],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestDequeued = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['select', [[['ref', $date_PullRequest]]]],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestEnqueued = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestLabeled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestLocked = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestMilestoned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'milestone'],
    ['ref', $date_Milestone],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestOpened = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['select', [[['ref', $date_PullRequest]]]],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestReadyForReview = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['select', [[['ref', $date_PullRequest]]]],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestReopened = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['select', [[['ref', $date_PullRequest]]]],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestReviewCommentCreated = (): r.TransformField[] => [
  [['access', 'comment'], ['access', 'created_at'], ['this']],
  [['access', 'comment'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestReviewCommentDeleted = (): r.TransformField[] => [
  [['access', 'comment'], ['access', 'created_at'], ['this']],
  [['access', 'comment'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestReviewCommentEdited = (): r.TransformField[] => [
  [['access', 'comment'], ['access', 'created_at'], ['this']],
  [['access', 'comment'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestReviewDismissed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'review'], ['access', 'submitted_at'], ['this']],
];
const $date_WebhookPullRequestReviewEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'review'], ['access', 'submitted_at'], ['this']],
];
const $date_WebhookPullRequestReviewRequestRemoved = (): r.TransformField[] => [
  [
    [
      'select',
      [
        [
          ['access', 'enterprise'],
          ['ref', $date_EnterpriseWebhooks],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
        [['access', 'pull_request'], ['access', 'created_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'closed_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'due_on'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'repository'],
          ['ref', $date_RepositoryWebhooks],
        ],
        [
          ['access', 'enterprise'],
          ['ref', $date_EnterpriseWebhooks],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
        [['access', 'pull_request'], ['access', 'created_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'closed_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'due_on'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'repository'],
          ['ref', $date_RepositoryWebhooks],
        ],
      ],
    ],
  ],
];
const $date_WebhookPullRequestReviewRequested = (): r.TransformField[] => [
  [
    [
      'select',
      [
        [
          ['access', 'enterprise'],
          ['ref', $date_EnterpriseWebhooks],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
        [['access', 'pull_request'], ['access', 'created_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'closed_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'due_on'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'repository'],
          ['ref', $date_RepositoryWebhooks],
        ],
        [
          ['access', 'enterprise'],
          ['ref', $date_EnterpriseWebhooks],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'base'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
        [['access', 'pull_request'], ['access', 'created_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'created_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'pushed_at'],
          ['select', [[['this']]]],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'head'],
          ['access', 'repo'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'closed_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'created_at'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'due_on'],
          ['this'],
        ],
        [
          ['access', 'pull_request'],
          ['access', 'milestone'],
          ['access', 'updated_at'],
          ['this'],
        ],
        [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
        [
          ['access', 'repository'],
          ['ref', $date_RepositoryWebhooks],
        ],
      ],
    ],
  ],
];
const $date_WebhookPullRequestReviewSubmitted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'review'], ['access', 'submitted_at'], ['this']],
];
const $date_WebhookPullRequestReviewThreadResolved = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'thread'],
    ['access', 'comments'],
    ['loop'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'thread'],
    ['access', 'comments'],
    ['loop'],
    ['access', 'updated_at'],
    ['this'],
  ],
];
const $date_WebhookPullRequestReviewThreadUnresolved =
  (): r.TransformField[] => [
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'base'],
      ['access', 'repo'],
      ['access', 'created_at'],
      ['select', [[['this']]]],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'base'],
      ['access', 'repo'],
      ['access', 'pushed_at'],
      ['select', [[['this']]]],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'base'],
      ['access', 'repo'],
      ['access', 'updated_at'],
      ['this'],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'head'],
      ['access', 'repo'],
      ['access', 'created_at'],
      ['select', [[['this']]]],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'head'],
      ['access', 'repo'],
      ['access', 'pushed_at'],
      ['select', [[['this']]]],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'head'],
      ['access', 'repo'],
      ['access', 'updated_at'],
      ['this'],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'milestone'],
      ['access', 'closed_at'],
      ['this'],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'milestone'],
      ['access', 'created_at'],
      ['this'],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'milestone'],
      ['access', 'due_on'],
      ['this'],
    ],
    [
      ['access', 'pull_request'],
      ['access', 'milestone'],
      ['access', 'updated_at'],
      ['this'],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
    [
      ['access', 'thread'],
      ['access', 'comments'],
      ['loop'],
      ['access', 'created_at'],
      ['this'],
    ],
    [
      ['access', 'thread'],
      ['access', 'comments'],
      ['loop'],
      ['access', 'updated_at'],
      ['this'],
    ],
  ];
const $date_WebhookPullRequestSynchronize = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestUnassigned = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestUnlabeled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPullRequestUnlocked = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'base'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'closed_at'], ['this']],
  [['access', 'pull_request'], ['access', 'created_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'head'],
    ['access', 'repo'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'merged_at'], ['this']],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'closed_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'due_on'],
    ['this'],
  ],
  [
    ['access', 'pull_request'],
    ['access', 'milestone'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'pull_request'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookPush = (): r.TransformField[] => [
  [
    ['access', 'commits'],
    ['loop'],
    ['access', 'author'],
    ['access', 'date'],
    ['this'],
  ],
  [
    ['access', 'commits'],
    ['loop'],
    ['access', 'committer'],
    ['access', 'date'],
    ['this'],
  ],
  [['access', 'commits'], ['loop'], ['access', 'timestamp'], ['this']],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'head_commit'],
    ['access', 'author'],
    ['access', 'date'],
    ['this'],
  ],
  [
    ['access', 'head_commit'],
    ['access', 'committer'],
    ['access', 'date'],
    ['this'],
  ],
  [['access', 'head_commit'], ['access', 'timestamp'], ['this']],
  [['access', 'pusher'], ['access', 'date'], ['this']],
  [
    ['access', 'repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [['access', 'repository'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookRegistryPackagePublished = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRegistryPackageUpdated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookReleaseCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'release'], ['access', 'created_at'], ['this']],
  [['access', 'release'], ['access', 'published_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookReleaseDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'release'], ['access', 'created_at'], ['this']],
  [['access', 'release'], ['access', 'published_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookReleaseEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'release'], ['access', 'created_at'], ['this']],
  [['access', 'release'], ['access', 'published_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookReleasePrereleased = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'release'],
    [
      'select',
      [
        [['access', 'assets'], ['loop'], ['access', 'created_at'], ['this']],
        [['access', 'assets'], ['loop'], ['access', 'updated_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'published_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookReleasePublished = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'release'],
    [
      'select',
      [
        [['access', 'assets'], ['loop'], ['access', 'created_at'], ['this']],
        [['access', 'assets'], ['loop'], ['access', 'updated_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'published_at'], ['this']],
        [['access', 'published_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookReleaseReleased = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'created_at'],
    ['this'],
  ],
  [
    ['access', 'release'],
    ['access', 'assets'],
    ['loop'],
    ['access', 'updated_at'],
    ['this'],
  ],
  [['access', 'release'], ['access', 'created_at'], ['this']],
  [['access', 'release'], ['access', 'published_at'], ['this']],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookReleaseUnpublished = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'release'],
    [
      'select',
      [
        [['access', 'assets'], ['loop'], ['access', 'created_at'], ['this']],
        [['access', 'assets'], ['loop'], ['access', 'updated_at'], ['this']],
        [['access', 'created_at'], ['this']],
        [['access', 'published_at'], ['this']],
      ],
    ],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryAdvisoryPublished = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'repository_advisory'],
    ['ref', $date_RepositoryAdvisory],
  ],
];
const $date_WebhookRepositoryAdvisoryReported = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'repository_advisory'],
    ['ref', $date_RepositoryAdvisory],
  ],
];
const $date_WebhookRepositoryArchived = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryDispatchSample = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryImport = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryPrivatized = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryPublicized = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryRenamed = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryRulesetCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'repository_ruleset'],
    ['ref', $date_RepositoryRuleset],
  ],
];
const $date_WebhookRepositoryRulesetDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'repository_ruleset'],
    ['ref', $date_RepositoryRuleset],
  ],
];
const $date_WebhookRepositoryRulesetEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'repository_ruleset'],
    ['ref', $date_RepositoryRuleset],
  ],
];
const $date_WebhookRepositoryTransferred = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryUnarchived = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookRepositoryVulnerabilityAlertCreate =
  (): r.TransformField[] => [
    [
      ['access', 'alert'],
      ['select', [[['access', 'fixed_at'], ['this']]]],
    ],
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookRepositoryVulnerabilityAlertDismiss =
  (): r.TransformField[] => [
    [
      ['access', 'alert'],
      ['select', [[['access', 'fixed_at'], ['this']]]],
    ],
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookRepositoryVulnerabilityAlertReopen =
  (): r.TransformField[] => [
    [
      ['access', 'alert'],
      ['select', [[['access', 'fixed_at'], ['this']]]],
    ],
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookRepositoryVulnerabilityAlertResolve =
  (): r.TransformField[] => [
    [
      ['access', 'alert'],
      [
        'select',
        [
          [['access', 'fixed_at'], ['this']],
          [['access', 'fixed_at'], ['this']],
        ],
      ],
    ],
    [
      ['access', 'enterprise'],
      ['ref', $date_EnterpriseWebhooks],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookSecretScanningAlertCreated = (): r.TransformField[] => [
  [
    ['access', 'alert'],
    ['ref', $date_SecretScanningAlertWebhook],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecretScanningAlertLocationCreated =
  (): r.TransformField[] => [
    [
      ['access', 'alert'],
      ['ref', $date_SecretScanningAlertWebhook],
    ],
    [
      ['access', 'repository'],
      ['ref', $date_RepositoryWebhooks],
    ],
  ];
const $date_WebhookSecretScanningAlertReopened = (): r.TransformField[] => [
  [
    ['access', 'alert'],
    ['ref', $date_SecretScanningAlertWebhook],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecretScanningAlertResolved = (): r.TransformField[] => [
  [
    ['access', 'alert'],
    ['ref', $date_SecretScanningAlertWebhook],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecretScanningAlertRevoked = (): r.TransformField[] => [
  [
    ['access', 'alert'],
    ['ref', $date_SecretScanningAlertWebhook],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecretScanningAlertValidated = (): r.TransformField[] => [
  [
    ['access', 'alert'],
    ['ref', $date_SecretScanningAlertWebhook],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecurityAdvisoryPublished = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecurityAdvisoryUpdated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecurityAdvisoryWithdrawn = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSecurityAndAnalysis = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_FullRepository],
  ],
];
const $date_WebhookSponsorshipCancelled = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSponsorshipCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSponsorshipEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSponsorshipPendingCancellation = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSponsorshipPendingTierChange = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookSponsorshipTierChanged = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookStarCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookStarDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookStatus = (): r.TransformField[] => [
  [
    ['access', 'commit'],
    ['access', 'commit'],
    ['access', 'author'],
    ['select', [[['access', 'date'], ['this']]]],
  ],
  [
    ['access', 'commit'],
    ['access', 'commit'],
    ['access', 'committer'],
    ['select', [[['access', 'date'], ['this']]]],
  ],
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookTeamAdd = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookTeamAddedToRepository = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [['access', 'repository'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookTeamCreated = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [['access', 'repository'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookTeamDeleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [['access', 'repository'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookTeamEdited = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [['access', 'repository'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookTeamRemovedFromRepository = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['access', 'created_at'],
    ['select', [[['this']]]],
  ],
  [
    ['access', 'repository'],
    ['access', 'pushed_at'],
    ['select', [[['this']]]],
  ],
  [['access', 'repository'], ['access', 'updated_at'], ['this']],
];
const $date_WebhookWatchStarted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookWorkflowDispatch = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
];
const $date_WebhookWorkflowJobCompleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'deployment'],
    ['ref', $date_Deployment],
  ],
];
const $date_WebhookWorkflowJobInProgress = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [
    ['access', 'deployment'],
    ['ref', $date_Deployment],
  ],
];
const $date_WebhookWorkflowJobQueued = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow_job'], ['access', 'started_at'], ['this']],
  [
    ['access', 'deployment'],
    ['ref', $date_Deployment],
  ],
];
const $date_WebhookWorkflowJobWaiting = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow_job'], ['access', 'started_at'], ['this']],
  [
    ['access', 'deployment'],
    ['ref', $date_Deployment],
  ],
];
const $date_WebhookWorkflowRunCompleted = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow'], ['access', 'created_at'], ['this']],
  [['access', 'workflow'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'workflow_run'],
    [
      'select',
      [
        [['access', 'created_at'], ['this']],
        [
          ['access', 'head_commit'],
          ['access', 'author'],
          ['access', 'date'],
          ['this'],
        ],
        [
          ['access', 'head_commit'],
          ['access', 'committer'],
          ['access', 'date'],
          ['this'],
        ],
        [['access', 'run_started_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
];
const $date_WebhookWorkflowRunInProgress = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow'], ['access', 'created_at'], ['this']],
  [['access', 'workflow'], ['access', 'updated_at'], ['this']],
  [
    ['access', 'workflow_run'],
    [
      'select',
      [
        [['access', 'created_at'], ['this']],
        [
          ['access', 'head_commit'],
          ['access', 'author'],
          ['access', 'date'],
          ['this'],
        ],
        [
          ['access', 'head_commit'],
          ['access', 'committer'],
          ['access', 'date'],
          ['this'],
        ],
        [['access', 'run_started_at'], ['this']],
        [['access', 'updated_at'], ['this']],
      ],
    ],
  ],
];
const $date_WebhookWorkflowRunRequested = (): r.TransformField[] => [
  [
    ['access', 'enterprise'],
    ['ref', $date_EnterpriseWebhooks],
  ],
  [
    ['access', 'repository'],
    ['ref', $date_RepositoryWebhooks],
  ],
  [['access', 'workflow'], ['access', 'created_at'], ['this']],
  [['access', 'workflow'], ['access', 'updated_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'created_at'], ['this']],
  [
    ['access', 'workflow_run'],
    ['access', 'head_commit'],
    ['access', 'author'],
    ['access', 'date'],
    ['this'],
  ],
  [
    ['access', 'workflow_run'],
    ['access', 'head_commit'],
    ['access', 'committer'],
    ['access', 'date'],
    ['this'],
  ],
  [['access', 'workflow_run'], ['access', 'run_started_at'], ['this']],
  [['access', 'workflow_run'], ['access', 'updated_at'], ['this']],
];
export type AuthMethods = {};
export function createContext<FetcherData>(
  params?: r.CreateContextParams<AuthMethods, FetcherData>,
): r.Context<AuthMethods, FetcherData> {
  return new r.Context<AuthMethods, FetcherData>({
    serverConfiguration: new r.ServerConfiguration(
      'https://api.github.com',
      {},
    ),
    authMethods: {},
    ...params,
  });
}
/**
 * GitHub API Root
 * Get Hypermedia links to resources accessible in GitHub's REST API
 * Learn more at {@link https://docs.github.com/rest/meta/meta#github-api-root}
 * Tags: meta
 */
export async function metaRoot<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<Root> {
  const req = await ctx.createRequest({
    path: '/',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List global security advisories
 * Lists all global security advisories that match the specified parameters. If no other parameters are defined, the
 * request will return only GitHub-reviewed advisories that are not malware.
 *
 * By default, all responses will exclude
 * advisories for malware, because malware are not standard vulnerabilities. To list advisories for malware, you must
 * include the `type` parameter in your request, with the value `malware`. For more information about the different types
 * of security advisories, see "[About the GitHub Advisory
 * database](https://docs.github.com/code-security/security-advisories/global-security-advisories/about-the-github-advisory-database#about-types-of-security-advisories)."
 * Learn more at {@link https://docs.github.com/rest/security-advisories/global-advisories#list-global-security-advisories}
 * Tags: security-advisories
 */
export async function securityAdvisoriesListGlobalAdvisories<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ghsa_id?: string;
    type?: 'reviewed' | 'malware' | 'unreviewed';
    cve_id?: string;
    ecosystem?:
      | 'actions'
      | 'composer'
      | 'erlang'
      | 'go'
      | 'maven'
      | 'npm'
      | 'nuget'
      | 'other'
      | 'pip'
      | 'pub'
      | 'rubygems'
      | 'rust';
    severity?: 'unknown' | 'low' | 'medium' | 'high' | 'critical';
    cwes?: string | string[];
    is_withdrawn?: boolean;
    affects?: string | string[];
    published?: string;
    updated?: string;
    modified?: string;
    before?: string;
    after?: string;
    direction?: 'asc' | 'desc';
    per_page?: number;
    sort?: 'updated' | 'published';
  },
  opts?: FetcherData,
): Promise<GlobalAdvisory[]> {
  const req = await ctx.createRequest({
    path: '/advisories',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'ghsa_id',
      'type',
      'cve_id',
      'ecosystem',
      'severity',
      'cwes',
      'is_withdrawn',
      'affects',
      'published',
      'updated',
      'modified',
      'before',
      'after',
      'direction',
      'per_page',
      'sort',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_GlobalAdvisory]]] },
    },
  });
}
/**
 * Get a global security advisory
 * Gets a global security advisory using its GitHub Security Advisory (GHSA) identifier.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/global-advisories#get-a-global-security-advisory}
 * Tags: security-advisories
 */
export async function securityAdvisoriesGetGlobalAdvisory<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ghsa_id: string;
  },
  opts?: FetcherData,
): Promise<GlobalAdvisory> {
  const req = await ctx.createRequest({
    path: '/advisories/{ghsa_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GlobalAdvisory]]] } },
  });
}
/**
 * Get the authenticated app
 * Returns the GitHub App associated with the authentication credentials used. To see how many app installations are
 * associated with this GitHub App, see the `installations_count` in the response. For more details about your app's
 * installations, see the "[List installations for the authenticated
 * app](https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app)" endpoint.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#get-the-authenticated-app}
 * Tags: apps
 */
export async function appsGetAuthenticated<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<Integration> {
  const req = await ctx.createRequest({
    path: '/app',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Integration]]] } },
  });
}
/**
 * Create a GitHub App from a manifest
 * Use this endpoint to complete the handshake necessary when implementing the [GitHub App Manifest
 * flow](https://docs.github.com/apps/building-github-apps/creating-github-apps-from-a-manifest/). When you create a GitHub
 * App with the manifest flow, you receive a temporary `code` used to retrieve the GitHub App's `id`, `pem` (private key),
 * and `webhook_secret`.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#create-a-github-app-from-a-manifest}
 * Tags: apps
 */
export async function appsCreateFromManifest<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    code: string;
  },
  opts?: FetcherData,
): Promise<
  Integration &
    ({
      client_id: string;
      client_secret: string;
      webhook_secret: string | null;
      pem: string;
    } & {
      [key: string]: any;
    })
> {
  const req = await ctx.createRequest({
    path: '/app-manifests/{code}/conversions',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': {
      transforms: { date: [[['select', [[['ref', $date_Integration]]]]]] },
    },
  });
}
/**
 * Get a webhook configuration for an app
 * Returns the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see
 * "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/webhooks#get-a-webhook-configuration-for-an-app}
 * Tags: apps
 */
export async function appsGetWebhookConfigForApp<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<WebhookConfig> {
  const req = await ctx.createRequest({
    path: '/app/hook/config',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update a webhook configuration for an app
 * Updates the webhook configuration for a GitHub App. For more information about configuring a webhook for your app, see
 * "[Creating a GitHub App](/developers/apps/creating-a-github-app)."
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/webhooks#update-a-webhook-configuration-for-an-app}
 * Tags: apps
 */
export async function appsUpdateWebhookConfigForApp<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    url?: WebhookConfigUrl;
    content_type?: WebhookConfigContentType;
    secret?: WebhookConfigSecret;
    insecure_ssl?: WebhookConfigInsecureSsl;
  },
  opts?: FetcherData,
): Promise<WebhookConfig> {
  const req = await ctx.createRequest({
    path: '/app/hook/config',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List deliveries for an app webhook
 * Returns a list of webhook deliveries for the webhook configured for a GitHub App.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/webhooks#list-deliveries-for-an-app-webhook}
 * Tags: apps
 */
export async function appsListWebhookDeliveries<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    cursor?: string;
    redelivery?: boolean;
  },
  opts?: FetcherData,
): Promise<HookDeliveryItem[]> {
  const req = await ctx.createRequest({
    path: '/app/hook/deliveries',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'cursor', 'redelivery'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_HookDeliveryItem]]] },
    },
  });
}
/**
 * Get a delivery for an app webhook
 * Returns a delivery for the webhook configured for a GitHub App.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/webhooks#get-a-delivery-for-an-app-webhook}
 * Tags: apps
 */
export async function appsGetWebhookDelivery<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    delivery_id: number;
  },
  opts?: FetcherData,
): Promise<HookDelivery> {
  const req = await ctx.createRequest({
    path: '/app/hook/deliveries/{delivery_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_HookDelivery]]] } },
  });
}
/**
 * Redeliver a delivery for an app webhook
 * Redeliver a delivery for the webhook configured for a GitHub App.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/webhooks#redeliver-a-delivery-for-an-app-webhook}
 * Tags: apps
 */
export async function appsRedeliverWebhookDelivery<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    delivery_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/app/hook/deliveries/{delivery_id}/attempts',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List installation requests for the authenticated app
 * Lists all the pending installation requests for the authenticated GitHub App.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#list-installation-requests-for-the-authenticated-app}
 * Tags: apps
 */
export async function appsListInstallationRequestsForAuthenticatedApp<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<IntegrationInstallationRequest[] | any> {
  const req = await ctx.createRequest({
    path: '/app/installation-requests',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_IntegrationInstallationRequest]]],
      },
    },
  });
}
/**
 * List installations for the authenticated app
 * The permissions the installation has are included under the `permissions` key.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#list-installations-for-the-authenticated-app}
 * Tags: apps
 */
export async function appsListInstallations<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
    since?: Date;
    outdated?: string;
  },
  opts?: FetcherData,
): Promise<Installation[]> {
  const req = await ctx.createRequest({
    path: '/app/installations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'since', 'outdated'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Installation]]] } },
  });
}
/**
 * Get an installation for the authenticated app
 * Enables an authenticated GitHub App to find an installation's information using the installation id.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#get-an-installation-for-the-authenticated-app}
 * Tags: apps
 */
export async function appsGetInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
  },
  opts?: FetcherData,
): Promise<Installation> {
  const req = await ctx.createRequest({
    path: '/app/installations/{installation_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Installation]]] } },
  });
}
/**
 * Delete an installation for the authenticated app
 * Uninstalls a GitHub App on a user, organization, or business account. If you prefer to temporarily suspend an app's
 * access to your account's resources, then we recommend the "[Suspend an app
 * installation](https://docs.github.com/rest/apps/apps#suspend-an-app-installation)" endpoint.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#delete-an-installation-for-the-authenticated-app}
 * Tags: apps
 */
export async function appsDeleteInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/app/installations/{installation_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create an installation access token for an app
 * Creates an installation access token that enables a GitHub App to make authenticated API requests for the app's
 * installation on an organization or individual account. Installation tokens expire one hour from the time you create
 * them. Using an expired token produces a status code of `401 - Unauthorized`, and requires creating a new installation
 * token. By default the installation token has access to all repositories that the installation can access.
 *
 * Optionally,
 * you can use the `repositories` or `repository_ids` body parameters to specify individual repositories that the
 * installation access token can access. If you don't use `repositories` or `repository_ids` to grant access to specific
 * repositories, the installation access token will have access to all repositories that the installation was granted
 * access to. The installation access token cannot be granted access to repositories that the installation was not granted
 * access to. Up to 500 repositories can be listed in this manner.
 *
 * Optionally, use the `permissions` body parameter to
 * specify the permissions that the installation access token should have. If `permissions` is not specified, the
 * installation access token will have all of the permissions that were granted to the app. The installation access token
 * cannot be granted permissions that the app was not granted.
 *
 * When using the repository or permission parameters to
 * reduce the access of the token, the complexity of the token is increased due to both the number of permissions in the
 * request and the number of repositories the token will have access to. If the complexity is too large, the token will
 * fail to be issued. If this occurs, the error message will indicate the maximum number of repositories that should be
 * requested. For the average application requesting 8 permissions, this limit is around 5000 repositories. With fewer
 * permissions requested, more repositories are supported.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app}
 * Tags: apps
 */
export async function appsCreateInstallationAccessToken<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
  },
  body: {
    /**
     * List of repository names that the token should have access to
     */
    repositories?: string[];
    /**
     * List of repository IDs that the token should have access to
     * @example
     * [
     *   1
     * ]
     */
    repository_ids?: number[];
    permissions?: AppPermissions;
  },
  opts?: FetcherData,
): Promise<InstallationToken> {
  const req = await ctx.createRequest({
    path: '/app/installations/{installation_id}/access_tokens',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_InstallationToken]]] } },
  });
}
/**
 * Suspend an app installation
 * Suspends a GitHub App on a user, organization, or business account, which blocks the app from accessing the account's
 * resources. When a GitHub App is suspended, the app's access to the GitHub API or webhook events is blocked for that
 * account.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#suspend-an-app-installation}
 * Tags: apps
 */
export async function appsSuspendInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/app/installations/{installation_id}/suspended',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unsuspend an app installation
 * Removes a GitHub App installation suspension.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#unsuspend-an-app-installation}
 * Tags: apps
 */
export async function appsUnsuspendInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/app/installations/{installation_id}/suspended',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an app authorization
 * OAuth and GitHub application owners can revoke a grant for their application and a specific user. You must use [Basic
 * Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing
 * this endpoint, using the OAuth application's `client_id` and `client_secret` as the username and password. You must also
 * provide a valid OAuth `access_token` as an input parameter and the grant for the token's owner will be deleted.
 * Deleting
 * an application's grant will also delete all OAuth tokens associated with the application for the user. Once deleted, the
 * application will have no access to the user's account and will no longer be listed on [the application authorizations
 * settings screen within GitHub](https://github.com/settings/applications#authorized).
 * Learn more at {@link https://docs.github.com/rest/apps/oauth-applications#delete-an-app-authorization}
 * Tags: apps
 */
export async function appsDeleteAuthorization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_id: string;
  },
  body: {
    /**
     * The OAuth access token used to authenticate to the GitHub API.
     */
    access_token: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/applications/{client_id}/grant',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check a token
 * OAuth applications and GitHub applications with OAuth authorizations can use this API method for checking OAuth token
 * validity without exceeding the normal rate limits for failed login attempts. Authentication works differently with this
 * particular endpoint. You must use [Basic
 * Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) to use this
 * endpoint, where the username is the application `client_id` and the password is its `client_secret`. Invalid tokens will
 * return `404 NOT FOUND`.
 * Learn more at {@link https://docs.github.com/rest/apps/oauth-applications#check-a-token}
 * Tags: apps
 */
export async function appsCheckToken<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_id: string;
  },
  body: {
    /**
     * The access_token of the OAuth or GitHub application.
     */
    access_token: string;
  },
  opts?: FetcherData,
): Promise<Authorization> {
  const req = await ctx.createRequest({
    path: '/applications/{client_id}/token',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Authorization]]] } },
  });
}
/**
 * Reset a token
 * OAuth applications and GitHub applications with OAuth authorizations can use this API method to reset a valid OAuth
 * token without end-user involvement. Applications must save the "token" property in the response because changes take
 * effect immediately. You must use [Basic
 * Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing
 * this endpoint, using the application's `client_id` and `client_secret` as the username and password. Invalid tokens will
 * return `404 NOT FOUND`.
 * Learn more at {@link https://docs.github.com/rest/apps/oauth-applications#reset-a-token}
 * Tags: apps
 */
export async function appsResetToken<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_id: string;
  },
  body: {
    /**
     * The access_token of the OAuth or GitHub application.
     */
    access_token: string;
  },
  opts?: FetcherData,
): Promise<Authorization> {
  const req = await ctx.createRequest({
    path: '/applications/{client_id}/token',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Authorization]]] } },
  });
}
/**
 * Delete an app token
 * OAuth  or GitHub application owners can revoke a single token for an OAuth application or a GitHub application with an
 * OAuth authorization. You must use [Basic
 * Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) when accessing
 * this endpoint, using the application's `client_id` and `client_secret` as the username and password.
 * Learn more at {@link https://docs.github.com/rest/apps/oauth-applications#delete-an-app-token}
 * Tags: apps
 */
export async function appsDeleteToken<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_id: string;
  },
  body: {
    /**
     * The OAuth access token used to authenticate to the GitHub API.
     */
    access_token: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/applications/{client_id}/token',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a scoped access token
 * Use a non-scoped user access token to create a repository-scoped and/or permission-scoped user access token. You can
 * specify
 * which repositories the token can access and which permissions are granted to the
 * token.
 *
 * Invalid tokens will
 * return `404 NOT FOUND`.
 *
 * You must use [Basic
 * Authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication)
 * when accessing
 * this endpoint, using the `client_id` and `client_secret` of the GitHub App
 * as the username and password.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#create-a-scoped-access-token}
 * Tags: apps
 */
export async function appsScopeToken<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    client_id: string;
  },
  body: {
    /**
     * The access token used to authenticate to the GitHub API.
     * @example "e72e16c7e42f292c6912e7710c838347ae178b4a"
     */
    access_token: string;
    /**
     * The name of the user or organization to scope the user access token to. **Required** unless `target_id` is specified.
     * @example "octocat"
     */
    target?: string;
    /**
     * The ID of the user or organization to scope the user access token to. **Required** unless `target` is specified.
     * @example 1
     */
    target_id?: number;
    /**
     * The list of repository names to scope the user access token to. `repositories` may not be specified if `repository_ids` is specified.
     */
    repositories?: string[];
    /**
     * The list of repository IDs to scope the user access token to. `repository_ids` may not be specified if `repositories` is specified.
     * @example
     * [
     *   1
     * ]
     */
    repository_ids?: number[];
    permissions?: AppPermissions;
  },
  opts?: FetcherData,
): Promise<Authorization> {
  const req = await ctx.createRequest({
    path: '/applications/{client_id}/token/scoped',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Authorization]]] } },
  });
}
/**
 * Get an app
 * **Note**: The `:app_slug` is just the URL-friendly name of your GitHub App. You can find this on the settings page for
 * your GitHub App (e.g., `https://github.com/settings/apps/:app_slug`).
 * Learn more at {@link https://docs.github.com/rest/apps/apps#get-an-app}
 * Tags: apps
 */
export async function appsGetBySlug<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    app_slug: string;
  },
  opts?: FetcherData,
): Promise<Integration> {
  const req = await ctx.createRequest({
    path: '/apps/{app_slug}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Integration]]] } },
  });
}
/**
 * Get an assignment
 * Gets a GitHub Classroom assignment. Assignment will only be returned if the current user is an administrator of the
 * GitHub Classroom for the assignment.
 * Learn more at {@link https://docs.github.com/rest/classroom/classroom#get-an-assignment}
 * Tags: classroom
 */
export async function classroomGetAnAssignment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    assignment_id: number;
  },
  opts?: FetcherData,
): Promise<ClassroomAssignment> {
  const req = await ctx.createRequest({
    path: '/assignments/{assignment_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ClassroomAssignment]]] } },
  });
}
/**
 * List accepted assignments for an assignment
 * Lists any assignment repositories that have been created by students accepting a GitHub Classroom assignment. Accepted
 * assignments will only be returned if the current user is an administrator of the GitHub Classroom for the assignment.
 * Learn more at {@link https://docs.github.com/rest/classroom/classroom#list-accepted-assignments-for-an-assignment}
 * Tags: classroom
 */
export async function classroomListAcceptedAssigmentsForAnAssignment<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    assignment_id: number;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<ClassroomAcceptedAssignment[]> {
  const req = await ctx.createRequest({
    path: '/assignments/{assignment_id}/accepted_assignments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_ClassroomAcceptedAssignment]]],
      },
    },
  });
}
/**
 * Get assignment grades
 * Gets grades for a GitHub Classroom assignment. Grades will only be returned if the current user is an administrator of
 * the GitHub Classroom for the assignment.
 * Learn more at {@link https://docs.github.com/rest/classroom/classroom#get-assignment-grades}
 * Tags: classroom
 */
export async function classroomGetAssignmentGrades<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    assignment_id: number;
  },
  opts?: FetcherData,
): Promise<ClassroomAssignmentGrade[]> {
  const req = await ctx.createRequest({
    path: '/assignments/{assignment_id}/grades',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List classrooms
 * Lists GitHub Classroom classrooms for the current user. Classrooms will only be returned if the current user is an
 * administrator of one or more GitHub Classrooms.
 * Learn more at {@link https://docs.github.com/rest/classroom/classroom#list-classrooms}
 * Tags: classroom
 */
export async function classroomListClassrooms<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleClassroom[]> {
  const req = await ctx.createRequest({
    path: '/classrooms',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a classroom
 * Gets a GitHub Classroom classroom for the current user. Classroom will only be returned if the current user is an
 * administrator of the GitHub Classroom.
 * Learn more at {@link https://docs.github.com/rest/classroom/classroom#get-a-classroom}
 * Tags: classroom
 */
export async function classroomGetAClassroom<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    classroom_id: number;
  },
  opts?: FetcherData,
): Promise<Classroom> {
  const req = await ctx.createRequest({
    path: '/classrooms/{classroom_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List assignments for a classroom
 * Lists GitHub Classroom assignments for a classroom. Assignments will only be returned if the current user is an
 * administrator of the GitHub Classroom.
 * Learn more at {@link https://docs.github.com/rest/classroom/classroom#list-assignments-for-a-classroom}
 * Tags: classroom
 */
export async function classroomListAssignmentsForAClassroom<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    classroom_id: number;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleClassroomAssignment[]> {
  const req = await ctx.createRequest({
    path: '/classrooms/{classroom_id}/assignments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_SimpleClassroomAssignment]]],
      },
    },
  });
}
/**
 * Get all codes of conduct
 * Returns array of all GitHub's codes of conduct.
 * Learn more at {@link https://docs.github.com/rest/codes-of-conduct/codes-of-conduct#get-all-codes-of-conduct}
 * Tags: codes-of-conduct
 */
export async function codesOfConductGetAllCodesOfConduct<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<CodeOfConduct[] | any> {
  const req = await ctx.createRequest({
    path: '/codes_of_conduct',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a code of conduct
 * Returns information about the specified GitHub code of conduct.
 * Learn more at {@link https://docs.github.com/rest/codes-of-conduct/codes-of-conduct#get-a-code-of-conduct}
 * Tags: codes-of-conduct
 */
export async function codesOfConductGetConductCode<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    key: string;
  },
  opts?: FetcherData,
): Promise<CodeOfConduct | any> {
  const req = await ctx.createRequest({
    path: '/codes_of_conduct/{key}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get emojis
 * Lists all the emojis available to use on GitHub.
 * Learn more at {@link https://docs.github.com/rest/emojis/emojis#get-emojis}
 * Tags: emojis
 */
export async function emojisGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<
  | {
      [key: string]: string;
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/emojis',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List Dependabot alerts for an enterprise
 * Lists Dependabot alerts for repositories that are owned by the specified enterprise.
 *
 * The authenticated user must be a
 * member of the enterprise to use this endpoint.
 *
 * Alerts are only returned for organizations in the enterprise for which
 * you are an organization owner or a security manager. For more information about security managers, see "[Managing
 * security managers in your
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-enterprise}
 * Tags: dependabot
 */
export async function dependabotListAlertsForEnterprise<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    enterprise: string;
    state?: string;
    severity?: string;
    ecosystem?: string;
    package?: string;
    scope?: 'development' | 'runtime';
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    before?: string;
    after?: string;
    first?: number;
    last?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<DependabotAlertWithRepository[] | any> {
  const req = await ctx.createRequest({
    path: '/enterprises/{enterprise}/dependabot/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'state',
      'severity',
      'ecosystem',
      'package',
      'scope',
      'sort',
      'direction',
      'before',
      'after',
      'first',
      'last',
      'per_page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_DependabotAlertWithRepository]]],
      },
    },
  });
}
/**
 * List secret scanning alerts for an enterprise
 * Lists secret scanning alerts for eligible repositories in an enterprise, from newest to oldest.
 *
 * Alerts are only
 * returned for organizations in the enterprise for which the authenticated user is an organization owner or a [security
 * manager](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization).
 *
 * The
 * authenticated user must be a member of the enterprise in order to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `repo` scope or `security_events` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-an-enterprise}
 * Tags: secret-scanning
 */
export async function secretScanningListAlertsForEnterprise<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    enterprise: string;
    state?: 'open' | 'resolved';
    secret_type?: string;
    resolution?: string;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    before?: string;
    after?: string;
    validity?: string;
  },
  opts?: FetcherData,
): Promise<OrganizationSecretScanningAlert[]> {
  const req = await ctx.createRequest({
    path: '/enterprises/{enterprise}/secret-scanning/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'state',
      'secret_type',
      'resolution',
      'sort',
      'direction',
      'per_page',
      'before',
      'after',
      'validity',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_OrganizationSecretScanningAlert]]],
      },
    },
  });
}
/**
 * List public events
 * We delay the public events feed by five minutes, which means the most recent event returned by the public events API
 * actually occurred at least five minutes ago.
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-public-events}
 * Tags: activity
 */
export async function activityListPublicEvents<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[] | any> {
  const req = await ctx.createRequest({
    path: '/events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * Get feeds
 * GitHub provides several timeline resources in [Atom](http://en.wikipedia.org/wiki/Atom_(standard)) format. The Feeds API
 * lists all the feeds available to the authenticated user:
 *
 * *   **Timeline**: The GitHub global public timeline
 * *
 * **User**: The public timeline for any user, using `uri_template`. For more information, see
 * "[Hypermedia](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
 * *
 * **Current user public**: The public timeline for the authenticated user
 * *   **Current user**: The private timeline for
 * the authenticated user
 * *   **Current user actor**: The private timeline for activity created by the authenticated user
 * *
 * **Current user organizations**: The private timeline for the organizations the authenticated user is a member of.
 * *
 * **Security advisories**: A collection of public announcements that provide information about security-related
 * vulnerabilities in software on GitHub.
 *
 * **Note**: Private feeds are only returned when [authenticating via Basic
 * Auth](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) since current feed URIs
 * use the older, non revocable auth tokens.
 * Learn more at {@link https://docs.github.com/rest/activity/feeds#get-feeds}
 * Tags: activity
 */
export async function activityGetFeeds<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<Feed> {
  const req = await ctx.createRequest({
    path: '/feeds',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List gists for the authenticated user
 * Lists the authenticated user's gists or if called anonymously, this endpoint returns all public gists:
 * Learn more at {@link https://docs.github.com/rest/gists/gists#list-gists-for-the-authenticated-user}
 * Tags: gists
 */
export async function gistsList<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<BaseGist[] | any> {
  const req = await ctx.createRequest({
    path: '/gists',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_BaseGist]]] } },
  });
}
/**
 * Create a gist
 * Allows you to add a new gist with one or more files.
 *
 * **Note:** Don't name your files "gistfile" with a numerical
 * suffix. This is the format of the automatic naming scheme that Gist uses internally.
 * Learn more at {@link https://docs.github.com/rest/gists/gists#create-a-gist}
 * Tags: gists
 */
export async function gistsCreate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * Description of the gist
     * @example "Example Ruby script"
     */
    description?: string;
    /**
     * Names and content for the files that make up the gist
     * @example
     * {
     *   "hello.rb": {
     *     "content": "puts \"Hello, World!\""
     *   }
     * }
     */
    files: {
      [key: string]: {
        /**
         * Content of the file
         */
        content: string;
      };
    };
    public?: boolean | ('true' | 'false');
  },
  opts?: FetcherData,
): Promise<GistSimple | any> {
  const req = await ctx.createRequest({
    path: '/gists',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_GistSimple]]] } },
  });
}
/**
 * List public gists
 * List public gists sorted by most recently updated to least recently updated.
 *
 * Note: With
 * [pagination](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api), you can fetch up to 3000 gists. For
 * example, you can fetch 100 pages with 30 gists per page or 30 pages with 100 gists per page.
 * Learn more at {@link https://docs.github.com/rest/gists/gists#list-public-gists}
 * Tags: gists
 */
export async function gistsListPublic<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<BaseGist[] | any> {
  const req = await ctx.createRequest({
    path: '/gists/public',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_BaseGist]]] } },
  });
}
/**
 * List starred gists
 * List the authenticated user's starred gists:
 * Learn more at {@link https://docs.github.com/rest/gists/gists#list-starred-gists}
 * Tags: gists
 */
export async function gistsListStarred<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<BaseGist[] | any> {
  const req = await ctx.createRequest({
    path: '/gists/starred',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_BaseGist]]] } },
  });
}
/**
 * Get a gist
 * Gets a specified gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific
 * media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your
 * gist contains any invalid UTF-8 sequences.
 * Learn more at {@link https://docs.github.com/rest/gists/gists#get-a-gist}
 * Tags: gists
 */
export async function gistsGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  opts?: FetcherData,
): Promise<GistSimple | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GistSimple]]] } },
  });
}
/**
 * Update a gist
 * Allows you to update a gist's description and to update, delete, or rename gist files. Files
 * from the previous version
 * of the gist that aren't explicitly changed during an edit
 * are unchanged.
 *
 * At least one of `description` or `files` is
 * required.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific
 * media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your
 * gist contains any invalid UTF-8 sequences.
 * Learn more at {@link https://docs.github.com/rest/gists/gists#update-a-gist}
 * Tags: gists
 */
export async function gistsUpdate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  body: {
    /**
     * The description of the gist.
     * @example "Example Ruby script"
     */
    description?: string;
    /**
     * The gist files to be updated, renamed, or deleted. Each `key` must match the current filename
     * (including extension) of the targeted gist file. For example: `hello.py`.
     *
     * To delete a file, set the whole file to null. For example: `hello.py : null`. The file will also be
     * deleted if the specified object does not contain at least one of `content` or `filename`.
     * @example
     * {
     *   "hello.rb": {
     *     "content": "blah",
     *     "filename": "goodbye.rb"
     *   }
     * }
     */
    files?: {
      [key: string]: {
        /**
         * The new content of the file.
         */
        content?: string;
        /**
         * The new filename for the file.
         */
        filename?: string | null;
      } | null;
    };
  } | null,
  opts?: FetcherData,
): Promise<GistSimple> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GistSimple]]] } },
  });
}
/**
 * Delete a gist
 * Learn more at {@link https://docs.github.com/rest/gists/gists#delete-a-gist}
 * Tags: gists
 */
export async function gistsDelete<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List gist comments
 * Lists the comments on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see
 * "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific
 * media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your
 * gist contains any invalid UTF-8 sequences.
 * Learn more at {@link https://docs.github.com/rest/gists/comments#list-gist-comments}
 * Tags: gists
 */
export async function gistsListComments<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<GistComment[] | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_GistComment]]] } },
  });
}
/**
 * Create a gist comment
 * Creates a comment on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific
 * media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your
 * gist contains any invalid UTF-8 sequences.
 * Learn more at {@link https://docs.github.com/rest/gists/comments#create-a-gist-comment}
 * Tags: gists
 */
export async function gistsCreateComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  body: {
    /**
     * The comment text.
     * @example "Body of the attachment"
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<GistComment | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/comments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_GistComment]]] } },
  });
}
/**
 * Get a gist comment
 * Gets a comment on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific
 * media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your
 * gist contains any invalid UTF-8 sequences.
 * Learn more at {@link https://docs.github.com/rest/gists/comments#get-a-gist-comment}
 * Tags: gists
 */
export async function gistsGetComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<GistComment | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/comments/{comment_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GistComment]]] } },
  });
}
/**
 * Update a gist comment
 * Updates a comment on a gist.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific
 * media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your
 * gist contains any invalid UTF-8 sequences.
 * Learn more at {@link https://docs.github.com/rest/gists/comments#update-a-gist-comment}
 * Tags: gists
 */
export async function gistsUpdateComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
    comment_id: number;
  },
  body: {
    /**
     * The comment text.
     * @example "Body of the attachment"
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<GistComment> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/comments/{comment_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GistComment]]] } },
  });
}
/**
 * Delete a gist comment
 * Learn more at {@link https://docs.github.com/rest/gists/comments#delete-a-gist-comment}
 * Tags: gists
 */
export async function gistsDeleteComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/comments/{comment_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List gist commits
 * Learn more at {@link https://docs.github.com/rest/gists/gists#list-gist-commits}
 * Tags: gists
 */
export async function gistsListCommits<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<GistCommit[] | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/commits',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_GistCommit]]] } },
  });
}
/**
 * List gist forks
 * Learn more at {@link https://docs.github.com/rest/gists/gists#list-gist-forks}
 * Tags: gists
 */
export async function gistsListForks<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<GistSimple[] | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/forks',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_GistSimple]]] } },
  });
}
/**
 * Fork a gist
 * Learn more at {@link https://docs.github.com/rest/gists/gists#fork-a-gist}
 * Tags: gists
 */
export async function gistsFork<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  opts?: FetcherData,
): Promise<BaseGist | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/forks',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_BaseGist]]] } },
  });
}
/**
 * Check if a gist is starred
 * Learn more at {@link https://docs.github.com/rest/gists/gists#check-if-a-gist-is-starred}
 * Tags: gists
 */
export async function gistsCheckIsStarred<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/star',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Star a gist
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see
 * "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 * Learn more at {@link https://docs.github.com/rest/gists/gists#star-a-gist}
 * Tags: gists
 */
export async function gistsStar<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/star',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unstar a gist
 * Learn more at {@link https://docs.github.com/rest/gists/gists#unstar-a-gist}
 * Tags: gists
 */
export async function gistsUnstar<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/star',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a gist revision
 * Gets a specified gist revision.
 *
 * This endpoint supports the following custom media types. For more information, see
 * "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown. This is the default if you do not pass any specific
 * media type.
 * - **`application/vnd.github.base64+json`**: Returns the base64-encoded contents. This can be useful if your
 * gist contains any invalid UTF-8 sequences.
 * Learn more at {@link https://docs.github.com/rest/gists/gists#get-a-gist-revision}
 * Tags: gists
 */
export async function gistsGetRevision<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gist_id: string;
    sha: string;
  },
  opts?: FetcherData,
): Promise<GistSimple> {
  const req = await ctx.createRequest({
    path: '/gists/{gist_id}/{sha}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GistSimple]]] } },
  });
}
/**
 * Get all gitignore templates
 * List all templates available to pass as an option when [creating a
 * repository](https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user).
 * Learn more at {@link https://docs.github.com/rest/gitignore/gitignore#get-all-gitignore-templates}
 * Tags: gitignore
 */
export async function gitignoreGetAllTemplates<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<string[] | any> {
  const req = await ctx.createRequest({
    path: '/gitignore/templates',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a gitignore template
 * Get the content of a gitignore template.
 *
 * This endpoint supports the following custom media types. For more information,
 * see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw .gitignore contents.
 * Learn more at {@link https://docs.github.com/rest/gitignore/gitignore#get-a-gitignore-template}
 * Tags: gitignore
 */
export async function gitignoreGetTemplate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    name: string;
  },
  opts?: FetcherData,
): Promise<GitignoreTemplate | any> {
  const req = await ctx.createRequest({
    path: '/gitignore/templates/{name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories accessible to the app installation
 * List repositories that an app installation can access.
 * Learn more at {@link https://docs.github.com/rest/apps/installations#list-repositories-accessible-to-the-app-installation}
 * Tags: apps
 */
export async function appsListReposAccessibleToInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      repositories: Repository[];
      /**
       * @example "selected"
       */
      repository_selection?: string;
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/installation/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'repositories'], ['loop'], ['ref', $date_Repository]],
        ],
      },
    },
  });
}
/**
 * Revoke an installation access token
 * Revokes the installation token you're using to authenticate as an installation and access this endpoint.
 *
 * Once an
 * installation token is revoked, the token is invalidated and cannot be used. Other endpoints that require the revoked
 * installation token must have a new installation token to work. You can create a new token using the "[Create an
 * installation access token for an
 * app](https://docs.github.com/rest/apps/apps#create-an-installation-access-token-for-an-app)" endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/installations#revoke-an-installation-access-token}
 * Tags: apps
 */
export async function appsRevokeInstallationAccessToken<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/installation/token',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List issues assigned to the authenticated user
 * List issues assigned to the authenticated user across all visible repositories including owned repositories,
 * member
 * repositories, and organization repositories. You can use the `filter` query parameter to fetch issues that are
 * not
 * necessarily assigned to you.
 *
 * **Note**: GitHub's REST API considers every pull request an issue, but not every issue
 * is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull requests in the response. You can
 * identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull request returned from "Issues"
 * endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull
 * requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
 *
 * This endpoint supports the following
 * custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#list-issues-assigned-to-the-authenticated-user}
 * Tags: issues
 */
export async function issuesList<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    filter?:
      | 'assigned'
      | 'created'
      | 'mentioned'
      | 'subscribed'
      | 'repos'
      | 'all';
    state?: 'open' | 'closed' | 'all';
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    collab?: boolean;
    orgs?: boolean;
    owned?: boolean;
    pulls?: boolean;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Issue[] | any> {
  const req = await ctx.createRequest({
    path: '/issues',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'filter',
      'state',
      'labels',
      'sort',
      'direction',
      'since',
      'collab',
      'orgs',
      'owned',
      'pulls',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Issue]]] } },
  });
}
/**
 * Get all commonly used licenses
 * Lists the most commonly used licenses on GitHub. For more information, see "[Licensing a repository
 * ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
 * Learn more at {@link https://docs.github.com/rest/licenses/licenses#get-all-commonly-used-licenses}
 * Tags: licenses
 */
export async function licensesGetAllCommonlyUsed<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    featured?: boolean;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<LicenseSimple[] | any> {
  const req = await ctx.createRequest({
    path: '/licenses',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['featured', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a license
 * Gets information about a specific license. For more information, see "[Licensing a repository
 * ](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/licensing-a-repository)."
 * Learn more at {@link https://docs.github.com/rest/licenses/licenses#get-a-license}
 * Tags: licenses
 */
export async function licensesGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    license: string;
  },
  opts?: FetcherData,
): Promise<License | any> {
  const req = await ctx.createRequest({
    path: '/licenses/{license}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Render a Markdown document
 * Learn more at {@link https://docs.github.com/rest/markdown/markdown#render-a-markdown-document}
 * Tags: markdown
 */
export async function markdownRender<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * The Markdown text to render in HTML.
     */
    text: string;
    /**
     * The rendering mode.
     * @example "markdown"
     * @defaultValue "markdown"
     */
    mode?: 'markdown' | 'gfm';
    /**
     * The repository context to use when creating references in `gfm` mode.  For example, setting `context` to `octo-org/octo-repo` will change the text `#42` into an HTML link to issue 42 in the `octo-org/octo-repo` repository.
     */
    context?: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/markdown',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Render a Markdown document in raw mode
 * You must send Markdown as plain text (using a `Content-Type` header of `text/plain` or `text/x-markdown`) to this
 * endpoint, rather than using JSON format. In raw mode, [GitHub Flavored Markdown](https://github.github.com/gfm/) is not
 * supported and Markdown will be rendered in plain format like a README.md file. Markdown content must be 400 KB or less.
 * Learn more at {@link https://docs.github.com/rest/markdown/markdown#render-a-markdown-document-in-raw-mode}
 * Tags: markdown
 */
export async function markdownRenderRaw<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: string,
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/markdown/raw',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a subscription plan for an account
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App.
 * When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the
 * upcoming pending change.
 *
 * GitHub Apps must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint. OAuth apps must use [basic
 * authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their
 * client ID and client secret to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#get-a-subscription-plan-for-an-account}
 * Tags: apps
 */
export async function appsGetSubscriptionPlanForAccount<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account_id: number;
  },
  opts?: FetcherData,
): Promise<MarketplacePurchase> {
  const req = await ctx.createRequest({
    path: '/marketplace_listing/accounts/{account_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List plans
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint. OAuth apps must use [basic
 * authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their
 * client ID and client secret to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#list-plans}
 * Tags: apps
 */
export async function appsListPlans<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MarketplaceListingPlan[]> {
  const req = await ctx.createRequest({
    path: '/marketplace_listing/plans',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List accounts for a plan
 * Returns user and organization accounts associated with the specified plan, including free plans. For per-seat pricing,
 * you see the list of accounts that have purchased the plan, including the number of seats purchased. When someone submits
 * a plan change that won't be processed until the end of their billing cycle, you will also see the upcoming pending
 * change.
 *
 * GitHub Apps must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint. OAuth apps must use [basic
 * authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their
 * client ID and client secret to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#list-accounts-for-a-plan}
 * Tags: apps
 */
export async function appsListAccountsForPlan<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    plan_id: number;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MarketplacePurchase[]> {
  const req = await ctx.createRequest({
    path: '/marketplace_listing/plans/{plan_id}/accounts',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a subscription plan for an account (stubbed)
 * Shows whether the user or organization account actively subscribes to a plan listed by the authenticated GitHub App.
 * When someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the
 * upcoming pending change.
 *
 * GitHub Apps must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint. OAuth apps must use [basic
 * authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their
 * client ID and client secret to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#get-a-subscription-plan-for-an-account-stubbed}
 * Tags: apps
 */
export async function appsGetSubscriptionPlanForAccountStubbed<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    account_id: number;
  },
  opts?: FetcherData,
): Promise<MarketplacePurchase> {
  const req = await ctx.createRequest({
    path: '/marketplace_listing/stubbed/accounts/{account_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List plans (stubbed)
 * Lists all plans that are part of your GitHub Marketplace listing.
 *
 * GitHub Apps must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint. OAuth apps must use [basic
 * authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their
 * client ID and client secret to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#list-plans-stubbed}
 * Tags: apps
 */
export async function appsListPlansStubbed<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MarketplaceListingPlan[]> {
  const req = await ctx.createRequest({
    path: '/marketplace_listing/stubbed/plans',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List accounts for a plan (stubbed)
 * Returns repository and organization accounts associated with the specified plan, including free plans. For per-seat
 * pricing, you see the list of accounts that have purchased the plan, including the number of seats purchased. When
 * someone submits a plan change that won't be processed until the end of their billing cycle, you will also see the
 * upcoming pending change.
 *
 * GitHub Apps must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint. OAuth apps must use [basic
 * authentication](https://docs.github.com/rest/overview/other-authentication-methods#basic-authentication) with their
 * client ID and client secret to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#list-accounts-for-a-plan-stubbed}
 * Tags: apps
 */
export async function appsListAccountsForPlanStubbed<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    plan_id: number;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MarketplacePurchase[]> {
  const req = await ctx.createRequest({
    path: '/marketplace_listing/stubbed/plans/{plan_id}/accounts',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get GitHub meta information
 * Returns meta information about GitHub, including a list of GitHub's IP addresses. For more information, see "[About
 * GitHub's IP addresses](https://docs.github.com/articles/about-github-s-ip-addresses/)."
 *
 * The API's response also
 * includes a list of GitHub's domain names.
 *
 * The values shown in the documentation's response are example values. You must
 * always query the API directly to get the latest values.
 *
 * **Note:** This endpoint returns both IPv4 and IPv6 addresses.
 * However, not all features support IPv6. You should refer to the specific documentation for each feature to determine if
 * IPv6 is supported.
 * Learn more at {@link https://docs.github.com/rest/meta/meta#get-apiname-meta-information}
 * Tags: meta
 */
export async function metaGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<ApiOverview | any> {
  const req = await ctx.createRequest({
    path: '/meta',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List public events for a network of repositories
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-public-events-for-a-network-of-repositories}
 * Tags: activity
 */
export async function activityListPublicEventsForRepoNetwork<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[] | BasicError | any> {
  const req = await ctx.createRequest({
    path: '/networks/{owner}/{repo}/events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List notifications for the authenticated user
 * List all notifications for the current user, sorted by most recently updated.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user}
 * Tags: activity
 */
export async function activityListNotificationsForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    all?: boolean;
    participating?: boolean;
    since?: Date;
    before?: Date;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<Thread[] | any> {
  const req = await ctx.createRequest({
    path: '/notifications',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'all',
      'participating',
      'since',
      'before',
      'page',
      'per_page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Thread]]] } },
  });
}
/**
 * Mark notifications as read
 * Marks all notifications as "read" for the current user. If the number of notifications is too large to complete in one
 * request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark notifications as
 * "read." To check whether any "unread" notifications remain, you can use the [List notifications for the authenticated
 * user](https://docs.github.com/rest/activity/notifications#list-notifications-for-the-authenticated-user) endpoint and
 * pass the query parameter `all=false`.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#mark-notifications-as-read}
 * Tags: activity
 */
export async function activityMarkNotificationsAsRead<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
     */
    last_read_at?: Date;
    /**
     * Whether the notification has been read.
     */
    read?: boolean;
  },
  opts?: FetcherData,
): Promise<
  | {
      message?: string;
    }
  | any
  | any
> {
  const req = await ctx.createRequest({
    path: '/notifications',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a thread
 * Gets information about a notification thread.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#get-a-thread}
 * Tags: activity
 */
export async function activityGetThread<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    thread_id: number;
  },
  opts?: FetcherData,
): Promise<Thread | any> {
  const req = await ctx.createRequest({
    path: '/notifications/threads/{thread_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Thread]]] } },
  });
}
/**
 * Mark a thread as read
 * Marks a thread as "read." Marking a thread as "read" is equivalent to clicking a notification in your notification inbox
 * on GitHub: https://github.com/notifications.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#mark-a-thread-as-read}
 * Tags: activity
 */
export async function activityMarkThreadAsRead<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    thread_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/notifications/threads/{thread_id}',
    params,
    method: r.HttpMethod.PATCH,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Mark a thread as done
 * Marks a thread as "done." Marking a thread as "done" is equivalent to marking a notification in your notification inbox
 * on GitHub as done: https://github.com/notifications.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#mark-a-thread-as-done}
 * Tags: activity
 */
export async function activityMarkThreadAsDone<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    thread_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/notifications/threads/{thread_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a thread subscription for the authenticated user
 * This checks to see if the current user is subscribed to a thread. You can also [get a repository
 * subscription](https://docs.github.com/rest/activity/watching#get-a-repository-subscription).
 *
 * Note that subscriptions
 * are only generated if a user is participating in a conversation--for example, they've replied to the thread, were
 * **@mentioned**, or manually subscribe to a thread.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#get-a-thread-subscription-for-the-authenticated-user}
 * Tags: activity
 */
export async function activityGetThreadSubscriptionForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    thread_id: number;
  },
  opts?: FetcherData,
): Promise<ThreadSubscription | any> {
  const req = await ctx.createRequest({
    path: '/notifications/threads/{thread_id}/subscription',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ThreadSubscription]]] } },
  });
}
/**
 * Set a thread subscription
 * If you are watching a repository, you receive notifications for all threads by default. Use this endpoint to ignore
 * future notifications for threads until you comment on the thread or get an **@mention**.
 *
 * You can also use this endpoint
 * to subscribe to threads that you are currently not receiving notifications for or to subscribed to threads that you have
 * previously ignored.
 *
 * Unsubscribing from a conversation in a repository that you are not watching is functionally
 * equivalent to the [Delete a thread
 * subscription](https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription) endpoint.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#set-a-thread-subscription}
 * Tags: activity
 */
export async function activitySetThreadSubscription<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    thread_id: number;
  },
  body: {
    /**
     * Whether to block all notifications from a thread.
     */
    ignored?: boolean;
  },
  opts?: FetcherData,
): Promise<ThreadSubscription | any> {
  const req = await ctx.createRequest({
    path: '/notifications/threads/{thread_id}/subscription',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ThreadSubscription]]] } },
  });
}
/**
 * Delete a thread subscription
 * Mutes all future notifications for a conversation until you comment on the thread or get an **@mention**. If you are
 * watching the repository of the thread, you will still receive notifications. To ignore future notifications for a
 * repository you are watching, use the [Set a thread
 * subscription](https://docs.github.com/rest/activity/notifications#set-a-thread-subscription) endpoint and set `ignore`
 * to `true`.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#delete-a-thread-subscription}
 * Tags: activity
 */
export async function activityDeleteThreadSubscription<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    thread_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/notifications/threads/{thread_id}/subscription',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get Octocat
 * Get the octocat as ASCII art
 * Learn more at {@link https://docs.github.com/rest/meta/meta#get-octocat}
 * Tags: meta
 */
export async function metaGetOctocat<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    s?: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/octocat',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['s'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organizations
 * Lists all organizations, in the order that they were created on GitHub.
 *
 * **Note:** Pagination is powered exclusively by
 * the `since` parameter. Use the [Link
 * header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the
 * next page of organizations.
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#list-organizations}
 * Tags: orgs
 */
export async function orgsList<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    since?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<OrganizationSimple[] | any> {
  const req = await ctx.createRequest({
    path: '/organizations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization
 * Gets information about an organization.
 *
 * When the value of `two_factor_requirement_enabled` is `true`, the organization
 * requires all members, billing managers, and outside collaborators to enable [two-factor
 * authentication](https://docs.github.com/articles/securing-your-account-with-two-factor-authentication-2fa/).
 *
 * To see the
 * full details about an organization, the authenticated user must be an organization owner.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to see the full details about an organization.
 *
 * To see information
 * about an organization's GitHub plan, GitHub Apps need the `Organization plan` permission.
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#get-an-organization}
 * Tags: orgs
 */
export async function orgsGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<OrganizationFull> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_OrganizationFull]]] } },
  });
}
/**
 * Update an organization
 * **Parameter Deprecation Notice:** GitHub will replace and discontinue `members_allowed_repository_creation_type` in
 * favor of more granular permissions. The new input parameters are `members_can_create_public_repositories`,
 * `members_can_create_private_repositories` for all organizations and `members_can_create_internal_repositories` for
 * organizations associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For
 * more information, see the [blog
 * post](https://developer.github.com/changes/2019-12-03-internal-visibility-changes).
 *
 * Updates the organization's profile
 * and member privileges.
 *
 * The authenticated user must be an organization owner to use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `admin:org` or `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#update-an-organization}
 * Tags: orgs
 */
export async function orgsUpdate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * Billing email address. This address is not publicized.
     */
    billing_email?: string;
    /**
     * The company name.
     */
    company?: string;
    /**
     * The publicly visible email address.
     */
    email?: string;
    /**
     * The Twitter username of the company.
     */
    twitter_username?: string;
    /**
     * The location.
     */
    location?: string;
    /**
     * The shorthand name of the company.
     */
    name?: string;
    /**
     * The description of the company.
     */
    description?: string;
    /**
     * Whether an organization can use organization projects.
     */
    has_organization_projects?: boolean;
    /**
     * Whether repositories that belong to the organization can use repository projects.
     */
    has_repository_projects?: boolean;
    /**
     * Default permission level members have for organization repositories.
     * @defaultValue "read"
     */
    default_repository_permission?: 'read' | 'write' | 'admin' | 'none';
    /**
     * Whether of non-admin organization members can create repositories. **Note:** A parameter can override this parameter. See `members_allowed_repository_creation_type` in this table for details.
     * @defaultValue true
     */
    members_can_create_repositories?: boolean;
    /**
     * Whether organization members can create internal repositories, which are visible to all enterprise members. You can only allow members to create internal repositories if your organization is associated with an enterprise account using GitHub Enterprise Cloud or GitHub Enterprise Server 2.20+. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_internal_repositories?: boolean;
    /**
     * Whether organization members can create private repositories, which are visible to organization members with permission. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_private_repositories?: boolean;
    /**
     * Whether organization members can create public repositories, which are visible to anyone. For more information, see "[Restricting repository creation in your organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/restricting-repository-creation-in-your-organization)" in the GitHub Help documentation.
     */
    members_can_create_public_repositories?: boolean;
    /**
     * Specifies which types of repositories non-admin organization members can create. `private` is only available to repositories that are part of an organization on GitHub Enterprise Cloud.
     * **Note:** This parameter is deprecated and will be removed in the future. Its return value ignores internal repositories. Using this parameter overrides values set in `members_can_create_repositories`. See the parameter deprecation notice in the operation description for details.
     */
    members_allowed_repository_creation_type?: 'all' | 'private' | 'none';
    /**
     * Whether organization members can create GitHub Pages sites. Existing published sites will not be impacted.
     * @defaultValue true
     */
    members_can_create_pages?: boolean;
    /**
     * Whether organization members can create public GitHub Pages sites. Existing published sites will not be impacted.
     * @defaultValue true
     */
    members_can_create_public_pages?: boolean;
    /**
     * Whether organization members can create private GitHub Pages sites. Existing published sites will not be impacted.
     * @defaultValue true
     */
    members_can_create_private_pages?: boolean;
    /**
     * Whether organization members can fork private organization repositories.
     */
    members_can_fork_private_repositories?: boolean;
    /**
     * Whether contributors to organization repositories are required to sign off on commits they make through GitHub's web interface.
     */
    web_commit_signoff_required?: boolean;
    /**
     * @example "\"http://github.blog\""
     */
    blog?: string;
    /**
     * Whether GitHub Advanced Security is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    advanced_security_enabled_for_new_repositories?: boolean;
    /**
     * Whether Dependabot alerts is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependabot_alerts_enabled_for_new_repositories?: boolean;
    /**
     * Whether Dependabot security updates is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependabot_security_updates_enabled_for_new_repositories?: boolean;
    /**
     * Whether dependency graph is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    dependency_graph_enabled_for_new_repositories?: boolean;
    /**
     * Whether secret scanning is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    secret_scanning_enabled_for_new_repositories?: boolean;
    /**
     * Whether secret scanning push protection is automatically enabled for new repositories.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * You can check which security and analysis features are currently enabled by using a `GET /orgs/{org}` request.
     */
    secret_scanning_push_protection_enabled_for_new_repositories?: boolean;
    /**
     * Whether a custom link is shown to contributors who are blocked from pushing a secret by push protection.
     */
    secret_scanning_push_protection_custom_link_enabled?: boolean;
    /**
     * If `secret_scanning_push_protection_custom_link_enabled` is true, the URL that will be displayed to contributors who are blocked from pushing a secret.
     */
    secret_scanning_push_protection_custom_link?: string;
  },
  opts?: FetcherData,
): Promise<OrganizationFull> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_OrganizationFull]]] } },
  });
}
/**
 * Delete an organization
 * Deletes an organization and all its repositories.
 *
 * The organization login will be unavailable for 90 days after
 * deletion.
 *
 * Please review the Terms of Service regarding account deletion before using this
 * endpoint:
 *
 * https://docs.github.com/site-policy/github-terms/github-terms-of-service
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#delete-an-organization}
 * Tags: orgs
 */
export async function orgsDelete<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get GitHub Actions cache usage for an organization
 * Gets the total GitHub Actions cache usage for an organization.
 * The data fetched using this API is refreshed
 * approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 *
 * OAuth
 * tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-an-organization}
 * Tags: actions
 */
export async function actionsGetActionsCacheUsageForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<ActionsCacheUsageOrgEnterprise> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/cache/usage',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories with GitHub Actions cache usage for an organization
 * Lists repositories and their GitHub Actions cache usage for an organization.
 * The data fetched using this API is
 * refreshed approximately every 5 minutes, so values returned from this endpoint may take at least 5 minutes to get
 * updated.
 *
 * OAuth tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/cache#list-repositories-with-github-actions-cache-usage-for-an-organization}
 * Tags: actions
 */
export async function actionsGetActionsCacheUsageByRepoForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  repository_cache_usages: ActionsCacheUsageByRepository[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/cache/usage-by-repository',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the customization template for an OIDC subject claim for an organization
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-an-organization}
 * Tags: oidc
 */
export async function oidcGetOidcCustomSubTemplateForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<OidcCustomSub> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/oidc/customization/sub',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set the customization template for an OIDC subject claim for an organization
 * Creates or updates the customization template for an OpenID Connect (OIDC) subject claim.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `write:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-an-organization}
 * Tags: oidc
 */
export async function oidcUpdateOidcCustomSubTemplateForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: OidcCustomSub,
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/oidc/customization/sub',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get GitHub Actions permissions for an organization
 * Gets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an
 * organization.
 *
 * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-an-organization}
 * Tags: actions
 */
export async function actionsGetGithubActionsPermissionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<ActionsOrganizationPermissions> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set GitHub Actions permissions for an organization
 * Sets the GitHub Actions permissions policy for repositories and allowed actions and reusable workflows in an
 * organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-an-organization}
 * Tags: actions
 */
export async function actionsSetGithubActionsPermissionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    enabled_repositories: EnabledRepositories;
    allowed_actions?: AllowedActions;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List selected repositories enabled for GitHub Actions in an organization
 * Lists the selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint, the
 * organization permission policy for `enabled_repositories` must be configured to `selected`. For more information, see
 * "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#list-selected-repositories-enabled-for-github-actions-in-an-organization}
 * Tags: actions
 */
export async function actionsListSelectedRepositoriesEnabledGithubActionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  repositories: Repository[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'repositories'], ['loop'], ['ref', $date_Repository]],
        ],
      },
    },
  });
}
/**
 * Set selected repositories enabled for GitHub Actions in an organization
 * Replaces the list of selected repositories that are enabled for GitHub Actions in an organization. To use this endpoint,
 * the organization permission policy for `enabled_repositories` must be configured to `selected`. For more information,
 * see "[Set GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-selected-repositories-enabled-for-github-actions-in-an-organization}
 * Tags: actions
 */
export async function actionsSetSelectedRepositoriesEnabledGithubActionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * List of repository IDs to enable for GitHub Actions.
     */
    selected_repository_ids: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/repositories',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Enable a selected repository for GitHub Actions in an organization
 * Adds a repository to the list of selected repositories that are enabled for GitHub Actions in an organization. To use
 * this endpoint, the organization permission policy for `enabled_repositories` must be must be configured to `selected`.
 * For more information, see "[Set GitHub Actions permissions for an
 * organization](#set-github-actions-permissions-for-an-organization)."
 *
 * OAuth tokens and personal access tokens (classic)
 * need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#enable-a-selected-repository-for-github-actions-in-an-organization}
 * Tags: actions
 */
export async function actionsEnableSelectedRepositoryGithubActionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/repositories/{repository_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Disable a selected repository for GitHub Actions in an organization
 * Removes a repository from the list of selected repositories that are enabled for GitHub Actions in an organization. To
 * use this endpoint, the organization permission policy for `enabled_repositories` must be configured to `selected`. For
 * more information, see "[Set GitHub Actions permissions for an
 * organization](#set-github-actions-permissions-for-an-organization)."
 *
 * OAuth tokens and personal access tokens (classic)
 * need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#disable-a-selected-repository-for-github-actions-in-an-organization}
 * Tags: actions
 */
export async function actionsDisableSelectedRepositoryGithubActionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/repositories/{repository_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get allowed actions and reusable workflows for an organization
 * Gets the selected actions and reusable workflows that are allowed in an organization. To use this endpoint, the
 * organization permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set
 * GitHub Actions permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * OAuth tokens and
 * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-an-organization}
 * Tags: actions
 */
export async function actionsGetAllowedActionsOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<SelectedActions> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/selected-actions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set allowed actions and reusable workflows for an organization
 * Sets the actions and reusable workflows that are allowed in an organization. To use this endpoint, the organization
 * permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions
 * permissions for an organization](#set-github-actions-permissions-for-an-organization)."
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-an-organization}
 * Tags: actions
 */
export async function actionsSetAllowedActionsOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: SelectedActions,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/selected-actions',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get default workflow permissions for an organization
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization,
 * as well
 * as whether GitHub Actions can submit approving pull request reviews. For more information, see
 * "[Setting the permissions
 * of the GITHUB_TOKEN for your
 * organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * OAuth
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-an-organization}
 * Tags: actions
 */
export async function actionsGetGithubActionsDefaultWorkflowPermissionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<ActionsGetDefaultWorkflowPermissions> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/workflow',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set default workflow permissions for an organization
 * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in an organization, and sets
 * if GitHub Actions
 * can submit approving pull request reviews. For more information, see
 * "[Setting the permissions of the
 * GITHUB_TOKEN for your
 * organization](https://docs.github.com/organizations/managing-organization-settings/disabling-or-limiting-github-actions-for-your-organization#setting-the-permissions-of-the-github_token-for-your-organization)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-an-organization}
 * Tags: actions
 */
export async function actionsSetGithubActionsDefaultWorkflowPermissionsOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: ActionsSetDefaultWorkflowPermissions,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/permissions/workflow',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List self-hosted runners for an organization
 * Lists all self-hosted runners configured in an organization.
 *
 * Authenticated users must have admin access to the
 * organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to
 * use this endpoint. If the repository is private, the `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-an-organization}
 * Tags: actions
 */
export async function actionsListSelfHostedRunnersForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    name?: string;
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  runners: Runner[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['name', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List runner applications for an organization
 * Lists binaries for the runner application that you can download and run.
 *
 * Authenticated users must have admin access to
 * the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope
 * to use this endpoint.  If the repository is private, the `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-an-organization}
 * Tags: actions
 */
export async function actionsListRunnerApplicationsForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<RunnerApplication[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/downloads',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create configuration for a just-in-time runner for an organization
 * Generates a configuration that can be passed to the runner application at startup.
 *
 * The authenticated user must have
 * admin access to the organization.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use
 * this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to
 * use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-an-organization}
 * Tags: actions
 */
export async function actionsGenerateRunnerJitconfigForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The name of the new runner.
     */
    name: string;
    /**
     * The ID of the runner group to register the runner to.
     */
    runner_group_id: number;
    /**
     * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
     */
    labels: string[];
    /**
     * The working directory to be used for job execution, relative to the runner install directory.
     * @defaultValue "_work"
     */
    work_folder?: string;
  },
  opts?: FetcherData,
): Promise<{
  runner: Runner;
  /**
   * The base64 encoded runner configuration.
   */
  encoded_jit_config: string;
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/generate-jitconfig',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a registration token for an organization
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * For example, you can
 * replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your
 * self-hosted runner:
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 *
 * Authenticated users must have
 * admin access to the organization to use this endpoint.
 *
 * OAuth tokens and personal access tokens (classic) need
 * the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-an-organization}
 * Tags: actions
 */
export async function actionsCreateRegistrationTokenForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<AuthenticationToken> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/registration-token',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_AuthenticationToken]]] } },
  });
}
/**
 * Create a remove token for an organization
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an organization. The token
 * expires after one hour.
 *
 * For example, you can replace `TOKEN` in the following example with the registration token
 * provided by this endpoint to remove your self-hosted runner from an organization:
 *
 * ```
 * ./config.sh remove --token
 * TOKEN
 * ```
 *
 * Authenticated users must have admin access to the organization to use this endpoint.
 *
 * OAuth tokens and
 * personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-an-organization}
 * Tags: actions
 */
export async function actionsCreateRemoveTokenForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<AuthenticationToken> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/remove-token',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_AuthenticationToken]]] } },
  });
}
/**
 * Get a self-hosted runner for an organization
 * Gets a specific self-hosted runner configured in an organization.
 *
 * Authenticated users must have admin access to the
 * organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to
 * use this endpoint. If the repository is private, the `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-an-organization}
 * Tags: actions
 */
export async function actionsGetSelfHostedRunnerForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<Runner> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/{runner_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a self-hosted runner from an organization
 * Forces the removal of a self-hosted runner from an organization. You can use this endpoint to completely remove the
 * runner when the machine you were using no longer exists.
 *
 * Authenticated users must have admin access to the organization
 * to use this endpoint.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint.
 * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-an-organization}
 * Tags: actions
 */
export async function actionsDeleteSelfHostedRunnerFromOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/{runner_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List labels for a self-hosted runner for an organization
 * Lists all labels for a self-hosted runner configured in an organization.
 *
 * Authenticated users must have admin access to
 * the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope
 * to use this endpoint. If the repository is private, the `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-an-organization}
 * Tags: actions
 */
export async function actionsListLabelsForSelfHostedRunnerForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add custom labels to a self-hosted runner for an organization
 * Adds custom labels to a self-hosted runner configured in an organization.
 *
 * Authenticated users must have admin access to
 * the organization to use this endpoint.
 *
 * OAuth tokens and personal access tokens (classic) need the `admin:org` scope to
 * use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-an-organization}
 * Tags: actions
 */
export async function actionsAddCustomLabelsToSelfHostedRunnerForOrg<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    runner_id: number;
  },
  body: {
    /**
     * The names of the custom labels to add to the runner.
     */
    labels: string[];
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set custom labels for a self-hosted runner for an organization
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in an
 * organization.
 *
 * Authenticated users must have admin access to the organization to use this endpoint.
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the
 * `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-an-organization}
 * Tags: actions
 */
export async function actionsSetCustomLabelsForSelfHostedRunnerForOrg<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    runner_id: number;
  },
  body: {
    /**
     * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
     */
    labels: string[];
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove all custom labels from a self-hosted runner for an organization
 * Remove all custom labels from a self-hosted runner configured in an
 * organization. Returns the remaining read-only labels
 * from the runner.
 *
 * Authenticated users must have admin access to the organization to use this endpoint.
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the
 * `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-an-organization}
 * Tags: actions
 */
export async function actionsRemoveAllCustomLabelsFromSelfHostedRunnerForOrg<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a custom label from a self-hosted runner for an organization
 * Remove a custom label from a self-hosted runner configured
 * in an organization. Returns the remaining labels from the
 * runner.
 *
 * This endpoint returns a `404 Not Found` status if the custom label is not
 * present on the runner.
 *
 * Authenticated
 * users must have admin access to the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also
 * required.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-an-organization}
 * Tags: actions
 */
export async function actionsRemoveCustomLabelFromSelfHostedRunnerForOrg<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    runner_id: number;
    name: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/runners/{runner_id}/labels/{name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization secrets
 * Lists all secrets available in an organization without revealing their
 * encrypted values.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also
 * required.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#list-organization-secrets}
 * Tags: actions
 */
export async function actionsListOrgSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: OrganizationActionsSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'secrets'],
            ['loop'],
            ['ref', $date_OrganizationActionsSecret],
          ],
        ],
      },
    },
  });
}
/**
 * Get an organization public key
 * Gets your public key, which you need to encrypt secrets. You need to
 * encrypt a secret before you can create or update
 * secrets.
 *
 * The authenticated user must have collaborator access to a repository to create, update, or read
 * secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use this endpoint. If the
 * repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#get-an-organization-public-key}
 * Tags: actions
 */
export async function actionsGetOrgPublicKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<ActionsPublicKey> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization secret
 * Gets a single organization secret without revealing its encrypted value.
 *
 * The authenticated user must have collaborator
 * access to a repository to create, update, or read secrets
 *
 * OAuth tokens and personal access tokens (classic) need
 * the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#get-an-organization-secret}
 * Tags: actions
 */
export async function actionsGetOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<OrganizationActionsSecret> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_OrganizationActionsSecret]]] },
    },
  });
}
/**
 * Create or update an organization secret
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * Authenticated
 * users must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal
 * access tokens (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and
 * personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret}
 * Tags: actions
 */
export async function actionsCreateOrUpdateOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/actions/secrets#get-an-organization-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
    /**
     * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
     */
    visibility: 'all' | 'private' | 'selected';
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids?: number[];
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an organization secret
 * Deletes a secret in an organization using the secret name.
 *
 * Authenticated users must have collaborator access to a
 * repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org`
 * scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#delete-an-organization-secret}
 * Tags: actions
 */
export async function actionsDeleteOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List selected repositories for an organization secret
 * Lists all repositories that have been selected when the `visibility`
 * for repository access to a secret is set to
 * `selected`.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read
 * secrets.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If the
 * repository is private, the `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#list-selected-repositories-for-an-organization-secret}
 * Tags: actions
 */
export async function actionsListSelectedReposForOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  repositories: MinimalRepository[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'repositories'],
            ['loop'],
            ['ref', $date_MinimalRepository],
          ],
        ],
      },
    },
  });
}
/**
 * Set selected repositories for an organization secret
 * Replaces all repositories for an organization secret when the `visibility`
 * for repository access is set to `selected`.
 * The visibility is set when you [Create
 * or update an organization
 * secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
 *
 * Authenticated users must
 * have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also
 * required.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#set-selected-repositories-for-an-organization-secret}
 * Tags: actions
 */
export async function actionsSetSelectedReposForOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  body: {
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Add selected repository to an organization secret](https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add selected repository to an organization secret
 * Adds a repository to an organization secret when the `visibility` for
 * repository access is set to `selected`. For more
 * information about setting the visibility, see [Create or
 * update an organization
 * secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
 *
 * Authenticated users must
 * have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#add-selected-repository-to-an-organization-secret}
 * Tags: actions
 */
export async function actionsAddSelectedRepoToOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove selected repository from an organization secret
 * Removes a repository from an organization secret when the `visibility`
 * for repository access is set to `selected`. The
 * visibility is set when you [Create
 * or update an organization
 * secret](https://docs.github.com/rest/actions/secrets#create-or-update-an-organization-secret).
 *
 * Authenticated users must
 * have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also
 * required.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#remove-selected-repository-from-an-organization-secret}
 * Tags: actions
 */
export async function actionsRemoveSelectedRepoFromOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization variables
 * Lists all organization variables.
 *
 * Authenticated users must have collaborator access to a repository to create, update,
 * or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this
 * endpoint. If the repository is private, the `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#list-organization-variables}
 * Tags: actions
 */
export async function actionsListOrgVariables<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  variables: OrganizationActionsVariable[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'variables'],
            ['loop'],
            ['ref', $date_OrganizationActionsVariable],
          ],
        ],
      },
    },
  });
}
/**
 * Create an organization variable
 * Creates an organization variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens
 * (classic) need the`admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#create-an-organization-variable}
 * Tags: actions
 */
export async function actionsCreateOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The value of the variable.
     */
    value: string;
    /**
     * The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
     */
    visibility: 'all' | 'private' | 'selected';
    /**
     * An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
     */
    selected_repository_ids?: number[];
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization variable
 * Gets a specific variable in an organization.
 *
 * The authenticated user must have collaborator access to a repository to
 * create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org` scope to use
 * this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to
 * use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#get-an-organization-variable}
 * Tags: actions
 */
export async function actionsGetOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    name: string;
  },
  opts?: FetcherData,
): Promise<OrganizationActionsVariable> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables/{name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_OrganizationActionsVariable]]] },
    },
  });
}
/**
 * Update an organization variable
 * Updates an organization variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also
 * required.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#update-an-organization-variable}
 * Tags: actions
 */
export async function actionsUpdateOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    name: string;
  },
  body: {
    /**
     * The name of the variable.
     */
    name?: string;
    /**
     * The value of the variable.
     */
    value?: string;
    /**
     * The type of repositories in the organization that can access the variable. `selected` means only the repositories specified by `selected_repository_ids` can access the variable.
     */
    visibility?: 'all' | 'private' | 'selected';
    /**
     * An array of repository ids that can access the organization variable. You can only provide a list of repository ids when the `visibility` is set to `selected`.
     */
    selected_repository_ids?: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables/{name}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an organization variable
 * Deletes an organization variable using the variable name.
 *
 * Authenticated users must have collaborator access to a
 * repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the`admin:org`
 * scope to use this endpoint. If the repository is private, OAuth tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#delete-an-organization-variable}
 * Tags: actions
 */
export async function actionsDeleteOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables/{name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List selected repositories for an organization variable
 * Lists all repositories that can access an organization variable
 * that is available to selected
 * repositories.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or read
 * variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint. If
 * the repository is private, the `repo` scope is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#list-selected-repositories-for-an-organization-variable}
 * Tags: actions
 */
export async function actionsListSelectedReposForOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    name: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  repositories: MinimalRepository[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables/{name}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'repositories'],
            ['loop'],
            ['ref', $date_MinimalRepository],
          ],
        ],
      },
    },
  });
}
/**
 * Set selected repositories for an organization variable
 * Replaces all repositories for an organization variable that is available
 * to selected repositories. Organization
 * variables that are available to selected
 * repositories have their `visibility` field set to `selected`.
 *
 * Authenticated
 * users must have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope
 * is also required.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#set-selected-repositories-for-an-organization-variable}
 * Tags: actions
 */
export async function actionsSetSelectedReposForOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    name: string;
  },
  body: {
    /**
     * The IDs of the repositories that can access the organization variable.
     */
    selected_repository_ids: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables/{name}/repositories',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add selected repository to an organization variable
 * Adds a repository to an organization variable that is available to selected repositories.
 * Organization variables that
 * are available to selected repositories have their `visibility` field set to `selected`.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint. If the repository is private, OAuth tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#add-selected-repository-to-an-organization-variable}
 * Tags: actions
 */
export async function actionsAddSelectedRepoToOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove selected repository from an organization variable
 * Removes a repository from an organization variable that is
 * available to selected repositories. Organization variables
 * that are available to
 * selected repositories have their `visibility` field set to `selected`.
 *
 * Authenticated users must
 * have collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `admin:org` scope to use this endpoint. If the repository is private, the `repo` scope is also
 * required.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#remove-selected-repository-from-an-organization-variable}
 * Tags: actions
 */
export async function actionsRemoveSelectedRepoFromOrgVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/actions/variables/{name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List users blocked by an organization
 * List the users blocked by an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/blocking#list-users-blocked-by-an-organization}
 * Tags: orgs
 */
export async function orgsListBlockedUsers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/blocks',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if a user is blocked by an organization
 * Returns a 204 if the given user is blocked by the given organization. Returns a 404 if the organization is not blocking
 * the user, or if the user account has been identified as spam by GitHub.
 * Learn more at {@link https://docs.github.com/rest/orgs/blocking#check-if-a-user-is-blocked-by-an-organization}
 * Tags: orgs
 */
export async function orgsCheckBlockedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/blocks/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Block a user from an organization
 * Blocks the given user on behalf of the specified organization and returns a 204. If the organization cannot block the
 * given user a 422 is returned.
 * Learn more at {@link https://docs.github.com/rest/orgs/blocking#block-a-user-from-an-organization}
 * Tags: orgs
 */
export async function orgsBlockUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/blocks/{username}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unblock a user from an organization
 * Unblocks the given user on behalf of the specified organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/blocking#unblock-a-user-from-an-organization}
 * Tags: orgs
 */
export async function orgsUnblockUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/blocks/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List code scanning alerts for an organization
 * Lists code scanning alerts for the default branch for all eligible repositories in an organization. Eligible
 * repositories are repositories that are owned by organizations that you own or for which you are a security manager. For
 * more information, see "[Managing security managers in your
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * The
 * authenticated user must be an owner or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `security_events` or `repo`s cope to use this endpoint with private or public
 * repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-an-organization}
 * Tags: code-scanning
 */
export async function codeScanningListAlertsForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    tool_name?: CodeScanningAnalysisToolName;
    tool_guid?: CodeScanningAnalysisToolGuid;
    before?: string;
    after?: string;
    page?: number;
    per_page?: number;
    direction?: 'asc' | 'desc';
    state?: CodeScanningAlertStateQuery;
    sort?: 'created' | 'updated';
    severity?: CodeScanningAlertSeverity;
  },
  opts?: FetcherData,
): Promise<CodeScanningOrganizationAlertItems[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/code-scanning/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'tool_name',
      'tool_guid',
      'before',
      'after',
      'page',
      'per_page',
      'direction',
      'state',
      'sort',
      'severity',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_CodeScanningOrganizationAlertItems]]],
      },
    },
  });
}
/**
 * List codespaces for the organization
 * Lists the codespaces associated to a specified organization.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organizations#list-codespaces-for-the-organization}
 * Tags: codespaces
 */
export async function codespacesListInOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
    org: string;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      codespaces: Codespace[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'codespaces'], ['loop'], ['ref', $date_Codespace]]],
      },
    },
  });
}
/**
 * Manage access control for organization codespaces
 * Sets which users can access codespaces in an organization. This is synonymous with granting or revoking codespaces
 * access permissions for users according to the visibility.
 * OAuth app tokens and personal access tokens (classic) need the
 * `admin:org` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces}
 * Tags: codespaces
 */
export async function codespacesSetCodespacesAccess<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * Which users can access codespaces in the organization. `disabled` means that no users can access codespaces in the organization.
     */
    visibility:
      | 'disabled'
      | 'selected_members'
      | 'all_members'
      | 'all_members_and_outside_collaborators';
    /**
     * The usernames of the organization members who should have access to codespaces in the organization. Required when `visibility` is `selected_members`. The provided list of usernames will replace any existing value.
     */
    selected_usernames?: string[];
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/access',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add users to Codespaces access for an organization
 * Codespaces for the specified users will be billed to the organization.
 *
 * To use this endpoint, the access settings for
 * the organization must be set to `selected_members`.
 * For information on how to change this setting, see "[Manage access
 * control for organization
 * codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/codespaces/organizations#add-users-to-codespaces-access-for-an-organization}
 * Tags: codespaces
 */
export async function codespacesSetCodespacesAccessUsers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The usernames of the organization members whose codespaces be billed to the organization.
     */
    selected_usernames: string[];
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/access/selected_users',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove users from Codespaces access for an organization
 * Codespaces for the specified users will no longer be billed to the organization.
 *
 * To use this endpoint, the access
 * settings for the organization must be set to `selected_members`.
 * For information on how to change this setting, see
 * "[Manage access control for organization
 * codespaces](https://docs.github.com/rest/codespaces/organizations#manage-access-control-for-organization-codespaces)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/codespaces/organizations#remove-users-from-codespaces-access-for-an-organization}
 * Tags: codespaces
 */
export async function codespacesDeleteCodespacesAccessUsers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The usernames of the organization members whose codespaces should not be billed to the organization.
     */
    selected_usernames: string[];
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/access/selected_users',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization secrets
 * Lists all Codespaces development environment secrets available at the organization-level without revealing their
 * encrypted
 * values.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#list-organization-secrets}
 * Tags: codespaces
 */
export async function codespacesListOrgSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: CodespacesOrgSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'secrets'], ['loop'], ['ref', $date_CodespacesOrgSecret]],
        ],
      },
    },
  });
}
/**
 * Get an organization public key
 * Gets a public key for an organization, which is required in order to encrypt secrets. You need to encrypt the value of a
 * secret before you can create or update secrets.
 * OAuth app tokens and personal access tokens (classic) need the
 * `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key}
 * Tags: codespaces
 */
export async function codespacesGetOrgPublicKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<CodespacesPublicKey> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization secret
 * Gets an organization development environment secret without revealing its encrypted value.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-secret}
 * Tags: codespaces
 */
export async function codespacesGetOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<CodespacesOrgSecret> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CodespacesOrgSecret]]] } },
  });
}
/**
 * Create or update an organization secret
 * Creates or updates an organization development environment secret with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret}
 * Tags: codespaces
 */
export async function codespacesCreateOrUpdateOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  body: {
    /**
     * The value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/codespaces/organization-secrets#get-an-organization-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * The ID of the key you used to encrypt the secret.
     */
    key_id?: string;
    /**
     * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
     */
    visibility: 'all' | 'private' | 'selected';
    /**
     * An array of repository IDs that can access the organization secret. You can only provide a list of repository IDs when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids?: number[];
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an organization secret
 * Deletes an organization development environment secret using the secret name.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#delete-an-organization-secret}
 * Tags: codespaces
 */
export async function codespacesDeleteOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List selected repositories for an organization secret
 * Lists all repositories that have been selected when the `visibility`
 * for repository access to a secret is set to
 * `selected`.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#list-selected-repositories-for-an-organization-secret}
 * Tags: codespaces
 */
export async function codespacesListSelectedReposForOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  repositories: MinimalRepository[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'repositories'],
            ['loop'],
            ['ref', $date_MinimalRepository],
          ],
        ],
      },
    },
  });
}
/**
 * Set selected repositories for an organization secret
 * Replaces all repositories for an organization development environment secret when the `visibility`
 * for repository access
 * is set to `selected`. The visibility is set when you [Create
 * or update an organization
 * secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret}
 * Tags: codespaces
 */
export async function codespacesSetSelectedReposForOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  body: {
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add selected repository to an organization secret
 * Adds a repository to an organization development environment secret when the `visibility` for repository access is set
 * to `selected`. The visibility is set when you [Create or update an organization
 * secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#add-selected-repository-to-an-organization-secret}
 * Tags: codespaces
 */
export async function codespacesAddSelectedRepoToOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove selected repository from an organization secret
 * Removes a repository from an organization development environment secret when the `visibility`
 * for repository access is
 * set to `selected`. The visibility is set when you [Create
 * or update an organization
 * secret](https://docs.github.com/rest/codespaces/organization-secrets#create-or-update-an-organization-secret).
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organization-secrets#remove-selected-repository-from-an-organization-secret}
 * Tags: codespaces
 */
export async function codespacesRemoveSelectedRepoFromOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/codespaces/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get Copilot seat information and settings for an organization
 * **Note**: This endpoint is in beta and is subject to change.
 *
 * Gets information about an organization's Copilot
 * subscription, including seat breakdown
 * and code matching policies. To configure these settings, go to your
 * organization's settings on GitHub.com.
 * For more information, see "[Managing policies for Copilot in your
 * organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-copilot-business-in-your-organization)".
 *
 * Only
 * organization owners can configure and view details about the organization's Copilot Business subscription.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-information-and-settings-for-an-organization}
 * Tags: copilot
 */
export async function copilotGetCopilotOrganizationDetails<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<CopilotOrganizationDetails> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/copilot/billing',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List all Copilot seat assignments for an organization
 * **Note**: This endpoint is in beta and is subject to change.
 *
 * Lists all Copilot seat assignments for an organization
 * that are currently being billed (either active or pending cancellation at the start of the next billing cycle).
 *
 * Only
 * organization owners can configure and view details about the organization's Copilot Business or Enterprise
 * subscription.
 *
 * OAuth app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/copilot/copilot-user-management#list-all-copilot-seat-assignments-for-an-organization}
 * Tags: copilot
 */
export async function copilotListCopilotSeats<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<{
  /**
   * Total number of Copilot seats for the organization currently being billed.
   */
  total_seats?: number;
  seats?: CopilotSeatDetails[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/copilot/billing/seats',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'seats'], ['loop'], ['ref', $date_CopilotSeatDetails]],
        ],
      },
    },
  });
}
/**
 * Add teams to the Copilot subscription for an organization
 * **Note**: This endpoint is in beta and is subject to change.
 *
 * Purchases a GitHub Copilot seat for all users within each
 * specified team.
 * The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing
 * for GitHub
 * Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
 *
 * Only
 * organization owners can configure GitHub Copilot in their organization.
 *
 * In order for an admin to use this endpoint, the
 * organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
 * For
 * more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your
 * organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
 * For
 * more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub
 * Copilot in your
 * organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/copilot/copilot-user-management#add-teams-to-the-copilot-subscription-for-an-organization}
 * Tags: copilot
 */
export async function copilotAddCopilotSeatsForTeams<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * List of team names within the organization to which to grant access to GitHub Copilot.
     */
    selected_teams: string[];
  },
  opts?: FetcherData,
): Promise<{
  seats_created: number;
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/copilot/billing/selected_teams',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove teams from the Copilot subscription for an organization
 * **Note**: This endpoint is in beta and is subject to change.
 *
 * Cancels the Copilot seat assignment for all members of
 * each team specified.
 * This will cause the members of the specified team(s) to lose access to GitHub Copilot at the end of
 * the current billing cycle, and the organization will not be billed further for those users.
 *
 * For more information about
 * Copilot pricing, see "[Pricing for GitHub
 * Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
 *
 * For
 * more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for
 * specific users in your
 * organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
 *
 * Only
 * organization owners can configure GitHub Copilot in their organization.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `manage_billing:copilot` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/copilot/copilot-user-management#remove-teams-from-the-copilot-subscription-for-an-organization}
 * Tags: copilot
 */
export async function copilotCancelCopilotSeatAssignmentForTeams<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The names of teams from which to revoke access to GitHub Copilot.
     */
    selected_teams: string[];
  },
  opts?: FetcherData,
): Promise<{
  seats_cancelled: number;
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/copilot/billing/selected_teams',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add users to the Copilot subscription for an organization
 * **Note**: This endpoint is in beta and is subject to change.
 *
 * Purchases a GitHub Copilot seat for each user
 * specified.
 * The organization will be billed accordingly. For more information about Copilot pricing, see "[Pricing for
 * GitHub
 * Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
 *
 * Only
 * organization owners can configure GitHub Copilot in their organization.
 *
 * In order for an admin to use this endpoint, the
 * organization must have a Copilot Business or Enterprise subscription and a configured suggestion matching policy.
 * For
 * more information about setting up a Copilot subscription, see "[Setting up a Copilot subscription for your
 * organization](https://docs.github.com/billing/managing-billing-for-github-copilot/managing-your-github-copilot-subscription-for-your-organization-or-enterprise)".
 * For
 * more information about setting a suggestion matching policy, see "[Configuring suggestion matching policies for GitHub
 * Copilot in your
 * organization](https://docs.github.com/copilot/managing-copilot/managing-policies-for-github-copilot-in-your-organization#configuring-suggestion-matching-policies-for-github-copilot-in-your-organization)".
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `manage_billing:copilot` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/copilot/copilot-user-management#add-users-to-the-copilot-subscription-for-an-organization}
 * Tags: copilot
 */
export async function copilotAddCopilotSeatsForUsers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The usernames of the organization members to be granted access to GitHub Copilot.
     */
    selected_usernames: string[];
  },
  opts?: FetcherData,
): Promise<{
  seats_created: number;
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/copilot/billing/selected_users',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove users from the Copilot subscription for an organization
 * **Note**: This endpoint is in beta and is subject to change.
 *
 * Cancels the Copilot seat assignment for each user
 * specified.
 * This will cause the specified users to lose access to GitHub Copilot at the end of the current billing cycle,
 * and the organization will not be billed further for those users.
 *
 * For more information about Copilot pricing, see
 * "[Pricing for GitHub
 * Copilot](https://docs.github.com/billing/managing-billing-for-github-copilot/about-billing-for-github-copilot#about-billing-for-github-copilot)".
 *
 * For
 * more information about disabling access to Copilot Business or Enterprise, see "[Revoking access to GitHub Copilot for
 * specific users in your
 * organization](https://docs.github.com/copilot/managing-copilot/managing-access-for-copilot-in-your-organization#revoking-access-to-github-copilot-for-specific-users-in-your-organization)".
 *
 * Only
 * organization owners can configure GitHub Copilot in their organization.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `manage_billing:copilot` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/copilot/copilot-user-management#remove-users-from-the-copilot-subscription-for-an-organization}
 * Tags: copilot
 */
export async function copilotCancelCopilotSeatAssignmentForUsers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The usernames of the organization members for which to revoke access to GitHub Copilot.
     */
    selected_usernames: string[];
  },
  opts?: FetcherData,
): Promise<{
  seats_cancelled: number;
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/copilot/billing/selected_users',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List Dependabot alerts for an organization
 * Lists Dependabot alerts for an organization.
 *
 * The authenticated user must be an owner or security manager for the
 * organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events`
 * scope to use this endpoint. If this endpoint is only used with public repositories, the token can use the `public_repo`
 * scope instead.
 * Learn more at {@link https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-an-organization}
 * Tags: dependabot
 */
export async function dependabotListAlertsForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    state?: string;
    severity?: string;
    ecosystem?: string;
    package?: string;
    scope?: 'development' | 'runtime';
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    before?: string;
    after?: string;
    first?: number;
    last?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<DependabotAlertWithRepository[] | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'state',
      'severity',
      'ecosystem',
      'package',
      'scope',
      'sort',
      'direction',
      'before',
      'after',
      'first',
      'last',
      'per_page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_DependabotAlertWithRepository]]],
      },
    },
  });
}
/**
 * List organization secrets
 * Lists all secrets available in an organization without revealing their
 * encrypted values.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#list-organization-secrets}
 * Tags: dependabot
 */
export async function dependabotListOrgSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: OrganizationDependabotSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'secrets'],
            ['loop'],
            ['ref', $date_OrganizationDependabotSecret],
          ],
        ],
      },
    },
  });
}
/**
 * Get an organization public key
 * Gets your public key, which you need to encrypt secrets. You need to
 * encrypt a secret before you can create or update
 * secrets.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key}
 * Tags: dependabot
 */
export async function dependabotGetOrgPublicKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<DependabotPublicKey> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization secret
 * Gets a single organization secret without revealing its encrypted value.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#get-an-organization-secret}
 * Tags: dependabot
 */
export async function dependabotGetOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<OrganizationDependabotSecret> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_OrganizationDependabotSecret]]] },
    },
  });
}
/**
 * Create or update an organization secret
 * Creates or updates an organization secret with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret}
 * Tags: dependabot
 */
export async function dependabotCreateOrUpdateOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an organization public key](https://docs.github.com/rest/dependabot/secrets#get-an-organization-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
    /**
     * Which type of organization repositories have access to the organization secret. `selected` means only the repositories specified by `selected_repository_ids` can access the secret.
     */
    visibility: 'all' | 'private' | 'selected';
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can manage the list of selected repositories using the [List selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret), [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret), and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids?: string[];
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an organization secret
 * Deletes a secret in an organization using the secret name.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#delete-an-organization-secret}
 * Tags: dependabot
 */
export async function dependabotDeleteOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List selected repositories for an organization secret
 * Lists all repositories that have been selected when the `visibility`
 * for repository access to a secret is set to
 * `selected`.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#list-selected-repositories-for-an-organization-secret}
 * Tags: dependabot
 */
export async function dependabotListSelectedReposForOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  repositories: MinimalRepository[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'repositories'],
            ['loop'],
            ['ref', $date_MinimalRepository],
          ],
        ],
      },
    },
  });
}
/**
 * Set selected repositories for an organization secret
 * Replaces all repositories for an organization secret when the `visibility`
 * for repository access is set to `selected`.
 * The visibility is set when you [Create
 * or update an organization
 * secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret}
 * Tags: dependabot
 */
export async function dependabotSetSelectedReposForOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
  },
  body: {
    /**
     * An array of repository ids that can access the organization secret. You can only provide a list of repository ids when the `visibility` is set to `selected`. You can add and remove individual repositories using the [Set selected repositories for an organization secret](https://docs.github.com/rest/dependabot/secrets#set-selected-repositories-for-an-organization-secret) and [Remove selected repository from an organization secret](https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret) endpoints.
     */
    selected_repository_ids: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add selected repository to an organization secret
 * Adds a repository to an organization secret when the `visibility` for
 * repository access is set to `selected`. The
 * visibility is set when you [Create or
 * update an organization
 * secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#add-selected-repository-to-an-organization-secret}
 * Tags: dependabot
 */
export async function dependabotAddSelectedRepoToOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove selected repository from an organization secret
 * Removes a repository from an organization secret when the `visibility`
 * for repository access is set to `selected`. The
 * visibility is set when you [Create
 * or update an organization
 * secret](https://docs.github.com/rest/dependabot/secrets#create-or-update-an-organization-secret).
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#remove-selected-repository-from-an-organization-secret}
 * Tags: dependabot
 */
export async function dependabotRemoveSelectedRepoFromOrgSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/dependabot/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get list of conflicting packages during Docker migration for organization
 * Lists all packages that are in a specific organization, are readable by the requesting user, and that encountered a
 * conflict during a Docker migration.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-organization}
 * Tags: packages
 */
export async function packagesListDockerMigrationConflictingPackagesForOrganization<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<Package[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/docker/conflicts',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Package]]] } },
  });
}
/**
 * List public organization events
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-public-organization-events}
 * Tags: activity
 */
export async function activityListPublicOrgEvents<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List failed organization invitations
 * The return hash contains `failed_at` and `failed_reason` fields which represent the time at which the invitation failed
 * and the reason for the failure.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#list-failed-organization-invitations}
 * Tags: orgs
 */
export async function orgsListFailedInvitations<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<OrganizationInvitation[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/failed_invitations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization webhooks
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#list-organization-webhooks}
 * Tags: orgs
 */
export async function orgsListWebhooks<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<OrgHook[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_OrgHook]]] } },
  });
}
/**
 * Create an organization webhook
 * Here's how you can create a hook that posts payloads in JSON format:
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#create-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsCreateWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * Must be passed as "web".
     */
    name: string;
    /**
     * Key/value pairs to provide settings for this webhook.
     */
    config: {
      url: WebhookConfigUrl;
      content_type?: WebhookConfigContentType;
      secret?: WebhookConfigSecret;
      insecure_ssl?: WebhookConfigInsecureSsl;
      /**
       * @example "\"kdaigle\""
       */
      username?: string;
      /**
       * @example "\"password\""
       */
      password?: string;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. Set to `["*"]` to receive all possible events.
     * @defaultValue
     * [
     *   "push"
     * ]
     */
    events?: string[];
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @defaultValue true
     */
    active?: boolean;
  },
  opts?: FetcherData,
): Promise<OrgHook> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_OrgHook]]] } },
  });
}
/**
 * Get an organization webhook
 * Returns a webhook configured in an organization. To get only the webhook `config` properties, see "[Get a webhook
 * configuration for an organization](/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization)."
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#get-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsGetWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<OrgHook> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_OrgHook]]] } },
  });
}
/**
 * Update an organization webhook
 * Updates a webhook configured in an organization. When you update a webhook, the `secret` will be overwritten. If you
 * previously had a `secret` set, you must provide the same `secret` or set a new `secret` or the secret will be removed.
 * If you are only updating individual webhook `config` properties, use "[Update a webhook configuration for an
 * organization](/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization)."
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#update-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsUpdateWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
  },
  body: {
    /**
     * Key/value pairs to provide settings for this webhook.
     */
    config?: {
      url: WebhookConfigUrl;
      content_type?: WebhookConfigContentType;
      secret?: WebhookConfigSecret;
      insecure_ssl?: WebhookConfigInsecureSsl;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
     * @defaultValue
     * [
     *   "push"
     * ]
     */
    events?: string[];
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @defaultValue true
     */
    active?: boolean;
    /**
     * @example "\"web\""
     */
    name?: string;
  },
  opts?: FetcherData,
): Promise<OrgHook> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_OrgHook]]] } },
  });
}
/**
 * Delete an organization webhook
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#delete-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsDeleteWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a webhook configuration for an organization
 * Returns the webhook configuration for an organization. To get more information about the webhook, including the `active`
 * state and `events`, use "[Get an organization webhook ](/rest/orgs/webhooks#get-an-organization-webhook)."
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org_hook` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#get-a-webhook-configuration-for-an-organization}
 * Tags: orgs
 */
export async function orgsGetWebhookConfigForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<WebhookConfig> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}/config',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update a webhook configuration for an organization
 * Updates the webhook configuration for an organization. To update more information about the webhook, including the
 * `active` state and `events`, use "[Update an organization webhook
 * ](/rest/orgs/webhooks#update-an-organization-webhook)."
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `admin:org_hook` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#update-a-webhook-configuration-for-an-organization}
 * Tags: orgs
 */
export async function orgsUpdateWebhookConfigForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
  },
  body: {
    url?: WebhookConfigUrl;
    content_type?: WebhookConfigContentType;
    secret?: WebhookConfigSecret;
    insecure_ssl?: WebhookConfigInsecureSsl;
  },
  opts?: FetcherData,
): Promise<WebhookConfig> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}/config',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List deliveries for an organization webhook
 * Returns a list of webhook deliveries for a webhook configured in an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#list-deliveries-for-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsListWebhookDeliveries<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
    per_page?: number;
    cursor?: string;
    redelivery?: boolean;
  },
  opts?: FetcherData,
): Promise<HookDeliveryItem[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}/deliveries',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'cursor', 'redelivery'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_HookDeliveryItem]]] },
    },
  });
}
/**
 * Get a webhook delivery for an organization webhook
 * Returns a delivery for a webhook configured in an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#get-a-webhook-delivery-for-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsGetWebhookDelivery<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
    delivery_id: number;
  },
  opts?: FetcherData,
): Promise<HookDelivery> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_HookDelivery]]] } },
  });
}
/**
 * Redeliver a delivery for an organization webhook
 * Redeliver a delivery for a webhook configured in an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#redeliver-a-delivery-for-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsRedeliverWebhookDelivery<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
    delivery_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}/deliveries/{delivery_id}/attempts',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Ping an organization webhook
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 * Learn more at {@link https://docs.github.com/rest/orgs/webhooks#ping-an-organization-webhook}
 * Tags: orgs
 */
export async function orgsPingWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/hooks/{hook_id}/pings',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization installation for the authenticated app
 * Enables an authenticated GitHub App to find the organization's installation information.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#get-an-organization-installation-for-the-authenticated-app}
 * Tags: apps
 */
export async function appsGetOrgInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<Installation> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/installation',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Installation]]] } },
  });
}
/**
 * List app installations for an organization
 * Lists all GitHub Apps in an organization. The installation count includes
 * all GitHub Apps installed on repositories in
 * the organization.
 *
 * The authenticated user must be an organization owner to use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `admin:read` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#list-app-installations-for-an-organization}
 * Tags: orgs
 */
export async function orgsListAppInstallations<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  installations: Installation[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/installations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'installations'], ['loop'], ['ref', $date_Installation]],
        ],
      },
    },
  });
}
/**
 * Get interaction restrictions for an organization
 * Shows which type of GitHub user can interact with this organization and when the restriction expires. If there is no
 * restrictions, you will see an empty response.
 * Learn more at {@link https://docs.github.com/rest/interactions/orgs#get-interaction-restrictions-for-an-organization}
 * Tags: interactions
 */
export async function interactionsGetRestrictionsForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<InteractionLimitResponse | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/interaction-limits',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['select', [[['ref', $date_InteractionLimitResponse]]]]]],
      },
    },
  });
}
/**
 * Set interaction restrictions for an organization
 * Temporarily restricts interactions to a certain type of GitHub user in any public repository in the given organization.
 * You must be an organization owner to set these restrictions. Setting the interaction limit at the organization level
 * will overwrite any interaction limits that are set for individual repositories owned by the organization.
 * Learn more at {@link https://docs.github.com/rest/interactions/orgs#set-interaction-restrictions-for-an-organization}
 * Tags: interactions
 */
export async function interactionsSetRestrictionsForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: InteractionLimit,
  opts?: FetcherData,
): Promise<InteractionLimitResponse> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/interaction-limits',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_InteractionLimitResponse]]] },
    },
  });
}
/**
 * Remove interaction restrictions for an organization
 * Removes all interaction restrictions from public repositories in the given organization. You must be an organization
 * owner to remove restrictions.
 * Learn more at {@link https://docs.github.com/rest/interactions/orgs#remove-interaction-restrictions-for-an-organization}
 * Tags: interactions
 */
export async function interactionsRemoveRestrictionsForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/interaction-limits',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List pending organization invitations
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the
 * following values: `direct_member`, `admin`, `billing_manager`, or `hiring_manager`. If the invitee is not a GitHub
 * member, the `login` field in the return hash will be `null`.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#list-pending-organization-invitations}
 * Tags: orgs
 */
export async function orgsListPendingInvitations<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
    role?:
      | 'all'
      | 'admin'
      | 'direct_member'
      | 'billing_manager'
      | 'hiring_manager';
    invitation_source?: 'all' | 'member' | 'scim';
  },
  opts?: FetcherData,
): Promise<OrganizationInvitation[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/invitations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'role', 'invitation_source'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create an organization invitation
 * Invite people to an organization by using their GitHub user ID or their email address. In order to create invitations in
 * an organization, the authenticated user must be an organization owner.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
 * and
 * "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 * Learn more at {@link https://docs.github.com/rest/orgs/members#create-an-organization-invitation}
 * Tags: orgs
 */
export async function orgsCreateInvitation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * **Required unless you provide `email`**. GitHub user ID for the person you are inviting.
     */
    invitee_id?: number;
    /**
     * **Required unless you provide `invitee_id`**. Email address of the person you are inviting, which can be an existing GitHub user.
     */
    email?: string;
    /**
     * The role for the new member.
     *  * `admin` - Organization owners with full administrative rights to the organization and complete access to all repositories and teams.
     *  * `direct_member` - Non-owner organization members with ability to see other members and join teams by invitation.
     *  * `billing_manager` - Non-owner organization members with ability to manage the billing settings of your organization.
     *  * `reinstate` - The previous role assigned to the invitee before they were removed from your organization. Can be one of the roles listed above. Only works if the invitee was previously part of your organization.
     * @defaultValue "direct_member"
     */
    role?: 'admin' | 'direct_member' | 'billing_manager' | 'reinstate';
    /**
     * Specify IDs for the teams you want to invite new members to.
     */
    team_ids?: number[];
  },
  opts?: FetcherData,
): Promise<OrganizationInvitation> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/invitations',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Cancel an organization invitation
 * Cancel an organization invitation. In order to cancel an organization invitation, the authenticated user must be an
 * organization owner.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Learn more at {@link https://docs.github.com/rest/orgs/members#cancel-an-organization-invitation}
 * Tags: orgs
 */
export async function orgsCancelInvitation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    invitation_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/invitations/{invitation_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization invitation teams
 * List all teams associated with an invitation. In order to see invitations in an organization, the authenticated user
 * must be an organization owner.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#list-organization-invitation-teams}
 * Tags: orgs
 */
export async function orgsListInvitationTeams<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    invitation_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/invitations/{invitation_id}/teams',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization issues assigned to the authenticated user
 * List issues in an organization assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API considers every pull
 * request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and
 * pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a
 * pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List
 * pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
 *
 * This endpoint supports the
 * following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#list-organization-issues-assigned-to-the-authenticated-user}
 * Tags: issues
 */
export async function issuesListForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    filter?:
      | 'assigned'
      | 'created'
      | 'mentioned'
      | 'subscribed'
      | 'repos'
      | 'all';
    state?: 'open' | 'closed' | 'all';
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Issue[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/issues',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'filter',
      'state',
      'labels',
      'sort',
      'direction',
      'since',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Issue]]] } },
  });
}
/**
 * List organization members
 * List all users who are members of an organization. If the authenticated user is also a member of this organization then
 * both concealed and public members will be returned.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#list-organization-members}
 * Tags: orgs
 */
export async function orgsListMembers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    filter?: '2fa_disabled' | 'all';
    role?: 'all' | 'admin' | 'member';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/members',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['filter', 'role', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check organization membership for a user
 * Check if a user is, publicly or privately, a member of the organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#check-organization-membership-for-a-user}
 * Tags: orgs
 */
export async function orgsCheckMembershipForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/members/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove an organization member
 * Removing a user from this list will remove them from all teams and they will no longer have any access to the
 * organization's repositories.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#remove-an-organization-member}
 * Tags: orgs
 */
export async function orgsRemoveMember<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/members/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List codespaces for a user in organization
 * Lists the codespaces that a member of an organization has for repositories in that organization.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organizations#list-codespaces-for-a-user-in-organization}
 * Tags: codespaces
 */
export async function codespacesGetCodespacesForUserInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      codespaces: Codespace[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/members/{username}/codespaces',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'codespaces'], ['loop'], ['ref', $date_Codespace]]],
      },
    },
  });
}
/**
 * Delete a codespace from the organization
 * Deletes a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organizations#delete-a-codespace-from-the-organization}
 * Tags: codespaces
 */
export async function codespacesDeleteFromOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/members/{username}/codespaces/{codespace_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Stop a codespace for an organization user
 * Stops a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/organizations#stop-a-codespace-for-an-organization-user}
 * Tags: codespaces
 */
export async function codespacesStopInOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<Codespace | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/members/{username}/codespaces/{codespace_name}/stop',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * Get Copilot seat assignment details for a user
 * **Note**: This endpoint is in beta and is subject to change.
 *
 * Gets the GitHub Copilot seat assignment details for a
 * member of an organization who currently has access to GitHub Copilot.
 *
 * Organization owners can view GitHub Copilot seat
 * assignment details for members in their organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `manage_billing:copilot` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/copilot/copilot-user-management#get-copilot-seat-assignment-details-for-a-user}
 * Tags: copilot
 */
export async function copilotGetCopilotSeatDetailsForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<CopilotSeatDetails> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/members/{username}/copilot',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CopilotSeatDetails]]] } },
  });
}
/**
 * Get organization membership for a user
 * In order to get a user's membership with an organization, the authenticated user must be an organization member. The
 * `state` parameter in the response can be used to identify the user's membership status.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user}
 * Tags: orgs
 */
export async function orgsGetMembershipForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<OrgMembership> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/memberships/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set organization membership for a user
 * Only authenticated organization owners can add a member to the organization or update the member's role.
 *
 * *   If the
 * authenticated user is _adding_ a member to the organization, the invited user will receive an email inviting them to the
 * organization. The user's [membership
 * status](https://docs.github.com/rest/orgs/members#get-organization-membership-for-a-user) will be `pending` until they
 * accept the invitation.
 *
 * *   Authenticated users can _update_ a user's membership by passing the `role` parameter. If
 * the authenticated user changes a member's role to `admin`, the affected user will receive an email notifying them that
 * they've been made an organization owner. If the authenticated user changes an owner's role to `member`, no email will be
 * sent.
 *
 * **Rate limits**
 *
 * To prevent abuse, the authenticated user is limited to 50 organization invitations per 24 hour
 * period. If the organization is more than one month old or on a paid plan, the limit is 500 invitations per 24 hour
 * period.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#set-organization-membership-for-a-user}
 * Tags: orgs
 */
export async function orgsSetMembershipForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  body: {
    /**
     * The role to give the user in the organization. Can be one of:
     *  * `admin` - The user will become an owner of the organization.
     *  * `member` - The user will become a non-owner member of the organization.
     * @defaultValue "member"
     */
    role?: 'admin' | 'member';
  },
  opts?: FetcherData,
): Promise<OrgMembership> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/memberships/{username}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove organization membership for a user
 * In order to remove a user's membership with an organization, the authenticated user must be an organization owner.
 *
 * If
 * the specified user is an active member of the organization, this will remove them from the organization. If the
 * specified user has been invited to the organization, this will cancel their invitation. The specified user will receive
 * an email notification in both cases.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#remove-organization-membership-for-a-user}
 * Tags: orgs
 */
export async function orgsRemoveMembershipForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/memberships/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization migrations
 * Lists the most recent migrations, including both exports (which can be started through the REST API) and imports (which
 * cannot be started using the REST API).
 *
 * A list of `repositories` is only returned for export migrations.
 * Learn more at {@link https://docs.github.com/rest/migrations/orgs#list-organization-migrations}
 * Tags: migrations
 */
export async function migrationsListForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
    exclude?: 'repositories'[];
  },
  opts?: FetcherData,
): Promise<Migration[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/migrations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'exclude'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Migration]]] } },
  });
}
/**
 * Start an organization migration
 * Initiates the generation of a migration archive.
 * Learn more at {@link https://docs.github.com/rest/migrations/orgs#start-an-organization-migration}
 * Tags: migrations
 */
export async function migrationsStartForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * A list of arrays indicating which repositories should be migrated.
     */
    repositories: string[];
    /**
     * Indicates whether repositories should be locked (to prevent manipulation) while migrating data.
     * @example true
     */
    lock_repositories?: boolean;
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     */
    exclude_metadata?: boolean;
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     */
    exclude_git_data?: boolean;
    /**
     * Indicates whether attachments should be excluded from the migration (to reduce migration archive file size).
     * @example true
     */
    exclude_attachments?: boolean;
    /**
     * Indicates whether releases should be excluded from the migration (to reduce migration archive file size).
     * @example true
     */
    exclude_releases?: boolean;
    /**
     * Indicates whether projects owned by the organization or users should be excluded. from the migration.
     * @example true
     */
    exclude_owner_projects?: boolean;
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     * @example true
     */
    org_metadata_only?: boolean;
    /**
     * Exclude related items from being returned in the response in order to improve performance of the request.
     */
    exclude?: 'repositories'[];
  },
  opts?: FetcherData,
): Promise<Migration> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/migrations',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Migration]]] } },
  });
}
/**
 * Get an organization migration status
 * Fetches the status of a migration.
 *
 * The `state` of a migration can be one of the following values:
 *
 * *   `pending`, which
 * means the migration hasn't started yet.
 * *   `exporting`, which means the migration is in progress.
 * *   `exported`, which
 * means the migration finished successfully.
 * *   `failed`, which means the migration failed.
 * Learn more at {@link https://docs.github.com/rest/migrations/orgs#get-an-organization-migration-status}
 * Tags: migrations
 */
export async function migrationsGetStatusForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    migration_id: number;
    exclude?: 'repositories'[];
  },
  opts?: FetcherData,
): Promise<Migration> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/migrations/{migration_id}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['exclude'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Migration]]] } },
  });
}
/**
 * Download an organization migration archive
 * Fetches the URL to a migration archive.
 * Learn more at {@link https://docs.github.com/rest/migrations/orgs#download-an-organization-migration-archive}
 * Tags: migrations
 */
export async function migrationsDownloadArchiveForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    migration_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/migrations/{migration_id}/archive',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an organization migration archive
 * Deletes a previous migration archive. Migration archives are automatically deleted after seven days.
 * Learn more at {@link https://docs.github.com/rest/migrations/orgs#delete-an-organization-migration-archive}
 * Tags: migrations
 */
export async function migrationsDeleteArchiveForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    migration_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/migrations/{migration_id}/archive',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unlock an organization repository
 * Unlocks a repository that was locked for migration. You should unlock each migrated repository and [delete
 * them](https://docs.github.com/rest/repos/repos#delete-a-repository) when the migration is complete and you no longer
 * need the source data.
 * Learn more at {@link https://docs.github.com/rest/migrations/orgs#unlock-an-organization-repository}
 * Tags: migrations
 */
export async function migrationsUnlockRepoForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    migration_id: number;
    repo_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/migrations/{migration_id}/repos/{repo_name}/lock',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories in an organization migration
 * List all the repositories for this organization migration.
 * Learn more at {@link https://docs.github.com/rest/migrations/orgs#list-repositories-in-an-organization-migration}
 * Tags: migrations
 */
export async function migrationsListReposForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    migration_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/migrations/{migration_id}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * List organization fine-grained permissions for an organization
 * Lists the fine-grained permissions that can be used in custom organization roles for an organization. For more
 * information, see "[Managing people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * To
 * list the fine-grained permissions that can be used in custom repository roles for an organization, see "[List repository
 * fine-grained permissions for an
 * organization](https://docs.github.com/rest/orgs/organization-roles#list-repository-fine-grained-permissions-for-an-organization)."
 *
 * To
 * use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user
 * on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#list-organization-fine-grained-permissions-for-an-organization}
 * Tags: orgs
 */
export async function orgsListOrganizationFineGrainedPermissions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<OrganizationFineGrainedPermission[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-fine-grained-permissions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all organization roles for an organization
 * Lists the organization roles available in this organization. For more information on organization roles, see "[Managing
 * people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * To
 * use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user
 * on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#get-all-organization-roles-for-an-organization}
 * Tags: orgs
 */
export async function orgsListOrgRoles<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<{
  /**
   * The total number of organization roles available to the organization.
   */
  total_count?: number;
  /**
   * The list of organization roles available to the organization.
   */
  roles?: OrganizationRole[];
}> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'roles'], ['loop'], ['ref', $date_OrganizationRole]],
        ],
      },
    },
  });
}
/**
 * Create a custom organization role
 * Creates a custom organization role that can be assigned to users and teams, granting them specific permissions over the
 * organization. For more information on custom organization roles, see "[Managing people's access to your organization
 * with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * To
 * use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user
 * on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#create-a-custom-organization-role}
 * Tags: orgs
 */
export async function orgsCreateCustomOrganizationRole<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The name of the custom role.
     */
    name: string;
    /**
     * A short description about the intended usage of this role or what permissions it grants.
     */
    description?: string;
    /**
     * A list of additional permissions included in this role.
     */
    permissions: string[];
  },
  opts?: FetcherData,
): Promise<OrganizationRole> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_OrganizationRole]]] } },
  });
}
/**
 * Remove all organization roles for a team
 * Removes all assigned organization roles from a team. For more information on organization roles, see "[Managing people's
 * access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * The
 * authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#remove-all-organization-roles-for-a-team}
 * Tags: orgs
 */
export async function orgsRevokeAllOrgRolesTeam<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/teams/{team_slug}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Assign an organization role to a team
 * Assigns an organization role to a team in an organization. For more information on organization roles, see "[Managing
 * people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * The
 * authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#assign-an-organization-role-to-a-team}
 * Tags: orgs
 */
export async function orgsAssignTeamToOrgRole<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    role_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove an organization role from a team
 * Removes an organization role from a team. For more information on organization roles, see "[Managing people's access to
 * your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * The
 * authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#remove-an-organization-role-from-a-team}
 * Tags: orgs
 */
export async function orgsRevokeOrgRoleTeam<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    role_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/teams/{team_slug}/{role_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove all organization roles for a user
 * Revokes all assigned organization roles from a user. For more information on organization roles, see "[Managing people's
 * access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * The
 * authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#remove-all-organization-roles-for-a-user}
 * Tags: orgs
 */
export async function orgsRevokeAllOrgRolesUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/users/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Assign an organization role to a user
 * Assigns an organization role to a member of an organization. For more information on organization roles, see "[Managing
 * people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * The
 * authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#assign-an-organization-role-to-a-user}
 * Tags: orgs
 */
export async function orgsAssignUserToOrgRole<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
    role_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/users/{username}/{role_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove an organization role from a user
 * Remove an organization role from a user. For more information on organization roles, see "[Managing people's access to
 * your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * The
 * authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#remove-an-organization-role-from-a-user}
 * Tags: orgs
 */
export async function orgsRevokeOrgRoleUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
    role_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/users/{username}/{role_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization role
 * Gets an organization role that is available to this organization. For more information on organization roles, see
 * "[Managing people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * To
 * use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user
 * on a team, with the fine-grained permissions of `read_organization_custom_org_role` in the organization.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#get-an-organization-role}
 * Tags: orgs
 */
export async function orgsGetOrgRole<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    role_id: number;
  },
  opts?: FetcherData,
): Promise<OrganizationRole> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/{role_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_OrganizationRole]]] } },
  });
}
/**
 * Update a custom organization role
 * Updates an existing custom organization role. Permission changes will apply to all assignees. For more information on
 * custom organization roles, see "[Managing people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 *
 * To
 * use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user
 * on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#update-a-custom-organization-role}
 * Tags: orgs
 */
export async function orgsPatchCustomOrganizationRole<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    role_id: number;
  },
  body: {
    /**
     * The name of the custom role.
     */
    name?: string;
    /**
     * A short description about the intended usage of this role or what permissions it grants.
     */
    description?: string;
    /**
     * A list of additional permissions included in this role.
     */
    permissions?: string[];
  },
  opts?: FetcherData,
): Promise<OrganizationRole> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/{role_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_OrganizationRole]]] } },
  });
}
/**
 * Delete a custom organization role.
 * Deletes a custom organization role. For more information on custom organization roles, see "[Managing people's access to
 * your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * To
 * use this endpoint, the authenticated user must be one of:
 *
 * - An administrator for the organization.
 * - A user, or a user
 * on a team, with the fine-grained permissions of `write_organization_custom_org_role` in the organization.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#delete-a-custom-organization-role}
 * Tags: orgs
 */
export async function orgsDeleteCustomOrganizationRole<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    role_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/{role_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List teams that are assigned to an organization role
 * Lists the teams that are assigned to an organization role. For more information on organization roles, see "[Managing
 * people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * To
 * use this endpoint, you must be an administrator for the organization.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#list-teams-that-are-assigned-to-an-organization-role}
 * Tags: orgs
 */
export async function orgsListOrgRoleTeams<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    role_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/{role_id}/teams',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List users that are assigned to an organization role
 * Lists organization members that are assigned to an organization role. For more information on organization roles, see
 * "[Managing people's access to your organization with
 * roles](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/about-custom-organization-roles)."
 *
 * To
 * use this endpoint, you must be an administrator for the organization.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/organization-roles#list-users-that-are-assigned-to-an-organization-role}
 * Tags: orgs
 */
export async function orgsListOrgRoleUsers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    role_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/organization-roles/{role_id}/users',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List outside collaborators for an organization
 * List all users who are outside collaborators of an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/outside-collaborators#list-outside-collaborators-for-an-organization}
 * Tags: orgs
 */
export async function orgsListOutsideCollaborators<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    filter?: '2fa_disabled' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/outside_collaborators',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['filter', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Convert an organization member to outside collaborator
 * When an organization member is converted to an outside collaborator, they'll only have access to the repositories that
 * their current team membership allows. The user will no longer be a member of the organization. For more information, see
 * "[Converting an organization member to an outside
 * collaborator](https://docs.github.com/articles/converting-an-organization-member-to-an-outside-collaborator/)".
 * Converting an organization member to an outside collaborator may be restricted by enterprise administrators. For more
 * information, see "[Enforcing repository management policies in your
 * enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
 * Learn more at {@link https://docs.github.com/rest/orgs/outside-collaborators#convert-an-organization-member-to-outside-collaborator}
 * Tags: orgs
 */
export async function orgsConvertMemberToOutsideCollaborator<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  body: {
    /**
     * When set to `true`, the request will be performed asynchronously. Returns a 202 status code when the job is successfully queued.
     */
    async?: boolean;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/outside_collaborators/{username}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove outside collaborator from an organization
 * Removing a user from this list will remove them from all the organization's repositories.
 * Learn more at {@link https://docs.github.com/rest/orgs/outside-collaborators#remove-outside-collaborator-from-an-organization}
 * Tags: orgs
 */
export async function orgsRemoveOutsideCollaborator<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/outside_collaborators/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List packages for an organization
 * Lists packages in an organization readable by the user.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only
 * supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About
 * permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#list-packages-for-an-organization}
 * Tags: packages
 */
export async function packagesListPackagesForOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    org: string;
    visibility?: 'public' | 'private' | 'internal';
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<Package[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['package_type', 'visibility', 'page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Package]]] } },
  });
}
/**
 * Get a package for an organization
 * Gets a specific package in an organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only
 * supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About
 * permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-a-package-for-an-organization}
 * Tags: packages
 */
export async function packagesGetPackageForOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
  },
  opts?: FetcherData,
): Promise<Package> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages/{package_type}/{package_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Package]]] } },
  });
}
/**
 * Delete a package for an organization
 * Deletes an entire package in an organization. You cannot delete a public package if any version of the package has more
 * than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * The authenticated user must have
 * admin permissions in the organization to use this endpoint. If the `package_type` belongs to a GitHub Packages registry
 * that supports granular permissions, the authenticated user must also have admin permissions to the package. For the list
 * of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#delete-a-package-for-an-organization}
 * Tags: packages
 */
export async function packagesDeletePackageForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages/{package_type}/{package_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Restore a package for an organization
 * Restores an entire package in an organization.
 *
 * You can restore a deleted package under the following conditions:
 *   -
 * The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not
 * reused for a new package. If the same package namespace is not available, you will not be able to restore your package.
 * In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's
 * namespace first.
 *
 * The authenticated user must have admin permissions in the organization to use this endpoint. If the
 * `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must
 * also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#restore-a-package-for-an-organization}
 * Tags: packages
 */
export async function packagesRestorePackageForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    token?: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages/{package_type}/{package_name}/restore',
    params,
    method: r.HttpMethod.POST,
    queryParams: ['token'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List package versions for a package owned by an organization
 * Lists package versions for a package owned by an organization.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint if the `package_type` belongs to a GitHub Packages registry that only
 * supports repository-scoped permissions. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-an-organization}
 * Tags: packages
 */
export async function packagesGetAllPackageVersionsForPackageOwnedByOrg<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    page?: number;
    per_page?: number;
    state?: 'active' | 'deleted';
  },
  opts?: FetcherData,
): Promise<PackageVersion[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages/{package_type}/{package_name}/versions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page', 'state'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_PackageVersion]]] },
    },
  });
}
/**
 * Get a package version for an organization
 * Gets a specific package version in an organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only
 * supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About
 * permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-a-package-version-for-an-organization}
 * Tags: packages
 */
export async function packagesGetPackageVersionForOrganization<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<PackageVersion> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PackageVersion]]] } },
  });
}
/**
 * Delete package version for an organization
 * Deletes a specific package version in an organization. If the package is public and the package version has more than
 * 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub support for further
 * assistance.
 *
 * The authenticated user must have admin permissions in the organization to use this endpoint. If the
 * `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must
 * also have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#delete-package-version-for-an-organization}
 * Tags: packages
 */
export async function packagesDeletePackageVersionForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Restore package version for an organization
 * Restores a specific package version in an organization.
 *
 * You can restore a deleted package under the following
 * conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still
 * available and not reused for a new package. If the same package namespace is not available, you will not be able to
 * restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the
 * deleted package's namespace first.
 *
 * The authenticated user must have admin permissions in the organization to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the
 * authenticated user must also have admin permissions to the package. For the list of these registries, see "[About
 * permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#restore-package-version-for-an-organization}
 * Tags: packages
 */
export async function packagesRestorePackageVersionForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    org: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List requests to access organization resources with fine-grained personal access tokens
 * Lists requests from organization members to access organization resources with a fine-grained personal access
 * token.
 *
 * Only GitHub Apps can use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#list-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens}
 * Tags: orgs
 */
export async function orgsListPatGrantRequests<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
    sort?: 'created_at';
    direction?: 'asc' | 'desc';
    owner?: string[];
    repository?: string;
    permission?: string;
    last_used_before?: Date;
    last_used_after?: Date;
  },
  opts?: FetcherData,
): Promise<OrganizationProgrammaticAccessGrantRequest[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-token-requests',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'per_page',
      'page',
      'sort',
      'direction',
      'owner',
      'repository',
      'permission',
      'last_used_before',
      'last_used_after',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Review requests to access organization resources with fine-grained personal access tokens
 * Approves or denies multiple pending requests to access organization resources via a fine-grained personal access
 * token.
 *
 * Only GitHub Apps can use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#review-requests-to-access-organization-resources-with-fine-grained-personal-access-tokens}
 * Tags: orgs
 */
export async function orgsReviewPatGrantRequestsInBulk<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * Unique identifiers of the requests for access via fine-grained personal access token. Must be formed of between 1 and 100 `pat_request_id` values.
     */
    pat_request_ids?: number[];
    /**
     * Action to apply to the requests.
     */
    action: 'approve' | 'deny';
    /**
     * Reason for approving or denying the requests. Max 1024 characters.
     */
    reason?: string | null;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-token-requests',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Review a request to access organization resources with a fine-grained personal access token
 * Approves or denies a pending request to access organization resources via a fine-grained personal access token.
 *
 * Only
 * GitHub Apps can use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#review-a-request-to-access-organization-resources-with-a-fine-grained-personal-access-token}
 * Tags: orgs
 */
export async function orgsReviewPatGrantRequest<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    pat_request_id: number;
  },
  body: {
    /**
     * Action to apply to the request.
     */
    action: 'approve' | 'deny';
    /**
     * Reason for approving or denying the request. Max 1024 characters.
     */
    reason?: string | null;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-token-requests/{pat_request_id}',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories requested to be accessed by a fine-grained personal access token
 * Lists the repositories a fine-grained personal access token request is requesting access to.
 *
 * Only GitHub Apps can use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#list-repositories-requested-to-be-accessed-by-a-fine-grained-personal-access-token}
 * Tags: orgs
 */
export async function orgsListPatGrantRequestRepositories<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    pat_request_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-token-requests/{pat_request_id}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * List fine-grained personal access tokens with access to organization resources
 * Lists approved fine-grained personal access tokens owned by organization members that can access organization
 * resources.
 *
 * Only GitHub Apps can use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#list-fine-grained-personal-access-tokens-with-access-to-organization-resources}
 * Tags: orgs
 */
export async function orgsListPatGrants<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
    sort?: 'created_at';
    direction?: 'asc' | 'desc';
    owner?: string[];
    repository?: string;
    permission?: string;
    last_used_before?: Date;
    last_used_after?: Date;
  },
  opts?: FetcherData,
): Promise<OrganizationProgrammaticAccessGrant[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-tokens',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'per_page',
      'page',
      'sort',
      'direction',
      'owner',
      'repository',
      'permission',
      'last_used_before',
      'last_used_after',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update the access to organization resources via fine-grained personal access tokens
 * Updates the access organization members have to organization resources via fine-grained personal access tokens. Limited
 * to revoking a token's existing access.
 *
 * Only GitHub Apps can use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#update-the-access-to-organization-resources-via-fine-grained-personal-access-tokens}
 * Tags: orgs
 */
export async function orgsUpdatePatAccesses<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * Action to apply to the fine-grained personal access token.
     */
    action: 'revoke';
    /**
     * The IDs of the fine-grained personal access tokens.
     */
    pat_ids: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-tokens',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update the access a fine-grained personal access token has to organization resources
 * Updates the access an organization member has to organization resources via a fine-grained personal access token.
 * Limited to revoking the token's existing access. Limited to revoking a token's existing access.
 *
 * Only GitHub Apps can
 * use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#update-the-access-a-fine-grained-personal-access-token-has-to-organization-resources}
 * Tags: orgs
 */
export async function orgsUpdatePatAccess<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    pat_id: number;
  },
  body: {
    /**
     * Action to apply to the fine-grained personal access token.
     */
    action: 'revoke';
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-tokens/{pat_id}',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories a fine-grained personal access token has access to
 * Lists the repositories a fine-grained personal access token has access to.
 *
 * Only GitHub Apps can use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/personal-access-tokens#list-repositories-a-fine-grained-personal-access-token-has-access-to}
 * Tags: orgs
 */
export async function orgsListPatGrantRepositories<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    pat_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/personal-access-tokens/{pat_id}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * List organization projects
 * Lists the projects in an organization. Returns a `404 Not Found` status if projects are disabled in the organization. If
 * you do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#list-organization-projects}
 * Tags: projects
 */
export async function projectsListForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    state?: 'open' | 'closed' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Project[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/projects',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['state', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Project]]] } },
  });
}
/**
 * Create an organization project
 * Creates an organization project board. Returns a `410 Gone` status if projects are disabled in the organization or if
 * the organization does not have existing classic projects. If you do not have sufficient privileges to perform this
 * action, a `401 Unauthorized` or `410 Gone` status is returned.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#create-an-organization-project}
 * Tags: projects
 */
export async function projectsCreateForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The name of the project.
     */
    name: string;
    /**
     * The description of the project.
     */
    body?: string;
  },
  opts?: FetcherData,
): Promise<Project> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/projects',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Project]]] } },
  });
}
/**
 * Get all custom properties for an organization
 * Gets all custom properties defined for an organization.
 * Organization members can read these properties.
 * Learn more at {@link https://docs.github.com/rest/orgs/custom-properties#get-all-custom-properties-for-an-organization}
 * Tags: orgs
 */
export async function orgsGetAllCustomProperties<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<OrgCustomProperty[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/properties/schema',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create or update custom properties for an organization
 * Creates new or updates existing custom properties defined for an organization in a batch.
 *
 * To use this endpoint, the
 * authenticated user must be one of:
 *   - An administrator for the organization.
 *   - A user, or a user on a team, with the
 * fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/custom-properties#create-or-update-custom-properties-for-an-organization}
 * Tags: orgs
 */
export async function orgsCreateOrUpdateCustomProperties<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The array of custom properties to create or update.
     */
    properties: OrgCustomProperty[];
  },
  opts?: FetcherData,
): Promise<OrgCustomProperty[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/properties/schema',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a custom property for an organization
 * Gets a custom property that is defined for an organization.
 * Organization members can read these properties.
 * Learn more at {@link https://docs.github.com/rest/orgs/custom-properties#get-a-custom-property-for-an-organization}
 * Tags: orgs
 */
export async function orgsGetCustomProperty<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    custom_property_name: string;
  },
  opts?: FetcherData,
): Promise<OrgCustomProperty> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/properties/schema/{custom_property_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create or update a custom property for an organization
 * Creates a new or updates an existing custom property that is defined for an organization.
 *
 * To use this endpoint, the
 * authenticated user must be one of:
 * - An administrator for the organization.
 * - A user, or a user on a team, with the
 * fine-grained permission of `custom_properties_org_definitions_manager` in the organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/custom-properties#create-or-update-a-custom-property-for-an-organization}
 * Tags: orgs
 */
export async function orgsCreateOrUpdateCustomProperty<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    custom_property_name: string;
  },
  body: {
    /**
     * The type of the value for the property
     * @example "single_select"
     */
    value_type: 'string' | 'single_select';
    /**
     * Whether the property is required.
     */
    required?: boolean;
    /**
     * Default value of the property
     */
    default_value?: string | null;
    /**
     * Short description of the property
     */
    description?: string | null;
    /**
     * An ordered list of the allowed values of the property.
     * The property can have up to 200 allowed values.
     */
    allowed_values?: string[] | null;
  },
  opts?: FetcherData,
): Promise<OrgCustomProperty> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/properties/schema/{custom_property_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a custom property for an organization
 * Removes a custom property that is defined for an organization.
 *
 * To use this endpoint, the authenticated user must be one
 * of:
 *   - An administrator for the organization.
 *   - A user, or a user on a team, with the fine-grained permission of
 * `custom_properties_org_definitions_manager` in the organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/custom-properties#remove-a-custom-property-for-an-organization}
 * Tags: orgs
 */
export async function orgsRemoveCustomProperty<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    custom_property_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/properties/schema/{custom_property_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List custom property values for organization repositories
 * Lists organization repositories with all of their custom property values.
 * Organization members can read these
 * properties.
 * Learn more at {@link https://docs.github.com/rest/orgs/custom-properties#list-custom-property-values-for-organization-repositories}
 * Tags: orgs
 */
export async function orgsListCustomPropertiesValuesForRepos<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
    repository_query?: string;
  },
  opts?: FetcherData,
): Promise<OrgRepoCustomPropertyValues[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/properties/values',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'repository_query'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create or update custom property values for organization repositories
 * Create new or update existing custom property values for repositories in a batch that belong to an organization.
 * Each
 * target repository will have its custom property values updated to match the values provided in the request.
 *
 * A maximum
 * of 30 repositories can be updated in a single request.
 *
 * Using a value of `null` for a custom property will remove or
 * 'unset' the property value from the repository.
 *
 * To use this endpoint, the authenticated user must be one of:
 *   - An
 * administrator for the organization.
 *   - A user, or a user on a team, with the fine-grained permission of
 * `custom_properties_org_values_editor` in the organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/custom-properties#create-or-update-custom-property-values-for-organization-repositories}
 * Tags: orgs
 */
export async function orgsCreateOrUpdateCustomPropertiesValuesForRepos<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The names of repositories that the custom property values will be applied to.
     */
    repository_names: string[];
    /**
     * List of custom property names and associated values to apply to the repositories.
     */
    properties: CustomPropertyValue[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/properties/values',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List public organization members
 * Members of an organization can choose to have their membership publicized or not.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#list-public-organization-members}
 * Tags: orgs
 */
export async function orgsListPublicMembers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/public_members',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check public organization membership for a user
 * Check if the provided user is a public member of the organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#check-public-organization-membership-for-a-user}
 * Tags: orgs
 */
export async function orgsCheckPublicMembershipForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/public_members/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set public organization membership for the authenticated user
 * The user can publicize their own membership. (A user cannot publicize the membership for another user.)
 *
 * Note that
 * you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
 * method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 * Learn more at {@link https://docs.github.com/rest/orgs/members#set-public-organization-membership-for-the-authenticated-user}
 * Tags: orgs
 */
export async function orgsSetPublicMembershipForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/public_members/{username}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove public organization membership for the authenticated user
 * Removes the public membership for the authenticated user from the specified organization, unless public visibility is
 * enforced by default.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#remove-public-organization-membership-for-the-authenticated-user}
 * Tags: orgs
 */
export async function orgsRemovePublicMembershipForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/public_members/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organization repositories
 * Lists repositories for the specified organization.
 *
 * **Note:** In order to see the `security_and_analysis` block for a
 * repository you must have admin permissions for the repository or be an owner or security manager for the organization
 * that owns the repository. For more information, see "[Managing security managers in your
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-organization-repositories}
 * Tags: repos
 */
export async function reposListForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    type?: 'all' | 'public' | 'private' | 'forks' | 'sources' | 'member';
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/repos',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['type', 'sort', 'direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * Create an organization repository
 * Creates a new repository in the specified organization. The authenticated user must be a member of the
 * organization.
 *
 * OAuth app tokens and personal access tokens (classic) need the `public_repo` or `repo` scope to create a
 * public repository, and `repo` scope to create a private repository.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#create-an-organization-repository}
 * Tags: repos
 */
export async function reposCreateInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The name of the repository.
     */
    name: string;
    /**
     * A short description of the repository.
     */
    description?: string;
    /**
     * A URL with more information about the repository.
     */
    homepage?: string;
    /**
     * Whether the repository is private.
     */
    private?: boolean;
    /**
     * The visibility of the repository.
     */
    visibility?: 'public' | 'private';
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     * @defaultValue true
     */
    has_issues?: boolean;
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     * @defaultValue true
     */
    has_projects?: boolean;
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     * @defaultValue true
     */
    has_wiki?: boolean;
    /**
     * Whether downloads are enabled.
     * @example true
     * @defaultValue true
     */
    has_downloads?: boolean;
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     */
    is_template?: boolean;
    /**
     * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
     */
    team_id?: number;
    /**
     * Pass `true` to create an initial commit with empty README.
     */
    auto_init?: boolean;
    /**
     * Desired language or platform [.gitignore template](https://github.com/github/gitignore) to apply. Use the name of the template without the extension. For example, "Haskell".
     */
    gitignore_template?: string;
    /**
     * Choose an [open source license template](https://choosealicense.com/) that best suits your needs, and then use the [license keyword](https://docs.github.com/articles/licensing-a-repository/#searching-github-by-license-type) as the `license_template` string. For example, "mit" or "mpl-2.0".
     */
    license_template?: string;
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     */
    allow_auto_merge?: boolean;
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion. **The authenticated user must be an organization owner to set this property to `true`.**
     */
    delete_branch_on_merge?: boolean;
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * @deprecated
     */
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * The custom properties for the new repository. The keys are the custom property names, and the values are the corresponding custom property values.
     */
    custom_properties?: {
      [key: string]: any;
    };
  },
  opts?: FetcherData,
): Promise<FullRepository> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/repos',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_FullRepository]]] } },
  });
}
/**
 * Get all organization repository rulesets
 * Get all the repository rulesets for an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/rules#get-all-organization-repository-rulesets}
 * Tags: repos
 */
export async function reposGetOrgRulesets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/rulesets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_RepositoryRuleset]]] },
    },
  });
}
/**
 * Create an organization repository ruleset
 * Create a repository ruleset for an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/rules#create-an-organization-repository-ruleset}
 * Tags: repos
 */
export async function reposCreateOrgRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The name of the ruleset.
     */
    name: string;
    /**
     * The target of the ruleset.
     */
    target?: 'branch' | 'tag';
    enforcement: RepositoryRuleEnforcement;
    /**
     * The actors that can bypass the rules in this ruleset
     */
    bypass_actors?: RepositoryRulesetBypassActor[];
    conditions?: OrgRulesetConditions;
    /**
     * An array of rules within the ruleset.
     */
    rules?: RepositoryRule[];
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/rulesets',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_RepositoryRuleset]]] } },
  });
}
/**
 * List organization rule suites
 * Lists suites of rule evaluations at the organization level.
 * For more information, see "[Managing rulesets for
 * repositories in your
 * organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
 * Learn more at {@link https://docs.github.com/rest/orgs/rule-suites#list-organization-rule-suites}
 * Tags: repos
 */
export async function reposGetOrgRuleSuites<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    repository_name?: number;
    time_period?: 'hour' | 'day' | 'week' | 'month';
    actor_name?: string;
    rule_suite_result?: 'pass' | 'fail' | 'bypass' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<RuleSuites> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/rulesets/rule-suites',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'repository_name',
      'time_period',
      'actor_name',
      'rule_suite_result',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RuleSuites]]] } },
  });
}
/**
 * Get an organization rule suite
 * Gets information about a suite of rule evaluations from within an organization.
 * For more information, see "[Managing
 * rulesets for repositories in your
 * organization](https://docs.github.com/organizations/managing-organization-settings/managing-rulesets-for-repositories-in-your-organization#viewing-insights-for-rulesets)."
 * Learn more at {@link https://docs.github.com/rest/orgs/rule-suites#get-an-organization-rule-suite}
 * Tags: repos
 */
export async function reposGetOrgRuleSuite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    rule_suite_id: number;
  },
  opts?: FetcherData,
): Promise<RuleSuite> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/rulesets/rule-suites/{rule_suite_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RuleSuite]]] } },
  });
}
/**
 * Get an organization repository ruleset
 * Get a repository ruleset for an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/rules#get-an-organization-repository-ruleset}
 * Tags: repos
 */
export async function reposGetOrgRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    ruleset_id: number;
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/rulesets/{ruleset_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositoryRuleset]]] } },
  });
}
/**
 * Update an organization repository ruleset
 * Update a ruleset for an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/rules#update-an-organization-repository-ruleset}
 * Tags: repos
 */
export async function reposUpdateOrgRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    ruleset_id: number;
  },
  body: {
    /**
     * The name of the ruleset.
     */
    name?: string;
    /**
     * The target of the ruleset.
     */
    target?: 'branch' | 'tag';
    enforcement?: RepositoryRuleEnforcement;
    /**
     * The actors that can bypass the rules in this ruleset
     */
    bypass_actors?: RepositoryRulesetBypassActor[];
    conditions?: OrgRulesetConditions;
    /**
     * An array of rules within the ruleset.
     */
    rules?: RepositoryRule[];
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/rulesets/{ruleset_id}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositoryRuleset]]] } },
  });
}
/**
 * Delete an organization repository ruleset
 * Delete a ruleset for an organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/rules#delete-an-organization-repository-ruleset}
 * Tags: repos
 */
export async function reposDeleteOrgRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    ruleset_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/rulesets/{ruleset_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List secret scanning alerts for an organization
 * Lists secret scanning alerts for eligible repositories in an organization, from newest to oldest.
 *
 * The authenticated
 * user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is
 * only used with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-an-organization}
 * Tags: secret-scanning
 */
export async function secretScanningListAlertsForOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    state?: 'open' | 'resolved';
    secret_type?: string;
    resolution?: string;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    page?: number;
    per_page?: number;
    before?: string;
    after?: string;
    validity?: string;
  },
  opts?: FetcherData,
): Promise<OrganizationSecretScanningAlert[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/secret-scanning/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'state',
      'secret_type',
      'resolution',
      'sort',
      'direction',
      'page',
      'per_page',
      'before',
      'after',
      'validity',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_OrganizationSecretScanningAlert]]],
      },
    },
  });
}
/**
 * List repository security advisories for an organization
 * Lists repository security advisories for an organization.
 *
 * The authenticated user must be an owner or security manager
 * for the organization to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or
 * `repository_advisories:write` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories-for-an-organization}
 * Tags: security-advisories
 */
export async function securityAdvisoriesListOrgRepositoryAdvisories<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    direction?: 'asc' | 'desc';
    sort?: 'created' | 'updated' | 'published';
    before?: string;
    after?: string;
    per_page?: number;
    state?: 'triage' | 'draft' | 'published' | 'closed';
  },
  opts?: FetcherData,
): Promise<RepositoryAdvisory[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/security-advisories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['direction', 'sort', 'before', 'after', 'per_page', 'state'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_RepositoryAdvisory]]] },
    },
  });
}
/**
 * List security manager teams
 * Lists teams that are security managers for an organization. For more information, see "[Managing security managers in
 * your
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * The
 * authenticated user must be an administrator or security manager for the organization to use this endpoint.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `read:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/security-managers#list-security-manager-teams}
 * Tags: orgs
 */
export async function orgsListSecurityManagerTeams<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<TeamSimple[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/security-managers',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add a security manager team
 * Adds a team as a security manager for an organization. For more information, see "[Managing security for an
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
 * for an organization."
 *
 * The authenticated user must be an administrator for the organization to use this endpoint.
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/security-managers#add-a-security-manager-team}
 * Tags: orgs
 */
export async function orgsAddSecurityManagerTeam<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/security-managers/teams/{team_slug}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a security manager team
 * Removes the security manager role from a team for an organization. For more information, see "[Managing security
 * managers in your
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)
 * team from an organization."
 *
 * The authenticated user must be an administrator for the organization to use this
 * endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/security-managers#remove-a-security-manager-team}
 * Tags: orgs
 */
export async function orgsRemoveSecurityManagerTeam<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/security-managers/teams/{team_slug}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get GitHub Actions billing for an organization
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private
 * repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any
 * job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows
 * runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub
 * Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/billing/billing#get-github-actions-billing-for-an-organization}
 * Tags: billing
 */
export async function billingGetGithubActionsBillingOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<ActionsBillingUsage> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/settings/billing/actions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get GitHub Packages billing for an organization
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for
 * private repositories. For more information, see "[Managing billing for GitHub
 * Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/billing/billing#get-github-packages-billing-for-an-organization}
 * Tags: billing
 */
export async function billingGetGithubPackagesBillingOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<PackagesBillingUsage> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/settings/billing/packages',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get shared storage billing for an organization
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only
 * apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub
 * Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` or `admin:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/billing/billing#get-shared-storage-billing-for-an-organization}
 * Tags: billing
 */
export async function billingGetSharedStorageBillingOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<CombinedBillingUsage> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/settings/billing/shared-storage',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List teams
 * Lists all teams in an organization that are visible to the authenticated user.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-teams}
 * Tags: teams
 */
export async function teamsList<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a team
 * To create a team, the authenticated user must be a member or owner of `{org}`. By default, organization members can
 * create teams. Organization owners can limit team creation to organization owners. For more information, see "[Setting
 * team creation
 * permissions](https://docs.github.com/articles/setting-team-creation-permissions-in-your-organization)."
 *
 * When you create
 * a new team, you automatically become a team maintainer without explicitly adding yourself to the optional array of
 * `maintainers`. For more information, see "[About
 * teams](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/about-teams)".
 * Learn more at {@link https://docs.github.com/rest/teams/teams#create-a-team}
 * Tags: teams
 */
export async function teamsCreate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The name of the team.
     */
    name: string;
    /**
     * The description of the team.
     */
    description?: string;
    /**
     * List GitHub IDs for organization members who will become team maintainers.
     */
    maintainers?: string[];
    /**
     * The full name (e.g., "organization-name/repository-name") of repositories to add the team to.
     */
    repo_names?: string[];
    /**
     * The level of privacy this team should have. The options are:
     * **For a non-nested team:**
     *  * `secret` - only visible to organization owners and members of this team.
     *  * `closed` - visible to all members of this organization.
     * Default: `secret`
     * **For a parent or child team:**
     *  * `closed` - visible to all members of this organization.
     * Default for child team: `closed`
     */
    privacy?: 'secret' | 'closed';
    /**
     * The notification setting the team has chosen. The options are:
     *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
     *  * `notifications_disabled` - no one receives notifications.
     * Default: `notifications_enabled`
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     * @defaultValue "pull"
     */
    permission?: 'pull' | 'push';
    /**
     * The ID of a team to set as the parent team.
     */
    parent_team_id?: number;
  },
  opts?: FetcherData,
): Promise<TeamFull> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_TeamFull]]] } },
  });
}
/**
 * Get a team by name
 * Gets a team using the team's `slug`. To create the `slug`, GitHub replaces special characters in the `name` string,
 * changes all words to lowercase, and replaces spaces with a `-` separator. For example, `"My TEam Näme"` would become
 * `my-team-name`.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
 * /organizations/{org_id}/team/{team_id}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#get-a-team-by-name}
 * Tags: teams
 */
export async function teamsGetByName<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
  },
  opts?: FetcherData,
): Promise<TeamFull> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamFull]]] } },
  });
}
/**
 * Update a team
 * To edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** You can
 * also specify a team by `org_id` and `team_id` using the route `PATCH /organizations/{org_id}/team/{team_id}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#update-a-team}
 * Tags: teams
 */
export async function teamsUpdateInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
  },
  body: {
    /**
     * The name of the team.
     */
    name?: string;
    /**
     * The description of the team.
     */
    description?: string;
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. When a team is nested, the `privacy` for parent teams cannot be `secret`. The options are:
     * **For a non-nested team:**
     *  * `secret` - only visible to organization owners and members of this team.
     *  * `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     *  * `closed` - visible to all members of this organization.
     */
    privacy?: 'secret' | 'closed';
    /**
     * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
     *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
     *  * `notifications_disabled` - no one receives notifications.
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     * @defaultValue "pull"
     */
    permission?: 'pull' | 'push' | 'admin';
    /**
     * The ID of a team to set as the parent team.
     */
    parent_team_id?: number | null;
  },
  opts?: FetcherData,
): Promise<TeamFull> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamFull]]] } },
    '201': { transforms: { date: [[['ref', $date_TeamFull]]] } },
  });
}
/**
 * Delete a team
 * To delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization
 * owner, deleting a parent team will delete all of its child teams as well.
 *
 * **Note:** You can also specify a team by
 * `org_id` and `team_id` using the route `DELETE /organizations/{org_id}/team/{team_id}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#delete-a-team}
 * Tags: teams
 */
export async function teamsDeleteInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List discussions
 * List all discussions on a team's page.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route
 * `GET /organizations/{org_id}/team/{team_id}/discussions`.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `read:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#list-discussions}
 * Tags: teams
 */
export async function teamsListDiscussionsInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
    pinned?: string;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['direction', 'per_page', 'page', 'pinned'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_TeamDiscussion]]] },
    },
  });
}
/**
 * Create a discussion
 * Creates a new discussion post on a team's page.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * **Note:** You can also specify a team
 * by `org_id` and `team_id` using the route `POST /organizations/{org_id}/team/{team_id}/discussions`.
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#create-a-discussion}
 * Tags: teams
 */
export async function teamsCreateDiscussionInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
  },
  body: {
    /**
     * The discussion post's title.
     */
    title: string;
    /**
     * The discussion post's body text.
     */
    body: string;
    /**
     * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
     */
    private?: boolean;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_TeamDiscussion]]] } },
  });
}
/**
 * Get a discussion
 * Get a specific discussion on a team's page.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the
 * route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `read:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#get-a-discussion}
 * Tags: teams
 */
export async function teamsGetDiscussionInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussion]]] } },
  });
}
/**
 * Update a discussion
 * Edits the title and body text of a discussion post. Only the parameters you provide are updated.
 *
 * **Note:** You can also
 * specify a team by `org_id` and `team_id` using the route `PATCH
 * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#update-a-discussion}
 * Tags: teams
 */
export async function teamsUpdateDiscussionInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
  },
  body: {
    /**
     * The discussion post's title.
     */
    title?: string;
    /**
     * The discussion post's body text.
     */
    body?: string;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussion]]] } },
  });
}
/**
 * Delete a discussion
 * Delete a discussion from a team's page.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route
 * `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}`.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#delete-a-discussion}
 * Tags: teams
 */
export async function teamsDeleteDiscussionInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List discussion comments
 * List all comments on a team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route
 * `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `read:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments}
 * Tags: teams
 */
export async function teamsListDiscussionCommentsInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_TeamDiscussionComment]]] },
    },
  });
}
/**
 * Create a discussion comment
 * Creates a new comment on a team discussion.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * **Note:** You can also specify a team
 * by `org_id` and `team_id` using the route `POST
 * /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments`.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment}
 * Tags: teams
 */
export async function teamsCreateDiscussionCommentInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
  },
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_TeamDiscussionComment]]] } },
  });
}
/**
 * Get a discussion comment
 * Get a specific comment on a team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the
 * route `GET /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment}
 * Tags: teams
 */
export async function teamsGetDiscussionCommentInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussionComment]]] } },
  });
}
/**
 * Update a discussion comment
 * Edits the body text of a discussion comment.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the
 * route `PATCH /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment}
 * Tags: teams
 */
export async function teamsUpdateDiscussionCommentInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
  },
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussionComment]]] } },
  });
}
/**
 * Delete a discussion comment
 * Deletes a comment on a team discussion.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route
 * `DELETE /organizations/{org_id}/team/{team_id}/discussions/{discussion_number}/comments/{comment_number}`.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment}
 * Tags: teams
 */
export async function teamsDeleteDiscussionCommentInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List reactions for a team discussion comment
 * List the reactions to a [team discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
 *
 * **Note:** You can also
 * specify a team by `org_id` and `team_id` using the route `GET
 * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment}
 * Tags: reactions
 */
export async function reactionsListForTeamDiscussionCommentInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for a team discussion comment
 * Create a reaction to a [team discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
 *
 * A response with an HTTP
 * `200` status means that you already added the reaction type to this team discussion comment.
 *
 * **Note:** You can also
 * specify a team by `org_id` and `team_id` using the route `POST
 * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions`.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment}
 * Tags: reactions
 */
export async function reactionsCreateForTeamDiscussionCommentInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Reaction]]] } },
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * Delete team discussion comment reaction
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE
 * /organizations/:org_id/team/:team_id/discussions/:discussion_number/comments/:comment_number/reactions/:reaction_id`.
 *
 * Delete
 * a reaction to a [team discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#delete-team-discussion-comment-reaction}
 * Tags: reactions
 */
export async function reactionsDeleteForTeamDiscussionComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    comment_number: number;
    reaction_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/comments/{comment_number}/reactions/{reaction_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List reactions for a team discussion
 * List the reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
 *
 * **Note:**
 * You can also specify a team by `org_id` and `team_id` using the route `GET
 * /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `read:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion}
 * Tags: reactions
 */
export async function reactionsListForTeamDiscussionInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for a team discussion
 * Create a reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
 *
 * A response
 * with an HTTP `200` status means that you already added the reaction type to this team discussion.
 *
 * **Note:** You can
 * also specify a team by `org_id` and `team_id` using the route `POST
 * /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions`.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion}
 * Tags: reactions
 */
export async function reactionsCreateForTeamDiscussionInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Reaction]]] } },
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * Delete team discussion reaction
 * **Note:** You can also specify a team or organization with `team_id` and `org_id` using the route `DELETE
 * /organizations/:org_id/team/:team_id/discussions/:discussion_number/reactions/:reaction_id`.
 *
 * Delete a reaction to a
 * [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#delete-team-discussion-reaction}
 * Tags: reactions
 */
export async function reactionsDeleteForTeamDiscussion<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    discussion_number: number;
    reaction_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/discussions/{discussion_number}/reactions/{reaction_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List pending team invitations
 * The return hash contains a `role` field which refers to the Organization Invitation role and will be one of the
 * following values: `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a
 * GitHub member, the `login` field in the return hash will be `null`.
 *
 * **Note:** You can also specify a team by `org_id`
 * and `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/invitations`.
 * Learn more at {@link https://docs.github.com/rest/teams/members#list-pending-team-invitations}
 * Tags: teams
 */
export async function teamsListPendingInvitationsInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<OrganizationInvitation[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/invitations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List team members
 * Team members will include the members of child teams.
 *
 * To list members in a team, the team must be visible to the
 * authenticated user.
 * Learn more at {@link https://docs.github.com/rest/teams/members#list-team-members}
 * Tags: teams
 */
export async function teamsListMembersInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    role?: 'member' | 'maintainer' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/members',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['role', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get team membership for a user
 * Team members will include the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible
 * to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `GET
 * /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 *
 * **Note:**
 * The response contains the `state` of the
 * membership and the member's `role`.
 *
 * The `role` for organization owners is set to `maintainer`. For more information
 * about `maintainer` roles, see [Create a team](https://docs.github.com/rest/teams/teams#create-a-team).
 * Learn more at {@link https://docs.github.com/rest/teams/members#get-team-membership-for-a-user}
 * Tags: teams
 */
export async function teamsGetMembershipForUserInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<TeamMembership> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/memberships/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add or update team membership for a user
 * Adds an organization member to a team. An authenticated organization owner or team maintainer can add organization
 * members to a team.
 *
 * Team synchronization is available for organizations using GitHub Enterprise Cloud. For more
 * information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the
 * GitHub Help documentation.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's
 * identity provider (IdP), you will see an error if you attempt to use the API for making changes to the team's
 * membership. If you have access to manage group membership in your IdP, you can manage GitHub team membership through
 * your identity provider, which automatically adds and removes team members in an organization. For more information, see
 * "[Synchronizing teams between your identity provider and
 * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * An
 * organization owner can add someone who is not part of the team's organization to a team. When an organization owner adds
 * someone to a team who is not an organization member, this endpoint will send an invitation to the person via email. This
 * newly-created membership will be in the "pending" state until the person accepts the invitation, at which point the
 * membership will transition to the "active" state and the user will be added as a member of the team.
 *
 * If the user is
 * already a member of the team, this endpoint will update the role of the team member's role. To update the membership of
 * a team member, the authenticated user must be an organization owner or a team maintainer.
 *
 * **Note:** You can also
 * specify a team by `org_id` and `team_id` using the route `PUT
 * /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 * Learn more at {@link https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user}
 * Tags: teams
 */
export async function teamsAddOrUpdateMembershipForUserInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    username: string;
  },
  body: {
    /**
     * The role that this user should have in the team.
     * @defaultValue "member"
     */
    role?: 'member' | 'maintainer';
  },
  opts?: FetcherData,
): Promise<TeamMembership> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/memberships/{username}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove team membership for a user
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions to the team or be
 * an owner of the organization that the team is associated with. Removing team membership does not delete the user, it
 * just removes their membership from the team.
 *
 * Team synchronization is available for organizations using GitHub
 * Enterprise Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity
 * provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you
 * have access to manage group membership in your IdP, you can manage GitHub team membership through your identity
 * provider, which automatically adds and removes team members in an organization. For more information, see
 * "[Synchronizing teams between your identity provider and
 * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * **Note:**
 * You can also specify a team by `org_id` and `team_id` using the route `DELETE
 * /organizations/{org_id}/team/{team_id}/memberships/{username}`.
 * Learn more at {@link https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user}
 * Tags: teams
 */
export async function teamsRemoveMembershipForUserInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/memberships/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List team projects
 * Lists the organization projects for a team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the
 * route `GET /organizations/{org_id}/team/{team_id}/projects`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-team-projects}
 * Tags: teams
 */
export async function teamsListProjectsInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<TeamProject[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/projects',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check team permissions for a project
 * Checks whether a team has `read`, `write`, or `admin` permissions for an organization project. The response includes
 * projects inherited from a parent team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route
 * `GET /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project}
 * Tags: teams
 */
export async function teamsCheckPermissionsForProjectInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    project_id: number;
  },
  opts?: FetcherData,
): Promise<TeamProject> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add or update team project permissions
 * Adds an organization project to a team. To add a project to a team or update the team's permission on a project, the
 * authenticated user must have `admin` permissions for the project. The project and team must be part of the same
 * organization.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `PUT
 * /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions}
 * Tags: teams
 */
export async function teamsAddOrUpdateProjectPermissionsInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    project_id: number;
  },
  body: {
    /**
     * The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     */
    permission?: 'read' | 'write' | 'admin';
  } | null,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a project from a team
 * Removes an organization project from a team. An organization owner or a team maintainer can remove any project from the
 * team. To remove a project from a team as an organization member, the authenticated user must have `read` access to both
 * the team and project, or `admin` access to the team or project. This endpoint removes the project from the team, but
 * does not delete the project.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
 * /organizations/{org_id}/team/{team_id}/projects/{project_id}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team}
 * Tags: teams
 */
export async function teamsRemoveProjectInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    project_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/projects/{project_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List team repositories
 * Lists a team's repositories visible to the authenticated user.
 *
 * **Note:** You can also specify a team by `org_id` and
 * `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/repos`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-team-repositories}
 * Tags: teams
 */
export async function teamsListReposInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/repos',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * Check team permissions for a repository
 * Checks whether a team has `admin`, `push`, `maintain`, `triage`, or `pull` permission for a repository. Repositories
 * inherited through a parent team will also be checked.
 *
 * You can also get information about the specified repository,
 * including what permissions the team grants on it, by passing the following custom [media
 * type](https://docs.github.com/rest/overview/media-types/) via the `application/vnd.github.v3.repository+json` accept
 * header.
 *
 * If a team doesn't have permission for the repository, you will receive a `404 Not Found` response status.
 *
 * If
 * the repository is private, you must have at least `read` permission for that repository, and your token must have the
 * `repo` or `admin:org` scope. Otherwise, you will receive a `404 Not Found` response status.
 *
 * **Note:** You can also
 * specify a team by `org_id` and `team_id` using the route `GET
 * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository}
 * Tags: teams
 */
export async function teamsCheckPermissionsForRepoInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<TeamRepository | any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamRepository]]] } },
  });
}
/**
 * Add or update team repository permissions
 * To add a repository to a team or update the team's permission on a repository, the authenticated user must have admin
 * access to the repository, and must be able to see the team. The repository must be owned by the organization, or a
 * direct fork of a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt
 * to add a repository to a team that is not owned by the organization. Note that, if you choose not to pass any
 * parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see
 * "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 *
 * **Note:** You can
 * also specify a team by `org_id` and `team_id` using the route `PUT
 * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 *
 * For more information about the permission levels, see
 * "[Repository permission levels for an
 * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 * Learn more at {@link https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions}
 * Tags: teams
 */
export async function teamsAddOrUpdateRepoPermissionsInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The permission to grant the team on this repository. We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
     * @defaultValue "push"
     */
    permission?: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a repository from a team
 * If the authenticated user is an organization owner or a team maintainer, they can remove any repositories from the team.
 * To remove a repository from a team as an organization member, the authenticated user must have admin access to the
 * repository and must be able to see the team. This does not delete the repository, it just removes it from the
 * team.
 *
 * **Note:** You can also specify a team by `org_id` and `team_id` using the route `DELETE
 * /organizations/{org_id}/team/{team_id}/repos/{owner}/{repo}`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team}
 * Tags: teams
 */
export async function teamsRemoveRepoInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List child teams
 * Lists the child teams of the team specified by `{team_slug}`.
 *
 * **Note:** You can also specify a team by `org_id` and
 * `team_id` using the route `GET /organizations/{org_id}/team/{team_id}/teams`.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-child-teams}
 * Tags: teams
 */
export async function teamsListChildInOrg<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    team_slug: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/teams/{team_slug}/teams',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Enable or disable a security feature for an organization
 * Enables or disables the specified security feature for all eligible repositories in an organization. For more
 * information, see "[Managing security managers in your
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 *
 * The
 * authenticated user must be an organization owner or be member of a team with the security manager role to use this
 * endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:org` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#enable-or-disable-a-security-feature-for-an-organization}
 * Tags: orgs
 */
export async function orgsEnableOrDisableSecurityProductOnAllOrgRepos<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
    security_product:
      | 'dependency_graph'
      | 'dependabot_alerts'
      | 'dependabot_security_updates'
      | 'advanced_security'
      | 'code_scanning_default_setup'
      | 'secret_scanning'
      | 'secret_scanning_push_protection';
    enablement: 'enable_all' | 'disable_all';
  },
  body: any,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/orgs/{org}/{security_product}/{enablement}',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a project card
 * Gets information about a project card.
 * Learn more at {@link https://docs.github.com/rest/projects/cards#get-a-project-card}
 * Tags: projects
 */
export async function projectsGetCard<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card_id: number;
  },
  opts?: FetcherData,
): Promise<ProjectCard | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/cards/{card_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ProjectCard]]] } },
  });
}
/**
 * Update an existing project card
 * Learn more at {@link https://docs.github.com/rest/projects/cards#update-an-existing-project-card}
 * Tags: projects
 */
export async function projectsUpdateCard<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card_id: number;
  },
  body: {
    /**
     * The project card's note
     * @example "Update all gems"
     */
    note?: string | null;
    /**
     * Whether or not the card is archived
     */
    archived?: boolean;
  },
  opts?: FetcherData,
): Promise<ProjectCard | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/cards/{card_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ProjectCard]]] } },
  });
}
/**
 * Delete a project card
 * Deletes a project card
 * Learn more at {@link https://docs.github.com/rest/projects/cards#delete-a-project-card}
 * Tags: projects
 */
export async function projectsDeleteCard<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/cards/{card_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Move a project card
 * Learn more at {@link https://docs.github.com/rest/projects/cards#move-a-project-card}
 * Tags: projects
 */
export async function projectsMoveCard<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    card_id: number;
  },
  body: {
    /**
     * The position of the card in a column. Can be one of: `top`, `bottom`, or `after:<card_id>` to place after the specified card.
     * @example "bottom"
     */
    position: string;
    /**
     * The unique identifier of the column the card should be moved to
     * @example 42
     */
    column_id?: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/cards/{card_id}/moves',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a project column
 * Gets information about a project column.
 * Learn more at {@link https://docs.github.com/rest/projects/columns#get-a-project-column}
 * Tags: projects
 */
export async function projectsGetColumn<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    column_id: number;
  },
  opts?: FetcherData,
): Promise<ProjectColumn | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/{column_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ProjectColumn]]] } },
  });
}
/**
 * Update an existing project column
 * Learn more at {@link https://docs.github.com/rest/projects/columns#update-an-existing-project-column}
 * Tags: projects
 */
export async function projectsUpdateColumn<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    column_id: number;
  },
  body: {
    /**
     * Name of the project column
     * @example "Remaining tasks"
     */
    name: string;
  },
  opts?: FetcherData,
): Promise<ProjectColumn | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/{column_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ProjectColumn]]] } },
  });
}
/**
 * Delete a project column
 * Deletes a project column.
 * Learn more at {@link https://docs.github.com/rest/projects/columns#delete-a-project-column}
 * Tags: projects
 */
export async function projectsDeleteColumn<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    column_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/{column_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List project cards
 * Lists the project cards in a project.
 * Learn more at {@link https://docs.github.com/rest/projects/cards#list-project-cards}
 * Tags: projects
 */
export async function projectsListCards<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    column_id: number;
    archived_state?: 'all' | 'archived' | 'not_archived';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<ProjectCard[] | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/{column_id}/cards',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['archived_state', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_ProjectCard]]] } },
  });
}
/**
 * Create a project card
 * Learn more at {@link https://docs.github.com/rest/projects/cards#create-a-project-card}
 * Tags: projects
 */
export async function projectsCreateCard<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    column_id: number;
  },
  body:
    | {
        /**
         * The project card's note
         * @example "Update all gems"
         */
        note: string | null;
      }
    | {
        /**
         * The unique identifier of the content associated with the card
         * @example 42
         */
        content_id: number;
        /**
         * The piece of content associated with the card
         * @example "PullRequest"
         */
        content_type: string;
      },
  opts?: FetcherData,
): Promise<ProjectCard | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/{column_id}/cards',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_ProjectCard]]] } },
  });
}
/**
 * Move a project column
 * Learn more at {@link https://docs.github.com/rest/projects/columns#move-a-project-column}
 * Tags: projects
 */
export async function projectsMoveColumn<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    column_id: number;
  },
  body: {
    /**
     * The position of the column in a project. Can be one of: `first`, `last`, or `after:<column_id>` to place after the specified column.
     * @example "last"
     */
    position: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/projects/columns/{column_id}/moves',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a project
 * Gets a project by its `id`. Returns a `404 Not Found` status if projects are disabled. If you do not have sufficient
 * privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#get-a-project}
 * Tags: projects
 */
export async function projectsGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
  },
  opts?: FetcherData,
): Promise<Project | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Project]]] } },
  });
}
/**
 * Update a project
 * Updates a project board's information. Returns a `404 Not Found` status if projects are disabled. If you do not have
 * sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#update-a-project}
 * Tags: projects
 */
export async function projectsUpdate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
  },
  body: {
    /**
     * Name of the project
     * @example "Week One Sprint"
     */
    name?: string;
    /**
     * Body of the project
     * @example "This project represents the sprint of the first week in January"
     */
    body?: string | null;
    /**
     * State of the project; either 'open' or 'closed'
     * @example "open"
     */
    state?: string;
    /**
     * The baseline permission that all organization members have on this project
     */
    organization_permission?: 'read' | 'write' | 'admin' | 'none';
    /**
     * Whether or not this project can be seen by everyone.
     */
    private?: boolean;
  },
  opts?: FetcherData,
): Promise<Project | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Project]]] } },
  });
}
/**
 * Delete a project
 * Deletes a project board. Returns a `404 Not Found` status if projects are disabled.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#delete-a-project}
 * Tags: projects
 */
export async function projectsDelete<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List project collaborators
 * Lists the collaborators for an organization project. For a project, the list of collaborators includes outside
 * collaborators, organization members that are direct collaborators, organization members with access through team
 * memberships, organization members with access through default organization permissions, and organization owners. You
 * must be an organization owner or a project `admin` to list collaborators.
 * Learn more at {@link https://docs.github.com/rest/projects/collaborators#list-project-collaborators}
 * Tags: projects
 */
export async function projectsListCollaborators<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
    affiliation?: 'outside' | 'direct' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[] | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}/collaborators',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['affiliation', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add project collaborator
 * Adds a collaborator to an organization project and sets their permission level. You must be an organization owner or a
 * project `admin` to add a collaborator.
 * Learn more at {@link https://docs.github.com/rest/projects/collaborators#add-project-collaborator}
 * Tags: projects
 */
export async function projectsAddCollaborator<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
    username: string;
  },
  body: {
    /**
     * The permission to grant the collaborator.
     * @example "write"
     * @defaultValue "write"
     */
    permission?: 'read' | 'write' | 'admin';
  } | null,
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}/collaborators/{username}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove user as a collaborator
 * Removes a collaborator from an organization project. You must be an organization owner or a project `admin` to remove a
 * collaborator.
 * Learn more at {@link https://docs.github.com/rest/projects/collaborators#remove-user-as-a-collaborator}
 * Tags: projects
 */
export async function projectsRemoveCollaborator<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}/collaborators/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get project permission for a user
 * Returns the collaborator's permission level for an organization project. Possible values for the `permission` key:
 * `admin`, `write`, `read`, `none`. You must be an organization owner or a project `admin` to review a user's permission
 * level.
 * Learn more at {@link https://docs.github.com/rest/projects/collaborators#get-project-permission-for-a-user}
 * Tags: projects
 */
export async function projectsGetPermissionForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<ProjectCollaboratorPermission | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}/collaborators/{username}/permission',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List project columns
 * Lists the project columns in a project.
 * Learn more at {@link https://docs.github.com/rest/projects/columns#list-project-columns}
 * Tags: projects
 */
export async function projectsListColumns<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<ProjectColumn[] | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}/columns',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_ProjectColumn]]] } },
  });
}
/**
 * Create a project column
 * Creates a new project column.
 * Learn more at {@link https://docs.github.com/rest/projects/columns#create-a-project-column}
 * Tags: projects
 */
export async function projectsCreateColumn<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    project_id: number;
  },
  body: {
    /**
     * Name of the project column
     * @example "Remaining tasks"
     */
    name: string;
  },
  opts?: FetcherData,
): Promise<ProjectColumn | any> {
  const req = await ctx.createRequest({
    path: '/projects/{project_id}/columns',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_ProjectColumn]]] } },
  });
}
/**
 * Get rate limit status for the authenticated user
 * **Note:** Accessing this endpoint does not count against your REST API rate limit.
 *
 * Some categories of endpoints have
 * custom rate limits that are separate from the rate limit governing the other REST API endpoints. For this reason, the
 * API response categorizes your rate limit. Under `resources`, you'll see objects relating to different categories:
 * * The
 * `core` object provides your rate limit status for all non-search-related resources in the REST API.
 * * The `search`
 * object provides your rate limit status for the REST API for searching (excluding code searches). For more information,
 * see "[Search](https://docs.github.com/rest/search/search)."
 * * The `code_search` object provides your rate limit status
 * for the REST API for searching code. For more information, see "[Search
 * code](https://docs.github.com/rest/search/search#search-code)."
 * * The `graphql` object provides your rate limit status
 * for the GraphQL API. For more information, see "[Resource
 * limitations](https://docs.github.com/graphql/overview/resource-limitations#rate-limit)."
 * * The `integration_manifest`
 * object provides your rate limit status for the `POST /app-manifests/{code}/conversions` operation. For more information,
 * see "[Creating a GitHub App from a
 * manifest](https://docs.github.com/apps/creating-github-apps/setting-up-a-github-app/creating-a-github-app-from-a-manifest#3-you-exchange-the-temporary-code-to-retrieve-the-app-configuration)."
 * *
 * The `dependency_snapshots` object provides your rate limit status for submitting snapshots to the dependency graph. For
 * more information, see "[Dependency graph](https://docs.github.com/rest/dependency-graph)."
 * * The `code_scanning_upload`
 * object provides your rate limit status for uploading SARIF results to code scanning. For more information, see
 * "[Uploading a SARIF file to
 * GitHub](https://docs.github.com/code-security/code-scanning/integrating-with-code-scanning/uploading-a-sarif-file-to-github)."
 * *
 * The `actions_runner_registration` object provides your rate limit status for registering self-hosted runners in GitHub
 * Actions. For more information, see "[Self-hosted runners](https://docs.github.com/rest/actions/self-hosted-runners)."
 * *
 * The `source_import` object is no longer in use for any API endpoints, and it will be removed in the next API version.
 * For more information about API versions, see "[API
 * Versions](https://docs.github.com/rest/overview/api-versions)."
 *
 * **Note:** The `rate` object is deprecated. If you're
 * writing new API client code or updating existing code, you should use the `core` object instead of the `rate` object.
 * The `core` object contains the same information that is present in the `rate` object.
 * Learn more at {@link https://docs.github.com/rest/rate-limit/rate-limit#get-rate-limit-status-for-the-authenticated-user}
 * Tags: rate-limit
 */
export async function rateLimitGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<RateLimitOverview | any> {
  const req = await ctx.createRequest({
    path: '/rate_limit',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository
 * The `parent` and `source` objects are present when the repository is a fork. `parent` is the repository this repository
 * was forked from, `source` is the ultimate source for the network.
 *
 * **Note:** In order to see the `security_and_analysis`
 * block for a repository you must have admin permissions for the repository or be an owner or security manager for the
 * organization that owns the repository. For more information, see "[Managing security managers in your
 * organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
 * Learn more at {@link https://docs.github.com/rest/repos/repos#get-a-repository}
 * Tags: repos
 */
export async function reposGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<FullRepository | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_FullRepository]]] } },
  });
}
/**
 * Update a repository
 * **Note**: To edit a repository's topics, use the [Replace all repository
 * topics](https://docs.github.com/rest/repos/repos#replace-all-repository-topics) endpoint.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#update-a-repository}
 * Tags: repos
 */
export async function reposUpdate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the repository.
     */
    name?: string;
    /**
     * A short description of the repository.
     */
    description?: string;
    /**
     * A URL with more information about the repository.
     */
    homepage?: string;
    /**
     * Either `true` to make the repository private or `false` to make it public. Default: `false`.
     * **Note**: You will get a `422` error if the organization restricts [changing repository visibility](https://docs.github.com/articles/repository-permission-levels-for-an-organization#changing-the-visibility-of-repositories) to organization owners and a non-owner tries to change the value of private.
     */
    private?: boolean;
    /**
     * The visibility of the repository.
     */
    visibility?: 'public' | 'private';
    /**
     * Specify which security and analysis features to enable or disable for the repository.
     *
     * To use this parameter, you must have admin permissions for the repository or be an owner or security manager for the organization that owns the repository. For more information, see "[Managing security managers in your organization](https://docs.github.com/organizations/managing-peoples-access-to-your-organization-with-roles/managing-security-managers-in-your-organization)."
     *
     * For example, to enable GitHub Advanced Security, use this data in the body of the `PATCH` request:
     * `{ "security_and_analysis": {"advanced_security": { "status": "enabled" } } }`.
     *
     * You can check which security and analysis features are currently enabled by using a `GET /repos/{owner}/{repo}` request.
     */
    security_and_analysis?: {
      /**
       * Use the `status` property to enable or disable GitHub Advanced Security for this repository. For more information, see "[About GitHub Advanced Security](/github/getting-started-with-github/learning-about-github/about-github-advanced-security)."
       */
      advanced_security?: {
        /**
         * Can be `enabled` or `disabled`.
         */
        status?: string;
      };
      /**
       * Use the `status` property to enable or disable secret scanning for this repository. For more information, see "[About secret scanning](/code-security/secret-security/about-secret-scanning)."
       */
      secret_scanning?: {
        /**
         * Can be `enabled` or `disabled`.
         */
        status?: string;
      };
      /**
       * Use the `status` property to enable or disable secret scanning push protection for this repository. For more information, see "[Protecting pushes with secret scanning](/code-security/secret-scanning/protecting-pushes-with-secret-scanning)."
       */
      secret_scanning_push_protection?: {
        /**
         * Can be `enabled` or `disabled`.
         */
        status?: string;
      };
    } | null;
    /**
     * Either `true` to enable issues for this repository or `false` to disable them.
     * @defaultValue true
     */
    has_issues?: boolean;
    /**
     * Either `true` to enable projects for this repository or `false` to disable them. **Note:** If you're creating a repository in an organization that has disabled repository projects, the default is `false`, and if you pass `true`, the API returns an error.
     * @defaultValue true
     */
    has_projects?: boolean;
    /**
     * Either `true` to enable the wiki for this repository or `false` to disable it.
     * @defaultValue true
     */
    has_wiki?: boolean;
    /**
     * Either `true` to make this repo available as a template repository or `false` to prevent it.
     */
    is_template?: boolean;
    /**
     * Updates the default branch for this repository.
     */
    default_branch?: string;
    /**
     * Either `true` to allow squash-merging pull requests, or `false` to prevent squash-merging.
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    /**
     * Either `true` to allow merging pull requests with a merge commit, or `false` to prevent merging pull requests with merge commits.
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Either `true` to allow rebase-merging pull requests, or `false` to prevent rebase-merging.
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Either `true` to allow auto-merge on pull requests, or `false` to disallow auto-merge.
     */
    allow_auto_merge?: boolean;
    /**
     * Either `true` to allow automatically deleting head branches when pull requests are merged, or `false` to prevent automatic deletion.
     */
    delete_branch_on_merge?: boolean;
    /**
     * Either `true` to always allow a pull request head branch that is behind its base branch to be updated even if it is not required to be up to date before merging, or false otherwise.
     */
    allow_update_branch?: boolean;
    /**
     * Either `true` to allow squash-merge commits to use pull request title, or `false` to use commit message. **This property has been deprecated. Please use `squash_merge_commit_title` instead.
     * @deprecated
     */
    use_squash_pr_title_as_default?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * Whether to archive this repository. `false` will unarchive a previously archived repository.
     */
    archived?: boolean;
    /**
     * Either `true` to allow private forks, or `false` to prevent private forks.
     */
    allow_forking?: boolean;
    /**
     * Either `true` to require contributors to sign off on web-based commits, or `false` to not require contributors to sign off on web-based commits.
     */
    web_commit_signoff_required?: boolean;
  },
  opts?: FetcherData,
): Promise<FullRepository | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_FullRepository]]] } },
  });
}
/**
 * Delete a repository
 * Deleting a repository requires admin access.
 *
 * If an organization owner has configured the organization to prevent
 * members from deleting organization-owned
 * repositories, you will get a `403 Forbidden` response.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `delete_repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#delete-a-repository}
 * Tags: repos
 */
export async function reposDelete<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List artifacts for a repository
 * Lists all artifacts for a repository.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/artifacts#list-artifacts-for-a-repository}
 * Tags: actions
 */
export async function actionsListArtifactsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
    name?: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  artifacts: Artifact[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/artifacts',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'name'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'artifacts'], ['loop'], ['ref', $date_Artifact]]],
      },
    },
  });
}
/**
 * Get an artifact
 * Gets a specific artifact for a workflow run.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * If the
 * repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/artifacts#get-an-artifact}
 * Tags: actions
 */
export async function actionsGetArtifact<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    artifact_id: number;
  },
  opts?: FetcherData,
): Promise<Artifact> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Artifact]]] } },
  });
}
/**
 * Delete an artifact
 * Deletes an artifact for a workflow run.
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/artifacts#delete-an-artifact}
 * Tags: actions
 */
export async function actionsDeleteArtifact<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    artifact_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Download an artifact
 * Gets a redirect URL to download an archive for a repository. This URL expires after 1 minute. Look for `Location:`
 * in
 * the response header to find the URL for the download. The `:archive_format` must be `zip`.
 *
 * OAuth tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/artifacts#download-an-artifact}
 * Tags: actions
 */
export async function actionsDownloadArtifact<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    artifact_id: number;
    archive_format: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/artifacts/{artifact_id}/{archive_format}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get GitHub Actions cache usage for a repository
 * Gets GitHub Actions cache usage for a repository.
 * The data fetched using this API is refreshed approximately every 5
 * minutes, so values returned from this endpoint may take at least 5 minutes to get updated.
 *
 * Anyone with read access to
 * the repository can use this endpoint.
 *
 * If the repository is private, OAuth tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/cache#get-github-actions-cache-usage-for-a-repository}
 * Tags: actions
 */
export async function actionsGetActionsCacheUsage<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ActionsCacheUsageByRepository> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/cache/usage',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List GitHub Actions caches for a repository
 * Lists the GitHub Actions caches for a repository.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/cache#list-github-actions-caches-for-a-repository}
 * Tags: actions
 */
export async function actionsGetActionsCacheList<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
    ref?: string;
    key?: string;
    sort?: 'created_at' | 'last_accessed_at' | 'size_in_bytes';
    direction?: 'asc' | 'desc';
  },
  opts?: FetcherData,
): Promise<ActionsCacheList> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/caches',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'ref', 'key', 'sort', 'direction'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ActionsCacheList]]] } },
  });
}
/**
 * Delete GitHub Actions caches for a repository (using a cache key)
 * Deletes one or more GitHub Actions caches for a repository, using a complete cache key. By default, all caches that
 * match the provided key are deleted, but you can optionally provide a Git ref to restrict deletions to caches that match
 * both the provided key and the Git ref.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/cache#delete-github-actions-caches-for-a-repository-using-a-cache-key}
 * Tags: actions
 */
export async function actionsDeleteActionsCacheByKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    key: string;
    ref?: string;
  },
  opts?: FetcherData,
): Promise<ActionsCacheList> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/caches',
    params,
    method: r.HttpMethod.DELETE,
    queryParams: ['key', 'ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ActionsCacheList]]] } },
  });
}
/**
 * Delete a GitHub Actions cache for a repository (using a cache ID)
 * Deletes a GitHub Actions cache for a repository, using a cache ID.
 *
 * OAuth tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/cache#delete-a-github-actions-cache-for-a-repository-using-a-cache-id}
 * Tags: actions
 */
export async function actionsDeleteActionsCacheById<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    cache_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/caches/{cache_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a job for a workflow run
 * Gets a specific job in a workflow run.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * If the
 * repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-jobs#get-a-job-for-a-workflow-run}
 * Tags: actions
 */
export async function actionsGetJobForWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    job_id: number;
  },
  opts?: FetcherData,
): Promise<Job> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/jobs/{job_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Job]]] } },
  });
}
/**
 * Download job logs for a workflow run
 * Gets a redirect URL to download a plain text file of logs for a workflow job. This link expires after 1 minute. Look
 * for
 * `Location:` in the response header to find the URL for the download.
 *
 * Anyone with read access to the repository can use
 * this endpoint.
 *
 * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to
 * use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-jobs#download-job-logs-for-a-workflow-run}
 * Tags: actions
 */
export async function actionsDownloadJobLogsForWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    job_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/jobs/{job_id}/logs',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Re-run a job from a workflow run
 * Re-run a job and its dependent jobs in a workflow run.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run}
 * Tags: actions
 */
export async function actionsReRunJobForWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    job_id: number;
  },
  body: {
    /**
     * Whether to enable debug logging for the re-run.
     */
    enable_debug_logging?: boolean;
  } | null,
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/jobs/{job_id}/rerun',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the customization template for an OIDC subject claim for a repository
 * Gets the customization template for an OpenID Connect (OIDC) subject claim.
 *
 * OAuth tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/oidc#get-the-customization-template-for-an-oidc-subject-claim-for-a-repository}
 * Tags: actions
 */
export async function actionsGetCustomOidcSubClaimForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<OidcCustomSubRepo> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/oidc/customization/sub',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set the customization template for an OIDC subject claim for a repository
 * Sets the customization template and `opt-in` or `opt-out` flag for an OpenID Connect (OIDC) subject claim for a
 * repository.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/oidc#set-the-customization-template-for-an-oidc-subject-claim-for-a-repository}
 * Tags: actions
 */
export async function actionsSetCustomOidcSubClaimForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Whether to use the default template or not. If `true`, the `include_claim_keys` field is ignored.
     */
    use_default: boolean;
    /**
     * Array of unique strings. Each claim key can only contain alphanumeric characters and underscores.
     */
    include_claim_keys?: string[];
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/oidc/customization/sub',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository organization secrets
 * Lists all organization secrets shared with a repository without revealing their encrypted
 * values.
 *
 * Authenticated users
 * must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#list-repository-organization-secrets}
 * Tags: actions
 */
export async function actionsListRepoOrganizationSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: ActionsSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/organization-secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'secrets'], ['loop'], ['ref', $date_ActionsSecret]]],
      },
    },
  });
}
/**
 * List repository organization variables
 * Lists all organization variables shared with a repository.
 *
 * Authenticated users must have collaborator access to a
 * repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#list-repository-organization-variables}
 * Tags: actions
 */
export async function actionsListRepoOrganizationVariables<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  variables: ActionsVariable[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/organization-variables',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'variables'], ['loop'], ['ref', $date_ActionsVariable]],
        ],
      },
    },
  });
}
/**
 * Get GitHub Actions permissions for a repository
 * Gets the GitHub Actions permissions policy for a repository, including whether GitHub Actions is enabled and the actions
 * and reusable workflows allowed to run in the repository.
 *
 * OAuth tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#get-github-actions-permissions-for-a-repository}
 * Tags: actions
 */
export async function actionsGetGithubActionsPermissionsRepository<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ActionsRepositoryPermissions> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set GitHub Actions permissions for a repository
 * Sets the GitHub Actions permissions policy for enabling GitHub Actions and allowed actions and reusable workflows in the
 * repository.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-github-actions-permissions-for-a-repository}
 * Tags: actions
 */
export async function actionsSetGithubActionsPermissionsRepository<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    enabled: ActionsEnabled;
    allowed_actions?: AllowedActions;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the level of access for workflows outside of the repository
 * Gets the level of access that workflows outside of the repository have to actions and reusable workflows in the
 * repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to
 * components in a private
 * repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#get-the-level-of-access-for-workflows-outside-of-the-repository}
 * Tags: actions
 */
export async function actionsGetWorkflowAccessToRepository<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ActionsWorkflowAccessToRepository> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions/access',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set the level of access for workflows outside of the repository
 * Sets the level of access that workflows outside of the repository have to actions and reusable workflows in the
 * repository.
 * This endpoint only applies to private repositories.
 * For more information, see "[Allowing access to
 * components in a private
 * repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#allowing-access-to-components-in-a-private-repository)".
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-the-level-of-access-for-workflows-outside-of-the-repository}
 * Tags: actions
 */
export async function actionsSetWorkflowAccessToRepository<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: ActionsWorkflowAccessToRepository,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions/access',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get allowed actions and reusable workflows for a repository
 * Gets the settings for selected actions and reusable workflows that are allowed in a repository. To use this endpoint,
 * the repository policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub
 * Actions permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * OAuth tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#get-allowed-actions-and-reusable-workflows-for-a-repository}
 * Tags: actions
 */
export async function actionsGetAllowedActionsRepository<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<SelectedActions> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions/selected-actions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set allowed actions and reusable workflows for a repository
 * Sets the actions and reusable workflows that are allowed in a repository. To use this endpoint, the repository
 * permission policy for `allowed_actions` must be configured to `selected`. For more information, see "[Set GitHub Actions
 * permissions for a repository](#set-github-actions-permissions-for-a-repository)."
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-allowed-actions-and-reusable-workflows-for-a-repository}
 * Tags: actions
 */
export async function actionsSetAllowedActionsRepository<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: SelectedActions,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions/selected-actions',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get default workflow permissions for a repository
 * Gets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository,
 * as well as
 * if GitHub Actions can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the
 * GITHUB_TOKEN for your
 * repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * OAuth
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#get-default-workflow-permissions-for-a-repository}
 * Tags: actions
 */
export async function actionsGetGithubActionsDefaultWorkflowPermissionsRepository<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ActionsGetDefaultWorkflowPermissions> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions/workflow',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set default workflow permissions for a repository
 * Sets the default workflow permissions granted to the `GITHUB_TOKEN` when running workflows in a repository, and sets if
 * GitHub Actions
 * can submit approving pull request reviews.
 * For more information, see "[Setting the permissions of the
 * GITHUB_TOKEN for your
 * repository](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-github-actions-settings-for-a-repository#setting-the-permissions-of-the-github_token-for-your-repository)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/permissions#set-default-workflow-permissions-for-a-repository}
 * Tags: actions
 */
export async function actionsSetGithubActionsDefaultWorkflowPermissionsRepository<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: ActionsSetDefaultWorkflowPermissions,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/permissions/workflow',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List self-hosted runners for a repository
 * Lists all self-hosted runners configured in a repository.
 *
 * Authenticated users must have admin access to the repository
 * to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#list-self-hosted-runners-for-a-repository}
 * Tags: actions
 */
export async function actionsListSelfHostedRunnersForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    name?: string;
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  runners: Runner[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['name', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List runner applications for a repository
 * Lists binaries for the runner application that you can download and run.
 *
 * Authenticated users must have admin access to
 * the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#list-runner-applications-for-a-repository}
 * Tags: actions
 */
export async function actionsListRunnerApplicationsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<RunnerApplication[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/downloads',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create configuration for a just-in-time runner for a repository
 * Generates a configuration that can be passed to the runner application at startup.
 *
 * The authenticated user must have
 * admin access to the repository.
 *
 * OAuth tokens and personal access tokens (classic) need the`repo` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#create-configuration-for-a-just-in-time-runner-for-a-repository}
 * Tags: actions
 */
export async function actionsGenerateRunnerJitconfigForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the new runner.
     */
    name: string;
    /**
     * The ID of the runner group to register the runner to.
     */
    runner_group_id: number;
    /**
     * The names of the custom labels to add to the runner. **Minimum items**: 1. **Maximum items**: 100.
     */
    labels: string[];
    /**
     * The working directory to be used for job execution, relative to the runner install directory.
     * @defaultValue "_work"
     */
    work_folder?: string;
  },
  opts?: FetcherData,
): Promise<{
  runner: Runner;
  /**
   * The base64 encoded runner configuration.
   */
  encoded_jit_config: string;
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/generate-jitconfig',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a registration token for a repository
 * Returns a token that you can pass to the `config` script. The token expires after one hour.
 *
 * For example, you can
 * replace `TOKEN` in the following example with the registration token provided by this endpoint to configure your
 * self-hosted runner:
 *
 * ```
 * ./config.sh --url https://github.com/octo-org --token TOKEN
 * ```
 *
 * Authenticated users must have
 * admin access to the repository to use this endpoint.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#create-a-registration-token-for-a-repository}
 * Tags: actions
 */
export async function actionsCreateRegistrationTokenForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<AuthenticationToken> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/registration-token',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_AuthenticationToken]]] } },
  });
}
/**
 * Create a remove token for a repository
 * Returns a token that you can pass to the `config` script to remove a self-hosted runner from an repository. The token
 * expires after one hour.
 *
 * For example, you can replace `TOKEN` in the following example with the registration token
 * provided by this endpoint to remove your self-hosted runner from an organization:
 *
 * ```
 * ./config.sh remove --token
 * TOKEN
 * ```
 *
 * Authenticated users must have admin access to the repository to use this endpoint.
 *
 * OAuth tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#create-a-remove-token-for-a-repository}
 * Tags: actions
 */
export async function actionsCreateRemoveTokenForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<AuthenticationToken> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/remove-token',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_AuthenticationToken]]] } },
  });
}
/**
 * Get a self-hosted runner for a repository
 * Gets a specific self-hosted runner configured in a repository.
 *
 * Authenticated users must have admin access to the
 * repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#get-a-self-hosted-runner-for-a-repository}
 * Tags: actions
 */
export async function actionsGetSelfHostedRunnerForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<Runner> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/{runner_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a self-hosted runner from a repository
 * Forces the removal of a self-hosted runner from a repository. You can use this endpoint to completely remove the runner
 * when the machine you were using no longer exists.
 *
 * Authenticated users must have admin access to the repository to use
 * this endpoint.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#delete-a-self-hosted-runner-from-a-repository}
 * Tags: actions
 */
export async function actionsDeleteSelfHostedRunnerFromRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/{runner_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List labels for a self-hosted runner for a repository
 * Lists all labels for a self-hosted runner configured in a repository.
 *
 * Authenticated users must have admin access to the
 * repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#list-labels-for-a-self-hosted-runner-for-a-repository}
 * Tags: actions
 */
export async function actionsListLabelsForSelfHostedRunnerForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add custom labels to a self-hosted runner for a repository
 * Adds custom labels to a self-hosted runner configured in a repository.
 *
 * Authenticated users must have admin access to
 * the organization to use this endpoint.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#add-custom-labels-to-a-self-hosted-runner-for-a-repository}
 * Tags: actions
 */
export async function actionsAddCustomLabelsToSelfHostedRunnerForRepo<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    runner_id: number;
  },
  body: {
    /**
     * The names of the custom labels to add to the runner.
     */
    labels: string[];
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set custom labels for a self-hosted runner for a repository
 * Remove all previous custom labels and set the new custom labels for a specific
 * self-hosted runner configured in a
 * repository.
 *
 * Authenticated users must have admin access to the repository to use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#set-custom-labels-for-a-self-hosted-runner-for-a-repository}
 * Tags: actions
 */
export async function actionsSetCustomLabelsForSelfHostedRunnerForRepo<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    runner_id: number;
  },
  body: {
    /**
     * The names of the custom labels to set for the runner. You can pass an empty array to remove all custom labels.
     */
    labels: string[];
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove all custom labels from a self-hosted runner for a repository
 * Remove all custom labels from a self-hosted runner configured in a
 * repository. Returns the remaining read-only labels
 * from the runner.
 *
 * Authenticated users must have admin access to the repository to use this endpoint.
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#remove-all-custom-labels-from-a-self-hosted-runner-for-a-repository}
 * Tags: actions
 */
export async function actionsRemoveAllCustomLabelsFromSelfHostedRunnerForRepo<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    runner_id: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a custom label from a self-hosted runner for a repository
 * Remove a custom label from a self-hosted runner configured
 * in a repository. Returns the remaining labels from the
 * runner.
 *
 * This endpoint returns a `404 Not Found` status if the custom label is not
 * present on the runner.
 *
 * Authenticated
 * users must have admin access to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/self-hosted-runners#remove-a-custom-label-from-a-self-hosted-runner-for-a-repository}
 * Tags: actions
 */
export async function actionsRemoveCustomLabelFromSelfHostedRunnerForRepo<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    runner_id: number;
    name: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  labels: RunnerLabel[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runners/{runner_id}/labels/{name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List workflow runs for a repository
 * Lists all workflow runs for a repository. You can use parameters to narrow the list of results. For more information
 * about using parameters, see
 * [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
 *
 * Anyone with read access
 * to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to
 * use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-repository}
 * Tags: actions
 */
export async function actionsListWorkflowRunsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    actor?: string;
    branch?: string;
    event?: string;
    status?:
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting'
      | 'pending';
    per_page?: number;
    page?: number;
    created?: Date;
    exclude_pull_requests?: boolean;
    check_suite_id?: number;
    head_sha?: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  workflow_runs: WorkflowRun[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'actor',
      'branch',
      'event',
      'status',
      'per_page',
      'page',
      'created',
      'exclude_pull_requests',
      'check_suite_id',
      'head_sha',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'workflow_runs'], ['loop'], ['ref', $date_WorkflowRun]],
        ],
      },
    },
  });
}
/**
 * Get a workflow run
 * Gets a specific workflow run.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run}
 * Tags: actions
 */
export async function actionsGetWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
    exclude_pull_requests?: boolean;
  },
  opts?: FetcherData,
): Promise<WorkflowRun> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['exclude_pull_requests'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_WorkflowRun]]] } },
  });
}
/**
 * Delete a workflow run
 * Deletes a specific workflow run.
 *
 * Anyone with write access to the repository can use this endpoint.
 *
 * If the repository
 * is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#delete-a-workflow-run}
 * Tags: actions
 */
export async function actionsDeleteWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the review history for a workflow run
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#get-the-review-history-for-a-workflow-run}
 * Tags: actions
 */
export async function actionsGetReviewsForRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<EnvironmentApprovals[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/approvals',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_EnvironmentApprovals]]] },
    },
  });
}
/**
 * Approve a workflow run for a fork pull request
 * Approves a workflow run for a pull request from a public fork of a first time contributor. For more information, see
 * ["Approving workflow runs from public
 * forks](https://docs.github.com/actions/managing-workflow-runs/approving-workflow-runs-from-public-forks)."
 *
 * OAuth tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#approve-a-workflow-run-for-a-fork-pull-request}
 * Tags: actions
 */
export async function actionsApproveWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/approve',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List workflow run artifacts
 * Lists artifacts for a workflow run.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/artifacts#list-workflow-run-artifacts}
 * Tags: actions
 */
export async function actionsListWorkflowRunArtifacts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
    per_page?: number;
    page?: number;
    name?: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  artifacts: Artifact[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/artifacts',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'name'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'artifacts'], ['loop'], ['ref', $date_Artifact]]],
      },
    },
  });
}
/**
 * Get a workflow run attempt
 * Gets a specific workflow run attempt.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#get-a-workflow-run-attempt}
 * Tags: actions
 */
export async function actionsGetWorkflowRunAttempt<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
    attempt_number: number;
    exclude_pull_requests?: boolean;
  },
  opts?: FetcherData,
): Promise<WorkflowRun> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['exclude_pull_requests'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_WorkflowRun]]] } },
  });
}
/**
 * List jobs for a workflow run attempt
 * Lists jobs for a specific workflow run attempt. You can use parameters to narrow the list of results. For more
 * information
 * about using parameters, see
 * [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
 *
 * Anyone with read access
 * to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to
 * use this endpoint  with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run-attempt}
 * Tags: actions
 */
export async function actionsListJobsForWorkflowRunAttempt<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
    attempt_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  jobs: Job[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/jobs',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'jobs'], ['loop'], ['ref', $date_Job]]],
      },
    },
  });
}
/**
 * Download workflow run attempt logs
 * Gets a redirect URL to download an archive of log files for a specific workflow run attempt. This link expires after
 * 1
 * minute. Look for `Location:` in the response header to find the URL for the download.
 *
 * Anyone with read access to the
 * repository can use this endpoint.
 *
 * If the repository is private, OAuth tokens and personal access tokens (classic) need
 * the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-attempt-logs}
 * Tags: actions
 */
export async function actionsDownloadWorkflowRunAttemptLogs<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
    attempt_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/attempts/{attempt_number}/logs',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Cancel a workflow run
 * Cancels a workflow run using its `id`.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#cancel-a-workflow-run}
 * Tags: actions
 */
export async function actionsCancelWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/cancel',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Review custom deployment protection rules for a workflow run
 * Approve or reject custom deployment protection rules provided by a GitHub App for a workflow run. For more information,
 * see "[Using environments for
 * deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
 *
 * **Note:**
 * GitHub Apps can only review their own custom deployment protection rules.
 * To approve or reject pending deployments that
 * are waiting for review from a specific person or team, see [`POST
 * /repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments`](/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run).
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#review-custom-deployment-protection-rules-for-a-workflow-run}
 * Tags: actions
 */
export async function actionsReviewCustomGatesForRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  body: ReviewCustomGatesCommentRequired | ReviewCustomGatesStateRequired,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/deployment_protection_rule',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Force cancel a workflow run
 * Cancels a workflow run and bypasses conditions that would otherwise cause a workflow execution to continue, such as an
 * `always()` condition on a job.
 * You should only use this endpoint to cancel a workflow run when the workflow run is not
 * responding to [`POST
 * /repos/{owner}/{repo}/actions/runs/{run_id}/cancel`](/rest/actions/workflow-runs#cancel-a-workflow-run).
 *
 * OAuth tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#force-cancel-a-workflow-run}
 * Tags: actions
 */
export async function actionsForceCancelWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/force-cancel',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List jobs for a workflow run
 * Lists jobs for a workflow run. You can use parameters to narrow the list of results. For more information
 * about using
 * parameters, see [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
 *
 * Anyone
 * with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-jobs#list-jobs-for-a-workflow-run}
 * Tags: actions
 */
export async function actionsListJobsForWorkflowRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
    filter?: 'latest' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  jobs: Job[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/jobs',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['filter', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'jobs'], ['loop'], ['ref', $date_Job]]],
      },
    },
  });
}
/**
 * Download workflow run logs
 * Gets a redirect URL to download an archive of log files for a workflow run. This link expires after 1 minute. Look
 * for
 * `Location:` in the response header to find the URL for the download.
 *
 * Anyone with read access to the repository can
 * use this endpoint.
 *
 * If the repository is private, OAuth tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#download-workflow-run-logs}
 * Tags: actions
 */
export async function actionsDownloadWorkflowRunLogs<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/logs',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete workflow run logs
 * Deletes all logs for a workflow run.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#delete-workflow-run-logs}
 * Tags: actions
 */
export async function actionsDeleteWorkflowRunLogs<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/logs',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get pending deployments for a workflow run
 * Get all deployment environments for a workflow run that are waiting for protection rules to pass.
 *
 * Anyone with read
 * access to the repository can use this endpoint.
 *
 * If the repository is private, OAuth tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#get-pending-deployments-for-a-workflow-run}
 * Tags: actions
 */
export async function actionsGetPendingDeploymentsForRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<PendingDeployment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_PendingDeployment]]] },
    },
  });
}
/**
 * Review pending deployments for a workflow run
 * Approve or reject pending deployments that are waiting on approval by a required reviewer.
 *
 * Required reviewers with read
 * access to the repository contents and deployments can use this endpoint.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#review-pending-deployments-for-a-workflow-run}
 * Tags: actions
 */
export async function actionsReviewPendingDeploymentsForRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  body: {
    /**
     * The list of environment ids to approve or reject
     * @example
     * [
     *   161171787,
     *   161171795
     * ]
     */
    environment_ids: number[];
    /**
     * Whether to approve or reject deployment to the specified environments.
     * @example "approved"
     */
    state: 'approved' | 'rejected';
    /**
     * A comment to accompany the deployment review
     * @example "Ship it!"
     */
    comment: string;
  },
  opts?: FetcherData,
): Promise<Deployment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/pending_deployments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Deployment]]] } },
  });
}
/**
 * Re-run a workflow
 * Re-runs your workflow run using its `id`.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope
 * to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#re-run-a-workflow}
 * Tags: actions
 */
export async function actionsReRunWorkflow<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  body: {
    /**
     * Whether to enable debug logging for the re-run.
     */
    enable_debug_logging?: boolean;
  } | null,
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Re-run failed jobs from a workflow run
 * Re-run all of the failed jobs and their dependent jobs in a workflow run using the `id` of the workflow run.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#re-run-failed-jobs-from-a-workflow-run}
 * Tags: actions
 */
export async function actionsReRunWorkflowFailedJobs<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  body: {
    /**
     * Whether to enable debug logging for the re-run.
     */
    enable_debug_logging?: boolean;
  } | null,
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/rerun-failed-jobs',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get workflow run usage
 * Gets the number of billable minutes and total run time for a specific workflow run. Billable minutes only apply to
 * workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner
 * operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the
 * multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see
 * "[Managing billing for GitHub
 * Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * Anyone
 * with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#get-workflow-run-usage}
 * Tags: actions
 */
export async function actionsGetWorkflowRunUsage<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    run_id: number;
  },
  opts?: FetcherData,
): Promise<WorkflowRunUsage> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/runs/{run_id}/timing',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted
 * values.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#list-repository-secrets}
 * Tags: actions
 */
export async function actionsListRepoSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: ActionsSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'secrets'], ['loop'], ['ref', $date_ActionsSecret]]],
      },
    },
  });
}
/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to
 * encrypt a secret before you can create or update
 * secrets.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * If the repository is private, OAuth tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#get-a-repository-public-key}
 * Tags: actions
 */
export async function actionsGetRepoPublicKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ActionsPublicKey> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value.
 *
 * The authenticated user must have collaborator
 * access to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#get-a-repository-secret}
 * Tags: actions
 */
export async function actionsGetRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<ActionsSecret> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ActionsSecret]]] } },
  });
}
/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * Authenticated
 * users must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#create-or-update-a-repository-secret}
 * Tags: actions
 */
export async function actionsCreateOrUpdateRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/actions/secrets#get-a-repository-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name.
 *
 * Authenticated users must have collaborator access to a
 * repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope
 * to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#delete-a-repository-secret}
 * Tags: actions
 */
export async function actionsDeleteRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository variables
 * Lists all repository variables.
 *
 * Authenticated users must have collaborator access to a repository to create, update, or
 * read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#list-repository-variables}
 * Tags: actions
 */
export async function actionsListRepoVariables<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  variables: ActionsVariable[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/variables',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'variables'], ['loop'], ['ref', $date_ActionsVariable]],
        ],
      },
    },
  });
}
/**
 * Create a repository variable
 * Creates a repository variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#create-a-repository-variable}
 * Tags: actions
 */
export async function actionsCreateRepoVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The value of the variable.
     */
    value: string;
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/variables',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository variable
 * Gets a specific variable in a repository.
 *
 * The authenticated user must have collaborator access to the repository to use
 * this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#get-a-repository-variable}
 * Tags: actions
 */
export async function actionsGetRepoVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    name: string;
  },
  opts?: FetcherData,
): Promise<ActionsVariable> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/variables/{name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ActionsVariable]]] } },
  });
}
/**
 * Update a repository variable
 * Updates a repository variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#update-a-repository-variable}
 * Tags: actions
 */
export async function actionsUpdateRepoVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    name: string;
  },
  body: {
    /**
     * The name of the variable.
     */
    name?: string;
    /**
     * The value of the variable.
     */
    value?: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/variables/{name}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a repository variable
 * Deletes a repository variable using the variable name.
 *
 * Authenticated users must have collaborator access to a
 * repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#delete-a-repository-variable}
 * Tags: actions
 */
export async function actionsDeleteRepoVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/variables/{name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository workflows
 * Lists the workflows in a repository.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflows#list-repository-workflows}
 * Tags: actions
 */
export async function actionsListRepoWorkflows<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  workflows: Workflow[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/workflows',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'workflows'], ['loop'], ['ref', $date_Workflow]]],
      },
    },
  });
}
/**
 * Get a workflow
 * Gets a specific workflow. You can replace `workflow_id` with the workflow
 * file name. For example, you could use
 * `main.yaml`.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflows#get-a-workflow}
 * Tags: actions
 */
export async function actionsGetWorkflow<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  },
  opts?: FetcherData,
): Promise<Workflow> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Workflow]]] } },
  });
}
/**
 * Disable a workflow
 * Disables a workflow and sets the `state` of the workflow to `disabled_manually`. You can replace `workflow_id` with the
 * workflow file name. For example, you could use `main.yaml`.
 *
 * OAuth tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflows#disable-a-workflow}
 * Tags: actions
 */
export async function actionsDisableWorkflow<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/disable',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a workflow dispatch event
 * You can use this endpoint to manually trigger a GitHub Actions workflow run. You can replace `workflow_id` with the
 * workflow file name. For example, you could use `main.yaml`.
 *
 * You must configure your GitHub Actions workflow to run when
 * the [`workflow_dispatch` webhook](/developers/webhooks-and-events/webhook-events-and-payloads#workflow_dispatch) event
 * occurs. The `inputs` are configured in the workflow file. For more information about how to configure the
 * `workflow_dispatch` event in the workflow file, see "[Events that trigger
 * workflows](/actions/reference/events-that-trigger-workflows#workflow_dispatch)."
 *
 * OAuth tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflows#create-a-workflow-dispatch-event}
 * Tags: actions
 */
export async function actionsCreateWorkflowDispatch<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  },
  body: {
    /**
     * The git reference for the workflow. The reference can be a branch or tag name.
     */
    ref: string;
    /**
     * Input keys and values configured in the workflow file. The maximum number of properties is 10. Any default properties configured in the workflow file will be used when `inputs` are omitted.
     */
    inputs?: {
      [key: string]: any;
    };
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/dispatches',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Enable a workflow
 * Enables a workflow and sets the `state` of the workflow to `active`. You can replace `workflow_id` with the workflow
 * file name. For example, you could use `main.yaml`.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/workflows#enable-a-workflow}
 * Tags: actions
 */
export async function actionsEnableWorkflow<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/enable',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List workflow runs for a workflow
 * List all workflow runs for a workflow. You can replace `workflow_id` with the workflow file name. For example, you could
 * use `main.yaml`. You can use parameters to narrow the list of results. For more information about using parameters, see
 * [Parameters](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#parameters).
 *
 * Anyone with read access
 * to the repository can use this endpoint
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to
 * use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflow-runs#list-workflow-runs-for-a-workflow}
 * Tags: actions
 */
export async function actionsListWorkflowRuns<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
    actor?: string;
    branch?: string;
    event?: string;
    status?:
      | 'completed'
      | 'action_required'
      | 'cancelled'
      | 'failure'
      | 'neutral'
      | 'skipped'
      | 'stale'
      | 'success'
      | 'timed_out'
      | 'in_progress'
      | 'queued'
      | 'requested'
      | 'waiting'
      | 'pending';
    per_page?: number;
    page?: number;
    created?: Date;
    exclude_pull_requests?: boolean;
    check_suite_id?: number;
    head_sha?: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  workflow_runs: WorkflowRun[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/runs',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'actor',
      'branch',
      'event',
      'status',
      'per_page',
      'page',
      'created',
      'exclude_pull_requests',
      'check_suite_id',
      'head_sha',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'workflow_runs'], ['loop'], ['ref', $date_WorkflowRun]],
        ],
      },
    },
  });
}
/**
 * Get workflow usage
 * Gets the number of billable minutes used by a specific workflow during the current billing cycle. Billable minutes only
 * apply to workflows in private repositories that use GitHub-hosted runners. Usage is listed for each GitHub-hosted runner
 * operating system in milliseconds. Any job re-runs are also included in the usage. The usage does not include the
 * multiplier for macOS and Windows runners and is not rounded up to the nearest whole minute. For more information, see
 * "[Managing billing for GitHub
 * Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * You
 * can replace `workflow_id` with the workflow file name. For example, you could use `main.yaml`.
 *
 * Anyone with read access
 * to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to
 * use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/actions/workflows#get-workflow-usage}
 * Tags: actions
 */
export async function actionsGetWorkflowUsage<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    workflow_id: number | string;
  },
  opts?: FetcherData,
): Promise<WorkflowUsage> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/actions/workflows/{workflow_id}/timing',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository activities
 * Lists a detailed history of changes to a repository, such as pushes, merges, force pushes, and branch changes, and
 * associates these changes with commits and users.
 *
 * For more information about viewing repository activity,
 * see "[Viewing
 * activity and data for your
 * repository](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository)."
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-repository-activities}
 * Tags: repos
 */
export async function reposListActivities<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    direction?: 'asc' | 'desc';
    per_page?: number;
    before?: string;
    after?: string;
    ref?: string;
    actor?: string;
    time_period?: 'day' | 'week' | 'month' | 'quarter' | 'year';
    activity_type?:
      | 'push'
      | 'force_push'
      | 'branch_creation'
      | 'branch_deletion'
      | 'pr_merge'
      | 'merge_queue_merge';
  },
  opts?: FetcherData,
): Promise<Activity[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/activity',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'direction',
      'per_page',
      'before',
      'after',
      'ref',
      'actor',
      'time_period',
      'activity_type',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Activity]]] } },
  });
}
/**
 * List assignees
 * Lists the [available
 * assignees](https://docs.github.com/articles/assigning-issues-and-pull-requests-to-other-github-users/) for issues in a
 * repository.
 * Learn more at {@link https://docs.github.com/rest/issues/assignees#list-assignees}
 * Tags: issues
 */
export async function issuesListAssignees<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/assignees',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if a user can be assigned
 * Checks if a user has permission to be assigned to an issue in this repository.
 *
 * If the `assignee` can be assigned to
 * issues in the repository, a `204` header with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 * Learn more at {@link https://docs.github.com/rest/issues/assignees#check-if-a-user-can-be-assigned}
 * Tags: issues
 */
export async function issuesCheckUserCanBeAssigned<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    assignee: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/assignees/{assignee}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all autolinks of a repository
 * Gets all autolinks that are configured for a repository.
 *
 * Information about autolinks are only available to repository
 * administrators.
 * Learn more at {@link https://docs.github.com/rest/repos/autolinks#get-all-autolinks-of-a-repository}
 * Tags: repos
 */
export async function reposListAutolinks<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<Autolink[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/autolinks',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create an autolink reference for a repository
 * Users with admin access to the repository can create an autolink.
 * Learn more at {@link https://docs.github.com/rest/repos/autolinks#create-an-autolink-reference-for-a-repository}
 * Tags: repos
 */
export async function reposCreateAutolink<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * This prefix appended by certain characters will generate a link any time it is found in an issue, pull request, or commit.
     */
    key_prefix: string;
    /**
     * The URL must contain `<num>` for the reference number. `<num>` matches different characters depending on the value of `is_alphanumeric`.
     */
    url_template: string;
    /**
     * Whether this autolink reference matches alphanumeric characters. If true, the `<num>` parameter of the `url_template` matches alphanumeric characters `A-Z` (case insensitive), `0-9`, and `-`. If false, this autolink reference only matches numeric characters.
     * @defaultValue true
     */
    is_alphanumeric?: boolean;
  },
  opts?: FetcherData,
): Promise<Autolink> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/autolinks',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an autolink reference of a repository
 * This returns a single autolink reference by ID that was configured for the given repository.
 *
 * Information about
 * autolinks are only available to repository administrators.
 * Learn more at {@link https://docs.github.com/rest/repos/autolinks#get-an-autolink-reference-of-a-repository}
 * Tags: repos
 */
export async function reposGetAutolink<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    autolink_id: number;
  },
  opts?: FetcherData,
): Promise<Autolink> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/autolinks/{autolink_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an autolink reference from a repository
 * This deletes a single autolink reference by ID that was configured for the given repository.
 *
 * Information about
 * autolinks are only available to repository administrators.
 * Learn more at {@link https://docs.github.com/rest/repos/autolinks#delete-an-autolink-reference-from-a-repository}
 * Tags: repos
 */
export async function reposDeleteAutolink<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    autolink_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/autolinks/{autolink_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if automated security fixes are enabled for a repository
 * Shows whether automated security fixes are enabled, disabled or paused for a repository. The authenticated user must
 * have admin read access to the repository. For more information, see "[Configuring automated security
 * fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
 * Learn more at {@link https://docs.github.com/rest/repos/repos#check-if-automated-security-fixes-are-enabled-for-a-repository}
 * Tags: repos
 */
export async function reposCheckAutomatedSecurityFixes<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CheckAutomatedSecurityFixes> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/automated-security-fixes',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Enable automated security fixes
 * Enables automated security fixes for a repository. The authenticated user must have admin access to the repository. For
 * more information, see "[Configuring automated security
 * fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
 * Learn more at {@link https://docs.github.com/rest/repos/repos#enable-automated-security-fixes}
 * Tags: repos
 */
export async function reposEnableAutomatedSecurityFixes<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/automated-security-fixes',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Disable automated security fixes
 * Disables automated security fixes for a repository. The authenticated user must have admin access to the repository. For
 * more information, see "[Configuring automated security
 * fixes](https://docs.github.com/articles/configuring-automated-security-fixes)".
 * Learn more at {@link https://docs.github.com/rest/repos/repos#disable-automated-security-fixes}
 * Tags: repos
 */
export async function reposDisableAutomatedSecurityFixes<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/automated-security-fixes',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List branches
 * Learn more at {@link https://docs.github.com/rest/branches/branches#list-branches}
 * Tags: repos
 */
export async function reposListBranches<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    protected?: boolean;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<ShortBranch[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['protected', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a branch
 * Learn more at {@link https://docs.github.com/rest/branches/branches#get-a-branch}
 * Tags: repos
 */
export async function reposGetBranch<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<BranchWithProtection | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-branch-protection}
 * Tags: repos
 */
export async function reposGetBranchProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<BranchProtection> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Protecting a branch requires admin or owner permissions to the repository.
 *
 * **Note**:
 * Passing new arrays of `users` and `teams` replaces their previous values.
 *
 * **Note**: The list of users, apps, and teams
 * in total is limited to 100 items.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#update-branch-protection}
 * Tags: repos
 */
export async function reposUpdateBranchProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body: {
    /**
     * Require status checks to pass before merging. Set to `null` to disable.
     */
    required_status_checks: {
      /**
       * Require branches to be up to date before merging.
       */
      strict: boolean;
      /**
       * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
       *
       * @deprecated
       */
      contexts: string[];
      /**
       * The list of status checks to require in order to merge into this branch.
       */
      checks?: {
        /**
         * The name of the required check
         */
        context: string;
        /**
         * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
         */
        app_id?: number;
      }[];
    } | null;
    /**
     * Enforce all configured restrictions for administrators. Set to `true` to enforce required status checks for repository administrators. Set to `null` to disable.
     */
    enforce_admins: boolean | null;
    /**
     * Require at least one approving review on a pull request, before merging. Set to `null` to disable.
     */
    required_pull_request_reviews: {
      /**
       * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
       */
      dismissal_restrictions?: {
        /**
         * The list of user `login`s with dismissal access
         */
        users?: string[];
        /**
         * The list of team `slug`s with dismissal access
         */
        teams?: string[];
        /**
         * The list of app `slug`s with dismissal access
         */
        apps?: string[];
      };
      /**
       * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
       */
      dismiss_stale_reviews?: boolean;
      /**
       * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) review them.
       */
      require_code_owner_reviews?: boolean;
      /**
       * Specify the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
       */
      required_approving_review_count?: number;
      /**
       * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`.
       */
      require_last_push_approval?: boolean;
      /**
       * Allow specific users, teams, or apps to bypass pull request requirements.
       */
      bypass_pull_request_allowances?: {
        /**
         * The list of user `login`s allowed to bypass pull request requirements.
         */
        users?: string[];
        /**
         * The list of team `slug`s allowed to bypass pull request requirements.
         */
        teams?: string[];
        /**
         * The list of app `slug`s allowed to bypass pull request requirements.
         */
        apps?: string[];
      };
    } | null;
    /**
     * Restrict who can push to the protected branch. User, app, and team `restrictions` are only available for organization-owned repositories. Set to `null` to disable.
     */
    restrictions: {
      /**
       * The list of user `login`s with push access
       */
      users: string[];
      /**
       * The list of team `slug`s with push access
       */
      teams: string[];
      /**
       * The list of app `slug`s with push access
       */
      apps?: string[];
    } | null;
    /**
     * Enforces a linear commit Git history, which prevents anyone from pushing merge commits to a branch. Set to `true` to enforce a linear commit history. Set to `false` to disable a linear commit Git history. Your repository must allow squash merging or rebase merging before you can enable a linear commit history. Default: `false`. For more information, see "[Requiring a linear commit history](https://docs.github.com/github/administering-a-repository/requiring-a-linear-commit-history)" in the GitHub Help documentation.
     */
    required_linear_history?: boolean;
    /**
     * Permits force pushes to the protected branch by anyone with write access to the repository. Set to `true` to allow force pushes. Set to `false` or `null` to block force pushes. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation."
     */
    allow_force_pushes?: boolean | null;
    /**
     * Allows deletion of the protected branch by anyone with write access to the repository. Set to `false` to prevent deletion of the protected branch. Default: `false`. For more information, see "[Enabling force pushes to a protected branch](https://docs.github.com/github/administering-a-repository/enabling-force-pushes-to-a-protected-branch)" in the GitHub Help documentation.
     */
    allow_deletions?: boolean;
    /**
     * If set to `true`, the `restrictions` branch protection settings which limits who can push will also block pushes which create new branches, unless the push is initiated by a user, team, or app which has the ability to push. Set to `true` to restrict new branch creation. Default: `false`.
     */
    block_creations?: boolean;
    /**
     * Requires all conversations on code to be resolved before a pull request can be merged into a branch that matches this rule. Set to `false` to disable. Default: `false`.
     */
    required_conversation_resolution?: boolean;
    /**
     * Whether to set the branch as read-only. If this is true, users will not be able to push to the branch. Default: `false`.
     */
    lock_branch?: boolean;
    /**
     * Whether users can pull changes from upstream when the branch is locked. Set to `true` to allow fork syncing. Set to `false` to prevent fork syncing. Default: `false`.
     */
    allow_fork_syncing?: boolean;
  },
  opts?: FetcherData,
): Promise<ProtectedBranch> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ProtectedBranch]]] } },
  });
}
/**
 * Delete branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#delete-branch-protection}
 * Tags: repos
 */
export async function reposDeleteBranchProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-admin-branch-protection}
 * Tags: repos
 */
export async function reposGetAdminBranchProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<ProtectedBranchAdminEnforced> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Adding admin enforcement requires admin or owner permissions to the repository and
 * branch protection to be enabled.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#set-admin-branch-protection}
 * Tags: repos
 */
export async function reposSetAdminBranchProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<ProtectedBranchAdminEnforced> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete admin branch protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Removing admin enforcement requires admin or owner permissions to the repository and
 * branch protection to be enabled.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#delete-admin-branch-protection}
 * Tags: repos
 */
export async function reposDeleteAdminBranchProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/enforce_admins',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-pull-request-review-protection}
 * Tags: repos
 */
export async function reposGetPullRequestReviewProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<ProtectedBranchPullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_ProtectedBranchPullRequestReview]]] },
    },
  });
}
/**
 * Update pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Updating pull request review enforcement requires admin or owner permissions to the
 * repository and branch protection to be enabled.
 *
 * **Note**: Passing new arrays of `users` and `teams` replaces their
 * previous values.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#update-pull-request-review-protection}
 * Tags: repos
 */
export async function reposUpdatePullRequestReviewProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body: {
    /**
     * Specify which users, teams, and apps can dismiss pull request reviews. Pass an empty `dismissal_restrictions` object to disable. User and team `dismissal_restrictions` are only available for organization-owned repositories. Omit this parameter for personal repositories.
     */
    dismissal_restrictions?: {
      /**
       * The list of user `login`s with dismissal access
       */
      users?: string[];
      /**
       * The list of team `slug`s with dismissal access
       */
      teams?: string[];
      /**
       * The list of app `slug`s with dismissal access
       */
      apps?: string[];
    };
    /**
     * Set to `true` if you want to automatically dismiss approving reviews when someone pushes a new commit.
     */
    dismiss_stale_reviews?: boolean;
    /**
     * Blocks merging pull requests until [code owners](https://docs.github.com/articles/about-code-owners/) have reviewed.
     */
    require_code_owner_reviews?: boolean;
    /**
     * Specifies the number of reviewers required to approve pull requests. Use a number between 1 and 6 or 0 to not require reviewers.
     */
    required_approving_review_count?: number;
    /**
     * Whether the most recent push must be approved by someone other than the person who pushed it. Default: `false`
     */
    require_last_push_approval?: boolean;
    /**
     * Allow specific users, teams, or apps to bypass pull request requirements.
     */
    bypass_pull_request_allowances?: {
      /**
       * The list of user `login`s allowed to bypass pull request requirements.
       */
      users?: string[];
      /**
       * The list of team `slug`s allowed to bypass pull request requirements.
       */
      teams?: string[];
      /**
       * The list of app `slug`s allowed to bypass pull request requirements.
       */
      apps?: string[];
    };
  },
  opts?: FetcherData,
): Promise<ProtectedBranchPullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_ProtectedBranchPullRequestReview]]] },
    },
  });
}
/**
 * Delete pull request review protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#delete-pull-request-review-protection}
 * Tags: repos
 */
export async function reposDeletePullRequestReviewProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_pull_request_reviews',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use
 * this endpoint to check whether a branch requires signed commits. An enabled status of `true` indicates you must sign
 * commits on this branch. For more information, see [Signing commits with
 * GPG](https://docs.github.com/articles/signing-commits-with-gpg) in GitHub Help.
 *
 * **Note**: You must enable branch
 * protection to require signed commits.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-commit-signature-protection}
 * Tags: repos
 */
export async function reposGetCommitSignatureProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<ProtectedBranchAdminEnforced> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use
 * this endpoint to require signed commits on a branch. You must enable branch protection to require signed commits.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#create-commit-signature-protection}
 * Tags: repos
 */
export async function reposCreateCommitSignatureProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<ProtectedBranchAdminEnforced> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete commit signature protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * When authenticated with admin or owner permissions to the repository, you can use
 * this endpoint to disable required signed commits on a branch. You must enable branch protection to require signed
 * commits.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#delete-commit-signature-protection}
 * Tags: repos
 */
export async function reposDeleteCommitSignatureProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_signatures',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get status checks protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-status-checks-protection}
 * Tags: repos
 */
export async function reposGetStatusChecksProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<StatusCheckPolicy> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update status check protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Updating required status checks requires admin or owner permissions to the repository
 * and branch protection to be enabled.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#update-status-check-protection}
 * Tags: repos
 */
export async function reposUpdateStatusCheckProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body: {
    /**
     * Require branches to be up to date before merging.
     */
    strict?: boolean;
    /**
     * **Deprecated**: The list of status checks to require in order to merge into this branch. If any of these checks have recently been set by a particular GitHub App, they will be required to come from that app in future for the branch to merge. Use `checks` instead of `contexts` for more fine-grained control.
     *
     * @deprecated
     */
    contexts?: string[];
    /**
     * The list of status checks to require in order to merge into this branch.
     */
    checks?: {
      /**
       * The name of the required check
       */
      context: string;
      /**
       * The ID of the GitHub App that must provide this check. Omit this field to automatically select the GitHub App that has recently provided this check, or any app if it was not set by a GitHub App. Pass -1 to explicitly allow any app to set the status.
       */
      app_id?: number;
    }[];
  },
  opts?: FetcherData,
): Promise<StatusCheckPolicy> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove status check protection
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#remove-status-check-protection}
 * Tags: repos
 */
export async function reposRemoveStatusCheckProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-all-status-check-contexts}
 * Tags: repos
 */
export async function reposGetAllStatusCheckContexts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<string[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#add-status-check-contexts}
 * Tags: repos
 */
export async function reposAddStatusCheckContexts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<string[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#set-status-check-contexts}
 * Tags: repos
 */
export async function reposSetStatusCheckContexts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<string[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove status check contexts
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#remove-status-check-contexts}
 * Tags: repos
 */
export async function reposRemoveStatusCheckContexts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The name of the status checks
         */
        contexts: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<string[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/required_status_checks/contexts',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Lists who has access to this protected branch.
 *
 * **Note**: Users, apps, and teams
 * `restrictions` are only available for organization-owned repositories.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-access-restrictions}
 * Tags: repos
 */
export async function reposGetAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<BranchRestrictionPolicy> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Disables the ability to restrict who can push to this branch.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#delete-access-restrictions}
 * Tags: repos
 */
export async function reposDeleteAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get apps with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Lists the GitHub Apps that have push access to this branch. Only GitHub Apps that are
 * installed on the repository and that have been granted write access to the repository contents can be added as
 * authorized actors on a protected branch.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-apps-with-access-to-the-protected-branch}
 * Tags: repos
 */
export async function reposGetAppsWithAccessToProtectedBranch<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<Integration[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Integration]]] } },
  });
}
/**
 * Add app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Grants the specified apps push access for this branch. Only GitHub Apps that are
 * installed on the repository and that have been granted write access to the repository contents can be added as
 * authorized actors on a protected branch.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#add-app-access-restrictions}
 * Tags: repos
 */
export async function reposAddAppAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<Integration[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Integration]]] } },
  });
}
/**
 * Set app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Replaces the list of apps that have push access to this branch. This removes all apps
 * that previously had push access and grants push access to the new list of apps. Only GitHub Apps that are installed on
 * the repository and that have been granted write access to the repository contents can be added as authorized actors on a
 * protected branch.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#set-app-access-restrictions}
 * Tags: repos
 */
export async function reposSetAppAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<Integration[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Integration]]] } },
  });
}
/**
 * Remove app access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Removes the ability of an app to push to this branch. Only GitHub Apps that are
 * installed on the repository and that have been granted write access to the repository contents can be added as
 * authorized actors on a protected branch.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#remove-app-access-restrictions}
 * Tags: repos
 */
export async function reposRemoveAppAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The GitHub Apps that have push access to this branch. Use the slugified version of the app name. **Note**: The list of users, apps, and teams in total is limited to 100 items.
         */
        apps: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<Integration[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/apps',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Integration]]] } },
  });
}
/**
 * Get teams with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Lists the teams who have push access to this branch. The list includes child teams.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-teams-with-access-to-the-protected-branch}
 * Tags: repos
 */
export async function reposGetTeamsWithAccessToProtectedBranch<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Grants the specified teams push access for this branch. You can also give push access
 * to child teams.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#add-team-access-restrictions}
 * Tags: repos
 */
export async function reposAddTeamAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Replaces the list of teams that have push access to this branch. This removes all
 * teams that previously had push access and grants push access to the new list of teams. Team restrictions include child
 * teams.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#set-team-access-restrictions}
 * Tags: repos
 */
export async function reposSetTeamAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove team access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Removes the ability of a team to push to this branch. You can also remove push access
 * for child teams.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#remove-team-access-restrictions}
 * Tags: repos
 */
export async function reposRemoveTeamAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The slug values for teams
         */
        teams: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/teams',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get users with access to the protected branch
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Lists the people who have push access to this branch.
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#get-users-with-access-to-the-protected-branch}
 * Tags: repos
 */
export async function reposGetUsersWithAccessToProtectedBranch<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Grants the specified people push access for this branch.
 *
 * | Type    | Description
 * |
 * |
 * ------- |
 * -----------------------------------------------------------------------------------------------------------------------------
 * |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is
 * limited to 100 items. |
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#add-user-access-restrictions}
 * Tags: repos
 */
export async function reposAddUserAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Replaces the list of people that have push access to this branch. This removes all
 * people that previously had push access and grants push access to the new list of people.
 *
 * | Type    | Description
 * |
 * | ------- |
 * -----------------------------------------------------------------------------------------------------------------------------
 * |
 * | `array` | Usernames for people who can have push access. **Note**: The list of users, apps, and teams in total is
 * limited to 100 items. |
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#set-user-access-restrictions}
 * Tags: repos
 */
export async function reposSetUserAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove user access restrictions
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Removes the ability of a user to push to this branch.
 *
 * | Type    | Description
 *
 * |
 * | ------- |
 * ---------------------------------------------------------------------------------------------------------------------------------------------
 * |
 * | `array` | Usernames of the people who should no longer have push access. **Note**: The list of users, apps, and
 * teams in total is limited to 100 items. |
 * Learn more at {@link https://docs.github.com/rest/branches/branch-protection#remove-user-access-restrictions}
 * Tags: repos
 */
export async function reposRemoveUserAccessRestrictions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body:
    | {
        /**
         * The username for users
         */
        users: string[];
      }
    | string[],
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/protection/restrictions/users',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Rename a branch
 * Renames a branch in a repository.
 *
 * **Note:** Although the API responds immediately, the branch rename process might take
 * some extra time to complete in the background. You won't be able to push to the old branch name while the rename process
 * is in progress. For more information, see "[Renaming a
 * branch](https://docs.github.com/github/administering-a-repository/renaming-a-branch)".
 *
 * The authenticated user must have
 * push access to the branch. If the branch is the default branch, the authenticated user must also have admin or owner
 * permissions.
 *
 * In order to rename the default branch, fine-grained access tokens also need the `administration:write`
 * repository permission.
 * Learn more at {@link https://docs.github.com/rest/branches/branches#rename-a-branch}
 * Tags: repos
 */
export async function reposRenameBranch<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
  },
  body: {
    /**
     * The new name of the branch.
     */
    new_name: string;
  },
  opts?: FetcherData,
): Promise<BranchWithProtection> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/branches/{branch}/rename',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a check run
 * Creates a new check run for a specific commit in a repository.
 *
 * To create a check run, you must use a GitHub App. OAuth
 * apps and authenticated users are not able to create a check suite.
 *
 * In a check suite, GitHub limits the number of check
 * runs with the same name to 1000. Once these check runs exceed 1000, GitHub will start to automatically delete older
 * check runs.
 *
 * **Note:** The Checks API only looks for pushes in the repository where the check suite or check run were
 * created. Pushes to a branch in a forked repository are not detected and return an empty `pull_requests` array.
 * Learn more at {@link https://docs.github.com/rest/checks/runs#create-a-check-run}
 * Tags: checks
 */
export async function checksCreate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: any | any,
  opts?: FetcherData,
): Promise<CheckRun> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-runs',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_CheckRun]]] } },
  });
}
/**
 * Get a check run
 * Gets a single check run using its `id`.
 *
 * **Note:** The Checks API only looks for pushes in the repository where the
 * check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty
 * `pull_requests` array.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint
 * on a private repository.
 * Learn more at {@link https://docs.github.com/rest/checks/runs#get-a-check-run}
 * Tags: checks
 */
export async function checksGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    check_run_id: number;
  },
  opts?: FetcherData,
): Promise<CheckRun> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-runs/{check_run_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CheckRun]]] } },
  });
}
/**
 * Update a check run
 * Updates a check run for a specific commit in a repository.
 *
 * **Note:** The endpoints to manage checks only look for
 * pushes in the repository where the check suite or check run were created. Pushes to a branch in a forked repository are
 * not detected and return an empty `pull_requests` array.
 *
 * OAuth apps and personal access tokens (classic) cannot use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/checks/runs#update-a-check-run}
 * Tags: checks
 */
export async function checksUpdate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    check_run_id: number;
  },
  body: any | any,
  opts?: FetcherData,
): Promise<CheckRun> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-runs/{check_run_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CheckRun]]] } },
  });
}
/**
 * List check run annotations
 * Lists annotations for a check run using the annotation `id`.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `repo` scope to use this endpoint on a private repository.
 * Learn more at {@link https://docs.github.com/rest/checks/runs#list-check-run-annotations}
 * Tags: checks
 */
export async function checksListAnnotations<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    check_run_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<CheckAnnotation[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-runs/{check_run_id}/annotations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Rerequest a check run
 * Triggers GitHub to rerequest an existing check run, without pushing new code to a repository. This endpoint will trigger
 * the [`check_run` webhook](https://docs.github.com/webhooks/event-payloads/#check_run) event with the action
 * `rerequested`. When a check run is `rerequested`, its `status` is reset to `queued` and the `conclusion` is
 * cleared.
 *
 * For more information about how to re-run GitHub Actions jobs, see "[Re-run a job from a workflow
 * run](https://docs.github.com/rest/actions/workflow-runs#re-run-a-job-from-a-workflow-run)".
 *
 * OAuth apps and personal
 * access tokens (classic) cannot use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/checks/runs#rerequest-a-check-run}
 * Tags: checks
 */
export async function checksRerequestRun<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    check_run_id: number;
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-runs/{check_run_id}/rerequest',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a check suite
 * Creates a check suite manually. By default, check suites are automatically created when you create a [check
 * run](https://docs.github.com/rest/checks/runs). You only need to use this endpoint for manually creating check suites
 * when you've disabled automatic creation using "[Update repository preferences for check
 * suites](https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites)".
 *
 * **Note:** The
 * Checks API only looks for pushes in the repository where the check suite or check run were created. Pushes to a branch
 * in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for
 * `head_branch`.
 *
 * OAuth apps and personal access tokens (classic) cannot use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/checks/suites#create-a-check-suite}
 * Tags: checks
 */
export async function checksCreateSuite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The sha of the head commit.
     */
    head_sha: string;
  },
  opts?: FetcherData,
): Promise<CheckSuite> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-suites',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CheckSuite]]] } },
    '201': { transforms: { date: [[['ref', $date_CheckSuite]]] } },
  });
}
/**
 * Update repository preferences for check suites
 * Changes the default automatic flow when creating check suites. By default, a check suite is automatically created each
 * time code is pushed to a repository. When you disable the automatic creation of check suites, you can manually [Create a
 * check suite](https://docs.github.com/rest/checks/suites#create-a-check-suite).
 * You must have admin permissions in the
 * repository to set preferences for check suites.
 * Learn more at {@link https://docs.github.com/rest/checks/suites#update-repository-preferences-for-check-suites}
 * Tags: checks
 */
export async function checksSetSuitesPreferences<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Enables or disables automatic creation of CheckSuite events upon pushes to the repository. Enabled by default.
     */
    auto_trigger_checks?: {
      /**
       * The `id` of the GitHub App.
       */
      app_id: number;
      /**
       * Set to `true` to enable automatic creation of CheckSuite events upon pushes to the repository, or `false` to disable them.
       * @defaultValue true
       */
      setting: boolean;
    }[];
  },
  opts?: FetcherData,
): Promise<CheckSuitePreference> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-suites/preferences',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CheckSuitePreference]]] } },
  });
}
/**
 * Get a check suite
 * Gets a single check suite using its `id`.
 *
 * **Note:** The Checks API only looks for pushes in the repository where the
 * check suite or check run were created. Pushes to a branch in a forked repository are not detected and return an empty
 * `pull_requests` array and a `null` value for `head_branch`.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `repo` scope to use this endpoint on a private repository.
 * Learn more at {@link https://docs.github.com/rest/checks/suites#get-a-check-suite}
 * Tags: checks
 */
export async function checksGetSuite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    check_suite_id: number;
  },
  opts?: FetcherData,
): Promise<CheckSuite> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-suites/{check_suite_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CheckSuite]]] } },
  });
}
/**
 * List check runs in a check suite
 * Lists check runs for a check suite using its `id`.
 *
 * **Note:** The endpoints to manage checks only look for pushes in the
 * repository where the check suite or check run were created. Pushes to a branch in a forked repository are not detected
 * and return an empty `pull_requests` array.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope
 * to use this endpoint on a private repository.
 * Learn more at {@link https://docs.github.com/rest/checks/runs#list-check-runs-in-a-check-suite}
 * Tags: checks
 */
export async function checksListForSuite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    check_suite_id: number;
    check_name?: string;
    status?: 'queued' | 'in_progress' | 'completed';
    filter?: 'latest' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  check_runs: CheckRun[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-suites/{check_suite_id}/check-runs',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['check_name', 'status', 'filter', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'check_runs'], ['loop'], ['ref', $date_CheckRun]]],
      },
    },
  });
}
/**
 * Rerequest a check suite
 * Triggers GitHub to rerequest an existing check suite, without pushing new code to a repository. This endpoint will
 * trigger the [`check_suite` webhook](https://docs.github.com/webhooks/event-payloads/#check_suite) event with the action
 * `rerequested`. When a check suite is `rerequested`, its `status` is reset to `queued` and the `conclusion` is
 * cleared.
 *
 * OAuth apps and personal access tokens (classic) cannot use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/checks/suites#rerequest-a-check-suite}
 * Tags: checks
 */
export async function checksRerequestSuite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    check_suite_id: number;
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/check-suites/{check_suite_id}/rerequest',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List code scanning alerts for a repository
 * Lists code scanning alerts.
 *
 * The response includes a `most_recent_instance` object.
 * This provides details of the most
 * recent instance of this alert
 * for the default branch (or for the specified Git reference if you used `ref` in the
 * request).
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint
 * with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-alerts-for-a-repository}
 * Tags: code-scanning
 */
export async function codeScanningListAlertsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    tool_name?: CodeScanningAnalysisToolName;
    tool_guid?: CodeScanningAnalysisToolGuid;
    page?: number;
    per_page?: number;
    ref?: CodeScanningRef;
    direction?: 'asc' | 'desc';
    sort?: 'created' | 'updated';
    state?: CodeScanningAlertStateQuery;
    severity?: CodeScanningAlertSeverity;
  },
  opts?: FetcherData,
): Promise<CodeScanningAlertItems[] | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'tool_name',
      'tool_guid',
      'page',
      'per_page',
      'ref',
      'direction',
      'sort',
      'state',
      'severity',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_CodeScanningAlertItems]]] },
    },
  });
}
/**
 * Get a code scanning alert
 * Gets a single code scanning alert.
 *
 * OAuth app tokens and personal access tokens (classic) need the `security_events`
 * scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with
 * only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-alert}
 * Tags: code-scanning
 */
export async function codeScanningGetAlert<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  },
  opts?: FetcherData,
): Promise<CodeScanningAlert | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CodeScanningAlert]]] } },
  });
}
/**
 * Update a code scanning alert
 * Updates the status of a single code scanning alert.
 * OAuth app tokens and personal access tokens (classic) need the
 * `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this
 * endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-alert}
 * Tags: code-scanning
 */
export async function codeScanningUpdateAlert<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  },
  body: {
    state: CodeScanningAlertSetState;
    dismissed_reason?: CodeScanningAlertDismissedReason;
    dismissed_comment?: CodeScanningAlertDismissedComment;
  },
  opts?: FetcherData,
): Promise<CodeScanningAlert> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CodeScanningAlert]]] } },
  });
}
/**
 * List instances of a code scanning alert
 * Lists all instances of the specified code scanning alert.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use
 * this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#list-instances-of-a-code-scanning-alert}
 * Tags: code-scanning
 */
export async function codeScanningListAlertInstances<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
    page?: number;
    per_page?: number;
    ref?: CodeScanningRef;
  },
  opts?: FetcherData,
): Promise<CodeScanningAlertInstance[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/alerts/{alert_number}/instances',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page', 'ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List code scanning analyses for a repository
 * Lists the details of all code scanning analyses for a repository,
 * starting with the most recent.
 * The response is
 * paginated and you can use the `page` and `per_page` parameters
 * to list the analyses you're interested in.
 * By default 30
 * analyses are listed per page.
 *
 * The `rules_count` field in the response give the number of rules
 * that were run in the
 * analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in this field.
 *
 * **Deprecation
 * notice**:
 * The `tool_name` field is deprecated and will, in future, not be included in the response for this endpoint.
 * The example response reflects this change. The tool name can now be found inside the `tool` field.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public
 * repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#list-code-scanning-analyses-for-a-repository}
 * Tags: code-scanning
 */
export async function codeScanningListRecentAnalyses<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    tool_name?: CodeScanningAnalysisToolName;
    tool_guid?: CodeScanningAnalysisToolGuid;
    page?: number;
    per_page?: number;
    ref?: CodeScanningRef;
    sarif_id?: CodeScanningAnalysisSarifId;
    direction?: 'asc' | 'desc';
    sort?: 'created';
  },
  opts?: FetcherData,
): Promise<CodeScanningAnalysis[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/analyses',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'tool_name',
      'tool_guid',
      'page',
      'per_page',
      'ref',
      'sarif_id',
      'direction',
      'sort',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_CodeScanningAnalysis]]] },
    },
  });
}
/**
 * Get a code scanning analysis for a repository
 * Gets a specified code scanning analysis for a repository.
 *
 * The default JSON response contains fields that describe the
 * analysis.
 * This includes the Git reference and commit SHA to which the analysis relates,
 * the datetime of the analysis,
 * the name of the code scanning tool,
 * and the number of alerts.
 *
 * The `rules_count` field in the default response give the
 * number of rules
 * that were run in the analysis.
 * For very old analyses this data is not available,
 * and `0` is returned in
 * this field.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/sarif+json`**: Instead of returning a summary of the analysis, this endpoint returns a subset of the
 * analysis data that was uploaded. The data is formatted as [SARIF version
 * 2.1.0](https://docs.oasis-open.org/sarif/sarif/v2.1.0/cs01/sarif-v2.1.0-cs01.html). It also returns additional data such
 * as the `github/alertNumber` and `github/alertUrl` properties.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to
 * use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository}
 * Tags: code-scanning
 */
export async function codeScanningGetAnalysis<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    analysis_id: number;
  },
  opts?: FetcherData,
): Promise<CodeScanningAnalysis> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CodeScanningAnalysis]]] } },
  });
}
/**
 * Delete a code scanning analysis from a repository
 * Deletes a specified code scanning analysis from a repository.
 *
 * You can delete one analysis at a time.
 * To delete a series
 * of analyses, start with the most recent analysis and work backwards.
 * Conceptually, the process is similar to the undo
 * function in a text editor.
 *
 * When you list the analyses for a repository,
 * one or more will be identified as deletable in
 * the response:
 *
 * ```
 * "deletable": true
 * ```
 *
 * An analysis is deletable when it's the most recent in a set of
 * analyses.
 * Typically, a repository will have multiple sets of analyses
 * for each enabled code scanning tool,
 * where a set
 * is determined by a unique combination of analysis values:
 *
 * * `ref`
 * * `tool`
 * * `category`
 *
 * If you attempt to delete an
 * analysis that is not the most recent in a set,
 * you'll get a 400 response with the message:
 *
 * ```
 * Analysis specified is
 * not deletable.
 * ```
 *
 * The response from a successful `DELETE` operation provides you with
 * two alternative URLs for
 * deleting the next analysis in the set:
 * `next_analysis_url` and `confirm_delete_url`.
 * Use the `next_analysis_url` URL if
 * you want to avoid accidentally deleting the final analysis
 * in a set. This is a useful option if you want to preserve at
 * least one analysis
 * for the specified tool in your repository.
 * Use the `confirm_delete_url` URL if you are content to
 * remove all analyses for a tool.
 * When you delete the last analysis in a set, the value of `next_analysis_url` and
 * `confirm_delete_url`
 * in the 200 response is `null`.
 *
 * As an example of the deletion process,
 * let's imagine that you added
 * a workflow that configured a particular code scanning tool
 * to analyze the code in a repository. This tool has added 15
 * analyses:
 * 10 on the default branch, and another 5 on a topic branch.
 * You therefore have two separate sets of analyses
 * for this tool.
 * You've now decided that you want to remove all of the analyses for the tool.
 * To do this you must make 15
 * separate deletion requests.
 * To start, you must find an analysis that's identified as deletable.
 * Each set of analyses
 * always has one that's identified as deletable.
 * Having found the deletable analysis for one of the two sets,
 * delete this
 * analysis and then continue deleting the next analysis in the set until they're all deleted.
 * Then repeat the process for
 * the second set.
 * The procedure therefore consists of a nested loop:
 *
 * **Outer loop**:
 * * List the analyses for the
 * repository, filtered by tool.
 * * Parse this list to find a deletable analysis. If found:
 *
 *   **Inner loop**:
 *   * Delete
 * the identified analysis.
 *   * Parse the response for the value of `confirm_delete_url` and, if found, use this in the
 * next iteration.
 *
 * The above process assumes that you want to remove all trace of the tool's analyses from the GitHub user
 * interface, for the specified repository, and it therefore uses the `confirm_delete_url` value. Alternatively, you could
 * use the `next_analysis_url` value, which would leave the last analysis in each set undeleted to avoid removing a tool's
 * analysis entirely.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint
 * with private or public repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#delete-a-code-scanning-analysis-from-a-repository}
 * Tags: code-scanning
 */
export async function codeScanningDeleteAnalysis<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    analysis_id: number;
    confirm_delete?: string | null;
  },
  opts?: FetcherData,
): Promise<CodeScanningAnalysisDeletion> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/analyses/{analysis_id}',
    params,
    method: r.HttpMethod.DELETE,
    queryParams: ['confirm_delete'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List CodeQL databases for a repository
 * Lists the CodeQL databases that are available in a repository.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `security_events` scope to use this endpoint with private or public repositories, or the `public_repo` scope to
 * use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#list-codeql-databases-for-a-repository}
 * Tags: code-scanning
 */
export async function codeScanningListCodeqlDatabases<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CodeScanningCodeqlDatabase[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/codeql/databases',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_CodeScanningCodeqlDatabase]]],
      },
    },
  });
}
/**
 * Get a CodeQL database for a repository
 * Gets a CodeQL database for a language in a repository.
 *
 * By default this endpoint returns JSON metadata about the CodeQL
 * database. To
 * download the CodeQL database binary content, set the `Accept` header of the request
 * to
 * [`application/zip`](https://docs.github.com/rest/overview/media-types), and make sure
 * your HTTP client is configured to
 * follow redirects or use the `Location` header
 * to make a second request to get the redirect URL.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public
 * repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#get-a-codeql-database-for-a-repository}
 * Tags: code-scanning
 */
export async function codeScanningGetCodeqlDatabase<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    language: string;
  },
  opts?: FetcherData,
): Promise<CodeScanningCodeqlDatabase | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/codeql/databases/{language}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_CodeScanningCodeqlDatabase]]] },
    },
  });
}
/**
 * Get a code scanning default setup configuration
 * Gets a code scanning default setup configuration.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint with
 * only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#get-a-code-scanning-default-setup-configuration}
 * Tags: code-scanning
 */
export async function codeScanningGetDefaultSetup<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CodeScanningDefaultSetup> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/default-setup',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_CodeScanningDefaultSetup]]] },
    },
  });
}
/**
 * Update a code scanning default setup configuration
 * Updates a code scanning default setup configuration.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint with private or public repositories, or the `public_repo` scope to use this endpoint
 * with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#update-a-code-scanning-default-setup-configuration}
 * Tags: code-scanning
 */
export async function codeScanningUpdateDefaultSetup<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: CodeScanningDefaultSetupUpdate,
  opts?: FetcherData,
): Promise<EmptyObject | CodeScanningDefaultSetupUpdateResponse> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/default-setup',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Upload an analysis as SARIF data
 * Uploads SARIF data containing the results of a code scanning analysis to make the results available in a repository. For
 * troubleshooting information, see "[Troubleshooting SARIF
 * uploads](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif)."
 *
 * There are two places where you
 * can upload code scanning results.
 *  - If you upload to a pull request, for example `--ref refs/pull/42/merge` or `--ref
 * refs/pull/42/head`, then the results appear as alerts in a pull request check. For more information, see "[Triaging code
 * scanning alerts in pull requests](/code-security/secure-coding/triaging-code-scanning-alerts-in-pull-requests)."
 *  - If
 * you upload to a branch, for example `--ref refs/heads/my-branch`, then the results appear in the **Security** tab for
 * your repository. For more information, see "[Managing code scanning alerts for your
 * repository](/code-security/secure-coding/managing-code-scanning-alerts-for-your-repository#viewing-the-alerts-for-a-repository)."
 *
 * You
 * must compress the SARIF-formatted analysis data that you want to upload, using `gzip`, and then encode it as a Base64
 * format string. For example:
 *
 * ```
 * gzip -c analysis-data.sarif | base64 -w0
 * ```
 *
 * SARIF upload supports a maximum number of
 * entries per the following data objects, and an analysis will be rejected if any of these objects is above its maximum
 * value. For some objects, there are additional values over which the entries will be ignored while keeping the most
 * important entries whenever applicable.
 * To get the most out of your analysis when it includes data above the supported
 * limits, try to optimize the analysis configuration. For example, for the CodeQL tool, identify and remove the most noisy
 * queries. For more information, see "[SARIF results exceed one or more
 * limits](https://docs.github.com/code-security/code-scanning/troubleshooting-sarif/results-exceed-limit)."
 *
 *
 * | **SARIF
 * data**                   | **Maximum values** | **Additional limits**
 *
 * |
 * |----------------------------------|:------------------:|----------------------------------------------------------------------------------|
 * |
 * Runs per file                    |         20         |
 * |
 * | Results per run                  |       25,000       | Only the top 5,000 results will be included,
 * prioritized by severity.            |
 * | Rules per run                    |       25,000       |
 * |
 * | Tool extensions per run          |        100         |
 * |
 * | Thread Flow Locations per result |
 * 10,000       | Only the top 1,000 Thread Flow Locations will be included, using prioritization. |
 * | Location per result
 * |       1,000        | Only 100 locations will be included.                                             |
 * |
 * Tags per rule	                   |         20         | Only 10 tags will be included.
 * |
 *
 *
 * The `202 Accepted` response includes an `id` value.
 * You can use this ID to check the status of the
 * upload by using it in the `/sarifs/{sarif_id}` endpoint.
 * For more information, see "[Get information about a SARIF
 * upload](/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload)."
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `security_events` scope to use this endpoint with private or public repositories, or the
 * `public_repo` scope to use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#upload-an-analysis-as-sarif-data}
 * Tags: code-scanning
 */
export async function codeScanningUploadSarif<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    commit_sha: CodeScanningAnalysisCommitSha;
    ref: CodeScanningRefFull;
    sarif: CodeScanningAnalysisSarifFile;
    /**
     * The base directory used in the analysis, as it appears in the SARIF file.
     * This property is used to convert file paths from absolute to relative, so that alerts can be mapped to their correct location in the repository.
     * @example "file:///github/workspace/"
     */
    checkout_uri?: string;
    /**
     * The time that the analysis run began. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    started_at?: Date;
    /**
     * The name of the tool used to generate the code scanning analysis. If this parameter is not used, the tool name defaults to "API". If the uploaded SARIF contains a tool GUID, this will be available for filtering using the `tool_guid` parameter of operations such as `GET /repos/{owner}/{repo}/code-scanning/alerts`.
     */
    tool_name?: string;
    /**
     * Whether the SARIF file will be validated according to the code scanning specifications.
     * This parameter is intended to help integrators ensure that the uploaded SARIF files are correctly rendered by code scanning.
     */
    validate?: boolean;
  },
  opts?: FetcherData,
): Promise<CodeScanningSarifsReceipt> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/sarifs',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get information about a SARIF upload
 * Gets information about a SARIF upload, including the status and the URL of the analysis that was uploaded so that you
 * can retrieve details of the analysis. For more information, see "[Get a code scanning analysis for a
 * repository](/rest/code-scanning/code-scanning#get-a-code-scanning-analysis-for-a-repository)."
 * OAuth app tokens and
 * personal access tokens (classic) need the `security_events` scope to use this endpoint with private or public
 * repositories, or the `public_repo` scope to use this endpoint with only public repositories.
 * Learn more at {@link https://docs.github.com/rest/code-scanning/code-scanning#get-information-about-a-sarif-upload}
 * Tags: code-scanning
 */
export async function codeScanningGetSarif<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    sarif_id: string;
  },
  opts?: FetcherData,
): Promise<CodeScanningSarifsStatus> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/code-scanning/sarifs/{sarif_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List CODEOWNERS errors
 * List any syntax errors that are detected in the CODEOWNERS
 * file.
 *
 * For more information about the correct CODEOWNERS
 * syntax,
 * see "[About code
 * owners](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/customizing-your-repository/about-code-owners)."
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-codeowners-errors}
 * Tags: repos
 */
export async function reposCodeownersErrors<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref?: string;
  },
  opts?: FetcherData,
): Promise<CodeownersErrors> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codeowners/errors',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List codespaces in a repository for the authenticated user
 * Lists the codespaces associated to a specified repository and the authenticated user.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#list-codespaces-in-a-repository-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesListInRepositoryForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  codespaces: Codespace[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'codespaces'], ['loop'], ['ref', $date_Codespace]]],
      },
    },
  });
}
/**
 * Create a codespace in a repository
 * Creates a codespace owned by the authenticated user in the specified repository.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#create-a-codespace-in-a-repository}
 * Tags: codespaces
 */
export async function codespacesCreateWithRepoForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Git ref (typically a branch name) for this codespace
     */
    ref?: string;
    /**
     * The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
     */
    location?: string;
    /**
     * The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
     */
    geo?: 'EuropeWest' | 'SoutheastAsia' | 'UsEast' | 'UsWest';
    /**
     * IP for location auto-detection when proxying a request
     */
    client_ip?: string;
    /**
     * Machine type to use for this codespace
     */
    machine?: string;
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    devcontainer_path?: string;
    /**
     * Whether to authorize requested permissions from devcontainer.json
     */
    multi_repo_permissions_opt_out?: boolean;
    /**
     * Working directory for this codespace
     */
    working_directory?: string;
    /**
     * Time in minutes before codespace stops from inactivity
     */
    idle_timeout_minutes?: number;
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    retention_period_minutes?: number;
  } | null,
  opts?: FetcherData,
): Promise<Codespace> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Codespace]]] } },
    '202': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * List devcontainer configurations in a repository for the authenticated user
 * Lists the devcontainer.json files associated with a specified repository and the authenticated user. These files
 * specify
 * launchpoint configurations for codespaces created within the repository.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#list-devcontainer-configurations-in-a-repository-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesListDevcontainersInRepositoryForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  devcontainers: {
    path: string;
    name?: string;
    display_name?: string;
  }[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/devcontainers',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List available machine types for a repository
 * List the machine types available for a given repository based on its configuration.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/machines#list-available-machine-types-for-a-repository}
 * Tags: codespaces
 */
export async function codespacesRepoMachinesForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    location?: string;
    client_ip?: string;
    ref?: string;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      machines: CodespaceMachine[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/machines',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['location', 'client_ip', 'ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get default attributes for a codespace
 * Gets the default attributes for codespaces created by the user with the repository.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#get-default-attributes-for-a-codespace}
 * Tags: codespaces
 */
export async function codespacesPreFlightWithRepoForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref?: string;
    client_ip?: string;
  },
  opts?: FetcherData,
): Promise<{
  billable_owner?: SimpleUser;
  defaults?: {
    location: string;
    devcontainer_path: string | null;
  };
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/new',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['ref', 'client_ip'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if permissions defined by a devcontainer have been accepted by the authenticated user
 * Checks whether the permissions defined by a given devcontainer configuration have been accepted by the authenticated
 * user.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#check-if-permissions-defined-by-a-devcontainer-have-been-accepted-by-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesCheckPermissionsForDevcontainer<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
    devcontainer_path: string;
  },
  opts?: FetcherData,
): Promise<CodespacesPermissionsCheckForDevcontainer> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/permissions_check',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['ref', 'devcontainer_path'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository secrets
 * Lists all development environment secrets available in a repository without revealing their encrypted
 * values.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/repository-secrets#list-repository-secrets}
 * Tags: codespaces
 */
export async function codespacesListRepoSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: RepoCodespacesSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'secrets'],
            ['loop'],
            ['ref', $date_RepoCodespacesSecret],
          ],
        ],
      },
    },
  });
}
/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to
 * encrypt a secret before you can create or update
 * secrets.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * If the repository is private, OAuth app
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key}
 * Tags: codespaces
 */
export async function codespacesGetRepoPublicKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CodespacesPublicKey> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository secret
 * Gets a single repository development environment secret without revealing its encrypted value.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-secret}
 * Tags: codespaces
 */
export async function codespacesGetRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<RepoCodespacesSecret> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepoCodespacesSecret]]] } },
  });
}
/**
 * Create or update a repository secret
 * Creates or updates a repository development environment secret with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/repository-secrets#create-or-update-a-repository-secret}
 * Tags: codespaces
 */
export async function codespacesCreateOrUpdateRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/codespaces/repository-secrets#get-a-repository-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a repository secret
 * Deletes a development environment secret in a repository using the secret name.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/repository-secrets#delete-a-repository-secret}
 * Tags: codespaces
 */
export async function codespacesDeleteRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository collaborators
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that
 * are direct collaborators, organization members with access through team memberships, organization members with access
 * through default organization permissions, and organization owners.
 * Organization members with write, maintain, or admin
 * privileges on the organization-owned repository can use this endpoint.
 *
 * Team members will include the members of child
 * teams.
 *
 * The authenticated user must have push access to the repository to use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/collaborators/collaborators#list-repository-collaborators}
 * Tags: repos
 */
export async function reposListCollaborators<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    affiliation?: 'outside' | 'direct' | 'all';
    permission?: 'pull' | 'triage' | 'push' | 'maintain' | 'admin';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Collaborator[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/collaborators',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['affiliation', 'permission', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if a user is a repository collaborator
 * For organization-owned repositories, the list of collaborators includes outside collaborators, organization members that
 * are direct collaborators, organization members with access through team memberships, organization members with access
 * through default organization permissions, and organization owners.
 *
 * Team members will include the members of child
 * teams.
 *
 * The authenticated user must have push access to the repository to use this endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `read:org` and `repo` scopes to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/collaborators/collaborators#check-if-a-user-is-a-repository-collaborator}
 * Tags: repos
 */
export async function reposCheckCollaborator<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/collaborators/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add a repository collaborator
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * Adding an outside collaborator may be
 * restricted by enterprise administrators. For more information, see "[Enforcing repository management policies in your
 * enterprise](https://docs.github.com/admin/policies/enforcing-policies-for-your-enterprise/enforcing-repository-management-policies-in-your-enterprise#enforcing-a-policy-for-inviting-outside-collaborators-to-repositories)."
 *
 * For
 * more information on permission levels, see "[Repository permission levels for an
 * organization](https://docs.github.com/github/setting-up-and-managing-organizations-and-teams/repository-permission-levels-for-an-organization#permission-levels-for-repositories-owned-by-an-organization)".
 * There are restrictions on which permissions can be granted to organization members when an organization base role is in
 * place. In this case, the permission being given must be equal to or higher than the org base permission. Otherwise, the
 * request will fail with:
 *
 * ```
 * Cannot assign {member} permission of {role name}
 * ```
 *
 * Note that, if you choose not to pass
 * any parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see
 * "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 *
 * The invitee will
 * receive a notification that they have been invited to the repository, which they must accept or decline. They may do
 * this via the notifications page, the email they receive, or by using the
 * [API](https://docs.github.com/rest/collaborators/invitations).
 *
 * **Updating an existing collaborator's permission
 * level**
 *
 * The endpoint can also be used to change the permissions of an existing collaborator without first removing and
 * re-adding the collaborator. To change the permissions, use the same endpoint and pass a different `permission`
 * parameter. The response will be a `204`, with no other indication that the permission level changed.
 *
 * **Rate
 * limits**
 *
 * You are limited to sending 50 invitations to a repository per 24 hour period. Note there is no limit if you
 * are inviting organization members to an organization repository.
 * Learn more at {@link https://docs.github.com/rest/collaborators/collaborators#add-a-repository-collaborator}
 * Tags: repos
 */
export async function reposAddCollaborator<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    username: string;
  },
  body: {
    /**
     * The permission to grant the collaborator. **Only valid on organization-owned repositories.** We accept the following permissions to be set: `pull`, `triage`, `push`, `maintain`, `admin` and you can also specify a custom repository role name, if the owning organization has defined any.
     * @defaultValue "push"
     */
    permission?: string;
  },
  opts?: FetcherData,
): Promise<RepositoryInvitation | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/collaborators/{username}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_RepositoryInvitation]]] } },
  });
}
/**
 * Remove a repository collaborator
 * Removes a collaborator from a repository.
 *
 * To use this endpoint, the authenticated user must either be an administrator
 * of the repository or target themselves for removal.
 *
 * This endpoint also:
 * - Cancels any outstanding invitations
 * -
 * Unasigns the user from any issues
 * - Removes access to organization projects if the user is not an organization member
 * and is not a collaborator on any other organization repositories.
 * - Unstars the repository
 * - Updates access permissions
 * to packages
 *
 * Removing a user as a collaborator has the following effects on forks:
 *  - If the user had access to a fork
 * through their membership to this repository, the user will also be removed from the fork.
 *  - If the user had their own
 * fork of the repository, the fork will be deleted.
 *  - If the user still has read access to the repository, open pull
 * requests by this user from a fork will be denied.
 *
 * **Note**: A user can still have access to the repository through
 * organization permissions like base repository permissions.
 *
 * Although the API responds immediately, the additional
 * permission updates might take some extra time to complete in the background.
 *
 * For more information on fork permissions,
 * see "[About permissions and visibility of
 * forks](https://docs.github.com/pull-requests/collaborating-with-pull-requests/working-with-forks/about-permissions-and-visibility-of-forks)".
 * Learn more at {@link https://docs.github.com/rest/collaborators/collaborators#remove-a-repository-collaborator}
 * Tags: repos
 */
export async function reposRemoveCollaborator<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/collaborators/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get repository permissions for a user
 * Checks the repository permission of a collaborator. The possible repository
 * permissions are `admin`, `write`, `read`,
 * and `none`.
 *
 * *Note*: The `permission` attribute provides the legacy base roles of `admin`, `write`, `read`, and `none`,
 * where the
 * `maintain` role is mapped to `write` and the `triage` role is mapped to `read`. To determine the role assigned
 * to the
 * collaborator, see the `role_name` attribute, which will provide the full role name, including custom roles.
 * The
 * `permissions` hash can also be used to determine which base level of access the collaborator has to the repository.
 * Learn more at {@link https://docs.github.com/rest/collaborators/collaborators#get-repository-permissions-for-a-user}
 * Tags: repos
 */
export async function reposGetCollaboratorPermissionLevel<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<RepositoryCollaboratorPermission> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/collaborators/{username}/permission',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List commit comments for a repository
 * Lists the commit comments for a specified repository. Comments are ordered by ascending ID.
 *
 * This endpoint supports the
 * following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/commits/comments#list-commit-comments-for-a-repository}
 * Tags: repos
 */
export async function reposListCommitCommentsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<CommitComment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_CommitComment]]] } },
  });
}
/**
 * Get a commit comment
 * Gets a specified commit comment.
 *
 * This endpoint supports the following custom media types. For more information, see
 * "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/commits/comments#get-a-commit-comment}
 * Tags: repos
 */
export async function reposGetCommitComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<CommitComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/comments/{comment_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CommitComment]]] } },
  });
}
/**
 * Update a commit comment
 * Updates the contents of a specified commit comment.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/commits/comments#update-a-commit-comment}
 * Tags: repos
 */
export async function reposUpdateCommitComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  body: {
    /**
     * The contents of the comment
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<CommitComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/comments/{comment_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CommitComment]]] } },
  });
}
/**
 * Delete a commit comment
 * Learn more at {@link https://docs.github.com/rest/commits/comments#delete-a-commit-comment}
 * Tags: repos
 */
export async function reposDeleteCommitComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/comments/{comment_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List reactions for a commit comment
 * List the reactions to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-commit-comment}
 * Tags: reactions
 */
export async function reactionsListForCommitComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/comments/{comment_id}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for a commit comment
 * Create a reaction to a [commit comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment). A response
 * with an HTTP `200` status means that you already added the reaction type to this commit comment.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-commit-comment}
 * Tags: reactions
 */
export async function reactionsCreateForCommitComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the commit comment.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/comments/{comment_id}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Reaction]]] } },
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * Delete a commit comment reaction
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
 * /repositories/:repository_id/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a [commit
 * comment](https://docs.github.com/rest/commits/comments#get-a-commit-comment).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#delete-a-commit-comment-reaction}
 * Tags: reactions
 */
export async function reactionsDeleteForCommitComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
    reaction_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/comments/{comment_id}/reactions/{reaction_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List commits
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of
 * verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type |
 * Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature
 * in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their
 * meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit.
 * |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the
 * `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the
 * signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made
 * the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * |
 * `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does
 * not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No
 * user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email
 * address in the commit was associated with a user, but the email address is not verified on their account. |
 * |
 * `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the
 * signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * |
 * `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be
 * cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors
 * applied, so the signature is considered to be verified. |
 * Learn more at {@link https://docs.github.com/rest/commits/commits#list-commits}
 * Tags: repos
 */
export async function reposListCommits<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    sha?: string;
    path?: string;
    author?: string;
    committer?: string;
    since?: Date;
    until?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Commit[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'sha',
      'path',
      'author',
      'committer',
      'since',
      'until',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List branches for HEAD commit
 * Protected branches are available in public repositories with GitHub Free and GitHub Free for organizations, and in
 * public and private repositories with GitHub Pro, GitHub Team, GitHub Enterprise Cloud, and GitHub Enterprise Server. For
 * more information, see [GitHub's products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help documentation.
 *
 * Returns all branches where the given commit SHA is the HEAD, or latest commit for the
 * branch.
 * Learn more at {@link https://docs.github.com/rest/commits/commits#list-branches-for-head-commit}
 * Tags: repos
 */
export async function reposListBranchesForHeadCommit<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    commit_sha: string;
  },
  opts?: FetcherData,
): Promise<BranchShort[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{commit_sha}/branches-where-head',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List commit comments
 * Lists the comments for a specified commit.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/commits/comments#list-commit-comments}
 * Tags: repos
 */
export async function reposListCommentsForCommit<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    commit_sha: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<CommitComment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{commit_sha}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_CommitComment]]] } },
  });
}
/**
 * Create a commit comment
 * Create a comment for a commit using its `:commit_sha`.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * This endpoint supports the following
 * custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/commits/comments#create-a-commit-comment}
 * Tags: repos
 */
export async function reposCreateCommitComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    commit_sha: string;
  },
  body: {
    /**
     * The contents of the comment.
     */
    body: string;
    /**
     * Relative path of the file to comment on.
     */
    path?: string;
    /**
     * Line index in the diff to comment on.
     */
    position?: number;
    /**
     * **Deprecated**. Use **position** parameter instead. Line number in the file to comment on.
     */
    line?: number;
  },
  opts?: FetcherData,
): Promise<CommitComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{commit_sha}/comments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_CommitComment]]] } },
  });
}
/**
 * List pull requests associated with a commit
 * Lists the merged pull request that introduced the commit to the repository. If the commit is not present in the default
 * branch, will only return open pull requests associated with the commit.
 *
 * To list the open or merged pull requests
 * associated with a branch, you can set the `commit_sha` parameter to the branch name.
 * Learn more at {@link https://docs.github.com/rest/commits/commits#list-pull-requests-associated-with-a-commit}
 * Tags: repos
 */
export async function reposListPullRequestsAssociatedWithCommit<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    commit_sha: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<PullRequestSimple[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{commit_sha}/pulls',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_PullRequestSimple]]] },
    },
  });
}
/**
 * Get a commit
 * Returns the contents of a single commit reference. You must have `read` access for the repository to use this
 * endpoint.
 *
 * **Note:** If there are more than 300 files in the commit diff and the default JSON media type is requested,
 * the response will include pagination link headers for the remaining files, up to a limit of 3000 files. Each page
 * contains the static commit information, and the only changes are to the file listing.
 *
 * This endpoint supports the
 * following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)." Pagination query
 * parameters are not supported for these media types.
 *
 * - **`application/vnd.github.diff`**: Returns the diff of the
 * commit. Larger diffs may time out and return a 5xx status code.
 * - **`application/vnd.github.patch`**: Returns the patch
 * of the commit. Diffs with binary data will have no `patch` property. Larger diffs may time out and return a 5xx status
 * code.
 * - **`application/vnd.github.sha`**: Returns the commit's SHA-1 hash. You can use this endpoint to check if a
 * remote reference's SHA-1 hash is the same as your local reference's SHA-1 hash by providing the local SHA-1 reference as
 * the ETag.
 *
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the
 * result of verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name |
 * Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the
 * signature in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and
 * their meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the
 * commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the
 * `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the
 * signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made
 * the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * |
 * `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does
 * not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No
 * user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email
 * address in the commit was associated with a user, but the email address is not verified on their account. |
 * |
 * `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the
 * signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * |
 * `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be
 * cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors
 * applied, so the signature is considered to be verified. |
 * Learn more at {@link https://docs.github.com/rest/commits/commits#get-a-commit}
 * Tags: repos
 */
export async function reposGetCommit<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    page?: number;
    per_page?: number;
    ref: string;
  },
  opts?: FetcherData,
): Promise<Commit> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{ref}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List check runs for a Git reference
 * Lists check runs for a commit ref. The `ref` can be a SHA, branch name, or a tag name.
 *
 * **Note:** The endpoints to
 * manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch
 * in a forked repository are not detected and return an empty `pull_requests` array.
 *
 * If there are more than 1000 check
 * suites on a single git reference, this endpoint will limit check runs to the 1000 most recent check suites. To iterate
 * over all possible check runs, use the [List check suites for a Git
 * reference](https://docs.github.com/rest/reference/checks#list-check-suites-for-a-git-reference) endpoint and provide the
 * `check_suite_id` parameter to the [List check runs in a check
 * suite](https://docs.github.com/rest/reference/checks#list-check-runs-in-a-check-suite) endpoint.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `repo` scope to use this endpoint on a private repository.
 * Learn more at {@link https://docs.github.com/rest/checks/runs#list-check-runs-for-a-git-reference}
 * Tags: checks
 */
export async function checksListForRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
    check_name?: string;
    status?: 'queued' | 'in_progress' | 'completed';
    filter?: 'latest' | 'all';
    per_page?: number;
    page?: number;
    app_id?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  check_runs: CheckRun[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{ref}/check-runs',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'check_name',
      'status',
      'filter',
      'per_page',
      'page',
      'app_id',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'check_runs'], ['loop'], ['ref', $date_CheckRun]]],
      },
    },
  });
}
/**
 * List check suites for a Git reference
 * Lists check suites for a commit `ref`. The `ref` can be a SHA, branch name, or a tag name.
 *
 * **Note:** The endpoints to
 * manage checks only look for pushes in the repository where the check suite or check run were created. Pushes to a branch
 * in a forked repository are not detected and return an empty `pull_requests` array and a `null` value for
 * `head_branch`.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint on a
 * private repository.
 * Learn more at {@link https://docs.github.com/rest/checks/suites#list-check-suites-for-a-git-reference}
 * Tags: checks
 */
export async function checksListSuitesForRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
    app_id?: number;
    check_name?: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  check_suites: CheckSuite[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{ref}/check-suites',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['app_id', 'check_name', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'check_suites'], ['loop'], ['ref', $date_CheckSuite]],
        ],
      },
    },
  });
}
/**
 * Get the combined status for a specific reference
 * Users with pull access in a repository can access a combined view of commit statuses for a given ref. The ref can be a
 * SHA, a branch name, or a tag name.
 *
 *
 * Additionally, a combined `state` is returned. The `state` is one of:
 *
 * *
 * **failure** if any of the contexts report as `error` or `failure`
 * *   **pending** if there are no statuses or a context
 * is `pending`
 * *   **success** if the latest status for all contexts is `success`
 * Learn more at {@link https://docs.github.com/rest/commits/statuses#get-the-combined-status-for-a-specific-reference}
 * Tags: repos
 */
export async function reposGetCombinedStatusForRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<CombinedCommitStatus> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{ref}/status',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CombinedCommitStatus]]] } },
  });
}
/**
 * List commit statuses for a reference
 * Users with pull access in a repository can view commit statuses for a given ref. The ref can be a SHA, a branch name, or
 * a tag name. Statuses are returned in reverse chronological order. The first status in the list will be the latest
 * one.
 *
 * This resource is also available via a legacy route: `GET /repos/:owner/:repo/statuses/:ref`.
 * Learn more at {@link https://docs.github.com/rest/commits/statuses#list-commit-statuses-for-a-reference}
 * Tags: repos
 */
export async function reposListCommitStatusesForRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Status[] | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/commits/{ref}/statuses',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get community profile metrics
 * Returns all community profile metrics for a repository. The repository cannot be a fork.
 *
 * The returned metrics include
 * an overall health score, the repository description, the presence of documentation, the
 * detected code of conduct, the
 * detected license, and the presence of ISSUE\_TEMPLATE, PULL\_REQUEST\_TEMPLATE,
 * README, and CONTRIBUTING files.
 *
 * The
 * `health_percentage` score is defined as a percentage of how many of
 * the recommended community health files are present.
 * For more information, see
 * "[About community profiles for public
 * repositories](https://docs.github.com/communities/setting-up-your-project-for-healthy-contributions/about-community-profiles-for-public-repositories)."
 *
 * `content_reports_enabled`
 * is only returned for organization-owned repositories.
 * Learn more at {@link https://docs.github.com/rest/metrics/community#get-community-profile-metrics}
 * Tags: repos
 */
export async function reposGetCommunityProfileMetrics<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CommunityProfile> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/community/profile',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CommunityProfile]]] } },
  });
}
/**
 * Compare two commits
 * Compares two commits against one another. You can compare refs (branches or tags) and commit SHAs in the same
 * repository, or you can compare refs and commit SHAs that exist in different repositories within the same repository
 * network, including fork branches. For more information about how to view a repository's network, see "[Understanding
 * connections between
 * repositories](https://docs.github.com/repositories/viewing-activity-and-data-for-your-repository/understanding-connections-between-repositories)."
 *
 * This
 * endpoint is equivalent to running the `git log BASE..HEAD` command, but it returns commits in a different order. The
 * `git log BASE..HEAD` command returns commits in reverse chronological order, whereas the API returns commits in
 * chronological order.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.diff`**: Returns the diff of the commit.
 * - **`application/vnd.github.patch`**: Returns the
 * patch of the commit. Diffs with binary data will have no `patch` property.
 *
 * The API response includes details about the
 * files that were changed between the two commits. This includes the status of the change (if a file was added, removed,
 * modified, or renamed), and details of the change itself. For example, files with a `renamed` status have a
 * `previous_filename` field showing the previous filename of the file, and files with a `modified` status have a `patch`
 * field showing the changes made to the file.
 *
 * When calling this endpoint without any paging parameter (`per_page` or
 * `page`), the returned list is limited to 250 commits, and the last commit in the list is the most recent of the entire
 * comparison.
 *
 * **Working with large comparisons**
 *
 * To process a response with a large number of commits, use a query
 * parameter (`per_page` or `page`) to paginate the results. When using pagination:
 *
 * - The list of changed files is only
 * shown on the first page of results, but it includes all changed files for the entire comparison.
 * - The results are
 * returned in chronological order, but the last commit in the returned list may not be the most recent one in the entire
 * set if there are more pages of results.
 *
 * For more information on working with pagination, see "[Using pagination in the
 * REST API](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api)."
 *
 * **Signature verification
 * object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's
 * signature. The `verification` object includes the following fields:
 *
 * | Name | Type | Description |
 * | ---- | ---- |
 * ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be verified.
 * |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in table
 * below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string` | The
 * value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value |
 * Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * |
 * `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * |
 * `gpgverify_error` | There was an error communicating with the signature verification service. |
 * |
 * `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does
 * not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No
 * user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email
 * address in the commit was associated with a user, but the email address is not verified on their account. |
 * |
 * `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the
 * signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * |
 * `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be
 * cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors
 * applied, so the signature is considered to be verified. |
 * Learn more at {@link https://docs.github.com/rest/commits/commits#compare-two-commits}
 * Tags: repos
 */
export async function reposCompareCommits<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    page?: number;
    per_page?: number;
    basehead: string;
  },
  opts?: FetcherData,
): Promise<CommitComparison> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/compare/{basehead}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get repository content
 * Gets the contents of a file or directory in a repository. Specify the file path or directory with the `path` parameter.
 * If you omit the `path` parameter, you will receive the contents of the repository's root directory.
 *
 * This endpoint
 * supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw file contents for files and symlinks.
 * -
 * **`application/vnd.github.html+json`**: Returns the file contents in HTML. Markup languages are rendered to HTML using
 * GitHub's open-source [Markup library](https://github.com/github/markup).
 * - **`application/vnd.github.object+json`**:
 * Returns the contents in a consistent object format regardless of the content type. For example, instead of an array of
 * objects for a directory, the response will be an object with an `entries` attribute containing the array of objects.
 *
 * If
 * the content is a directory, the response will be an array of objects, one object for each item in the directory. When
 * listing the contents of a directory, submodules have their "type" specified as "file". Logically, the value _should_ be
 * "submodule". This behavior exists [for backwards compatibility purposes](https://git.io/v1YCW). In the next major
 * version of the API, the type will be returned as "submodule".
 *
 * If the content is a symlink and the symlink's target is a
 * normal file in the repository, then the API responds with the content of the file. Otherwise, the API responds with an
 * object describing the symlink itself.
 *
 * If the content is a submodule, the `submodule_git_url` field identifies the
 * location of the submodule repository, and the `sha` identifies a specific commit within the submodule repository. Git
 * uses the given URL when cloning the submodule repository, and checks out the submodule at that specific commit. If the
 * submodule repository is not hosted on github.com, the Git URLs (`git_url` and `_links["git"]`) and the github.com URLs
 * (`html_url` and `_links["html"]`) will have null values.
 *
 * **Notes**:
 *
 * - To get a repository's contents recursively, you
 * can [recursively get the tree](https://docs.github.com/rest/git/trees#get-a-tree).
 * - This API has an upper limit of
 * 1,000 files for a directory. If you need to retrieve
 * more files, use the [Git Trees
 * API](https://docs.github.com/rest/git/trees#get-a-tree).
 * - Download URLs expire and are meant to be used just once. To
 * ensure the download URL does not expire, please use the contents API to obtain a fresh download URL for each download.
 * -
 * If the requested file's size is:
 *   - 1 MB or smaller: All features of this endpoint are supported.
 *   - Between 1-100 MB:
 * Only the `raw` or `object` custom media types are supported. Both will work as normal, except that when using the
 * `object` media type, the `content` field will be an empty
 * string and the `encoding` field will be `"none"`. To get the
 * contents of these larger files, use the `raw` media type.
 *   - Greater than 100 MB: This endpoint is not supported.
 * Learn more at {@link https://docs.github.com/rest/repos/contents#get-repository-content}
 * Tags: repos
 */
export async function reposGetContent<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    path: string;
    ref?: string;
  },
  opts?: FetcherData,
): Promise<
  (ContentDirectory | ContentFile | ContentSymlink | ContentSubmodule) | any
> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/contents/{path}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create or update file contents
 * Creates a new file or replaces an existing file in a repository.
 *
 * **Note:** If you use this endpoint and the "[Delete a
 * file](https://docs.github.com/rest/repos/contents/#delete-a-file)" endpoint in parallel, the concurrent requests will
 * conflict and you will receive errors. You must use these endpoints serially instead.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint. The `workflow` scope is also required in order to
 * modify files in the `.github/workflows` directory.
 * Learn more at {@link https://docs.github.com/rest/repos/contents#create-or-update-file-contents}
 * Tags: repos
 */
export async function reposCreateOrUpdateFileContents<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    path: string;
  },
  body: {
    /**
     * The commit message.
     */
    message: string;
    /**
     * The new file content, using Base64 encoding.
     */
    content: string;
    /**
     * **Required if you are updating a file**. The blob SHA of the file being replaced.
     */
    sha?: string;
    /**
     * The branch name. Default: the repository’s default branch.
     */
    branch?: string;
    /**
     * The person that committed the file. Default: the authenticated user.
     */
    committer?: {
      /**
       * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
       */
      name: string;
      /**
       * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
       */
      email: string;
      /**
       * @example "\"2013-01-05T13:13:22+05:00\""
       */
      date?: string;
    };
    /**
     * The author of the file. Default: The `committer` or the authenticated user if you omit `committer`.
     */
    author?: {
      /**
       * The name of the author or committer of the commit. You'll receive a `422` status code if `name` is omitted.
       */
      name: string;
      /**
       * The email of the author or committer of the commit. You'll receive a `422` status code if `email` is omitted.
       */
      email: string;
      /**
       * @example "\"2013-01-15T17:13:22+05:00\""
       */
      date?: string;
    };
  },
  opts?: FetcherData,
): Promise<FileCommit> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/contents/{path}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a file
 * Deletes a file in a repository.
 *
 * You can provide an additional `committer` parameter, which is an object containing
 * information about the committer. Or, you can provide an `author` parameter, which is an object containing information
 * about the author.
 *
 * The `author` section is optional and is filled in with the `committer` information if omitted. If the
 * `committer` information is omitted, the authenticated user's information is used.
 *
 * You must provide values for both
 * `name` and `email`, whether you choose to use `author` or `committer`. Otherwise, you'll receive a `422` status
 * code.
 *
 * **Note:** If you use this endpoint and the "[Create or update file
 * contents](https://docs.github.com/rest/repos/contents/#create-or-update-file-contents)" endpoint in parallel, the
 * concurrent requests will conflict and you will receive errors. You must use these endpoints serially instead.
 * Learn more at {@link https://docs.github.com/rest/repos/contents#delete-a-file}
 * Tags: repos
 */
export async function reposDeleteFile<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    path: string;
  },
  body: {
    /**
     * The commit message.
     */
    message: string;
    /**
     * The blob SHA of the file being deleted.
     */
    sha: string;
    /**
     * The branch name. Default: the repository’s default branch
     */
    branch?: string;
    /**
     * object containing information about the committer.
     */
    committer?: {
      /**
       * The name of the author (or committer) of the commit
       */
      name?: string;
      /**
       * The email of the author (or committer) of the commit
       */
      email?: string;
    };
    /**
     * object containing information about the author.
     */
    author?: {
      /**
       * The name of the author (or committer) of the commit
       */
      name?: string;
      /**
       * The email of the author (or committer) of the commit
       */
      email?: string;
    };
  },
  opts?: FetcherData,
): Promise<FileCommit> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/contents/{path}',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository contributors
 * Lists contributors to the specified repository and sorts them by the number of commits per contributor in descending
 * order. This endpoint may return information that is a few hours old because the GitHub REST API caches contributor data
 * to improve performance.
 *
 * GitHub identifies contributors by author email address. This endpoint groups contribution
 * counts by GitHub user, which includes all associated email addresses. To improve performance, only the first 500 author
 * email addresses in the repository link to GitHub users. The rest will appear as anonymous contributors without
 * associated GitHub user information.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-repository-contributors}
 * Tags: repos
 */
export async function reposListContributors<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    anon?: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Contributor[] | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/contributors',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['anon', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List Dependabot alerts for a repository
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this
 * endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/dependabot/alerts#list-dependabot-alerts-for-a-repository}
 * Tags: dependabot
 */
export async function dependabotListAlertsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    state?: string;
    severity?: string;
    ecosystem?: string;
    package?: string;
    manifest?: string;
    scope?: 'development' | 'runtime';
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    page?: number;
    per_page?: number;
    before?: string;
    after?: string;
    first?: number;
    last?: number;
  },
  opts?: FetcherData,
): Promise<DependabotAlert[] | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'state',
      'severity',
      'ecosystem',
      'package',
      'manifest',
      'scope',
      'sort',
      'direction',
      'page',
      'per_page',
      'before',
      'after',
      'first',
      'last',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_DependabotAlert]]] },
    },
  });
}
/**
 * Get a Dependabot alert
 * OAuth app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this
 * endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/dependabot/alerts#get-a-dependabot-alert}
 * Tags: dependabot
 */
export async function dependabotGetAlert<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  },
  opts?: FetcherData,
): Promise<DependabotAlert | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_DependabotAlert]]] } },
  });
}
/**
 * Update a Dependabot alert
 * The authenticated user must have access to security alerts for the repository to use this endpoint. For more
 * information, see "[Granting access to security
 * alerts](https://docs.github.com/repositories/managing-your-repositorys-settings-and-features/enabling-features-for-your-repository/managing-security-and-analysis-settings-for-your-repository#granting-access-to-security-alerts)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `security_events` scope to use this endpoint. If this endpoint
 * is only used with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/dependabot/alerts#update-a-dependabot-alert}
 * Tags: dependabot
 */
export async function dependabotUpdateAlert<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  },
  body: {
    /**
     * The state of the Dependabot alert.
     * A `dismissed_reason` must be provided when setting the state to `dismissed`.
     */
    state: 'dismissed' | 'open';
    /**
     * **Required when `state` is `dismissed`.** A reason for dismissing the alert.
     */
    dismissed_reason?:
      | 'fix_started'
      | 'inaccurate'
      | 'no_bandwidth'
      | 'not_used'
      | 'tolerable_risk';
    /**
     * An optional comment associated with dismissing the alert.
     */
    dismissed_comment?: string;
  },
  opts?: FetcherData,
): Promise<DependabotAlert> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/alerts/{alert_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_DependabotAlert]]] } },
  });
}
/**
 * List repository secrets
 * Lists all secrets available in a repository without revealing their encrypted
 * values.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#list-repository-secrets}
 * Tags: dependabot
 */
export async function dependabotListRepoSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: DependabotSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'secrets'], ['loop'], ['ref', $date_DependabotSecret]],
        ],
      },
    },
  });
}
/**
 * Get a repository public key
 * Gets your public key, which you need to encrypt secrets. You need to
 * encrypt a secret before you can create or update
 * secrets. Anyone with read access
 * to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint if the repository is private.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key}
 * Tags: dependabot
 */
export async function dependabotGetRepoPublicKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<DependabotPublicKey> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository secret
 * Gets a single repository secret without revealing its encrypted value.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#get-a-repository-secret}
 * Tags: dependabot
 */
export async function dependabotGetRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<DependabotSecret> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_DependabotSecret]]] } },
  });
}
/**
 * Create or update a repository secret
 * Creates or updates a repository secret with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#create-or-update-a-repository-secret}
 * Tags: dependabot
 */
export async function dependabotCreateOrUpdateRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get a repository public key](https://docs.github.com/rest/dependabot/secrets#get-a-repository-public-key) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id?: string;
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a repository secret
 * Deletes a secret in a repository using the secret name.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependabot/secrets#delete-a-repository-secret}
 * Tags: dependabot
 */
export async function dependabotDeleteRepoSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependabot/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a diff of the dependencies between commits
 * Gets the diff of the dependency changes between two commits of a repository, based on the changes to the dependency
 * manifests made in those commits.
 * Learn more at {@link https://docs.github.com/rest/dependency-graph/dependency-review#get-a-diff-of-the-dependencies-between-commits}
 * Tags: dependency-graph
 */
export async function dependencyGraphDiffRange<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    basehead: string;
    name?: string;
  },
  opts?: FetcherData,
): Promise<DependencyGraphDiff> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependency-graph/compare/{basehead}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['name'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Export a software bill of materials (SBOM) for a repository.
 * Exports the software bill of materials (SBOM) for a repository in SPDX JSON format.
 * Learn more at {@link https://docs.github.com/rest/dependency-graph/sboms#export-a-software-bill-of-materials-sbom-for-a-repository}
 * Tags: dependency-graph
 */
export async function dependencyGraphExportSbom<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<DependencyGraphSpdxSbom> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependency-graph/sbom',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a snapshot of dependencies for a repository
 * Create a new snapshot of a repository's dependencies.
 *
 * The authenticated user must have access to the repository.
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/dependency-graph/dependency-submission#create-a-snapshot-of-dependencies-for-a-repository}
 * Tags: dependency-graph
 */
export async function dependencyGraphCreateRepositorySnapshot<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: Snapshot,
  opts?: FetcherData,
): Promise<{
  /**
   * ID of the created snapshot.
   */
  id: number;
  /**
   * The time at which the snapshot was created.
   */
  created_at: string;
  /**
   * Either "SUCCESS", "ACCEPTED", or "INVALID". "SUCCESS" indicates that the snapshot was successfully created and the repository's dependencies were updated. "ACCEPTED" indicates that the snapshot was successfully created, but the repository's dependencies were not updated. "INVALID" indicates that the snapshot was malformed.
   */
  result: string;
  /**
   * A message providing further details about the result, such as why the dependencies were not updated.
   */
  message: string;
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dependency-graph/snapshots',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List deployments
 * Simple filtering of deployments is available via query parameters:
 * Learn more at {@link https://docs.github.com/rest/deployments/deployments#list-deployments}
 * Tags: repos
 */
export async function reposListDeployments<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    sha?: string;
    ref?: string;
    task?: string;
    environment?: string | null;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Deployment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/deployments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sha', 'ref', 'task', 'environment', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Deployment]]] } },
  });
}
/**
 * Create a deployment
 * Deployments offer a few configurable parameters with certain defaults.
 *
 * The `ref` parameter can be any named branch,
 * tag, or SHA. At GitHub we often deploy branches and verify them
 * before we merge a pull request.
 *
 * The `environment`
 * parameter allows deployments to be issued to different runtime environments. Teams often have
 * multiple environments for
 * verifying their applications, such as `production`, `staging`, and `qa`. This parameter
 * makes it easier to track which
 * environments have requested deployments. The default environment is `production`.
 *
 * The `auto_merge` parameter is used to
 * ensure that the requested ref is not behind the repository's default branch. If
 * the ref _is_ behind the default branch
 * for the repository, we will attempt to merge it for you. If the merge succeeds,
 * the API will return a successful merge
 * commit. If merge conflicts prevent the merge from succeeding, the API will
 * return a failure response.
 *
 * By default,
 * [commit statuses](https://docs.github.com/rest/commits/statuses) for every submitted context must be in a
 * `success`
 * state. The `required_contexts` parameter allows you to specify a subset of contexts that must be `success`, or
 * to
 * specify contexts that have not yet been submitted. You are not required to use commit statuses to deploy. If you
 * do
 * not require any contexts or create any commit statuses, the deployment will always succeed.
 *
 * The `payload` parameter
 * is available for any extra information that a deployment system might need. It is a JSON text
 * field that will be passed
 * on when a deployment event is dispatched.
 *
 * The `task` parameter is used by the deployment system to allow different
 * execution paths. In the web world this might
 * be `deploy:migrations` to run schema changes on the system. In the compiled
 * world this could be a flag to compile an
 * application with debugging enabled.
 *
 * Merged branch response:
 *
 * You will see this
 * response when GitHub automatically merges the base branch into the topic branch instead of creating
 * a deployment. This
 * auto-merge happens when:
 * *   Auto-merge option is enabled in the repository
 * *   Topic branch does not include the latest
 * changes on the base branch, which is `master` in the response example
 * *   There are no merge conflicts
 *
 * If there are no
 * new commits in the base branch, a new request to create a deployment should give a successful
 * response.
 *
 * Merge conflict
 * response:
 *
 * This error happens when the `auto_merge` option is enabled and when the default branch (in this case
 * `master`), can't
 * be merged into the branch that's being deployed (in this case `topic-branch`), due to merge
 * conflicts.
 *
 * Failed commit status checks:
 *
 * This error happens when the `required_contexts` parameter indicates that one
 * or more contexts need to have a `success`
 * status for the commit to be deployed, but one or more of the required contexts
 * do not have a state of `success`.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or
 * `repo_deployment` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/deployments#create-a-deployment}
 * Tags: repos
 */
export async function reposCreateDeployment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The ref to deploy. This can be a branch, tag, or SHA.
     */
    ref: string;
    /**
     * Specifies a task to execute (e.g., `deploy` or `deploy:migrations`).
     * @defaultValue "deploy"
     */
    task?: string;
    /**
     * Attempts to automatically merge the default branch into the requested ref, if it's behind the default branch.
     * @defaultValue true
     */
    auto_merge?: boolean;
    /**
     * The [status](https://docs.github.com/rest/commits/statuses) contexts to verify against commit status checks. If you omit this parameter, GitHub verifies all unique contexts before creating a deployment. To bypass checking entirely, pass an empty array. Defaults to all unique contexts.
     */
    required_contexts?: string[];
    payload?:
      | {
          [key: string]: any;
        }
      | string;
    /**
     * Name for the target deployment environment (e.g., `production`, `staging`, `qa`).
     * @defaultValue "production"
     */
    environment?: string;
    /**
     * Short description of the deployment.
     */
    description?: string | null;
    /**
     * Specifies if the given environment is specific to the deployment and will no longer exist at some point in the future. Default: `false`
     */
    transient_environment?: boolean;
    /**
     * Specifies if the given environment is one that end-users directly interact with. Default: `true` when `environment` is `production` and `false` otherwise.
     */
    production_environment?: boolean;
  },
  opts?: FetcherData,
): Promise<
  | Deployment
  | {
      message?: string;
    }
> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/deployments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Deployment]]] } },
  });
}
/**
 * Get a deployment
 * Learn more at {@link https://docs.github.com/rest/deployments/deployments#get-a-deployment}
 * Tags: repos
 */
export async function reposGetDeployment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    deployment_id: number;
  },
  opts?: FetcherData,
): Promise<Deployment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/deployments/{deployment_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Deployment]]] } },
  });
}
/**
 * Delete a deployment
 * If the repository only has one deployment, you can delete the deployment regardless of its status. If the repository has
 * more than one deployment, you can only delete inactive deployments. This ensures that repositories with multiple
 * deployments will always have an active deployment.
 *
 * To set a deployment as inactive, you must:
 *
 * *   Create a new
 * deployment that is active so that the system has a record of the current state, then delete the previously active
 * deployment.
 * *   Mark the active deployment as inactive by adding any non-successful deployment status.
 *
 * For more
 * information, see "[Create a deployment](https://docs.github.com/rest/deployments/deployments/#create-a-deployment)" and
 * "[Create a deployment status](https://docs.github.com/rest/deployments/statuses#create-a-deployment-status)."
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` or `repo_deployment` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/deployments#delete-a-deployment}
 * Tags: repos
 */
export async function reposDeleteDeployment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    deployment_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/deployments/{deployment_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List deployment statuses
 * Users with pull access can view deployment statuses for a deployment:
 * Learn more at {@link https://docs.github.com/rest/deployments/statuses#list-deployment-statuses}
 * Tags: repos
 */
export async function reposListDeploymentStatuses<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    deployment_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<DeploymentStatus[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_DeploymentStatus]]] },
    },
  });
}
/**
 * Create a deployment status
 * Users with `push` access can create deployment statuses for a given deployment.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo_deployment` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/statuses#create-a-deployment-status}
 * Tags: repos
 */
export async function reposCreateDeploymentStatus<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    deployment_id: number;
  },
  body: {
    /**
     * The state of the status. When you set a transient deployment to `inactive`, the deployment will be shown as `destroyed` in GitHub.
     */
    state:
      | 'error'
      | 'failure'
      | 'inactive'
      | 'in_progress'
      | 'queued'
      | 'pending'
      | 'success';
    /**
     * The target URL to associate with this status. This URL should contain output to keep the user updated while the task is running or serve as historical information for what happened in the deployment. **Note:** It's recommended to use the `log_url` parameter, which replaces `target_url`.
     */
    target_url?: string;
    /**
     * The full URL of the deployment's output. This parameter replaces `target_url`. We will continue to accept `target_url` to support legacy uses, but we recommend replacing `target_url` with `log_url`. Setting `log_url` will automatically set `target_url` to the same value. Default: `""`
     */
    log_url?: string;
    /**
     * A short description of the status. The maximum description length is 140 characters.
     */
    description?: string;
    /**
     * Name for the target deployment environment, which can be changed when setting a deploy status. For example, `production`, `staging`, or `qa`. If not defined, the environment of the previous status on the deployment will be used, if it exists. Otherwise, the environment of the deployment will be used.
     */
    environment?: string;
    /**
     * Sets the URL for accessing your environment. Default: `""`
     */
    environment_url?: string;
    /**
     * Adds a new `inactive` status to all prior non-transient, non-production environment deployments with the same repository and `environment` name as the created status's deployment. An `inactive` status is only added to deployments that had a `success` state. Default: `true`
     */
    auto_inactive?: boolean;
  },
  opts?: FetcherData,
): Promise<DeploymentStatus> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_DeploymentStatus]]] } },
  });
}
/**
 * Get a deployment status
 * Users with pull access can view a deployment status for a deployment:
 * Learn more at {@link https://docs.github.com/rest/deployments/statuses#get-a-deployment-status}
 * Tags: repos
 */
export async function reposGetDeploymentStatus<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    deployment_id: number;
    status_id: number;
  },
  opts?: FetcherData,
): Promise<DeploymentStatus> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/deployments/{deployment_id}/statuses/{status_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_DeploymentStatus]]] } },
  });
}
/**
 * Create a repository dispatch event
 * You can use this endpoint to trigger a webhook event called `repository_dispatch` when you want activity that happens
 * outside of GitHub to trigger a GitHub Actions workflow or GitHub App webhook. You must configure your GitHub Actions
 * workflow or GitHub App to run when the `repository_dispatch` event occurs. For an example `repository_dispatch` webhook
 * payload, see "[RepositoryDispatchEvent](https://docs.github.com/webhooks/event-payloads/#repository_dispatch)."
 *
 * The
 * `client_payload` parameter is available for any extra information that your workflow might need. This parameter is a
 * JSON payload that will be passed on when the webhook event is dispatched. For example, the `client_payload` can include
 * a message that a user would like to send using a GitHub Actions workflow. Or the `client_payload` can be used as a test
 * to debug your workflow.
 *
 * This input example shows how you can use the `client_payload` as a test to debug your
 * workflow.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#create-a-repository-dispatch-event}
 * Tags: repos
 */
export async function reposCreateDispatchEvent<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * A custom webhook event name. Must be 100 characters or fewer.
     */
    event_type: string;
    /**
     * JSON payload with extra information about the webhook event that your action or workflow may use. The maximum number of top-level properties is 10.
     */
    client_payload?: {
      [key: string]: any;
    };
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/dispatches',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List environments
 * Lists the environments for a repository.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/deployments/environments#list-environments}
 * Tags: repos
 */
export async function reposGetAllEnvironments<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  /**
   * The number of environments in this repository
   * @example 5
   */
  total_count?: number;
  environments?: Environment[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'environments'], ['loop'], ['ref', $date_Environment]],
        ],
      },
    },
  });
}
/**
 * Get an environment
 * **Note:** To get information about name patterns that branches must match in order to deploy to this environment, see
 * "[Get a deployment branch policy](/rest/deployments/branch-policies#get-a-deployment-branch-policy)."
 *
 * Anyone with read
 * access to the repository can use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/deployments/environments#get-an-environment}
 * Tags: repos
 */
export async function reposGetEnvironment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
  },
  opts?: FetcherData,
): Promise<Environment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Environment]]] } },
  });
}
/**
 * Create or update an environment
 * Create or update an environment with protection rules, such as required reviewers. For more information about
 * environment protection rules, see
 * "[Environments](/actions/reference/environments#environment-protection-rules)."
 *
 * **Note:** To create or update name
 * patterns that branches must match in order to deploy to this environment, see "[Deployment branch
 * policies](/rest/deployments/branch-policies)."
 *
 * **Note:** To create or update secrets for an environment, see "[GitHub
 * Actions secrets](/rest/actions/secrets)."
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope
 * to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/environments#create-or-update-an-environment}
 * Tags: repos
 */
export async function reposCreateOrUpdateEnvironment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
  },
  body: {
    wait_timer?: WaitTimer;
    prevent_self_review?: PreventSelfReview;
    /**
     * The people or teams that may review jobs that reference the environment. You can list up to six users or teams as reviewers. The reviewers must have at least read access to the repository. Only one of the required reviewers needs to approve the job for it to proceed.
     */
    reviewers?:
      | {
          type?: DeploymentReviewerType;
          /**
           * The id of the user or team who can review the deployment
           * @example 4532992
           */
          id?: number;
        }[]
      | null;
    deployment_branch_policy?: DeploymentBranchPolicySettings;
  } | null,
  opts?: FetcherData,
): Promise<Environment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Environment]]] } },
  });
}
/**
 * Delete an environment
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/environments#delete-an-environment}
 * Tags: repos
 */
export async function reposDeleteAnEnvironment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List deployment branch policies
 * Lists the deployment branch policies for an environment.
 *
 * Anyone with read access to the repository can use this
 * endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a
 * private repository.
 * Learn more at {@link https://docs.github.com/rest/deployments/branch-policies#list-deployment-branch-policies}
 * Tags: repos
 */
export async function reposListDeploymentBranchPolicies<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  /**
   * The number of deployment branch policies for the environment.
   * @example 2
   */
  total_count: number;
  branch_policies: DeploymentBranchPolicy[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a deployment branch policy
 * Creates a deployment branch or tag policy for an environment.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/branch-policies#create-a-deployment-branch-policy}
 * Tags: repos
 */
export async function reposCreateDeploymentBranchPolicy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
  },
  body: DeploymentBranchPolicyNamePatternWithType,
  opts?: FetcherData,
): Promise<DeploymentBranchPolicy | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a deployment branch policy
 * Gets a deployment branch or tag policy for an environment.
 *
 * Anyone with read access to the repository can use this
 * endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint with a
 * private repository.
 * Learn more at {@link https://docs.github.com/rest/deployments/branch-policies#get-a-deployment-branch-policy}
 * Tags: repos
 */
export async function reposGetDeploymentBranchPolicy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
    branch_policy_id: number;
  },
  opts?: FetcherData,
): Promise<DeploymentBranchPolicy> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update a deployment branch policy
 * Updates a deployment branch or tag policy for an environment.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/branch-policies#update-a-deployment-branch-policy}
 * Tags: repos
 */
export async function reposUpdateDeploymentBranchPolicy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
    branch_policy_id: number;
  },
  body: DeploymentBranchPolicyNamePattern,
  opts?: FetcherData,
): Promise<DeploymentBranchPolicy> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a deployment branch policy
 * Deletes a deployment branch or tag policy for an environment.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/branch-policies#delete-a-deployment-branch-policy}
 * Tags: repos
 */
export async function reposDeleteDeploymentBranchPolicy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
    branch_policy_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment-branch-policies/{branch_policy_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all deployment protection rules for an environment
 * Gets all custom deployment protection rules that are enabled for an environment. Anyone with read access to the
 * repository can use this endpoint. For more information about environments, see "[Using environments for
 * deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
 *
 * For
 * more information about the app that is providing this custom deployment rule, see the [documentation for the `GET
 * /apps/{app_slug}` endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/deployments/protection-rules#get-all-deployment-protection-rules-for-an-environment}
 * Tags: repos
 */
export async function reposGetAllDeploymentProtectionRules<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    environment_name: string;
    repo: string;
    owner: string;
  },
  opts?: FetcherData,
): Promise<{
  /**
   * The number of enabled custom deployment protection rules for this environment
   * @example 10
   */
  total_count?: number;
  custom_deployment_protection_rules?: DeploymentProtectionRule[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a custom deployment protection rule on an environment
 * Enable a custom deployment protection rule for an environment.
 *
 * The authenticated user must have admin or owner
 * permissions to the repository to use this endpoint.
 *
 * For more information about the app that is providing this custom
 * deployment rule, see the [documentation for the `GET /apps/{app_slug}`
 * endpoint](https://docs.github.com/rest/apps/apps#get-an-app).
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/protection-rules#create-a-custom-deployment-protection-rule-on-an-environment}
 * Tags: repos
 */
export async function reposCreateDeploymentProtectionRule<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    environment_name: string;
    repo: string;
    owner: string;
  },
  body: {
    /**
     * The ID of the custom app that will be enabled on the environment.
     */
    integration_id?: number;
  },
  opts?: FetcherData,
): Promise<DeploymentProtectionRule> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List custom deployment rule integrations available for an environment
 * Gets all custom deployment protection rule integrations that are available for an environment. Anyone with read access
 * to the repository can use this endpoint.
 *
 * For more information about environments, see "[Using environments for
 * deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
 *
 * For
 * more information about the app that is providing this custom deployment rule, see "[GET an
 * app](https://docs.github.com/rest/apps/apps#get-an-app)".
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/deployments/protection-rules#list-custom-deployment-rule-integrations-available-for-an-environment}
 * Tags: repos
 */
export async function reposListCustomDeploymentRuleIntegrations<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    environment_name: string;
    repo: string;
    owner: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<{
  /**
   * The total number of custom deployment protection rule integrations available for this environment.
   * @example 35
   */
  total_count?: number;
  available_custom_deployment_protection_rule_integrations?: CustomDeploymentRuleApp[];
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/apps',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a custom deployment protection rule
 * Gets an enabled custom deployment protection rule for an environment. Anyone with read access to the repository can use
 * this endpoint. For more information about environments, see "[Using environments for
 * deployment](https://docs.github.com/actions/deployment/targeting-different-environments/using-environments-for-deployment)."
 *
 * For
 * more information about the app that is providing this custom deployment rule, see [`GET
 * /apps/{app_slug}`](https://docs.github.com/rest/apps/apps#get-an-app).
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/deployments/protection-rules#get-a-custom-deployment-protection-rule}
 * Tags: repos
 */
export async function reposGetCustomDeploymentProtectionRule<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    environment_name: string;
    protection_rule_id: number;
  },
  opts?: FetcherData,
): Promise<DeploymentProtectionRule> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Disable a custom protection rule for an environment
 * Disables a custom deployment protection rule for an environment.
 *
 * The authenticated user must have admin or owner
 * permissions to the repository to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/deployments/protection-rules#disable-a-custom-protection-rule-for-an-environment}
 * Tags: repos
 */
export async function reposDisableDeploymentProtectionRule<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    environment_name: string;
    repo: string;
    owner: string;
    protection_rule_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/environments/{environment_name}/deployment_protection_rules/{protection_rule_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository events
 * **Note**: This API is not built to serve real-time use cases. Depending on the time of day, event latency can be
 * anywhere from 30s to 6h.
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-repository-events}
 * Tags: activity
 */
export async function activityListRepoEvents<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List forks
 * Learn more at {@link https://docs.github.com/rest/repos/forks#list-forks}
 * Tags: repos
 */
export async function reposListForks<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    sort?: 'newest' | 'oldest' | 'stargazers' | 'watchers';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/forks',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * Create a fork
 * Create a fork for the authenticated user.
 *
 * **Note**: Forking a Repository happens asynchronously. You may have to wait a
 * short period of time before you can access the git objects. If this takes longer than 5 minutes, be sure to contact
 * [GitHub Support](https://support.github.com/contact?tags=dotcom-rest-api).
 *
 * **Note**: Although this endpoint works with
 * GitHub Apps, the GitHub App must be installed on the destination account with access to all repositories and on the
 * source account with access to the source repository.
 * Learn more at {@link https://docs.github.com/rest/repos/forks#create-a-fork}
 * Tags: repos
 */
export async function reposCreateFork<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Optional parameter to specify the organization name if forking into an organization.
     */
    organization?: string;
    /**
     * When forking from an existing repository, a new name for the fork.
     */
    name?: string;
    /**
     * When forking from an existing repository, fork with only the default branch.
     */
    default_branch_only?: boolean;
  } | null,
  opts?: FetcherData,
): Promise<FullRepository> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/forks',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '202': { transforms: { date: [[['ref', $date_FullRepository]]] } },
  });
}
/**
 * Create a blob
 * Learn more at {@link https://docs.github.com/rest/git/blobs#create-a-blob}
 * Tags: git
 */
export async function gitCreateBlob<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The new blob's content.
     */
    content: string;
    /**
     * The encoding used for `content`. Currently, `"utf-8"` and `"base64"` are supported.
     * @defaultValue "utf-8"
     */
    encoding?: string;
  },
  opts?: FetcherData,
): Promise<ShortBlob> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/blobs',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a blob
 * The `content` in the response will always be Base64 encoded.
 *
 * This endpoint supports the following custom media types.
 * For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw blob data.
 * - **`application/vnd.github+json`**: Returns a JSON
 * representation of the blob with `content` as a base64 encoded string. This is the default if no media type is
 * specified.
 *
 * **Note** This endpoint supports blobs up to 100 megabytes in size.
 * Learn more at {@link https://docs.github.com/rest/git/blobs#get-a-blob}
 * Tags: git
 */
export async function gitGetBlob<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    file_sha: string;
  },
  opts?: FetcherData,
): Promise<Blob> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/blobs/{file_sha}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a commit
 * Creates a new Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
 *
 * **Signature verification
 * object**
 *
 * The response will include a `verification` object that describes the result of verifying the commit's
 * signature. The following fields are included in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ----
 * | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature in this commit to be
 * verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their meanings are enumerated in
 * the table below. |
 * | `signature` | `string` | The signature that was extracted from the commit. |
 * | `payload` | `string`
 * | The value that was signed. |
 *
 * These are the possible values for `reason` in the `verification` object:
 *
 * | Value |
 * Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the signature is expired. |
 * |
 * `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made the signature. |
 * |
 * `gpgverify_error` | There was an error communicating with the signature verification service. |
 * |
 * `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does
 * not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No
 * user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email
 * address in the commit was associated with a user, but the email address is not verified on their account. |
 * |
 * `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the
 * signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * |
 * `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be
 * cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors
 * applied, so the signature is considered to be verified. |
 * Learn more at {@link https://docs.github.com/rest/git/commits#create-a-commit}
 * Tags: git
 */
export async function gitCreateCommit<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The commit message
     */
    message: string;
    /**
     * The SHA of the tree object this commit points to
     */
    tree: string;
    /**
     * The SHAs of the commits that were the parents of this commit. If omitted or empty, the commit will be written as a root commit. For a single parent, an array of one SHA should be provided; for a merge commit, an array of more than one should be provided.
     */
    parents?: string[];
    /**
     * Information about the author of the commit. By default, the `author` will be the authenticated user and the current date. See the `author` and `committer` object below for details.
     */
    author?: {
      /**
       * The name of the author (or committer) of the commit
       */
      name: string;
      /**
       * The email of the author (or committer) of the commit
       */
      email: string;
      /**
       * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      date?: Date;
    };
    /**
     * Information about the person who is making the commit. By default, `committer` will use the information set in `author`. See the `author` and `committer` object below for details.
     */
    committer?: {
      /**
       * The name of the author (or committer) of the commit
       */
      name?: string;
      /**
       * The email of the author (or committer) of the commit
       */
      email?: string;
      /**
       * Indicates when this commit was authored (or committed). This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      date?: Date;
    };
    /**
     * The [PGP signature](https://en.wikipedia.org/wiki/Pretty_Good_Privacy) of the commit. GitHub adds the signature to the `gpgsig` header of the created commit. For a commit signature to be verifiable by Git or GitHub, it must be an ASCII-armored detached PGP signature over the string commit as it would be written to the object database. To pass a `signature` parameter, you need to first manually create a valid PGP signature, which can be complicated. You may find it easier to [use the command line](https://git-scm.com/book/id/v2/Git-Tools-Signing-Your-Work) to create signed commits.
     */
    signature?: string;
  },
  opts?: FetcherData,
): Promise<GitCommit> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/commits',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_GitCommit]]] } },
  });
}
/**
 * Get a commit object
 * Gets a Git [commit object](https://git-scm.com/book/en/v2/Git-Internals-Git-Objects).
 *
 * To get the contents of a commit,
 * see "[Get a commit](/rest/commits/commits#get-a-commit)."
 *
 * **Signature verification object**
 *
 * The response will include
 * a `verification` object that describes the result of verifying the commit's signature. The following fields are included
 * in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` |
 * Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for
 * verified value. Possible values and their meanings are enumerated in the table below. |
 * | `signature` | `string` | The
 * signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the
 * possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * |
 * `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the
 * usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the
 * signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently
 * unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP
 * signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the
 * commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email
 * address is not verified on their account. |
 * | `bad_email` | The `committer` email address in the commit is not included
 * in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not
 * been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * |
 * `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature.
 * |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 * Learn more at {@link https://docs.github.com/rest/git/commits#get-a-commit-object}
 * Tags: git
 */
export async function gitGetCommit<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    commit_sha: string;
  },
  opts?: FetcherData,
): Promise<GitCommit> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/commits/{commit_sha}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GitCommit]]] } },
  });
}
/**
 * List matching references
 * Returns an array of references from your Git database that match the supplied name. The `:ref` in the URL must be
 * formatted as `heads/<branch name>` for branches and `tags/<tag name>` for tags. If the `:ref` doesn't exist in the
 * repository, but existing refs start with `:ref`, they will be returned as an array.
 *
 * When you use this endpoint without
 * providing a `:ref`, it will return an array of all the references from your Git database, including notes and stashes if
 * they exist on the server. Anything in the namespace is returned, not just `heads` and `tags`.
 *
 * **Note:** You need to
 * explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger a test merge
 * commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability of pull
 * requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * If
 * you request matching references for a branch named `feature` but the branch `feature` doesn't exist, the response can
 * still include other matching head refs that start with the word `feature`, such as `featureA` and `featureB`.
 * Learn more at {@link https://docs.github.com/rest/git/refs#list-matching-references}
 * Tags: git
 */
export async function gitListMatchingRefs<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
  },
  opts?: FetcherData,
): Promise<GitRef[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/matching-refs/{ref}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a reference
 * Returns a single reference from your Git database. The `:ref` in the URL must be formatted as `heads/<branch name>` for
 * branches and `tags/<tag name>` for tags. If the `:ref` doesn't match an existing ref, a `404` is returned.
 *
 * **Note:**
 * You need to explicitly [request a pull request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) to trigger
 * a test merge commit, which checks the mergeability of pull requests. For more information, see "[Checking mergeability
 * of pull
 * requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 * Learn more at {@link https://docs.github.com/rest/git/refs#get-a-reference}
 * Tags: git
 */
export async function gitGetRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
  },
  opts?: FetcherData,
): Promise<GitRef> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/ref/{ref}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a reference
 * Creates a reference for your repository. You are unable to create new references for empty repositories, even if the
 * commit SHA-1 hash used exists. Empty repositories are repositories without branches.
 * Learn more at {@link https://docs.github.com/rest/git/refs#create-a-reference}
 * Tags: git
 */
export async function gitCreateRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the fully qualified reference (ie: `refs/heads/master`). If it doesn't start with 'refs' and have at least two slashes, it will be rejected.
     */
    ref: string;
    /**
     * The SHA1 value for this reference.
     */
    sha: string;
  },
  opts?: FetcherData,
): Promise<GitRef> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/refs',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update a reference
 * Learn more at {@link https://docs.github.com/rest/git/refs#update-a-reference}
 * Tags: git
 */
export async function gitUpdateRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
  },
  body: {
    /**
     * The SHA1 value to set this reference to
     */
    sha: string;
    /**
     * Indicates whether to force the update or to make sure the update is a fast-forward update. Leaving this out or setting it to `false` will make sure you're not overwriting work.
     */
    force?: boolean;
  },
  opts?: FetcherData,
): Promise<GitRef> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/refs/{ref}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a reference
 * Learn more at {@link https://docs.github.com/rest/git/refs#delete-a-reference}
 * Tags: git
 */
export async function gitDeleteRef<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/refs/{ref}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a tag object
 * Note that creating a tag object does not create the reference that makes a tag in Git. If you want to create an
 * annotated tag in Git, you have to do this call to create the tag object, and then
 * [create](https://docs.github.com/rest/git/refs#create-a-reference) the `refs/tags/[tag]` reference. If you want to
 * create a lightweight tag, you only have to [create](https://docs.github.com/rest/git/refs#create-a-reference) the tag
 * reference - this call would be unnecessary.
 *
 * **Signature verification object**
 *
 * The response will include a
 * `verification` object that describes the result of verifying the commit's signature. The following fields are included
 * in the `verification` object:
 *
 * | Name | Type | Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` |
 * Indicates whether GitHub considers the signature in this commit to be verified. |
 * | `reason` | `string` | The reason for
 * verified value. Possible values and their meanings are enumerated in table below. |
 * | `signature` | `string` | The
 * signature that was extracted from the commit. |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the
 * possible values for `reason` in the `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * |
 * `expired_key` | The key that made the signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the
 * usage flags in the GPG key that made the signature. |
 * | `gpgverify_error` | There was an error communicating with the
 * signature verification service. |
 * | `gpgverify_unavailable` | The signature verification service is currently
 * unavailable. |
 * | `unsigned` | The object does not include a signature. |
 * | `unknown_signature_type` | A non-PGP
 * signature was found in the commit. |
 * | `no_user` | No user was associated with the `committer` email address in the
 * commit. |
 * | `unverified_email` | The `committer` email address in the commit was associated with a user, but the email
 * address is not verified on their account. |
 * | `bad_email` | The `committer` email address in the commit is not included
 * in the identities of the PGP key that made the signature. |
 * | `unknown_key` | The key that made the signature has not
 * been registered with any user's account. |
 * | `malformed_signature` | There was an error parsing the signature. |
 * |
 * `invalid` | The signature could not be cryptographically verified using the key whose key-id was found in the signature.
 * |
 * | `valid` | None of the above errors applied, so the signature is considered to be verified. |
 * Learn more at {@link https://docs.github.com/rest/git/tags#create-a-tag-object}
 * Tags: git
 */
export async function gitCreateTag<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The tag's name. This is typically a version (e.g., "v0.0.1").
     */
    tag: string;
    /**
     * The tag message.
     */
    message: string;
    /**
     * The SHA of the git object this is tagging.
     */
    object: string;
    /**
     * The type of the object we're tagging. Normally this is a `commit` but it can also be a `tree` or a `blob`.
     */
    type: 'commit' | 'tree' | 'blob';
    /**
     * An object with information about the individual creating the tag.
     */
    tagger?: {
      /**
       * The name of the author of the tag
       */
      name: string;
      /**
       * The email of the author of the tag
       */
      email: string;
      /**
       * When this object was tagged. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
       */
      date?: Date;
    };
  },
  opts?: FetcherData,
): Promise<GitTag> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/tags',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a tag
 * **Signature verification object**
 *
 * The response will include a `verification` object that describes the result of
 * verifying the commit's signature. The following fields are included in the `verification` object:
 *
 * | Name | Type |
 * Description |
 * | ---- | ---- | ----------- |
 * | `verified` | `boolean` | Indicates whether GitHub considers the signature
 * in this commit to be verified. |
 * | `reason` | `string` | The reason for verified value. Possible values and their
 * meanings are enumerated in table below. |
 * | `signature` | `string` | The signature that was extracted from the commit.
 * |
 * | `payload` | `string` | The value that was signed. |
 *
 * These are the possible values for `reason` in the
 * `verification` object:
 *
 * | Value | Description |
 * | ----- | ----------- |
 * | `expired_key` | The key that made the
 * signature is expired. |
 * | `not_signing_key` | The "signing" flag is not among the usage flags in the GPG key that made
 * the signature. |
 * | `gpgverify_error` | There was an error communicating with the signature verification service. |
 * |
 * `gpgverify_unavailable` | The signature verification service is currently unavailable. |
 * | `unsigned` | The object does
 * not include a signature. |
 * | `unknown_signature_type` | A non-PGP signature was found in the commit. |
 * | `no_user` | No
 * user was associated with the `committer` email address in the commit. |
 * | `unverified_email` | The `committer` email
 * address in the commit was associated with a user, but the email address is not verified on their account. |
 * |
 * `bad_email` | The `committer` email address in the commit is not included in the identities of the PGP key that made the
 * signature. |
 * | `unknown_key` | The key that made the signature has not been registered with any user's account. |
 * |
 * `malformed_signature` | There was an error parsing the signature. |
 * | `invalid` | The signature could not be
 * cryptographically verified using the key whose key-id was found in the signature. |
 * | `valid` | None of the above errors
 * applied, so the signature is considered to be verified. |
 * Learn more at {@link https://docs.github.com/rest/git/tags#get-a-tag}
 * Tags: git
 */
export async function gitGetTag<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    tag_sha: string;
  },
  opts?: FetcherData,
): Promise<GitTag> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/tags/{tag_sha}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a tree
 * The tree creation API accepts nested entries. If you specify both a tree and a nested path modifying that tree, this
 * endpoint will overwrite the contents of the tree with the new path contents, and create a new tree structure.
 *
 * If you
 * use this endpoint to add, delete, or modify the file contents in a tree, you will need to commit the tree and then
 * update a branch to point to the commit. For more information see "[Create a
 * commit](https://docs.github.com/rest/git/commits#create-a-commit)" and "[Update a
 * reference](https://docs.github.com/rest/git/refs#update-a-reference)."
 *
 * Returns an error if you try to delete a file
 * that does not exist.
 * Learn more at {@link https://docs.github.com/rest/git/trees#create-a-tree}
 * Tags: git
 */
export async function gitCreateTree<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Objects (of `path`, `mode`, `type`, and `sha`) specifying a tree structure.
     */
    tree: {
      /**
       * The file referenced in the tree.
       */
      path?: string;
      /**
       * The file mode; one of `100644` for file (blob), `100755` for executable (blob), `040000` for subdirectory (tree), `160000` for submodule (commit), or `120000` for a blob that specifies the path of a symlink.
       */
      mode?: '100644' | '100755' | '040000' | '160000' | '120000';
      /**
       * Either `blob`, `tree`, or `commit`.
       */
      type?: 'blob' | 'tree' | 'commit';
      /**
       * The SHA1 checksum ID of the object in the tree. Also called `tree.sha`. If the value is `null` then the file will be deleted.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      sha?: string | null;
      /**
       * The content you want this file to have. GitHub will write this blob out and use that SHA for this entry. Use either this, or `tree.sha`.
       *
       * **Note:** Use either `tree.sha` or `content` to specify the contents of the entry. Using both `tree.sha` and `content` will return an error.
       */
      content?: string;
    }[];
    /**
     * The SHA1 of an existing Git tree object which will be used as the base for the new tree. If provided, a new Git tree object will be created from entries in the Git tree object pointed to by `base_tree` and entries defined in the `tree` parameter. Entries defined in the `tree` parameter will overwrite items from `base_tree` with the same `path`. If you're creating new changes on a branch, then normally you'd set `base_tree` to the SHA1 of the Git tree object of the current latest commit on the branch you're working on.
     * If not provided, GitHub will create a new Git tree object from only the entries defined in the `tree` parameter. If you create a new commit pointing to such a tree, then all files which were a part of the parent commit's tree and were not defined in the `tree` parameter will be listed as deleted by the new commit.
     */
    base_tree?: string;
  },
  opts?: FetcherData,
): Promise<GitTree> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/trees',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a tree
 * Returns a single tree using the SHA1 value or ref name for that tree.
 *
 * If `truncated` is `true` in the response then the
 * number of items in the `tree` array exceeded our maximum limit. If you need to fetch more items, use the non-recursive
 * method of fetching trees, and fetch one sub-tree at a time.
 *
 *
 * **Note**: The limit for the `tree` array is 100,000
 * entries with a maximum size of 7 MB when using the `recursive` parameter.
 * Learn more at {@link https://docs.github.com/rest/git/trees#get-a-tree}
 * Tags: git
 */
export async function gitGetTree<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    tree_sha: string;
    recursive?: string;
  },
  opts?: FetcherData,
): Promise<GitTree> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/git/trees/{tree_sha}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['recursive'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository webhooks
 * Lists webhooks for a repository. `last response` may return null if there have not been any deliveries within 30 days.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#list-repository-webhooks}
 * Tags: repos
 */
export async function reposListWebhooks<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Hook[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Hook]]] } },
  });
}
/**
 * Create a repository webhook
 * Repositories can have multiple webhooks installed. Each webhook should have a unique `config`. Multiple webhooks
 * can
 * share the same `config` as long as those webhooks do not have any `events` that overlap.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#create-a-repository-webhook}
 * Tags: repos
 */
export async function reposCreateWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Use `web` to create a webhook. Default: `web`. This parameter only accepts the value `web`.
     */
    name?: string;
    /**
     * Key/value pairs to provide settings for this webhook.
     */
    config?: {
      url?: WebhookConfigUrl;
      content_type?: WebhookConfigContentType;
      secret?: WebhookConfigSecret;
      insecure_ssl?: WebhookConfigInsecureSsl;
    };
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for.
     * @defaultValue
     * [
     *   "push"
     * ]
     */
    events?: string[];
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @defaultValue true
     */
    active?: boolean;
  } | null,
  opts?: FetcherData,
): Promise<Hook> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Hook]]] } },
  });
}
/**
 * Get a repository webhook
 * Returns a webhook configured in a repository. To get only the webhook `config` properties, see "[Get a webhook
 * configuration for a repository](/rest/webhooks/repo-config#get-a-webhook-configuration-for-a-repository)."
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#get-a-repository-webhook}
 * Tags: repos
 */
export async function reposGetWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<Hook> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Hook]]] } },
  });
}
/**
 * Update a repository webhook
 * Updates a webhook configured in a repository. If you previously had a `secret` set, you must provide the same `secret`
 * or set a new `secret` or the secret will be removed. If you are only updating individual webhook `config` properties,
 * use "[Update a webhook configuration for a
 * repository](/rest/webhooks/repo-config#update-a-webhook-configuration-for-a-repository)."
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#update-a-repository-webhook}
 * Tags: repos
 */
export async function reposUpdateWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
  },
  body: {
    config?: WebhookConfig;
    /**
     * Determines what [events](https://docs.github.com/webhooks/event-payloads) the hook is triggered for. This replaces the entire array of events.
     * @defaultValue
     * [
     *   "push"
     * ]
     */
    events?: string[];
    /**
     * Determines a list of events to be added to the list of events that the Hook triggers for.
     */
    add_events?: string[];
    /**
     * Determines a list of events to be removed from the list of events that the Hook triggers for.
     */
    remove_events?: string[];
    /**
     * Determines if notifications are sent when the webhook is triggered. Set to `true` to send notifications.
     * @defaultValue true
     */
    active?: boolean;
  },
  opts?: FetcherData,
): Promise<Hook> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Hook]]] } },
  });
}
/**
 * Delete a repository webhook
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#delete-a-repository-webhook}
 * Tags: repos
 */
export async function reposDeleteWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a webhook configuration for a repository
 * Returns the webhook configuration for a repository. To get more information about the webhook, including the `active`
 * state and `events`, use "[Get a repository webhook](/rest/webhooks/repos#get-a-repository-webhook)."
 *
 * OAuth app tokens
 * and personal access tokens (classic) need the `read:repo_hook` or `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#get-a-webhook-configuration-for-a-repository}
 * Tags: repos
 */
export async function reposGetWebhookConfigForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<WebhookConfig> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}/config',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update a webhook configuration for a repository
 * Updates the webhook configuration for a repository. To update more information about the webhook, including the `active`
 * state and `events`, use "[Update a repository webhook](/rest/webhooks/repos#update-a-repository-webhook)."
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `write:repo_hook` or `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#update-a-webhook-configuration-for-a-repository}
 * Tags: repos
 */
export async function reposUpdateWebhookConfigForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
  },
  body: {
    url?: WebhookConfigUrl;
    content_type?: WebhookConfigContentType;
    secret?: WebhookConfigSecret;
    insecure_ssl?: WebhookConfigInsecureSsl;
  },
  opts?: FetcherData,
): Promise<WebhookConfig> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}/config',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List deliveries for a repository webhook
 * Returns a list of webhook deliveries for a webhook configured in a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#list-deliveries-for-a-repository-webhook}
 * Tags: repos
 */
export async function reposListWebhookDeliveries<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
    per_page?: number;
    cursor?: string;
    redelivery?: boolean;
  },
  opts?: FetcherData,
): Promise<HookDeliveryItem[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'cursor', 'redelivery'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_HookDeliveryItem]]] },
    },
  });
}
/**
 * Get a delivery for a repository webhook
 * Returns a delivery for a webhook configured in a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#get-a-delivery-for-a-repository-webhook}
 * Tags: repos
 */
export async function reposGetWebhookDelivery<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
    delivery_id: number;
  },
  opts?: FetcherData,
): Promise<HookDelivery> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_HookDelivery]]] } },
  });
}
/**
 * Redeliver a delivery for a repository webhook
 * Redeliver a webhook delivery for a webhook configured in a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#redeliver-a-delivery-for-a-repository-webhook}
 * Tags: repos
 */
export async function reposRedeliverWebhookDelivery<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
    delivery_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}/deliveries/{delivery_id}/attempts',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Ping a repository webhook
 * This will trigger a [ping event](https://docs.github.com/webhooks/#ping-event) to be sent to the hook.
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#ping-a-repository-webhook}
 * Tags: repos
 */
export async function reposPingWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}/pings',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Test the push repository webhook
 * This will trigger the hook with the latest push to the current repository if the hook is subscribed to `push` events. If
 * the hook is not subscribed to `push` events, the server will respond with 204 but no test POST will be
 * generated.
 *
 * **Note**: Previously `/repos/:owner/:repo/hooks/:hook_id/test`
 * Learn more at {@link https://docs.github.com/rest/repos/webhooks#test-the-push-repository-webhook}
 * Tags: repos
 */
export async function reposTestPushWebhook<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    hook_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/hooks/{hook_id}/tests',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an import status
 * View the progress of an import.
 *
 * **Warning:** Due to very low levels of usage and available alternatives, this endpoint
 * is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see
 * the [changelog](https://gh.io/source-imports-api-deprecation).
 *
 * **Import status**
 *
 * This section includes details about
 * the possible values of the `status` field of the Import Progress response.
 *
 * An import that does not have errors will
 * progress through these steps:
 *
 * *   `detecting` - the "detection" step of the import is in progress because the request
 * did not include a `vcs` parameter. The import is identifying the type of source control present at the URL.
 * *
 * `importing` - the "raw" step of the import is in progress. This is where commit data is fetched from the original
 * repository. The import progress response will include `commit_count` (the total number of raw commits that will be
 * imported) and `percent` (0 - 100, the current progress through the import).
 * *   `mapping` - the "rewrite" step of the
 * import is in progress. This is where SVN branches are converted to Git branches, and where author updates are applied.
 * The import progress response does not include progress information.
 * *   `pushing` - the "push" step of the import is in
 * progress. This is where the importer updates the repository on GitHub. The import progress response will include
 * `push_percent`, which is the percent value reported by `git push` when it is "Writing objects".
 * *   `complete` - the
 * import is complete, and the repository is ready on GitHub.
 *
 * If there are problems, you will see one of these in the
 * `status` field:
 *
 * *   `auth_failed` - the import requires authentication in order to connect to the original repository.
 * To update authentication for the import, please see the [Update an
 * import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 * *   `error` - the import
 * encountered an error. The import progress response will include the `failed_step` and an error message. Contact [GitHub
 * Support](https://support.github.com/contact?tags=dotcom-rest-api) for more information.
 * *   `detection_needs_auth` - the
 * importer requires authentication for the originating repository to continue detection. To update authentication for the
 * import, please see the [Update an import](https://docs.github.com/rest/migrations/source-imports#update-an-import)
 * section.
 * *   `detection_found_nothing` - the importer didn't recognize any source control at the URL. To resolve,
 * [Cancel the import](https://docs.github.com/rest/migrations/source-imports#cancel-an-import) and
 * [retry](https://docs.github.com/rest/migrations/source-imports#start-an-import) with the correct URL.
 * *
 * `detection_found_multiple` - the importer found several projects or repositories at the provided URL. When this is the
 * case, the Import Progress response will also include a `project_choices` field with the possible project choices as
 * values. To update project choice, please see the [Update an
 * import](https://docs.github.com/rest/migrations/source-imports#update-an-import) section.
 *
 * **The project_choices
 * field**
 *
 * When multiple projects are found at the provided URL, the response hash will include a `project_choices` field,
 * the value of which is an array of hashes each representing a project choice. The exact key/value pairs of the project
 * hashes will differ depending on the version control type.
 *
 * **Git LFS related fields**
 *
 * This section includes details
 * about Git LFS related fields that may be present in the Import Progress response.
 *
 * *   `use_lfs` - describes whether the
 * import has been opted in or out of using Git LFS. The value can be `opt_in`, `opt_out`, or `undecided` if no action has
 * been taken.
 * *   `has_large_files` - the boolean value describing whether files larger than 100MB were found during the
 * `importing` step.
 * *   `large_files_size` - the total size in gigabytes of files larger than 100MB found in the
 * originating repository.
 * *   `large_files_count` - the total number of files larger than 100MB found in the originating
 * repository. To see a list of these files, make a "Get Large Files" request.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#get-an-import-status}
 * Tags: migrations
 */
export async function migrationsGetImportStatus<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<Import> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Start an import
 * Start a source import to a GitHub repository using GitHub Importer.
 * Importing into a GitHub repository with GitHub
 * Actions enabled is not supported and will
 * return a status `422 Unprocessable Entity` response.
 *
 * **Warning:** Due to very
 * low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00
 * UTC on April 12, 2024. For more details and alternatives, see the
 * [changelog](https://gh.io/source-imports-api-deprecation).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#start-an-import}
 * Tags: migrations
 */
export async function migrationsStartImport<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The URL of the originating repository.
     */
    vcs_url: string;
    /**
     * The originating VCS type. Without this parameter, the import job will take additional time to detect the VCS type before beginning the import. This detection step will be reflected in the response.
     */
    vcs?: 'subversion' | 'git' | 'mercurial' | 'tfvc';
    /**
     * If authentication is required, the username to provide to `vcs_url`.
     */
    vcs_username?: string;
    /**
     * If authentication is required, the password to provide to `vcs_url`.
     */
    vcs_password?: string;
    /**
     * For a tfvc import, the name of the project that is being imported.
     */
    tfvc_project?: string;
  },
  opts?: FetcherData,
): Promise<Import> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update an import
 * An import can be updated with credentials or a project choice by passing in the appropriate parameters in this
 * API
 * request. If no parameters are provided, the import will be restarted.
 *
 * Some servers (e.g. TFS servers) can have
 * several projects at a single URL. In those cases the import progress will
 * have the status `detection_found_multiple` and
 * the Import Progress response will include a `project_choices` array.
 * You can select the project to import by providing
 * one of the objects in the `project_choices` array in the update request.
 *
 * **Warning:** Due to very low levels of usage
 * and available alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12,
 * 2024. For more details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#update-an-import}
 * Tags: migrations
 */
export async function migrationsUpdateImport<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The username to provide to the originating repository.
     */
    vcs_username?: string;
    /**
     * The password to provide to the originating repository.
     */
    vcs_password?: string;
    /**
     * The type of version control system you are migrating from.
     * @example "\"git\""
     */
    vcs?: 'subversion' | 'tfvc' | 'git' | 'mercurial';
    /**
     * For a tfvc import, the name of the project that is being imported.
     * @example "\"project1\""
     */
    tfvc_project?: string;
  } | null,
  opts?: FetcherData,
): Promise<Import> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Cancel an import
 * Stop an import for a repository.
 *
 * **Warning:** Due to very low levels of usage and available alternatives, this endpoint
 * is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see
 * the [changelog](https://gh.io/source-imports-api-deprecation).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#cancel-an-import}
 * Tags: migrations
 */
export async function migrationsCancelImport<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get commit authors
 * Each type of source control system represents authors in a different way. For example, a Git commit author has a display
 * name and an email address, but a Subversion commit author just has a username. The GitHub Importer will make the author
 * information valid, but the author might not be correct. For example, it will change the bare Subversion username `hubot`
 * into something like `hubot <hubot@12341234-abab-fefe-8787-fedcba987654>`.
 *
 * This endpoint and the [Map a commit
 * author](https://docs.github.com/rest/migrations/source-imports#map-a-commit-author) endpoint allow you to provide
 * correct Git author information.
 *
 * **Warning:** Due to very low levels of usage and available alternatives, this endpoint
 * is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see
 * the [changelog](https://gh.io/source-imports-api-deprecation).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#get-commit-authors}
 * Tags: migrations
 */
export async function migrationsGetCommitAuthors<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    since?: number;
  },
  opts?: FetcherData,
): Promise<PorterAuthor[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import/authors',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Map a commit author
 * Update an author's identity for the import. Your application can continue updating authors any time before you push
 * new
 * commits to the repository.
 *
 * **Warning:** Due to very low levels of usage and available alternatives, this endpoint is
 * deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more details and alternatives, see the
 * [changelog](https://gh.io/source-imports-api-deprecation).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#map-a-commit-author}
 * Tags: migrations
 */
export async function migrationsMapCommitAuthor<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    author_id: number;
  },
  body: {
    /**
     * The new Git author email.
     */
    email?: string;
    /**
     * The new Git author name.
     */
    name?: string;
  },
  opts?: FetcherData,
): Promise<PorterAuthor> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import/authors/{author_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get large files
 * List files larger than 100MB found during the import
 *
 * **Warning:** Due to very low levels of usage and available
 * alternatives, this endpoint is deprecated and will no longer be available from 00:00 UTC on April 12, 2024. For more
 * details and alternatives, see the [changelog](https://gh.io/source-imports-api-deprecation).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#get-large-files}
 * Tags: migrations
 */
export async function migrationsGetLargeFiles<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<PorterLargeFile[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import/large_files',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update Git LFS preference
 * You can import repositories from Subversion, Mercurial, and TFS that include files larger than 100MB. This ability
 * is
 * powered by [Git LFS](https://git-lfs.com).
 *
 * You can learn more about our LFS feature and working with large files [on
 * our help
 * site](https://docs.github.com/repositories/working-with-files/managing-large-files).
 *
 * **Warning:** Due to very
 * low levels of usage and available alternatives, this endpoint is deprecated and will no longer be available from 00:00
 * UTC on April 12, 2024. For more details and alternatives, see the
 * [changelog](https://gh.io/source-imports-api-deprecation).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/migrations/source-imports#update-git-lfs-preference}
 * Tags: migrations
 */
export async function migrationsSetLfsPreference<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Whether to store large files during the import. `opt_in` means large files will be stored using Git LFS. `opt_out` means large files will be removed during the import.
     */
    use_lfs: 'opt_in' | 'opt_out';
  },
  opts?: FetcherData,
): Promise<Import> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/import/lfs',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository installation for the authenticated app
 * Enables an authenticated GitHub App to find the repository's installation information. The installation's account type
 * will be either an organization or a user account, depending which account the repository belongs to.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#get-a-repository-installation-for-the-authenticated-app}
 * Tags: apps
 */
export async function appsGetRepoInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<Installation | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/installation',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Installation]]] } },
  });
}
/**
 * Get interaction restrictions for a repository
 * Shows which type of GitHub user can interact with this repository and when the restriction expires. If there are no
 * restrictions, you will see an empty response.
 * Learn more at {@link https://docs.github.com/rest/interactions/repos#get-interaction-restrictions-for-a-repository}
 * Tags: interactions
 */
export async function interactionsGetRestrictionsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<InteractionLimitResponse | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/interaction-limits',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['select', [[['ref', $date_InteractionLimitResponse]]]]]],
      },
    },
  });
}
/**
 * Set interaction restrictions for a repository
 * Temporarily restricts interactions to a certain type of GitHub user within the given repository. You must have owner or
 * admin access to set these restrictions. If an interaction limit is set for the user or organization that owns this
 * repository, you will receive a `409 Conflict` response and will not be able to use this endpoint to change the
 * interaction limit for a single repository.
 * Learn more at {@link https://docs.github.com/rest/interactions/repos#set-interaction-restrictions-for-a-repository}
 * Tags: interactions
 */
export async function interactionsSetRestrictionsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: InteractionLimit,
  opts?: FetcherData,
): Promise<InteractionLimitResponse> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/interaction-limits',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_InteractionLimitResponse]]] },
    },
  });
}
/**
 * Remove interaction restrictions for a repository
 * Removes all interaction restrictions from the given repository. You must have owner or admin access to remove
 * restrictions. If the interaction limit is set for the user or organization that owns this repository, you will receive a
 * `409 Conflict` response and will not be able to use this endpoint to change the interaction limit for a single
 * repository.
 * Learn more at {@link https://docs.github.com/rest/interactions/repos#remove-interaction-restrictions-for-a-repository}
 * Tags: interactions
 */
export async function interactionsRemoveRestrictionsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/interaction-limits',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository invitations
 * When authenticating as a user with admin rights to a repository, this endpoint will list all currently open repository
 * invitations.
 * Learn more at {@link https://docs.github.com/rest/collaborators/invitations#list-repository-invitations}
 * Tags: repos
 */
export async function reposListInvitations<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<RepositoryInvitation[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/invitations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_RepositoryInvitation]]] },
    },
  });
}
/**
 * Update a repository invitation
 * Learn more at {@link https://docs.github.com/rest/collaborators/invitations#update-a-repository-invitation}
 * Tags: repos
 */
export async function reposUpdateInvitation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    invitation_id: number;
  },
  body: {
    /**
     * The permissions that the associated user will have on the repository. Valid values are `read`, `write`, `maintain`, `triage`, and `admin`.
     */
    permissions?: 'read' | 'write' | 'maintain' | 'triage' | 'admin';
  },
  opts?: FetcherData,
): Promise<RepositoryInvitation> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/invitations/{invitation_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositoryInvitation]]] } },
  });
}
/**
 * Delete a repository invitation
 * Learn more at {@link https://docs.github.com/rest/collaborators/invitations#delete-a-repository-invitation}
 * Tags: repos
 */
export async function reposDeleteInvitation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    invitation_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/invitations/{invitation_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository issues
 * List issues in a repository. Only open issues will be listed.
 *
 * **Note**: GitHub's REST API considers every pull request
 * an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may return both issues and pull
 * requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware that the `id` of a pull
 * request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id, use the "[List pull
 * requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
 *
 * This endpoint supports the following
 * custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#list-repository-issues}
 * Tags: issues
 */
export async function issuesListForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    milestone?: string;
    state?: 'open' | 'closed' | 'all';
    assignee?: string;
    creator?: string;
    mentioned?: string;
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Issue[] | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'milestone',
      'state',
      'assignee',
      'creator',
      'mentioned',
      'labels',
      'sort',
      'direction',
      'since',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Issue]]] } },
  });
}
/**
 * Create an issue
 * Any user with pull access to a repository can create an issue. If [issues are disabled in the
 * repository](https://docs.github.com/articles/disabling-issues/), the API returns a `410 Gone` status.
 *
 * This endpoint
 * triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
 * and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * This endpoint supports the following
 * custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#create-an-issue}
 * Tags: issues
 */
export async function issuesCreate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The title of the issue.
     */
    title: string | number;
    /**
     * The contents of the issue.
     */
    body?: string;
    /**
     * Login for the user that this issue should be assigned to. _NOTE: Only users with push access can set the assignee for new issues. The assignee is silently dropped otherwise. **This field is deprecated.**_
     */
    assignee?: string | null;
    milestone?: (string | number) | null;
    /**
     * Labels to associate with this issue. _NOTE: Only users with push access can set labels for new issues. Labels are silently dropped otherwise._
     */
    labels?: (
      | string
      | {
          id?: number;
          name?: string;
          description?: string | null;
          color?: string | null;
        }
    )[];
    /**
     * Logins for Users to assign to this issue. _NOTE: Only users with push access can set assignees for new issues. Assignees are silently dropped otherwise._
     */
    assignees?: string[];
  },
  opts?: FetcherData,
): Promise<Issue> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Issue]]] } },
  });
}
/**
 * List issue comments for a repository
 * You can use the REST API to list comments on issues and pull requests for a repository. Every pull request is an issue,
 * but not every issue is a pull request.
 *
 * By default, issue comments are ordered by ascending ID.
 *
 * This endpoint supports
 * the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/comments#list-issue-comments-for-a-repository}
 * Tags: issues
 */
export async function issuesListCommentsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<IssueComment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'direction', 'since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_IssueComment]]] } },
  });
}
/**
 * Get an issue comment
 * You can use the REST API to get comments on issues and pull requests. Every pull request is an issue, but not every
 * issue is a pull request.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/comments#get-an-issue-comment}
 * Tags: issues
 */
export async function issuesGetComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<IssueComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/comments/{comment_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_IssueComment]]] } },
  });
}
/**
 * Update an issue comment
 * You can use the REST API to update comments on issues and pull requests. Every pull request is an issue, but not every
 * issue is a pull request.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/comments#update-an-issue-comment}
 * Tags: issues
 */
export async function issuesUpdateComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  body: {
    /**
     * The contents of the comment.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<IssueComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/comments/{comment_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_IssueComment]]] } },
  });
}
/**
 * Delete an issue comment
 * You can use the REST API to delete comments on issues and pull requests. Every pull request is an issue, but not every
 * issue is a pull request.
 * Learn more at {@link https://docs.github.com/rest/issues/comments#delete-an-issue-comment}
 * Tags: issues
 */
export async function issuesDeleteComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/comments/{comment_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List reactions for an issue comment
 * List the reactions to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-an-issue-comment}
 * Tags: reactions
 */
export async function reactionsListForIssueComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for an issue comment
 * Create a reaction to an [issue comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment). A response
 * with an HTTP `200` status means that you already added the reaction type to this issue comment.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-an-issue-comment}
 * Tags: reactions
 */
export async function reactionsCreateForIssueComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue comment.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Reaction]]] } },
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * Delete an issue comment reaction
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete
 * /repositories/:repository_id/issues/comments/:comment_id/reactions/:reaction_id`.
 *
 * Delete a reaction to an [issue
 * comment](https://docs.github.com/rest/issues/comments#get-an-issue-comment).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#delete-an-issue-comment-reaction}
 * Tags: reactions
 */
export async function reactionsDeleteForIssueComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
    reaction_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/comments/{comment_id}/reactions/{reaction_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List issue events for a repository
 * Lists events for a repository.
 * Learn more at {@link https://docs.github.com/rest/issues/events#list-issue-events-for-a-repository}
 * Tags: issues
 */
export async function issuesListEventsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<IssueEvent[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_IssueEvent]]] } },
  });
}
/**
 * Get an issue event
 * Gets a single event by the event id.
 * Learn more at {@link https://docs.github.com/rest/issues/events#get-an-issue-event}
 * Tags: issues
 */
export async function issuesGetEvent<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    event_id: number;
  },
  opts?: FetcherData,
): Promise<IssueEvent> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/events/{event_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_IssueEvent]]] } },
  });
}
/**
 * Get an issue
 * The API returns a [`301 Moved Permanently`
 * status](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api#follow-redirects) if the issue
 * was
 * [transferred](https://docs.github.com/articles/transferring-an-issue-to-another-repository/) to another repository.
 * If
 * the issue was transferred to or deleted from a repository where the authenticated user lacks read access, the
 * API
 * returns a `404 Not Found` status. If the issue was deleted from a repository where the authenticated user has
 * read
 * access, the API returns a `410 Gone` status. To receive webhook events for transferred and deleted issues,
 * subscribe
 * to the [`issues`](https://docs.github.com/webhooks/event-payloads/#issues) webhook.
 *
 * **Note**: GitHub's REST
 * API considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints
 * may return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be
 * aware that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the
 * pull
 * request id, use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)"
 * endpoint.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#get-an-issue}
 * Tags: issues
 */
export async function issuesGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  opts?: FetcherData,
): Promise<Issue | BasicError | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Issue]]] } },
  });
}
/**
 * Update an issue
 * Issue owners and users with push access can edit an issue.
 *
 * This endpoint supports the following custom media types. For
 * more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#update-an-issue}
 * Tags: issues
 */
export async function issuesUpdate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body: {
    /**
     * The title of the issue.
     */
    title?: (string | number) | null;
    /**
     * The contents of the issue.
     */
    body?: string | null;
    /**
     * Username to assign to this issue. **This field is deprecated.**
     */
    assignee?: string | null;
    /**
     * The open or closed state of the issue.
     */
    state?: 'open' | 'closed';
    /**
     * The reason for the state change. Ignored unless `state` is changed.
     * @example "not_planned"
     */
    state_reason?: ('completed' | 'not_planned' | 'reopened') | null;
    milestone?: (string | number) | null;
    /**
     * Labels to associate with this issue. Pass one or more labels to _replace_ the set of labels on this issue. Send an empty array (`[]`) to clear all labels from the issue. Only users with push access can set labels for issues. Without push access to the repository, label changes are silently dropped.
     */
    labels?: (
      | string
      | {
          id?: number;
          name?: string;
          description?: string | null;
          color?: string | null;
        }
    )[];
    /**
     * Usernames to assign to this issue. Pass one or more user logins to _replace_ the set of assignees on this issue. Send an empty array (`[]`) to clear all assignees from the issue. Only users with push access can set assignees for new issues. Without push access to the repository, assignee changes are silently dropped.
     */
    assignees?: string[];
  },
  opts?: FetcherData,
): Promise<Issue | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Issue]]] } },
  });
}
/**
 * Add assignees to an issue
 * Adds up to 10 assignees to an issue. Users already assigned to an issue are not replaced.
 * Learn more at {@link https://docs.github.com/rest/issues/assignees#add-assignees-to-an-issue}
 * Tags: issues
 */
export async function issuesAddAssignees<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body: {
    /**
     * Usernames of people to assign this issue to. _NOTE: Only users with push access can add assignees to an issue. Assignees are silently ignored otherwise._
     */
    assignees?: string[];
  },
  opts?: FetcherData,
): Promise<Issue> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/assignees',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Issue]]] } },
  });
}
/**
 * Remove assignees from an issue
 * Removes one or more assignees from an issue.
 * Learn more at {@link https://docs.github.com/rest/issues/assignees#remove-assignees-from-an-issue}
 * Tags: issues
 */
export async function issuesRemoveAssignees<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body: {
    /**
     * Usernames of assignees to remove from an issue. _NOTE: Only users with push access can remove assignees from an issue. Assignees are silently ignored otherwise._
     */
    assignees?: string[];
  },
  opts?: FetcherData,
): Promise<Issue> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/assignees',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Issue]]] } },
  });
}
/**
 * Check if a user can be assigned to a issue
 * Checks if a user has permission to be assigned to a specific issue.
 *
 * If the `assignee` can be assigned to this issue, a
 * `204` status code with no content is returned.
 *
 * Otherwise a `404` status code is returned.
 * Learn more at {@link https://docs.github.com/rest/issues/assignees#check-if-a-user-can-be-assigned-to-a-issue}
 * Tags: issues
 */
export async function issuesCheckUserCanBeAssignedToIssue<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    assignee: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/assignees/{assignee}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List issue comments
 * You can use the REST API to list comments on issues and pull requests. Every pull request is an issue, but not every
 * issue is a pull request.
 *
 * Issue comments are ordered by ascending ID.
 *
 * This endpoint supports the following custom media
 * types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/comments#list-issue-comments}
 * Tags: issues
 */
export async function issuesListComments<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<IssueComment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_IssueComment]]] } },
  });
}
/**
 * Create an issue comment
 * You can use the REST API to create comments on issues and pull requests. Every pull request is an issue, but not every
 * issue is a pull request.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating
 * content too quickly using this endpoint may result in secondary rate limiting.
 * For more information, see "[Rate limits
 * for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
 * and "[Best
 * practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * This
 * endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/comments#create-an-issue-comment}
 * Tags: issues
 */
export async function issuesCreateComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body: {
    /**
     * The contents of the comment.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<IssueComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/comments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_IssueComment]]] } },
  });
}
/**
 * List issue events
 * Lists all events for an issue.
 * Learn more at {@link https://docs.github.com/rest/issues/events#list-issue-events}
 * Tags: issues
 */
export async function issuesListEvents<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<IssueEventForIssue[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List labels for an issue
 * Lists all labels for an issue.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#list-labels-for-an-issue}
 * Tags: issues
 */
export async function issuesListLabelsOnIssue<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Label[] | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add labels to an issue
 * Adds labels to an issue. If you provide an empty array of labels, all labels are removed from the issue.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#add-labels-to-an-issue}
 * Tags: issues
 */
export async function issuesAddLabels<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body:
    | {
        /**
         * The names of the labels to add to the issue's existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also replace all of the labels for an issue. For more information, see "[Set labels for an issue](https://docs.github.com/rest/issues/labels#set-labels-for-an-issue)."
         */
        labels?: string[];
      }
    | string[]
    | {
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string,
  opts?: FetcherData,
): Promise<Label[] | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Set labels for an issue
 * Removes any previous labels and sets the new labels for an issue.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#set-labels-for-an-issue}
 * Tags: issues
 */
export async function issuesSetLabels<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body:
    | {
        /**
         * The names of the labels to set for the issue. The labels you set replace any existing labels. You can pass an empty array to remove all labels. Alternatively, you can pass a single label as a `string` or an `array` of labels directly, but GitHub recommends passing an object with the `labels` key. You can also add labels to the existing labels for an issue. For more information, see "[Add labels to an issue](https://docs.github.com/rest/issues/labels#add-labels-to-an-issue)."
         */
        labels?: string[];
      }
    | string[]
    | {
        labels?: {
          name: string;
        }[];
      }
    | {
        name: string;
      }[]
    | string,
  opts?: FetcherData,
): Promise<Label[] | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove all labels from an issue
 * Removes all labels from an issue.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#remove-all-labels-from-an-issue}
 * Tags: issues
 */
export async function issuesRemoveAllLabels<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  opts?: FetcherData,
): Promise<any | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/labels',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a label from an issue
 * Removes the specified label from the issue, and returns the remaining labels on the issue. This endpoint returns a `404
 * Not Found` status if the label does not exist.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#remove-a-label-from-an-issue}
 * Tags: issues
 */
export async function issuesRemoveLabel<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    name: string;
  },
  opts?: FetcherData,
): Promise<Label[] | BasicError> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/labels/{name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Lock an issue
 * Users with push access can lock an issue or pull request's conversation.
 *
 * Note that, if you choose not to pass any
 * parameters, you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see
 * "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 * Learn more at {@link https://docs.github.com/rest/issues/issues#lock-an-issue}
 * Tags: issues
 */
export async function issuesLock<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body: {
    /**
     * The reason for locking the issue or pull request conversation. Lock will fail if you don't use one of these reasons:
     *  * `off-topic`
     *  * `too heated`
     *  * `resolved`
     *  * `spam`
     */
    lock_reason?: 'off-topic' | 'too heated' | 'resolved' | 'spam';
  } | null,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/lock',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unlock an issue
 * Users with push access can unlock an issue's conversation.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#unlock-an-issue}
 * Tags: issues
 */
export async function issuesUnlock<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/lock',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List reactions for an issue
 * List the reactions to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-an-issue}
 * Tags: reactions
 */
export async function reactionsListForIssue<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for an issue
 * Create a reaction to an [issue](https://docs.github.com/rest/issues/issues#get-an-issue). A response with an HTTP `200`
 * status means that you already added the reaction type to this issue.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-an-issue}
 * Tags: reactions
 */
export async function reactionsCreateForIssue<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the issue.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Reaction]]] } },
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * Delete an issue reaction
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
 * /repositories/:repository_id/issues/:issue_number/reactions/:reaction_id`.
 *
 * Delete a reaction to an
 * [issue](https://docs.github.com/rest/issues/issues#get-an-issue).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#delete-an-issue-reaction}
 * Tags: reactions
 */
export async function reactionsDeleteForIssue<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    reaction_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/reactions/{reaction_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List timeline events for an issue
 * List all timeline events for an issue.
 * Learn more at {@link https://docs.github.com/rest/issues/timeline#list-timeline-events-for-an-issue}
 * Tags: issues
 */
export async function issuesListEventsForTimeline<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    issue_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<TimelineIssueEvents[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/issues/{issue_number}/timeline',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_TimelineIssueEvents]]] },
    },
  });
}
/**
 * List deploy keys
 * Learn more at {@link https://docs.github.com/rest/deploy-keys/deploy-keys#list-deploy-keys}
 * Tags: repos
 */
export async function reposListDeployKeys<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<DeployKey[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/keys',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a deploy key
 * You can create a read-only deploy key.
 * Learn more at {@link https://docs.github.com/rest/deploy-keys/deploy-keys#create-a-deploy-key}
 * Tags: repos
 */
export async function reposCreateDeployKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * A name for the key.
     */
    title?: string;
    /**
     * The contents of the key.
     */
    key: string;
    /**
     * If `true`, the key will only be able to read repository contents. Otherwise, the key will be able to read and write.
     *
     * Deploy keys with write access can perform the same actions as an organization member with admin access, or a collaborator on a personal repository. For more information, see "[Repository permission levels for an organization](https://docs.github.com/articles/repository-permission-levels-for-an-organization/)" and "[Permission levels for a user account repository](https://docs.github.com/articles/permission-levels-for-a-user-account-repository/)."
     */
    read_only?: boolean;
  },
  opts?: FetcherData,
): Promise<DeployKey> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/keys',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a deploy key
 * Learn more at {@link https://docs.github.com/rest/deploy-keys/deploy-keys#get-a-deploy-key}
 * Tags: repos
 */
export async function reposGetDeployKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    key_id: number;
  },
  opts?: FetcherData,
): Promise<DeployKey> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/keys/{key_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a deploy key
 * Deploy keys are immutable. If you need to update a key, remove the key and create a new one instead.
 * Learn more at {@link https://docs.github.com/rest/deploy-keys/deploy-keys#delete-a-deploy-key}
 * Tags: repos
 */
export async function reposDeleteDeployKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    key_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/keys/{key_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List labels for a repository
 * Lists all labels for a repository.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#list-labels-for-a-repository}
 * Tags: issues
 */
export async function issuesListLabelsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Label[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/labels',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a label
 * Creates a label for the specified repository with the given name and color. The name and color parameters are required.
 * The color must be a valid [hexadecimal color code](http://www.color-hex.com/).
 * Learn more at {@link https://docs.github.com/rest/issues/labels#create-a-label}
 * Tags: issues
 */
export async function issuesCreateLabel<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
     */
    name: string;
    /**
     * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
     */
    color?: string;
    /**
     * A short description of the label. Must be 100 characters or fewer.
     */
    description?: string;
  },
  opts?: FetcherData,
): Promise<Label> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/labels',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a label
 * Gets a label using the given name.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#get-a-label}
 * Tags: issues
 */
export async function issuesGetLabel<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    name: string;
  },
  opts?: FetcherData,
): Promise<Label> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/labels/{name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update a label
 * Updates a label using the given label name.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#update-a-label}
 * Tags: issues
 */
export async function issuesUpdateLabel<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    name: string;
  },
  body: {
    /**
     * The new name of the label. Emoji can be added to label names, using either native emoji or colon-style markup. For example, typing `:strawberry:` will render the emoji ![:strawberry:](https://github.githubassets.com/images/icons/emoji/unicode/1f353.png ":strawberry:"). For a full list of available emoji and codes, see "[Emoji cheat sheet](https://github.com/ikatyang/emoji-cheat-sheet)."
     */
    new_name?: string;
    /**
     * The [hexadecimal color code](http://www.color-hex.com/) for the label, without the leading `#`.
     */
    color?: string;
    /**
     * A short description of the label. Must be 100 characters or fewer.
     */
    description?: string;
  },
  opts?: FetcherData,
): Promise<Label> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/labels/{name}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a label
 * Deletes a label using the given label name.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#delete-a-label}
 * Tags: issues
 */
export async function issuesDeleteLabel<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/labels/{name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository languages
 * Lists languages for the specified repository. The value shown for each language is the number of bytes of code written
 * in that language.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-repository-languages}
 * Tags: repos
 */
export async function reposListLanguages<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<Language> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/languages',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the license for a repository
 * This method returns the contents of the repository's license file, if one is detected.
 *
 * This endpoint supports the
 * following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw contents of the license.
 * -
 * **`application/vnd.github.html+json`**: Returns the license contents in HTML. Markup languages are rendered to HTML
 * using GitHub's open-source [Markup library](https://github.com/github/markup).
 * Learn more at {@link https://docs.github.com/rest/licenses/licenses#get-the-license-for-a-repository}
 * Tags: licenses
 */
export async function licensesGetForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref?: CodeScanningRef;
  },
  opts?: FetcherData,
): Promise<LicenseContent> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/license',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Sync a fork branch with the upstream repository
 * Sync a branch of a forked repository to keep it up-to-date with the upstream repository.
 * Learn more at {@link https://docs.github.com/rest/branches/branches#sync-a-fork-branch-with-the-upstream-repository}
 * Tags: repos
 */
export async function reposMergeUpstream<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the branch which should be updated to match upstream.
     */
    branch: string;
  },
  opts?: FetcherData,
): Promise<MergedUpstream> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/merge-upstream',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Merge a branch
 * Learn more at {@link https://docs.github.com/rest/branches/branches#merge-a-branch}
 * Tags: repos
 */
export async function reposMerge<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the base branch that the head will be merged into.
     */
    base: string;
    /**
     * The head to merge. This can be a branch name or a commit SHA1.
     */
    head: string;
    /**
     * Commit message to use for the merge commit. If omitted, a default message will be used.
     */
    commit_message?: string;
  },
  opts?: FetcherData,
): Promise<Commit | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/merges',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List milestones
 * Lists milestones for a repository.
 * Learn more at {@link https://docs.github.com/rest/issues/milestones#list-milestones}
 * Tags: issues
 */
export async function issuesListMilestones<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    state?: 'open' | 'closed' | 'all';
    sort?: 'due_on' | 'completeness';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Milestone[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/milestones',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['state', 'sort', 'direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Milestone]]] } },
  });
}
/**
 * Create a milestone
 * Creates a milestone.
 * Learn more at {@link https://docs.github.com/rest/issues/milestones#create-a-milestone}
 * Tags: issues
 */
export async function issuesCreateMilestone<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The title of the milestone.
     */
    title: string;
    /**
     * The state of the milestone. Either `open` or `closed`.
     * @defaultValue "open"
     */
    state?: 'open' | 'closed';
    /**
     * A description of the milestone.
     */
    description?: string;
    /**
     * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    due_on?: Date;
  },
  opts?: FetcherData,
): Promise<Milestone> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/milestones',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Milestone]]] } },
  });
}
/**
 * Get a milestone
 * Gets a milestone using the given milestone number.
 * Learn more at {@link https://docs.github.com/rest/issues/milestones#get-a-milestone}
 * Tags: issues
 */
export async function issuesGetMilestone<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    milestone_number: number;
  },
  opts?: FetcherData,
): Promise<Milestone> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/milestones/{milestone_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Milestone]]] } },
  });
}
/**
 * Update a milestone
 * Learn more at {@link https://docs.github.com/rest/issues/milestones#update-a-milestone}
 * Tags: issues
 */
export async function issuesUpdateMilestone<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    milestone_number: number;
  },
  body: {
    /**
     * The title of the milestone.
     */
    title?: string;
    /**
     * The state of the milestone. Either `open` or `closed`.
     * @defaultValue "open"
     */
    state?: 'open' | 'closed';
    /**
     * A description of the milestone.
     */
    description?: string;
    /**
     * The milestone due date. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`.
     */
    due_on?: Date;
  },
  opts?: FetcherData,
): Promise<Milestone> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/milestones/{milestone_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Milestone]]] } },
  });
}
/**
 * Delete a milestone
 * Deletes a milestone using the given milestone number.
 * Learn more at {@link https://docs.github.com/rest/issues/milestones#delete-a-milestone}
 * Tags: issues
 */
export async function issuesDeleteMilestone<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    milestone_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/milestones/{milestone_number}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List labels for issues in a milestone
 * Lists labels for issues in a milestone.
 * Learn more at {@link https://docs.github.com/rest/issues/labels#list-labels-for-issues-in-a-milestone}
 * Tags: issues
 */
export async function issuesListLabelsForMilestone<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    milestone_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Label[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/milestones/{milestone_number}/labels',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository notifications for the authenticated user
 * Lists all notifications for the current user in the specified repository.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user}
 * Tags: activity
 */
export async function activityListRepoNotificationsForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    all?: boolean;
    participating?: boolean;
    since?: Date;
    before?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Thread[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/notifications',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'all',
      'participating',
      'since',
      'before',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Thread]]] } },
  });
}
/**
 * Mark repository notifications as read
 * Marks all notifications in a repository as "read" for the current user. If the number of notifications is too large to
 * complete in one request, you will receive a `202 Accepted` status and GitHub will run an asynchronous process to mark
 * notifications as "read." To check whether any "unread" notifications remain, you can use the [List repository
 * notifications for the authenticated
 * user](https://docs.github.com/rest/activity/notifications#list-repository-notifications-for-the-authenticated-user)
 * endpoint and pass the query parameter `all=false`.
 * Learn more at {@link https://docs.github.com/rest/activity/notifications#mark-repository-notifications-as-read}
 * Tags: activity
 */
export async function activityMarkRepoNotificationsAsRead<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Describes the last point that notifications were checked. Anything updated since this time will not be marked as read. If you omit this parameter, all notifications are marked as read. This is a timestamp in [ISO 8601](https://en.wikipedia.org/wiki/ISO_8601) format: `YYYY-MM-DDTHH:MM:SSZ`. Default: The current timestamp.
     */
    last_read_at?: Date;
  },
  opts?: FetcherData,
): Promise<
  | {
      message?: string;
      url?: string;
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/notifications',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a GitHub Pages site
 * Gets information about a GitHub Pages site.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope
 * to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#get-a-apiname-pages-site}
 * Tags: repos
 */
export async function reposGetPages<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<Page> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Page]]] } },
  });
}
/**
 * Create a GitHub Pages site
 * Configures a GitHub Pages site. For more information, see "[About GitHub
 * Pages](/github/working-with-github-pages/about-github-pages)."
 *
 * The authenticated user must be a repository
 * administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#create-a-apiname-pages-site}
 * Tags: repos
 */
export async function reposCreatePagesSite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: (any | any) | null,
  opts?: FetcherData,
): Promise<Page> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Page]]] } },
  });
}
/**
 * Update information about a GitHub Pages site
 * Updates information for a GitHub Pages site. For more information, see "[About GitHub
 * Pages](/github/working-with-github-pages/about-github-pages).
 *
 * The authenticated user must be a repository
 * administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#update-information-about-a-apiname-pages-site}
 * Tags: repos
 */
export async function reposUpdateInformationAboutPagesSite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: any | any | any | any | any,
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a GitHub Pages site
 * Deletes a GitHub Pages site. For more information, see "[About GitHub
 * Pages](/github/working-with-github-pages/about-github-pages).
 *
 * The authenticated user must be a repository
 * administrator, maintainer, or have the 'manage GitHub Pages settings' permission.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#delete-a-apiname-pages-site}
 * Tags: repos
 */
export async function reposDeletePagesSite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List GitHub Pages builds
 * Lists builts of a GitHub Pages site.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#list-apiname-pages-builds}
 * Tags: repos
 */
export async function reposListPagesBuilds<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<PageBuild[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/builds',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_PageBuild]]] } },
  });
}
/**
 * Request a GitHub Pages build
 * You can request that your site be built from the latest revision on the default branch. This has the same effect as
 * pushing a commit to your default branch, but does not require an additional commit. Manually triggering page builds can
 * be helpful when diagnosing build warnings and failures.
 *
 * Build requests are limited to one concurrent build per
 * repository and one concurrent build per requester. If you request a build while another is still in progress, the second
 * request will be queued until the first completes.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#request-a-apiname-pages-build}
 * Tags: repos
 */
export async function reposRequestPagesBuild<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<PageBuildStatus> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/builds',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get latest Pages build
 * Gets information about the single most recent build of a GitHub Pages site.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#get-latest-pages-build}
 * Tags: repos
 */
export async function reposGetLatestPagesBuild<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<PageBuild> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/builds/latest',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PageBuild]]] } },
  });
}
/**
 * Get GitHub Pages build
 * Gets information about a GitHub Pages build.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#get-apiname-pages-build}
 * Tags: repos
 */
export async function reposGetPagesBuild<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    build_id: number;
  },
  opts?: FetcherData,
): Promise<PageBuild> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/builds/{build_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PageBuild]]] } },
  });
}
/**
 * Create a GitHub Pages deployment
 * Create a GitHub Pages deployment for a repository.
 *
 * The authenticated user must have write permission to the repository.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#create-a-github-pages-deployment}
 * Tags: repos
 */
export async function reposCreatePagesDeployment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The ID of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
     */
    artifact_id?: number;
    /**
     * The URL of an artifact that contains the .zip or .tar of static assets to deploy. The artifact belongs to the repository. Either `artifact_id` or `artifact_url` are required.
     */
    artifact_url?: string;
    /**
     * The target environment for this GitHub Pages deployment.
     * @defaultValue "github-pages"
     */
    environment?: string;
    /**
     * A unique string that represents the version of the build for this deployment.
     * @defaultValue "GITHUB_SHA"
     */
    pages_build_version: string;
    /**
     * The OIDC token issued by GitHub Actions certifying the origin of the deployment.
     */
    oidc_token: string;
  },
  opts?: FetcherData,
): Promise<PageDeployment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/deployments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the status of a GitHub Pages deployment
 * Gets the current status of a GitHub Pages deployment.
 *
 * The authenticated user must have read permission for the GitHub
 * Pages site.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#get-the-status-of-a-github-pages-deployment}
 * Tags: repos
 */
export async function reposGetPagesDeployment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pages_deployment_id: number | string;
  },
  opts?: FetcherData,
): Promise<PagesDeploymentStatus> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Cancel a GitHub Pages deployment
 * Cancels a GitHub Pages deployment.
 *
 * The authenticated user must have write permissions for the GitHub Pages site.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#cancel-a-github-pages-deployment}
 * Tags: repos
 */
export async function reposCancelPagesDeployment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pages_deployment_id: number | string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/deployments/{pages_deployment_id}/cancel',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a DNS health check for GitHub Pages
 * Gets a health check of the DNS settings for the `CNAME` record configured for a repository's GitHub Pages.
 *
 * The first
 * request to this endpoint returns a `202 Accepted` status and starts an asynchronous background task to get the results
 * for the domain. After the background task completes, subsequent requests to this endpoint return a `200 OK` status with
 * the health check results in the response.
 *
 * The authenticated user must be a repository administrator, maintainer, or
 * have the 'manage GitHub Pages settings' permission to use this endpoint.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/pages/pages#get-a-dns-health-check-for-github-pages}
 * Tags: repos
 */
export async function reposGetPagesHealthCheck<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<PagesHealthCheck | EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pages/health',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Enable private vulnerability reporting for a repository
 * Enables private vulnerability reporting for a repository. The authenticated user must have admin access to the
 * repository. For more information, see "[Privately reporting a security
 * vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)."
 * Learn more at {@link https://docs.github.com/rest/repos/repos#enable-private-vulnerability-reporting-for-a-repository}
 * Tags: repos
 */
export async function reposEnablePrivateVulnerabilityReporting<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/private-vulnerability-reporting',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Disable private vulnerability reporting for a repository
 * Disables private vulnerability reporting for a repository. The authenticated user must have admin access to the
 * repository. For more information, see "[Privately reporting a security
 * vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)".
 * Learn more at {@link https://docs.github.com/rest/repos/repos#disable-private-vulnerability-reporting-for-a-repository}
 * Tags: repos
 */
export async function reposDisablePrivateVulnerabilityReporting<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/private-vulnerability-reporting',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository projects
 * Lists the projects in a repository. Returns a `404 Not Found` status if projects are disabled in the repository. If you
 * do not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#list-repository-projects}
 * Tags: projects
 */
export async function projectsListForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    state?: 'open' | 'closed' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Project[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/projects',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['state', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Project]]] } },
  });
}
/**
 * Create a repository project
 * Creates a repository project board. Returns a `410 Gone` status if projects are disabled in the repository or if the
 * repository does not have existing classic projects. If you do not have sufficient privileges to perform this action, a
 * `401 Unauthorized` or `410 Gone` status is returned.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#create-a-repository-project}
 * Tags: projects
 */
export async function projectsCreateForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the project.
     */
    name: string;
    /**
     * The description of the project.
     */
    body?: string;
  },
  opts?: FetcherData,
): Promise<Project> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/projects',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Project]]] } },
  });
}
/**
 * Get all custom property values for a repository
 * Gets all custom property values that are set for a repository.
 * Users with read access to the repository can use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/repos/custom-properties#get-all-custom-property-values-for-a-repository}
 * Tags: repos
 */
export async function reposGetCustomPropertiesValues<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CustomPropertyValue[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/properties/values',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create or update custom property values for a repository
 * Create new or update existing custom property values for a repository.
 * Using a value of `null` for a custom property
 * will remove or 'unset' the property value from the repository.
 *
 * Repository admins and other users with the
 * repository-level "edit custom property values" fine-grained permission can use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/repos/custom-properties#create-or-update-custom-property-values-for-a-repository}
 * Tags: repos
 */
export async function reposCreateOrUpdateCustomPropertiesValues<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * A list of custom property names and associated values to apply to the repositories.
     */
    properties: CustomPropertyValue[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/properties/values',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List pull requests
 * Lists pull requests in a specified repository.
 *
 * Draft pull requests are available in public repositories with
 * GitHub
 * Free and GitHub Free for organizations, GitHub Pro, and legacy per-repository billing
 * plans, and in public and
 * private repositories with GitHub Team and GitHub Enterprise
 * Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products)
 * in the GitHub Help
 * documentation.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * -
 * **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
 * documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/).
 * Include the repository name and pull request ID in your message.
 * - **`application/vnd.github.patch`**: For more
 * information, see "[git-format-patch](https://git-scm.com/docs/git-format-patch)" in the Git documentation.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#list-pull-requests}
 * Tags: pulls
 */
export async function pullsList<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    state?: 'open' | 'closed' | 'all';
    head?: string;
    base?: string;
    sort?: 'created' | 'updated' | 'popularity' | 'long-running';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<PullRequestSimple[] | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'state',
      'head',
      'base',
      'sort',
      'direction',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_PullRequestSimple]]] },
    },
  });
}
/**
 * Create a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro,
 * and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise
 * Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the
 * source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to
 * open or update a pull request.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * This endpoint supports the following
 * custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * -
 * **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
 * documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/).
 * Include the repository name and pull request ID in your message.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#create-a-pull-request}
 * Tags: pulls
 */
export async function pullsCreate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The title of the new pull request. Required unless `issue` is specified.
     */
    title?: string;
    /**
     * The name of the branch where your changes are implemented. For cross-repository pull requests in the same network, namespace `head` with a user like this: `username:branch`.
     */
    head: string;
    /**
     * The name of the repository where the changes in the pull request were made. This field is required for cross-repository pull requests if both repositories are owned by the same organization.
     * @example "octo-org/octo-repo"
     */
    head_repo?: string;
    /**
     * The name of the branch you want the changes pulled into. This should be an existing branch on the current repository. You cannot submit a pull request to one repository that requests a merge to a base of another repository.
     */
    base: string;
    /**
     * The contents of the pull request.
     */
    body?: string;
    /**
     * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
     */
    maintainer_can_modify?: boolean;
    /**
     * Indicates whether the pull request is a draft. See "[Draft Pull Requests](https://docs.github.com/articles/about-pull-requests#draft-pull-requests)" in the GitHub Help documentation to learn more.
     */
    draft?: boolean;
    /**
     * An issue in the repository to convert to a pull request. The issue title, body, and comments will become the title, body, and comments on the new pull request. Required unless `title` is specified.
     * @example 1
     */
    issue?: number;
  },
  opts?: FetcherData,
): Promise<PullRequest> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_PullRequest]]] } },
  });
}
/**
 * List review comments in a repository
 * Lists review comments for all pull requests in a repository. By default,
 * review comments are in ascending order by
 * ID.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/comments#list-review-comments-in-a-repository}
 * Tags: pulls
 */
export async function pullsListReviewCommentsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    sort?: 'created' | 'updated' | 'created_at';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<PullRequestReviewComment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'direction', 'since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_PullRequestReviewComment]]],
      },
    },
  });
}
/**
 * Get a review comment for a pull request
 * Provides details for a specified review comment.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsGetReviewComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<PullRequestReviewComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_PullRequestReviewComment]]] },
    },
  });
}
/**
 * Update a review comment for a pull request
 * Edits the content of a specified review comment.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/comments#update-a-review-comment-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsUpdateReviewComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  body: {
    /**
     * The text of the reply to the review comment.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<PullRequestReviewComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_PullRequestReviewComment]]] },
    },
  });
}
/**
 * Delete a review comment for a pull request
 * Deletes a review comment.
 * Learn more at {@link https://docs.github.com/rest/pulls/comments#delete-a-review-comment-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsDeleteReviewComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/comments/{comment_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List reactions for a pull request review comment
 * List the reactions to a [pull request review
 * comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-pull-request-review-comment}
 * Tags: reactions
 */
export async function reactionsListForPullRequestReviewComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for a pull request review comment
 * Create a reaction to a [pull request review
 * comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request). A response with an HTTP
 * `200` status means that you already added the reaction type to this pull request review comment.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-pull-request-review-comment}
 * Tags: reactions
 */
export async function reactionsCreateForPullRequestReviewComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the pull request review comment.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Reaction]]] } },
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * Delete a pull request comment reaction
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE
 * /repositories/:repository_id/pulls/comments/:comment_id/reactions/:reaction_id.`
 *
 * Delete a reaction to a [pull request
 * review comment](https://docs.github.com/rest/pulls/comments#get-a-review-comment-for-a-pull-request).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#delete-a-pull-request-comment-reaction}
 * Tags: reactions
 */
export async function reactionsDeleteForPullRequestComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    comment_id: number;
    reaction_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/comments/{comment_id}/reactions/{reaction_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro,
 * and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise
 * Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * Lists details of a pull request by providing its number.
 *
 * When you get,
 * [create](https://docs.github.com/rest/pulls/pulls/#create-a-pull-request), or
 * [edit](https://docs.github.com/rest/pulls/pulls#update-a-pull-request) a pull request, GitHub creates a merge commit to
 * test whether the pull request can be automatically merged into the base branch. This test commit is not added to the
 * base branch or the head branch. You can review the status of the test commit using the `mergeable` key. For more
 * information, see "[Checking mergeability of pull
 * requests](https://docs.github.com/rest/guides/getting-started-with-the-git-database-api#checking-mergeability-of-pull-requests)".
 *
 * The
 * value of the `mergeable` attribute can be `true`, `false`, or `null`. If the value is `null`, then GitHub has started a
 * background job to compute the mergeability. After giving the job time to complete, resubmit the request. When the job
 * finishes, you will see a non-`null` value for the `mergeable` attribute in the response. If `mergeable` is `true`, then
 * `merge_commit_sha` will be the SHA of the _test_ merge commit.
 *
 * The value of the `merge_commit_sha` attribute changes
 * depending on the state of the pull request. Before merging a pull request, the `merge_commit_sha` attribute holds the
 * SHA of the _test_ merge commit. After merging a pull request, the `merge_commit_sha` attribute changes depending on how
 * you merged the pull request:
 *
 * *   If merged as a [merge
 * commit](https://docs.github.com/articles/about-merge-methods-on-github/), `merge_commit_sha` represents the SHA of the
 * merge commit.
 * *   If merged via a
 * [squash](https://docs.github.com/articles/about-merge-methods-on-github/#squashing-your-merge-commits),
 * `merge_commit_sha` represents the SHA of the squashed commit on the base branch.
 * *   If
 * [rebased](https://docs.github.com/articles/about-merge-methods-on-github/#rebasing-and-merging-your-commits),
 * `merge_commit_sha` represents the commit that the base branch was updated to.
 *
 * Pass the appropriate [media
 * type](https://docs.github.com/rest/overview/media-types/#commits-commit-comparison-and-pull-requests) to fetch diff and
 * patch formats.
 *
 * This endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * -
 * **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
 * documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/).
 * Include the repository name and pull request ID in your message.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#get-a-pull-request}
 * Tags: pulls
 */
export async function pullsGet<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  opts?: FetcherData,
): Promise<PullRequest | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequest]]] } },
  });
}
/**
 * Update a pull request
 * Draft pull requests are available in public repositories with GitHub Free and GitHub Free for organizations, GitHub Pro,
 * and legacy per-repository billing plans, and in public and private repositories with GitHub Team and GitHub Enterprise
 * Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * To open or update a pull request in a public repository, you must have write access to the head or the
 * source branch. For organization-owned repositories, you must be a member of the organization that owns the repository to
 * open or update a pull request.
 *
 * This endpoint supports the following custom media types. For more information, see
 * "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * -
 * **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
 * documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/).
 * Include the repository name and pull request ID in your message.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#update-a-pull-request}
 * Tags: pulls
 */
export async function pullsUpdate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: {
    /**
     * The title of the pull request.
     */
    title?: string;
    /**
     * The contents of the pull request.
     */
    body?: string;
    /**
     * State of this Pull Request. Either `open` or `closed`.
     */
    state?: 'open' | 'closed';
    /**
     * The name of the branch you want your changes pulled into. This should be an existing branch on the current repository. You cannot update the base branch on a pull request to point to another repository.
     */
    base?: string;
    /**
     * Indicates whether [maintainers can modify](https://docs.github.com/articles/allowing-changes-to-a-pull-request-branch-created-from-a-fork/) the pull request.
     */
    maintainer_can_modify?: boolean;
  },
  opts?: FetcherData,
): Promise<PullRequest> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequest]]] } },
  });
}
/**
 * Create a codespace from a pull request
 * Creates a codespace owned by the authenticated user for the specified pull request.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#create-a-codespace-from-a-pull-request}
 * Tags: codespaces
 */
export async function codespacesCreateWithPrForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: {
    /**
     * The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
     */
    location?: string;
    /**
     * The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
     */
    geo?: 'EuropeWest' | 'SoutheastAsia' | 'UsEast' | 'UsWest';
    /**
     * IP for location auto-detection when proxying a request
     */
    client_ip?: string;
    /**
     * Machine type to use for this codespace
     */
    machine?: string;
    /**
     * Path to devcontainer.json config to use for this codespace
     */
    devcontainer_path?: string;
    /**
     * Whether to authorize requested permissions from devcontainer.json
     */
    multi_repo_permissions_opt_out?: boolean;
    /**
     * Working directory for this codespace
     */
    working_directory?: string;
    /**
     * Time in minutes before codespace stops from inactivity
     */
    idle_timeout_minutes?: number;
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
     */
    retention_period_minutes?: number;
  } | null,
  opts?: FetcherData,
): Promise<Codespace> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/codespaces',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Codespace]]] } },
    '202': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * List review comments on a pull request
 * Lists all review comments for a specified pull request. By default, review comments
 * are in ascending order by ID.
 *
 * This
 * endpoint supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/comments#list-review-comments-on-a-pull-request}
 * Tags: pulls
 */
export async function pullsListReviewComments<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<PullRequestReviewComment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'direction', 'since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_PullRequestReviewComment]]],
      },
    },
  });
}
/**
 * Create a review comment for a pull request
 * Creates a review comment on the diff of a specified pull request. To add a regular comment to a pull request timeline,
 * see "[Create an issue comment](https://docs.github.com/rest/issues/comments#create-an-issue-comment)."
 *
 * If your comment
 * applies to more than one line in the pull request diff, you should use the parameters `line`, `side`, and optionally
 * `start_line` and `start_side` in your request.
 *
 * The `position` parameter is deprecated. If you use `position`, the
 * `line`, `side`, `start_line`, and `start_side` parameters are not required.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
 * and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * This endpoint supports the following
 * custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/comments#create-a-review-comment-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsCreateReviewComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: {
    /**
     * The text of the review comment.
     */
    body: string;
    /**
     * The SHA of the commit needing a comment. Not using the latest commit SHA may render your comment outdated if a subsequent commit modifies the line you specify as the `position`.
     */
    commit_id: string;
    /**
     * The relative path to the file that necessitates a comment.
     */
    path: string;
    /**
     * **This parameter is deprecated. Use `line` instead**. The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The position value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
     * @deprecated
     */
    position?: number;
    /**
     * In a split diff view, the side of the diff that the pull request's changes appear on. Can be `LEFT` or `RIGHT`. Use `LEFT` for deletions that appear in red. Use `RIGHT` for additions that appear in green or unchanged lines that appear in white and are shown for context. For a multi-line comment, side represents whether the last line of the comment range is a deletion or addition. For more information, see "[Diff view options](https://docs.github.com/articles/about-comparing-branches-in-pull-requests#diff-view-options)" in the GitHub Help documentation.
     */
    side?: 'LEFT' | 'RIGHT';
    /**
     * **Required unless using `subject_type:file`**. The line of the blob in the pull request diff that the comment applies to. For a multi-line comment, the last line of the range that your comment applies to.
     */
    line?: number;
    /**
     * **Required when using multi-line comments unless using `in_reply_to`**. The `start_line` is the first line in the pull request diff that your multi-line comment applies to. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation.
     */
    start_line?: number;
    /**
     * **Required when using multi-line comments unless using `in_reply_to`**. The `start_side` is the starting side of the diff that the comment applies to. Can be `LEFT` or `RIGHT`. To learn more about multi-line comments, see "[Commenting on a pull request](https://docs.github.com/articles/commenting-on-a-pull-request#adding-line-comments-to-a-pull-request)" in the GitHub Help documentation. See `side` in this table for additional context.
     */
    start_side?: 'LEFT' | 'RIGHT' | 'side';
    /**
     * The ID of the review comment to reply to. To find the ID of a review comment with ["List review comments on a pull request"](#list-review-comments-on-a-pull-request). When specified, all parameters other than `body` in the request body are ignored.
     * @example 2
     */
    in_reply_to?: number;
    /**
     * The level at which the comment is targeted.
     */
    subject_type?: 'line' | 'file';
  },
  opts?: FetcherData,
): Promise<PullRequestReviewComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/comments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': {
      transforms: { date: [[['ref', $date_PullRequestReviewComment]]] },
    },
  });
}
/**
 * Create a reply for a review comment
 * Creates a reply to a review comment for a pull request. For the `comment_id`, provide the ID of the review comment you
 * are replying to. This must be the ID of a _top-level review comment_, not a reply to that comment. Replies to replies
 * are not supported.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)"
 * and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * This endpoint supports the following
 * custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/comments#create-a-reply-for-a-review-comment}
 * Tags: pulls
 */
export async function pullsCreateReplyForReviewComment<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    comment_id: number;
  },
  body: {
    /**
     * The text of the review comment.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<PullRequestReviewComment> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/comments/{comment_id}/replies',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': {
      transforms: { date: [[['ref', $date_PullRequestReviewComment]]] },
    },
  });
}
/**
 * List commits on a pull request
 * Lists a maximum of 250 commits for a pull request. To receive a complete
 * commit list for pull requests with more than
 * 250 commits, use the [List commits](https://docs.github.com/rest/commits/commits#list-commits)
 * endpoint.
 *
 * This endpoint
 * supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * -
 * **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
 * documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/).
 * Include the repository name and pull request ID in your message.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#list-commits-on-a-pull-request}
 * Tags: pulls
 */
export async function pullsListCommits<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Commit[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/commits',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List pull requests files
 * Lists the files in a specified pull request.
 *
 * **Note:** Responses include a maximum of 3000 files. The paginated
 * response
 * returns 30 files per page by default.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * -
 * **`application/vnd.github.diff`**: For more information, see "[git-diff](https://git-scm.com/docs/git-diff)" in the Git
 * documentation. If a diff is corrupt, contact us through the [GitHub Support portal](https://support.github.com/).
 * Include the repository name and pull request ID in your message.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#list-pull-requests-files}
 * Tags: pulls
 */
export async function pullsListFiles<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<DiffEntry[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/files',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if a pull request has been merged
 * Checks if a pull request has been merged into the base branch. The HTTP status of the response indicates whether or not
 * the pull request has been merged; the response body is empty.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#check-if-a-pull-request-has-been-merged}
 * Tags: pulls
 */
export async function pullsCheckIfMerged<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/merge',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Merge a pull request
 * Merges a pull request into the base branch.
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#merge-a-pull-request}
 * Tags: pulls
 */
export async function pullsMerge<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: {
    /**
     * Title for the automatic commit message.
     */
    commit_title?: string;
    /**
     * Extra detail to append to automatic commit message.
     */
    commit_message?: string;
    /**
     * SHA that pull request head must match to allow merge.
     */
    sha?: string;
    /**
     * The merge method to use.
     */
    merge_method?: 'merge' | 'squash' | 'rebase';
  } | null,
  opts?: FetcherData,
): Promise<PullRequestMergeResult> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/merge',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all requested reviewers for a pull request
 * Gets the users or teams whose review is requested for a pull request. Once a requested reviewer submits a review, they
 * are no longer considered a requested reviewer. Their review will instead be returned by the [List reviews for a pull
 * request](https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request) operation.
 * Learn more at {@link https://docs.github.com/rest/pulls/review-requests#get-all-requested-reviewers-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsListRequestedReviewers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  opts?: FetcherData,
): Promise<PullRequestReviewRequest> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Request reviewers for a pull request
 * Requests reviews for a pull request from a given set of users and/or teams.
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 * Learn more at {@link https://docs.github.com/rest/pulls/review-requests#request-reviewers-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsRequestReviewers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: any | any,
  opts?: FetcherData,
): Promise<PullRequestSimple> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_PullRequestSimple]]] } },
  });
}
/**
 * Remove requested reviewers from a pull request
 * Removes review requests from a pull request for a given set of users and/or teams.
 * Learn more at {@link https://docs.github.com/rest/pulls/review-requests#remove-requested-reviewers-from-a-pull-request}
 * Tags: pulls
 */
export async function pullsRemoveRequestedReviewers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: {
    /**
     * An array of user `login`s that will be removed.
     */
    reviewers: string[];
    /**
     * An array of team `slug`s that will be removed.
     */
    team_reviewers?: string[];
  },
  opts?: FetcherData,
): Promise<PullRequestSimple> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/requested_reviewers',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequestSimple]]] } },
  });
}
/**
 * List reviews for a pull request
 * Lists all reviews for a specified pull request. The list of reviews returns in chronological order.
 *
 * This endpoint
 * supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#list-reviews-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsListReviews<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<PullRequestReview[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_PullRequestReview]]] },
    },
  });
}
/**
 * Create a review for a pull request
 * Creates a review on a specified pull request.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * Pull request reviews created in the
 * `PENDING` state are not submitted and therefore do not include the `submitted_at` property in the response. To create a
 * pending review for a pull request, leave the `event` parameter blank. For more information about submitting a `PENDING`
 * review, see "[Submit a review for a pull
 * request](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request)."
 *
 * **Note:** To comment on a
 * specific line in a file, you need to first determine the position of that line in the diff. To see a pull request diff,
 * add the `application/vnd.github.v3.diff` media type to the `Accept` header of a call to the [Get a pull
 * request](https://docs.github.com/rest/pulls/pulls#get-a-pull-request) endpoint.
 *
 * The `position` value equals the number
 * of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line
 * is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of
 * whitespace and additional hunks until the beginning of a new file.
 *
 * This endpoint supports the following custom media
 * types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsCreateReview<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: {
    /**
     * The SHA of the commit that needs a review. Not using the latest commit SHA may render your review comment outdated if a subsequent commit modifies the line you specify as the `position`. Defaults to the most recent commit in the pull request when you do not specify a value.
     */
    commit_id?: string;
    /**
     * **Required** when using `REQUEST_CHANGES` or `COMMENT` for the `event` parameter. The body text of the pull request review.
     */
    body?: string;
    /**
     * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. By leaving this blank, you set the review action state to `PENDING`, which means you will need to [submit the pull request review](https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request) when you are ready.
     */
    event?: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT';
    /**
     * Use the following table to specify the location, destination, and contents of the draft review comment.
     */
    comments?: {
      /**
       * The relative path to the file that necessitates a review comment.
       */
      path: string;
      /**
       * The position in the diff where you want to add a review comment. Note this value is not the same as the line number in the file. The `position` value equals the number of lines down from the first "@@" hunk header in the file you want to add a comment. The line just below the "@@" line is position 1, the next line is position 2, and so on. The position in the diff continues to increase through lines of whitespace and additional hunks until the beginning of a new file.
       */
      position?: number;
      /**
       * Text of the review comment.
       */
      body: string;
      /**
       * @example 28
       */
      line?: number;
      /**
       * @example "RIGHT"
       */
      side?: string;
      /**
       * @example 26
       */
      start_line?: number;
      /**
       * @example "LEFT"
       */
      start_side?: string;
    }[];
  },
  opts?: FetcherData,
): Promise<PullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequestReview]]] } },
  });
}
/**
 * Get a review for a pull request
 * Retrieves a pull request review by its ID.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#get-a-review-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsGetReview<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  },
  opts?: FetcherData,
): Promise<PullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequestReview]]] } },
  });
}
/**
 * Update a review for a pull request
 * Updates the contents of a specified review summary comment.
 *
 * This endpoint supports the following custom media types.
 * For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#update-a-review-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsUpdateReview<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  },
  body: {
    /**
     * The body text of the pull request review.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<PullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequestReview]]] } },
  });
}
/**
 * Delete a pending review for a pull request
 * Deletes a pull request review that has not been submitted. Submitted reviews cannot be deleted.
 *
 * This endpoint supports
 * the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#delete-a-pending-review-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsDeletePendingReview<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  },
  opts?: FetcherData,
): Promise<PullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequestReview]]] } },
  });
}
/**
 * List comments for a pull request review
 * Lists comments for a specific pull request review.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#list-comments-for-a-pull-request-review}
 * Tags: pulls
 */
export async function pullsListCommentsForReview<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<ReviewComment[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_ReviewComment]]] } },
  });
}
/**
 * Dismiss a review for a pull request
 * Dismisses a specified review on a pull request.
 *
 * **Note:** To dismiss a pull request review on a [protected
 * branch](https://docs.github.com/rest/branches/branch-protection),
 * you must be a repository administrator or be included
 * in the list of people or teams
 * who can dismiss pull request reviews.
 *
 * This endpoint supports the following custom media
 * types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#dismiss-a-review-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsDismissReview<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  },
  body: {
    /**
     * The message for the pull request review dismissal
     */
    message: string;
    /**
     * @example "\"DISMISS\""
     */
    event?: 'DISMISS';
  },
  opts?: FetcherData,
): Promise<PullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/dismissals',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequestReview]]] } },
  });
}
/**
 * Submit a review for a pull request
 * Submits a pending review for a pull request. For more information about creating a pending review for a pull request,
 * see "[Create a review for a pull
 * request](https://docs.github.com/rest/pulls/reviews#create-a-review-for-a-pull-request)."
 *
 * This endpoint supports the
 * following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github-commitcomment.raw+json`**: Returns the raw markdown body. Response will include `body`. This
 * is the default if you do not pass any specific media type.
 * - **`application/vnd.github-commitcomment.text+json`**:
 * Returns a text only representation of the markdown body. Response will include `body_text`.
 * -
 * **`application/vnd.github-commitcomment.html+json`**: Returns HTML rendered from the body's markdown. Response will
 * include `body_html`.
 * - **`application/vnd.github-commitcomment.full+json`**: Returns raw, text, and HTML
 * representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/pulls/reviews#submit-a-review-for-a-pull-request}
 * Tags: pulls
 */
export async function pullsSubmitReview<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
    review_id: number;
  },
  body: {
    /**
     * The body text of the pull request review
     */
    body?: string;
    /**
     * The review action you want to perform. The review actions include: `APPROVE`, `REQUEST_CHANGES`, or `COMMENT`. When you leave this blank, the API returns _HTTP 422 (Unrecognizable entity)_ and sets the review action state to `PENDING`, which means you will need to re-submit the pull request review using a review action.
     */
    event: 'APPROVE' | 'REQUEST_CHANGES' | 'COMMENT';
  },
  opts?: FetcherData,
): Promise<PullRequestReview> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/reviews/{review_id}/events',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PullRequestReview]]] } },
  });
}
/**
 * Update a pull request branch
 * Updates the pull request branch with the latest upstream changes by merging HEAD from the base branch into the pull
 * request branch.
 * Learn more at {@link https://docs.github.com/rest/pulls/pulls#update-a-pull-request-branch}
 * Tags: pulls
 */
export async function pullsUpdateBranch<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    pull_number: number;
  },
  body: {
    /**
     * The expected SHA of the pull request's HEAD ref. This is the most recent commit on the pull request's branch. If the expected SHA does not match the pull request's HEAD, you will receive a `422 Unprocessable Entity` status. You can use the "[List commits](https://docs.github.com/rest/commits/commits#list-commits)" endpoint to find the most recent commit SHA. Default: SHA of the pull request's current HEAD ref.
     */
    expected_head_sha?: string;
  } | null,
  opts?: FetcherData,
): Promise<{
  message?: string;
  url?: string;
}> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/pulls/{pull_number}/update-branch',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository README
 * Gets the preferred README for a repository.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media
 * type.
 * - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using
 * GitHub's open-source [Markup library](https://github.com/github/markup).
 * Learn more at {@link https://docs.github.com/rest/repos/contents#get-a-repository-readme}
 * Tags: repos
 */
export async function reposGetReadme<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref?: string;
  },
  opts?: FetcherData,
): Promise<ContentFile> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/readme',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository README for a directory
 * Gets the README from a repository directory.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw file contents. This is the default if you do not specify a media
 * type.
 * - **`application/vnd.github.html+json`**: Returns the README in HTML. Markup languages are rendered to HTML using
 * GitHub's open-source [Markup library](https://github.com/github/markup).
 * Learn more at {@link https://docs.github.com/rest/repos/contents#get-a-repository-readme-for-a-directory}
 * Tags: repos
 */
export async function reposGetReadmeInDirectory<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    dir: string;
    ref?: string;
  },
  opts?: FetcherData,
): Promise<ContentFile> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/readme/{dir}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['ref'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List releases
 * This returns a list of releases, which does not include regular Git tags that have not been associated with a release.
 * To get a list of Git tags, use the [Repository Tags
 * API](https://docs.github.com/rest/repos/repos#list-repository-tags).
 *
 * Information about published releases are available
 * to everyone. Only users with push access will receive listings for draft releases.
 * Learn more at {@link https://docs.github.com/rest/releases/releases#list-releases}
 * Tags: repos
 */
export async function reposListReleases<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Release[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Release]]] } },
  });
}
/**
 * Create a release
 * Users with push access to the repository can create a release.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 * Learn more at {@link https://docs.github.com/rest/releases/releases#create-a-release}
 * Tags: repos
 */
export async function reposCreateRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the tag.
     */
    tag_name: string;
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
     */
    target_commitish?: string;
    /**
     * The name of the release.
     */
    name?: string;
    /**
     * Text describing the contents of the tag.
     */
    body?: string;
    /**
     * `true` to create a draft (unpublished) release, `false` to create a published one.
     */
    draft?: boolean;
    /**
     * `true` to identify the release as a prerelease. `false` to identify the release as a full release.
     */
    prerelease?: boolean;
    /**
     * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
     */
    discussion_category_name?: string;
    /**
     * Whether to automatically generate the name and body for this release. If `name` is specified, the specified name will be used; otherwise, a name will be automatically generated. If `body` is specified, the body will be pre-pended to the automatically generated notes.
     */
    generate_release_notes?: boolean;
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     * @defaultValue true
     */
    make_latest?: 'true' | 'false' | 'legacy';
  },
  opts?: FetcherData,
): Promise<Release> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Release]]] } },
  });
}
/**
 * Get a release asset
 * To download the asset's binary content, set the `Accept` header of the request to
 * [`application/octet-stream`](https://docs.github.com/rest/overview/media-types). The API will either redirect the client
 * to the location, or stream it directly if possible. API clients should handle both a `200` or `302` response.
 * Learn more at {@link https://docs.github.com/rest/releases/assets#get-a-release-asset}
 * Tags: repos
 */
export async function reposGetReleaseAsset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    asset_id: number;
  },
  opts?: FetcherData,
): Promise<ReleaseAsset | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/assets/{asset_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ReleaseAsset]]] } },
  });
}
/**
 * Update a release asset
 * Users with push access to the repository can edit a release asset.
 * Learn more at {@link https://docs.github.com/rest/releases/assets#update-a-release-asset}
 * Tags: repos
 */
export async function reposUpdateReleaseAsset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    asset_id: number;
  },
  body: {
    /**
     * The file name of the asset.
     */
    name?: string;
    /**
     * An alternate short description of the asset. Used in place of the filename.
     */
    label?: string;
    /**
     * @example "\"uploaded\""
     */
    state?: string;
  },
  opts?: FetcherData,
): Promise<ReleaseAsset> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/assets/{asset_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ReleaseAsset]]] } },
  });
}
/**
 * Delete a release asset
 * Learn more at {@link https://docs.github.com/rest/releases/assets#delete-a-release-asset}
 * Tags: repos
 */
export async function reposDeleteReleaseAsset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    asset_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/assets/{asset_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Generate release notes content for a release
 * Generate a name and body describing a [release](https://docs.github.com/rest/releases/releases#get-a-release). The body
 * content will be markdown formatted and contain information like the changes since last release and users who
 * contributed. The generated release notes are not saved anywhere. They are intended to be generated and used when
 * creating a new release.
 * Learn more at {@link https://docs.github.com/rest/releases/releases#generate-release-notes-content-for-a-release}
 * Tags: repos
 */
export async function reposGenerateReleaseNotes<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The tag name for the release. This can be an existing tag or a new one.
     */
    tag_name: string;
    /**
     * Specifies the commitish value that will be the target for the release's tag. Required if the supplied tag_name does not reference an existing tag. Ignored if the tag_name already exists.
     */
    target_commitish?: string;
    /**
     * The name of the previous tag to use as the starting point for the release notes. Use to manually specify the range for the set of changes considered as part this release.
     */
    previous_tag_name?: string;
    /**
     * Specifies a path to a file in the repository containing configuration settings used for generating the release notes. If unspecified, the configuration file located in the repository at '.github/release.yml' or '.github/release.yaml' will be used. If that is not present, the default configuration will be used.
     */
    configuration_file_path?: string;
  },
  opts?: FetcherData,
): Promise<ReleaseNotesContent> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/generate-notes',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the latest release
 * View the latest published full release for the repository.
 *
 * The latest release is the most recent non-prerelease,
 * non-draft release, sorted by the `created_at` attribute. The `created_at` attribute is the date of the commit used for
 * the release, and not the date when the release was drafted or published.
 * Learn more at {@link https://docs.github.com/rest/releases/releases#get-the-latest-release}
 * Tags: repos
 */
export async function reposGetLatestRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<Release> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/latest',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Release]]] } },
  });
}
/**
 * Get a release by tag name
 * Get a published release with the specified tag.
 * Learn more at {@link https://docs.github.com/rest/releases/releases#get-a-release-by-tag-name}
 * Tags: repos
 */
export async function reposGetReleaseByTag<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    tag: string;
  },
  opts?: FetcherData,
): Promise<Release> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/tags/{tag}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Release]]] } },
  });
}
/**
 * Get a release
 * Gets a public release with the specified release ID.
 *
 * **Note:** This returns an `upload_url` key corresponding to the
 * endpoint
 * for uploading release assets. This key is a hypermedia resource. For more information, see
 * "[Getting started
 * with the REST API](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia)."
 * Learn more at {@link https://docs.github.com/rest/releases/releases#get-a-release}
 * Tags: repos
 */
export async function reposGetRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
  },
  opts?: FetcherData,
): Promise<Release> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Release]]] } },
  });
}
/**
 * Update a release
 * Users with push access to the repository can edit a release.
 * Learn more at {@link https://docs.github.com/rest/releases/releases#update-a-release}
 * Tags: repos
 */
export async function reposUpdateRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
  },
  body: {
    /**
     * The name of the tag.
     */
    tag_name?: string;
    /**
     * Specifies the commitish value that determines where the Git tag is created from. Can be any branch or commit SHA. Unused if the Git tag already exists. Default: the repository's default branch.
     */
    target_commitish?: string;
    /**
     * The name of the release.
     */
    name?: string;
    /**
     * Text describing the contents of the tag.
     */
    body?: string;
    /**
     * `true` makes the release a draft, and `false` publishes the release.
     */
    draft?: boolean;
    /**
     * `true` to identify the release as a prerelease, `false` to identify the release as a full release.
     */
    prerelease?: boolean;
    /**
     * Specifies whether this release should be set as the latest release for the repository. Drafts and prereleases cannot be set as latest. Defaults to `true` for newly published releases. `legacy` specifies that the latest release should be determined based on the release creation date and higher semantic version.
     * @defaultValue true
     */
    make_latest?: 'true' | 'false' | 'legacy';
    /**
     * If specified, a discussion of the specified category is created and linked to the release. The value must be a category that already exists in the repository. If there is already a discussion linked to the release, this parameter is ignored. For more information, see "[Managing categories for discussions in your repository](https://docs.github.com/discussions/managing-discussions-for-your-community/managing-categories-for-discussions-in-your-repository)."
     */
    discussion_category_name?: string;
  },
  opts?: FetcherData,
): Promise<Release> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Release]]] } },
  });
}
/**
 * Delete a release
 * Users with push access to the repository can delete a release.
 * Learn more at {@link https://docs.github.com/rest/releases/releases#delete-a-release}
 * Tags: repos
 */
export async function reposDeleteRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List release assets
 * Learn more at {@link https://docs.github.com/rest/releases/assets#list-release-assets}
 * Tags: repos
 */
export async function reposListReleaseAssets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<ReleaseAsset[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}/assets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_ReleaseAsset]]] } },
  });
}
/**
 * Upload a release asset
 * This endpoint makes use of a [Hypermedia
 * relation](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#hypermedia) to determine
 * which URL to access. The endpoint you call to upload release assets is specific to your release. Use the `upload_url`
 * returned in
 * the response of the [Create a release
 * endpoint](https://docs.github.com/rest/releases/releases#create-a-release) to upload a release asset.
 *
 * You need to use
 * an HTTP client which supports [SNI](http://en.wikipedia.org/wiki/Server_Name_Indication) to make calls to this
 * endpoint.
 *
 * Most libraries will set the required `Content-Length` header automatically. Use the required `Content-Type`
 * header to provide the media type of the asset. For a list of media types, see [Media
 * Types](https://www.iana.org/assignments/media-types/media-types.xhtml). For example:
 *
 * `application/zip`
 *
 * GitHub expects
 * the asset data in its raw binary form, rather than JSON. You will send the raw binary content of the asset as the
 * request body. Everything else about the endpoint is the same as the rest of the API. For example,
 * you'll still need to
 * pass your authentication to be able to upload an asset.
 *
 * When an upstream failure occurs, you will receive a `502 Bad
 * Gateway` status. This may leave an empty asset with a state of `starter`. It can be safely deleted.
 *
 * **Notes:**
 * *
 * GitHub renames asset filenames that have special characters, non-alphanumeric characters, and leading or trailing
 * periods. The "[List release assets](https://docs.github.com/rest/releases/assets#list-release-assets)"
 * endpoint lists
 * the renamed filenames. For more information and help, contact [GitHub
 * Support](https://support.github.com/contact?tags=dotcom-rest-api).
 * *   To find the `release_id` query the [`GET
 * /repos/{owner}/{repo}/releases/latest` endpoint](https://docs.github.com/rest/releases/releases#get-the-latest-release).
 * *   If you upload an asset with the same filename as another uploaded asset, you'll receive an error and must delete
 * the old file before you can re-upload the new asset.
 * Learn more at {@link https://docs.github.com/rest/releases/assets#upload-a-release-asset}
 * Tags: repos
 */
export async function reposUploadReleaseAsset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
    name: string;
    label?: string;
  },
  body: Blob,
  opts?: FetcherData,
): Promise<ReleaseAsset> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}/assets',
    params,
    method: r.HttpMethod.POST,
    body,
    queryParams: ['name', 'label'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_ReleaseAsset]]] } },
  });
}
/**
 * List reactions for a release
 * List the reactions to a [release](https://docs.github.com/rest/releases/releases#get-a-release).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-release}
 * Tags: reactions
 */
export async function reactionsListForRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
    content?: '+1' | 'laugh' | 'heart' | 'hooray' | 'rocket' | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for a release
 * Create a reaction to a [release](https://docs.github.com/rest/releases/releases#get-a-release). A response with a
 * `Status: 200 OK` means that you already added the reaction type to this release.
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-release}
 * Tags: reactions
 */
export async function reactionsCreateForRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the release.
     */
    content: '+1' | 'laugh' | 'heart' | 'hooray' | 'rocket' | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Reaction]]] } },
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * Delete a release reaction
 * **Note:** You can also specify a repository by `repository_id` using the route `DELETE delete
 * /repositories/:repository_id/releases/:release_id/reactions/:reaction_id`.
 *
 * Delete a reaction to a
 * [release](https://docs.github.com/rest/releases/releases#get-a-release).
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#delete-a-release-reaction}
 * Tags: reactions
 */
export async function reactionsDeleteForRelease<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    release_id: number;
    reaction_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/releases/{release_id}/reactions/{reaction_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get rules for a branch
 * Returns all active rules that apply to the specified branch. The branch does not need to exist; rules that would
 * apply
 * to a branch with that name will be returned. All active rules that apply will be returned, regardless of the
 * level
 * at which they are configured (e.g. repository or organization). Rules in rulesets with "evaluate" or
 * "disabled"
 * enforcement statuses are not returned.
 * Learn more at {@link https://docs.github.com/rest/repos/rules#get-rules-for-a-branch}
 * Tags: repos
 */
export async function reposGetBranchRules<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    branch: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<RepositoryRuleDetailed[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rules/branches/{branch}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all repository rulesets
 * Get all the rulesets for a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/rules#get-all-repository-rulesets}
 * Tags: repos
 */
export async function reposGetRepoRulesets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
    includes_parents?: boolean;
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rulesets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'includes_parents'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_RepositoryRuleset]]] },
    },
  });
}
/**
 * Create a repository ruleset
 * Create a ruleset for a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/rules#create-a-repository-ruleset}
 * Tags: repos
 */
export async function reposCreateRepoRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The name of the ruleset.
     */
    name: string;
    /**
     * The target of the ruleset.
     */
    target?: 'branch' | 'tag';
    enforcement: RepositoryRuleEnforcement;
    /**
     * The actors that can bypass the rules in this ruleset
     */
    bypass_actors?: RepositoryRulesetBypassActor[];
    conditions?: RepositoryRulesetConditions;
    /**
     * An array of rules within the ruleset.
     */
    rules?: RepositoryRule[];
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rulesets',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_RepositoryRuleset]]] } },
  });
}
/**
 * List repository rule suites
 * Lists suites of rule evaluations at the repository level.
 * For more information, see "[Managing rulesets for a
 * repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
 * Learn more at {@link https://docs.github.com/rest/repos/rule-suites#list-repository-rule-suites}
 * Tags: repos
 */
export async function reposGetRepoRuleSuites<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref?: string;
    time_period?: 'hour' | 'day' | 'week' | 'month';
    actor_name?: string;
    rule_suite_result?: 'pass' | 'fail' | 'bypass' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<RuleSuites> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rulesets/rule-suites',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'ref',
      'time_period',
      'actor_name',
      'rule_suite_result',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RuleSuites]]] } },
  });
}
/**
 * Get a repository rule suite
 * Gets information about a suite of rule evaluations from within a repository.
 * For more information, see "[Managing
 * rulesets for a
 * repository](https://docs.github.com/repositories/configuring-branches-and-merges-in-your-repository/managing-rulesets/managing-rulesets-for-a-repository#viewing-insights-for-rulesets)."
 * Learn more at {@link https://docs.github.com/rest/repos/rule-suites#get-a-repository-rule-suite}
 * Tags: repos
 */
export async function reposGetRepoRuleSuite<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    rule_suite_id: number;
  },
  opts?: FetcherData,
): Promise<RuleSuite> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rulesets/rule-suites/{rule_suite_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RuleSuite]]] } },
  });
}
/**
 * Get a repository ruleset
 * Get a ruleset for a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/rules#get-a-repository-ruleset}
 * Tags: repos
 */
export async function reposGetRepoRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ruleset_id: number;
    includes_parents?: boolean;
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rulesets/{ruleset_id}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['includes_parents'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositoryRuleset]]] } },
  });
}
/**
 * Update a repository ruleset
 * Update a ruleset for a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/rules#update-a-repository-ruleset}
 * Tags: repos
 */
export async function reposUpdateRepoRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ruleset_id: number;
  },
  body: {
    /**
     * The name of the ruleset.
     */
    name?: string;
    /**
     * The target of the ruleset.
     */
    target?: 'branch' | 'tag';
    enforcement?: RepositoryRuleEnforcement;
    /**
     * The actors that can bypass the rules in this ruleset
     */
    bypass_actors?: RepositoryRulesetBypassActor[];
    conditions?: RepositoryRulesetConditions;
    /**
     * An array of rules within the ruleset.
     */
    rules?: RepositoryRule[];
  },
  opts?: FetcherData,
): Promise<RepositoryRuleset> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rulesets/{ruleset_id}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositoryRuleset]]] } },
  });
}
/**
 * Delete a repository ruleset
 * Delete a ruleset for a repository.
 * Learn more at {@link https://docs.github.com/rest/repos/rules#delete-a-repository-ruleset}
 * Tags: repos
 */
export async function reposDeleteRepoRuleset<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ruleset_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/rulesets/{ruleset_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List secret scanning alerts for a repository
 * Lists secret scanning alerts for an eligible repository, from newest to oldest.
 *
 * The authenticated user must be an
 * administrator for the repository or for the organization that owns the repository to use this endpoint.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this
 * endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/secret-scanning/secret-scanning#list-secret-scanning-alerts-for-a-repository}
 * Tags: secret-scanning
 */
export async function secretScanningListAlertsForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    state?: 'open' | 'resolved';
    secret_type?: string;
    resolution?: string;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    page?: number;
    per_page?: number;
    before?: string;
    after?: string;
    validity?: string;
  },
  opts?: FetcherData,
): Promise<SecretScanningAlert[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/secret-scanning/alerts',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'state',
      'secret_type',
      'resolution',
      'sort',
      'direction',
      'page',
      'per_page',
      'before',
      'after',
      'validity',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_SecretScanningAlert]]] },
    },
  });
}
/**
 * Get a secret scanning alert
 * Gets a single secret scanning alert detected in an eligible repository.
 *
 * The authenticated user must be an administrator
 * for the repository or for the organization that owns the repository to use this endpoint.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this endpoint is only used
 * with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/secret-scanning/secret-scanning#get-a-secret-scanning-alert}
 * Tags: secret-scanning
 */
export async function secretScanningGetAlert<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  },
  opts?: FetcherData,
): Promise<SecretScanningAlert | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_SecretScanningAlert]]] } },
  });
}
/**
 * Update a secret scanning alert
 * Updates the status of a secret scanning alert in an eligible repository.
 *
 * The authenticated user must be an
 * administrator for the repository or for the organization that owns the repository to use this endpoint.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this
 * endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/secret-scanning/secret-scanning#update-a-secret-scanning-alert}
 * Tags: secret-scanning
 */
export async function secretScanningUpdateAlert<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
  },
  body: {
    state: SecretScanningAlertState;
    resolution?: SecretScanningAlertResolution;
    resolution_comment?: SecretScanningAlertResolutionComment;
  },
  opts?: FetcherData,
): Promise<SecretScanningAlert> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_SecretScanningAlert]]] } },
  });
}
/**
 * List locations for a secret scanning alert
 * Lists all locations for a given secret scanning alert for an eligible repository.
 *
 * The authenticated user must be an
 * administrator for the repository or for the organization that owns the repository to use this endpoint.
 *
 * OAuth app
 * tokens and personal access tokens (classic) need the `repo` or `security_events` scope to use this endpoint. If this
 * endpoint is only used with public repositories, the token can use the `public_repo` scope instead.
 * Learn more at {@link https://docs.github.com/rest/secret-scanning/secret-scanning#list-locations-for-a-secret-scanning-alert}
 * Tags: secret-scanning
 */
export async function secretScanningListLocationsForAlert<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    alert_number: AlertNumber;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<SecretScanningLocation[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/secret-scanning/alerts/{alert_number}/locations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository security advisories
 * Lists security advisories in a repository.
 *
 * The authenticated user can access unpublished security advisories from a
 * repository if they are a security manager or administrator of that repository, or if they are a collaborator on any
 * security advisory.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or
 * `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished
 * security advisory that the authenticated user has access to.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#list-repository-security-advisories}
 * Tags: security-advisories
 */
export async function securityAdvisoriesListRepositoryAdvisories<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    direction?: 'asc' | 'desc';
    sort?: 'created' | 'updated' | 'published';
    before?: string;
    after?: string;
    per_page?: number;
    state?: 'triage' | 'draft' | 'published' | 'closed';
  },
  opts?: FetcherData,
): Promise<RepositoryAdvisory[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/security-advisories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['direction', 'sort', 'before', 'after', 'per_page', 'state'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_RepositoryAdvisory]]] },
    },
  });
}
/**
 * Create a repository security advisory
 * Creates a new repository security advisory.
 *
 * In order to create a draft repository security advisory, the authenticated
 * user must be a security manager or administrator of that repository.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` or `repository_advisories:write` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#create-a-repository-security-advisory}
 * Tags: security-advisories
 */
export async function securityAdvisoriesCreateRepositoryAdvisory<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: RepositoryAdvisoryCreate,
  opts?: FetcherData,
): Promise<RepositoryAdvisory> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/security-advisories',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_RepositoryAdvisory]]] } },
  });
}
/**
 * Privately report a security vulnerability
 * Report a security vulnerability to the maintainers of the repository.
 * See "[Privately reporting a security
 * vulnerability](https://docs.github.com/code-security/security-advisories/guidance-on-reporting-and-writing/privately-reporting-a-security-vulnerability)"
 * for more information about private vulnerability reporting.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#privately-report-a-security-vulnerability}
 * Tags: security-advisories
 */
export async function securityAdvisoriesCreatePrivateVulnerabilityReport<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: PrivateVulnerabilityReportCreate,
  opts?: FetcherData,
): Promise<RepositoryAdvisory> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/security-advisories/reports',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_RepositoryAdvisory]]] } },
  });
}
/**
 * Get a repository security advisory
 * Get a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
 *
 * Anyone can access any
 * published security advisory on a public repository.
 *
 * The authenticated user can access an unpublished security advisory
 * from a repository if they are a security manager or administrator of that repository, or if they are a
 * collaborator on
 * the security advisory.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or
 * `repository_advisories:read` scope to to get a published security advisory in a private repository, or any unpublished
 * security advisory that the authenticated user has access to.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#get-a-repository-security-advisory}
 * Tags: security-advisories
 */
export async function securityAdvisoriesGetRepositoryAdvisory<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ghsa_id: string;
  },
  opts?: FetcherData,
): Promise<RepositoryAdvisory> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/security-advisories/{ghsa_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositoryAdvisory]]] } },
  });
}
/**
 * Update a repository security advisory
 * Update a repository security advisory using its GitHub Security Advisory (GHSA) identifier.
 *
 * In order to update any
 * security advisory, the authenticated user must be a security manager or administrator of that repository,
 * or a
 * collaborator on the repository security advisory.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo`
 * or `repository_advisories:write` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#update-a-repository-security-advisory}
 * Tags: security-advisories
 */
export async function securityAdvisoriesUpdateRepositoryAdvisory<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ghsa_id: string;
  },
  body: RepositoryAdvisoryUpdate,
  opts?: FetcherData,
): Promise<RepositoryAdvisory> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/security-advisories/{ghsa_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositoryAdvisory]]] } },
  });
}
/**
 * Request a CVE for a repository security advisory
 * If you want a CVE identification number for the security vulnerability in your project, and don't already have one, you
 * can request a CVE identification number from GitHub. For more information see "[Requesting a CVE identification
 * number](https://docs.github.com/code-security/security-advisories/repository-security-advisories/publishing-a-repository-security-advisory#requesting-a-cve-identification-number-optional)."
 *
 * You
 * may request a CVE for public repositories, but cannot do so for private repositories.
 *
 * In order to request a CVE for a
 * repository security advisory, the authenticated user must be a security manager or administrator of that
 * repository.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` or `repository_advisories:write`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#request-a-cve-for-a-repository-security-advisory}
 * Tags: security-advisories
 */
export async function securityAdvisoriesCreateRepositoryAdvisoryCveRequest<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ghsa_id: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/security-advisories/{ghsa_id}/cve',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a temporary private fork
 * Create a temporary private fork to collaborate on fixing a security vulnerability in your repository.
 *
 * **Note**: Forking
 * a repository happens asynchronously. You may have to wait up to 5 minutes before you can access the fork.
 * Learn more at {@link https://docs.github.com/rest/security-advisories/repository-advisories#create-a-temporary-private-fork}
 * Tags: security-advisories
 */
export async function securityAdvisoriesCreateFork<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ghsa_id: string;
  },
  opts?: FetcherData,
): Promise<FullRepository> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/security-advisories/{ghsa_id}/forks',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '202': { transforms: { date: [[['ref', $date_FullRepository]]] } },
  });
}
/**
 * List stargazers
 * Lists the people that have starred the repository.
 *
 * This endpoint supports the following custom media types. For more
 * information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
 * Learn more at {@link https://docs.github.com/rest/activity/starring#list-stargazers}
 * Tags: activity
 */
export async function activityListStargazersForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[] | Stargazer[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/stargazers',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['select', [[['loop'], ['ref', $date_Stargazer]]]]]],
      },
    },
  });
}
/**
 * Get the weekly commit activity
 * Returns a weekly aggregate of the number of additions and deletions pushed to a repository.
 *
 * **Note:** This endpoint
 * can only be used for repositories with fewer than 10,000 commits. If the repository contains
 * 10,000 or more commits, a
 * 422 status code will be returned.
 * Learn more at {@link https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-activity}
 * Tags: repos
 */
export async function reposGetCodeFrequencyStats<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CodeFrequencyStat[] | any | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/stats/code_frequency',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the last year of commit activity
 * Returns the last year of commit activity grouped by week. The `days` array is a group of commits per day, starting on
 * `Sunday`.
 * Learn more at {@link https://docs.github.com/rest/metrics/statistics#get-the-last-year-of-commit-activity}
 * Tags: repos
 */
export async function reposGetCommitActivityStats<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CommitActivity[] | any | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/stats/commit_activity',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all contributor commit activity
 * Returns the `total` number of commits authored by the contributor. In addition, the response includes a Weekly Hash
 * (`weeks` array) with the following information:
 *
 * *   `w` - Start of the week, given as a [Unix
 * timestamp](https://en.wikipedia.org/wiki/Unix_time).
 * *   `a` - Number of additions
 * *   `d` - Number of deletions
 * *   `c`
 * - Number of commits
 *
 * **Note:** This endpoint will return `0` values for all addition and deletion counts in repositories
 * with 10,000 or more commits.
 * Learn more at {@link https://docs.github.com/rest/metrics/statistics#get-all-contributor-commit-activity}
 * Tags: repos
 */
export async function reposGetContributorsStats<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ContributorActivity[] | any | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/stats/contributors',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the weekly commit count
 * Returns the total commit counts for the `owner` and total commit counts in `all`. `all` is everyone combined, including
 * the `owner` in the last 52 weeks. If you'd like to get the commit counts for non-owners, you can subtract `owner` from
 * `all`.
 *
 * The array order is oldest week (index 0) to most recent week.
 *
 * The most recent week is seven days ago at UTC
 * midnight to today at UTC midnight.
 * Learn more at {@link https://docs.github.com/rest/metrics/statistics#get-the-weekly-commit-count}
 * Tags: repos
 */
export async function reposGetParticipationStats<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ParticipationStats> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/stats/participation',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the hourly commit count for each day
 * Each array contains the day number, hour number, and number of commits:
 *
 * *   `0-6`: Sunday - Saturday
 * *   `0-23`: Hour
 * of day
 * *   Number of commits
 *
 * For example, `[2, 14, 25]` indicates that there were 25 total commits, during the 2:00pm
 * hour on Tuesdays. All times are based on the time zone of individual commits.
 * Learn more at {@link https://docs.github.com/rest/metrics/statistics#get-the-hourly-commit-count-for-each-day}
 * Tags: repos
 */
export async function reposGetPunchCardStats<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<CodeFrequencyStat[] | any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/stats/punch_card',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a commit status
 * Users with push access in a repository can create commit statuses for a given SHA.
 *
 * Note: there is a limit of 1000
 * statuses per `sha` and `context` within a repository. Attempts to create more than 1000 statuses will result in a
 * validation error.
 * Learn more at {@link https://docs.github.com/rest/commits/statuses#create-a-commit-status}
 * Tags: repos
 */
export async function reposCreateCommitStatus<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    sha: string;
  },
  body: {
    /**
     * The state of the status.
     */
    state: 'error' | 'failure' | 'pending' | 'success';
    /**
     * The target URL to associate with this status. This URL will be linked from the GitHub UI to allow users to easily see the source of the status.
     * For example, if your continuous integration system is posting build status, you would want to provide the deep link for the build output for this specific SHA:
     * `http://ci.example.com/user/repo/build/sha`
     */
    target_url?: string | null;
    /**
     * A short description of the status.
     */
    description?: string | null;
    /**
     * A string label to differentiate this status from the status of other systems. This field is case-insensitive.
     * @defaultValue "default"
     */
    context?: string;
  },
  opts?: FetcherData,
): Promise<Status> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/statuses/{sha}',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List watchers
 * Lists the people watching the specified repository.
 * Learn more at {@link https://docs.github.com/rest/activity/watching#list-watchers}
 * Tags: activity
 */
export async function activityListWatchersForRepo<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/subscribers',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a repository subscription
 * Gets information about whether the authenticated user is subscribed to the repository.
 * Learn more at {@link https://docs.github.com/rest/activity/watching#get-a-repository-subscription}
 * Tags: activity
 */
export async function activityGetRepoSubscription<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<RepositorySubscription> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/subscription',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositorySubscription]]] } },
  });
}
/**
 * Set a repository subscription
 * If you would like to watch a repository, set `subscribed` to `true`. If you would like to ignore notifications made
 * within a repository, set `ignored` to `true`. If you would like to stop watching a repository, [delete the repository's
 * subscription](https://docs.github.com/rest/activity/watching#delete-a-repository-subscription) completely.
 * Learn more at {@link https://docs.github.com/rest/activity/watching#set-a-repository-subscription}
 * Tags: activity
 */
export async function activitySetRepoSubscription<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * Determines if notifications should be received from this repository.
     */
    subscribed?: boolean;
    /**
     * Determines if all notifications should be blocked from this repository.
     */
    ignored?: boolean;
  },
  opts?: FetcherData,
): Promise<RepositorySubscription> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/subscription',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_RepositorySubscription]]] } },
  });
}
/**
 * Delete a repository subscription
 * This endpoint should only be used to stop watching a repository. To control whether or not you wish to receive
 * notifications from a repository, [set the repository's subscription
 * manually](https://docs.github.com/rest/activity/watching#set-a-repository-subscription).
 * Learn more at {@link https://docs.github.com/rest/activity/watching#delete-a-repository-subscription}
 * Tags: activity
 */
export async function activityDeleteRepoSubscription<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/subscription',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository tags
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-repository-tags}
 * Tags: repos
 */
export async function reposListTags<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Tag[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/tags',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List tag protection states for a repository
 * This returns the tag protection states of a repository.
 *
 * This information is only available to repository
 * administrators.
 * Learn more at {@link https://docs.github.com/rest/repos/tags#list-tag-protection-states-for-a-repository}
 * Tags: repos
 */
export async function reposListTagProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<TagProtection[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/tags/protection',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a tag protection state for a repository
 * This creates a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 * Learn more at {@link https://docs.github.com/rest/repos/tags#create-a-tag-protection-state-for-a-repository}
 * Tags: repos
 */
export async function reposCreateTagProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * An optional glob pattern to match against when enforcing tag protection.
     */
    pattern: string;
  },
  opts?: FetcherData,
): Promise<TagProtection> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/tags/protection',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a tag protection state for a repository
 * This deletes a tag protection state for a repository.
 * This endpoint is only available to repository administrators.
 * Learn more at {@link https://docs.github.com/rest/repos/tags#delete-a-tag-protection-state-for-a-repository}
 * Tags: repos
 */
export async function reposDeleteTagProtection<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    tag_protection_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/tags/protection/{tag_protection_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Download a repository archive (tar)
 * Gets a redirect URL to download a tar archive for a repository. If you omit `:ref`, the repository’s default branch
 * (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need
 * to use
 * the `Location` header to make a second `GET` request.
 * **Note**: For private repositories, these links are
 * temporary and expire after five minutes.
 * Learn more at {@link https://docs.github.com/rest/repos/contents#download-a-repository-archive-tar}
 * Tags: repos
 */
export async function reposDownloadTarballArchive<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/tarball/{ref}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repository teams
 * Lists the teams that have access to the specified repository and that are also visible to the authenticated user.
 *
 * For a
 * public repository, a team is listed only if that team added the public repository explicitly.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `public_repo` or `repo` scope to use this endpoint with a public repository,
 * and `repo` scope to use this endpoint with a private repository.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-repository-teams}
 * Tags: repos
 */
export async function reposListTeams<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/teams',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get all repository topics
 * Learn more at {@link https://docs.github.com/rest/repos/repos#get-all-repository-topics}
 * Tags: repos
 */
export async function reposGetAllTopics<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<Topic> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/topics',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Replace all repository topics
 * Learn more at {@link https://docs.github.com/rest/repos/repos#replace-all-repository-topics}
 * Tags: repos
 */
export async function reposReplaceAllTopics<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * An array of topics to add to the repository. Pass one or more topics to _replace_ the set of existing topics. Send an empty array (`[]`) to clear all topics from the repository. **Note:** Topic `names` cannot contain uppercase letters.
     */
    names: string[];
  },
  opts?: FetcherData,
): Promise<Topic> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/topics',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get repository clones
 * Get the total number of clones and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC
 * midnight of the beginning of the day or week. Week begins on Monday.
 * Learn more at {@link https://docs.github.com/rest/metrics/traffic#get-repository-clones}
 * Tags: repos
 */
export async function reposGetClones<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per?: 'day' | 'week';
  },
  opts?: FetcherData,
): Promise<CloneTraffic> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/traffic/clones',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CloneTraffic]]] } },
  });
}
/**
 * Get top referral paths
 * Get the top 10 popular contents over the last 14 days.
 * Learn more at {@link https://docs.github.com/rest/metrics/traffic#get-top-referral-paths}
 * Tags: repos
 */
export async function reposGetTopPaths<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ContentTraffic[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/traffic/popular/paths',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get top referral sources
 * Get the top 10 referrers over the last 14 days.
 * Learn more at {@link https://docs.github.com/rest/metrics/traffic#get-top-referral-sources}
 * Tags: repos
 */
export async function reposGetTopReferrers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<ReferrerTraffic[]> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/traffic/popular/referrers',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get page views
 * Get the total number of views and breakdown per day or week for the last 14 days. Timestamps are aligned to UTC midnight
 * of the beginning of the day or week. Week begins on Monday.
 * Learn more at {@link https://docs.github.com/rest/metrics/traffic#get-page-views}
 * Tags: repos
 */
export async function reposGetViews<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    per?: 'day' | 'week';
  },
  opts?: FetcherData,
): Promise<ViewTraffic> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/traffic/views',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ViewTraffic]]] } },
  });
}
/**
 * Transfer a repository
 * A transfer request will need to be accepted by the new owner when transferring a personal repository to another user.
 * The response will contain the original `owner`, and the transfer will continue asynchronously. For more details on the
 * requirements to transfer personal and organization-owned repositories, see [about repository
 * transfers](https://docs.github.com/articles/about-repository-transfers/).
 * Learn more at {@link https://docs.github.com/rest/repos/repos#transfer-a-repository}
 * Tags: repos
 */
export async function reposTransfer<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The username or organization name the repository will be transferred to.
     */
    new_owner: string;
    /**
     * The new name to be given to the repository.
     */
    new_name?: string;
    /**
     * ID of the team or teams to add to the repository. Teams can only be added to organization-owned repositories.
     */
    team_ids?: number[];
  },
  opts?: FetcherData,
): Promise<MinimalRepository> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/transfer',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '202': { transforms: { date: [[['ref', $date_MinimalRepository]]] } },
  });
}
/**
 * Check if vulnerability alerts are enabled for a repository
 * Shows whether dependency alerts are enabled or disabled for a repository. The authenticated user must have admin read
 * access to the repository. For more information, see "[About security alerts for vulnerable
 * dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 * Learn more at {@link https://docs.github.com/rest/repos/repos#check-if-vulnerability-alerts-are-enabled-for-a-repository}
 * Tags: repos
 */
export async function reposCheckVulnerabilityAlerts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/vulnerability-alerts',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Enable vulnerability alerts
 * Enables dependency alerts and the dependency graph for a repository. The authenticated user must have admin access to
 * the repository. For more information, see "[About security alerts for vulnerable
 * dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 * Learn more at {@link https://docs.github.com/rest/repos/repos#enable-vulnerability-alerts}
 * Tags: repos
 */
export async function reposEnableVulnerabilityAlerts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/vulnerability-alerts',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Disable vulnerability alerts
 * Disables dependency alerts and the dependency graph for a repository.
 * The authenticated user must have admin access to
 * the repository. For more information,
 * see "[About security alerts for vulnerable
 * dependencies](https://docs.github.com/articles/about-security-alerts-for-vulnerable-dependencies)".
 * Learn more at {@link https://docs.github.com/rest/repos/repos#disable-vulnerability-alerts}
 * Tags: repos
 */
export async function reposDisableVulnerabilityAlerts<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/vulnerability-alerts',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Download a repository archive (zip)
 * Gets a redirect URL to download a zip archive for a repository. If you omit `:ref`, the repository’s default branch
 * (usually
 * `main`) will be used. Please make sure your HTTP framework is configured to follow redirects or you will need
 * to use
 * the `Location` header to make a second `GET` request.
 *
 * **Note**: For private repositories, these links are
 * temporary and expire after five minutes. If the repository is empty, you will receive a 404 when you follow the
 * redirect.
 * Learn more at {@link https://docs.github.com/rest/repos/contents#download-a-repository-archive-zip}
 * Tags: repos
 */
export async function reposDownloadZipballArchive<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
    ref: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repos/{owner}/{repo}/zipball/{ref}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a repository using a template
 * Creates a new repository using a repository template. Use the `template_owner` and `template_repo` route parameters to
 * specify the repository to use as the template. If the repository is not public, the authenticated user must own or be a
 * member of an organization that owns the repository. To check if a repository is available to use as a template, get the
 * repository's information using the [Get a repository](https://docs.github.com/rest/repos/repos#get-a-repository)
 * endpoint and check that the `is_template` key is `true`.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#create-a-repository-using-a-template}
 * Tags: repos
 */
export async function reposCreateUsingTemplate<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    template_owner: string;
    template_repo: string;
  },
  body: {
    /**
     * The organization or person who will own the new repository. To create a new repository in an organization, the authenticated user must be a member of the specified organization.
     */
    owner?: string;
    /**
     * The name of the new repository.
     */
    name: string;
    /**
     * A short description of the new repository.
     */
    description?: string;
    /**
     * Set to `true` to include the directory structure and files from all branches in the template repository, and not just the default branch. Default: `false`.
     */
    include_all_branches?: boolean;
    /**
     * Either `true` to create a new private repository or `false` to create a new public one.
     */
    private?: boolean;
  },
  opts?: FetcherData,
): Promise<FullRepository> {
  const req = await ctx.createRequest({
    path: '/repos/{template_owner}/{template_repo}/generate',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_FullRepository]]] } },
  });
}
/**
 * List public repositories
 * Lists all public repositories in the order that they were created.
 *
 * Note:
 * - For GitHub Enterprise Server, this endpoint
 * will only list repositories available to all users on the enterprise.
 * - Pagination is powered exclusively by the `since`
 * parameter. Use the [Link
 * header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the
 * next page of repositories.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-public-repositories}
 * Tags: repos
 */
export async function reposListPublic<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    since?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[] | any> {
  const req = await ctx.createRequest({
    path: '/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * List environment secrets
 * Lists all secrets available in an environment without revealing their
 * encrypted values.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#list-environment-secrets}
 * Tags: actions
 */
export async function actionsListEnvironmentSecrets<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: ActionsSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'secrets'], ['loop'], ['ref', $date_ActionsSecret]]],
      },
    },
  });
}
/**
 * Get an environment public key
 * Get the public key for an environment, which you need to encrypt environment
 * secrets. You need to encrypt a secret
 * before you can create or update secrets.
 *
 * Anyone with read access to the repository can use this endpoint.
 *
 * If the
 * repository is private, OAuth tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#get-an-environment-public-key}
 * Tags: actions
 */
export async function actionsGetEnvironmentPublicKey<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
  },
  opts?: FetcherData,
): Promise<ActionsPublicKey> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an environment secret
 * Gets a single environment secret without revealing its encrypted value.
 *
 * Authenticated users must have collaborator
 * access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the
 * `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#get-an-environment-secret}
 * Tags: actions
 */
export async function actionsGetEnvironmentSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<ActionsSecret> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ActionsSecret]]] } },
  });
}
/**
 * Create or update an environment secret
 * Creates or updates an environment secret with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * Authenticated
 * users must have collaborator access to a repository to create, update, or read secrets.
 *
 * OAuth tokens and personal
 * access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#create-or-update-an-environment-secret}
 * Tags: actions
 */
export async function actionsCreateOrUpdateEnvironmentSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
    secret_name: string;
  },
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get an environment public key](https://docs.github.com/rest/actions/secrets#get-an-environment-public-key) endpoint.
     */
    encrypted_value: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id: string;
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an environment secret
 * Deletes a secret in an environment using the secret name.
 *
 * Authenticated users must have collaborator access to a
 * repository to create, update, or read secrets.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope
 * to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/secrets#delete-an-environment-secret}
 * Tags: actions
 */
export async function actionsDeleteEnvironmentSecret<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List environment variables
 * Lists all environment variables.
 *
 * Authenticated users must have collaborator access to a repository to create, update,
 * or read variables.
 *
 * OAuth app tokens and personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#list-environment-variables}
 * Tags: actions
 */
export async function actionsListEnvironmentVariables<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  variables: ActionsVariable[];
}> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/variables',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'variables'], ['loop'], ['ref', $date_ActionsVariable]],
        ],
      },
    },
  });
}
/**
 * Create an environment variable
 * Create an environment variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#create-an-environment-variable}
 * Tags: actions
 */
export async function actionsCreateEnvironmentVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
  },
  body: {
    /**
     * The name of the variable.
     */
    name: string;
    /**
     * The value of the variable.
     */
    value: string;
  },
  opts?: FetcherData,
): Promise<EmptyObject> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/variables',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an environment variable
 * Gets a specific variable in an environment.
 *
 * Authenticated users must have collaborator access to a repository to
 * create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#get-an-environment-variable}
 * Tags: actions
 */
export async function actionsGetEnvironmentVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    environment_name: string;
    name: string;
  },
  opts?: FetcherData,
): Promise<ActionsVariable> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/variables/{name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_ActionsVariable]]] } },
  });
}
/**
 * Update an environment variable
 * Updates an environment variable that you can reference in a GitHub Actions workflow.
 *
 * Authenticated users must have
 * collaborator access to a repository to create, update, or read variables.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#update-an-environment-variable}
 * Tags: actions
 */
export async function actionsUpdateEnvironmentVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    name: string;
    environment_name: string;
  },
  body: {
    /**
     * The name of the variable.
     */
    name?: string;
    /**
     * The value of the variable.
     */
    value?: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/variables/{name}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an environment variable
 * Deletes an environment variable using the variable name.
 *
 * Authenticated users must have collaborator access to a
 * repository to create, update, or read variables.
 *
 * OAuth tokens and personal access tokens (classic) need the `repo`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/actions/variables#delete-an-environment-variable}
 * Tags: actions
 */
export async function actionsDeleteEnvironmentVariable<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    name: string;
    environment_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/repositories/{repository_id}/environments/{environment_name}/variables/{name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Search code
 * Searches for query terms inside of a file. This method returns up to 100 results [per
 * page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
 *
 * When searching for code, you can get text
 * match metadata for the file **content** and file **path** fields when you pass the `text-match` media type. For more
 * details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/search/search#text-match-metadata).
 *
 * For example, if you want to find the
 * definition of the `addClass` function inside [jQuery](https://github.com/jquery/jquery) repository, your query would
 * look something like this:
 *
 * `q=addClass+in:file+language:js+repo:jquery/jquery`
 *
 * This query searches for the keyword
 * `addClass` within a file's contents. The query limits the search to files where the language is JavaScript in the
 * `jquery/jquery` repository.
 *
 * Considerations for code search:
 *
 * Due to the complexity of searching code, there are a few
 * restrictions on how searches are performed:
 *
 * *   Only the _default branch_ is considered. In most cases, this will be
 * the `master` branch.
 * *   Only files smaller than 384 KB are searchable.
 * *   You must always include at least one search
 * term when searching source code. For example, searching for
 * [`language:go`](https://github.com/search?utf8=%E2%9C%93&q=language%3Ago&type=Code) is not valid, while
 * [`amazing
 * language:go`](https://github.com/search?utf8=%E2%9C%93&q=amazing+language%3Ago&type=Code) is.
 *
 * This endpoint
 * requires you to authenticate and limits you to 10 requests per minute.
 * Learn more at {@link https://docs.github.com/rest/search/search#search-code}
 * Tags: search
 */
export async function searchCode<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    q: string;
    sort?: 'indexed';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      incomplete_results: boolean;
      items: CodeSearchResultItem[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/search/code',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['q', 'sort', 'order', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'items'], ['loop'], ['ref', $date_CodeSearchResultItem]],
        ],
      },
    },
  });
}
/**
 * Search commits
 * Find commits via various criteria on the default branch (usually `main`). This method returns up to 100 results [per
 * page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
 *
 * When searching for commits, you can get
 * text match metadata for the **message** field when you provide the `text-match` media type. For more details about how
 * to receive highlighted search results, see [Text
 * match
 * metadata](https://docs.github.com/rest/search/search#text-match-metadata).
 *
 * For example, if you want to find
 * commits related to CSS in the [octocat/Spoon-Knife](https://github.com/octocat/Spoon-Knife) repository. Your query would
 * look something like this:
 *
 * `q=repo:octocat/Spoon-Knife+css`
 * Learn more at {@link https://docs.github.com/rest/search/search#search-commits}
 * Tags: search
 */
export async function searchCommits<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    q: string;
    sort?: 'author-date' | 'committer-date';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      incomplete_results: boolean;
      items: CommitSearchResultItem[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/search/commits',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['q', 'sort', 'order', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'items'],
            ['loop'],
            ['ref', $date_CommitSearchResultItem],
          ],
        ],
      },
    },
  });
}
/**
 * Search issues and pull requests
 * Find issues by state and keyword. This method returns up to 100 results [per
 * page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
 *
 * When searching for issues, you can get
 * text match metadata for the issue **title**, issue **body**, and issue **comment body** fields when you pass the
 * `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match
 * metadata](https://docs.github.com/rest/search/search#text-match-metadata).
 *
 * For example, if you want to find the oldest
 * unresolved Python bugs on Windows. Your query might look something like
 * this.
 *
 * `q=windows+label:bug+language:python+state:open&sort=created&order=asc`
 *
 * This query searches for the keyword
 * `windows`, within any open issue that is labeled as `bug`. The search runs across repositories whose primary language is
 * Python. The results are sorted by creation date in ascending order, which means the oldest issues appear first in the
 * search results.
 *
 * **Note:** For requests made by GitHub Apps with a user access token, you can't retrieve a combination
 * of issues and pull requests in a single query. Requests that don't include the `is:issue` or `is:pull-request` qualifier
 * will receive an HTTP `422 Unprocessable Entity` response. To get results for both issues and pull requests, you must
 * send separate queries for issues and pull requests. For more information about the `is` qualifier, see "[Searching only
 * issues or pull
 * requests](https://docs.github.com/github/searching-for-information-on-github/searching-issues-and-pull-requests#search-only-issues-or-pull-requests)."
 * Learn more at {@link https://docs.github.com/rest/search/search#search-issues-and-pull-requests}
 * Tags: search
 */
export async function searchIssuesAndPullRequests<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    q: string;
    sort?:
      | 'comments'
      | 'reactions'
      | 'reactions-+1'
      | 'reactions--1'
      | 'reactions-smile'
      | 'reactions-thinking_face'
      | 'reactions-heart'
      | 'reactions-tada'
      | 'interactions'
      | 'created'
      | 'updated';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      incomplete_results: boolean;
      items: IssueSearchResultItem[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/search/issues',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['q', 'sort', 'order', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'items'], ['loop'], ['ref', $date_IssueSearchResultItem]],
        ],
      },
    },
  });
}
/**
 * Search labels
 * Find labels in a repository with names or descriptions that match search keywords. Returns up to 100 results [per
 * page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
 *
 * When searching for labels, you can get
 * text match metadata for the label **name** and **description** fields when you pass the `text-match` media type. For
 * more details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/search/search#text-match-metadata).
 *
 * For example, if you want to find labels in
 * the `linguist` repository that match `bug`, `defect`, or `enhancement`. Your query might look like
 * this:
 *
 * `q=bug+defect+enhancement&repository_id=64778136`
 *
 * The labels that best match the query appear first in the
 * search results.
 * Learn more at {@link https://docs.github.com/rest/search/search#search-labels}
 * Tags: search
 */
export async function searchLabels<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    repository_id: number;
    q: string;
    sort?: 'created' | 'updated';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      incomplete_results: boolean;
      items: LabelSearchResultItem[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/search/labels',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['repository_id', 'q', 'sort', 'order', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Search repositories
 * Find repositories via various criteria. This method returns up to 100 results [per
 * page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
 *
 * When searching for repositories, you can
 * get text match metadata for the **name** and **description** fields when you pass the `text-match` media type. For more
 * details about how to receive highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/search/search#text-match-metadata).
 *
 * For example, if you want to search for
 * popular Tetris repositories written in assembly code, your query might look like
 * this:
 *
 * `q=tetris+language:assembly&sort=stars&order=desc`
 *
 * This query searches for repositories with the word `tetris`
 * in the name, the description, or the README. The results are limited to repositories where the primary language is
 * assembly. The results are sorted by stars in descending order, so that the most popular repositories appear first in the
 * search results.
 * Learn more at {@link https://docs.github.com/rest/search/search#search-repositories}
 * Tags: search
 */
export async function searchRepos<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    q: string;
    sort?: 'stars' | 'forks' | 'help-wanted-issues' | 'updated';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      incomplete_results: boolean;
      items: RepoSearchResultItem[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/search/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['q', 'sort', 'order', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'items'], ['loop'], ['ref', $date_RepoSearchResultItem]],
        ],
      },
    },
  });
}
/**
 * Search topics
 * Find topics via various criteria. Results are sorted by best match. This method returns up to 100 results [per
 * page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api). See "[Searching
 * topics](https://docs.github.com/articles/searching-topics/)" for a detailed list of qualifiers.
 *
 * When searching for
 * topics, you can get text match metadata for the topic's **short\_description**, **description**, **name**, or
 * **display\_name** field when you pass the `text-match` media type. For more details about how to receive highlighted
 * search results, see [Text match metadata](https://docs.github.com/rest/search/search#text-match-metadata).
 *
 * For example,
 * if you want to search for topics related to Ruby that are featured on https://github.com/topics. Your query might look
 * like this:
 *
 * `q=ruby+is:featured`
 *
 * This query searches for topics with the keyword `ruby` and limits the results to find
 * only topics that are featured. The topics that are the best match for the query appear first in the search results.
 * Learn more at {@link https://docs.github.com/rest/search/search#search-topics}
 * Tags: search
 */
export async function searchTopics<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    q: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      incomplete_results: boolean;
      items: TopicSearchResultItem[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/search/topics',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['q', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'items'], ['loop'], ['ref', $date_TopicSearchResultItem]],
        ],
      },
    },
  });
}
/**
 * Search users
 * Find users via various criteria. This method returns up to 100 results [per
 * page](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api).
 *
 * When searching for users, you can get text
 * match metadata for the issue **login**, public **email**, and **name** fields when you pass the `text-match` media type.
 * For more details about highlighting search results, see [Text match
 * metadata](https://docs.github.com/rest/search/search#text-match-metadata). For more details about how to receive
 * highlighted search results, see [Text match
 * metadata](https://docs.github.com/rest/search/search#text-match-metadata).
 *
 * For example, if you're looking for a list of
 * popular users, you might try this query:
 *
 * `q=tom+repos:%3E42+followers:%3E1000`
 *
 * This query searches for users with the
 * name `tom`. The results are restricted to users with more than 42 repositories and over 1,000 followers.
 *
 * This endpoint
 * does not accept authentication and will only include publicly visible users. As an alternative, you can use the GraphQL
 * API. The GraphQL API requires authentication and will return private users, including Enterprise Managed Users (EMUs),
 * that you are authorized to view. For more information, see "[GraphQL
 * Queries](https://docs.github.com/graphql/reference/queries#search)."
 * Learn more at {@link https://docs.github.com/rest/search/search#search-users}
 * Tags: search
 */
export async function searchUsers<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    q: string;
    sort?: 'followers' | 'repositories' | 'joined';
    order?: 'desc' | 'asc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      incomplete_results: boolean;
      items: UserSearchResultItem[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/search/users',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['q', 'sort', 'order', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'items'], ['loop'], ['ref', $date_UserSearchResultItem]],
        ],
      },
    },
  });
}
/**
 * Get a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the [Get a team by name](https://docs.github.com/rest/teams/teams#get-a-team-by-name)
 * endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#get-a-team-legacy}
 * Tags: teams
 */
export async function teamsGetLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
  },
  opts?: FetcherData,
): Promise<TeamFull> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamFull]]] } },
  });
}
/**
 * Update a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Update a team](https://docs.github.com/rest/teams/teams#update-a-team) endpoint.
 *
 * To
 * edit a team, the authenticated user must either be an organization owner or a team maintainer.
 *
 * **Note:** With nested
 * teams, the `privacy` for parent teams cannot be `secret`.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#update-a-team-legacy}
 * Tags: teams
 */
export async function teamsUpdateLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
  },
  body: {
    /**
     * The name of the team.
     */
    name: string;
    /**
     * The description of the team.
     */
    description?: string;
    /**
     * The level of privacy this team should have. Editing teams without specifying this parameter leaves `privacy` intact. The options are:
     * **For a non-nested team:**
     *  * `secret` - only visible to organization owners and members of this team.
     *  * `closed` - visible to all members of this organization.
     * **For a parent or child team:**
     *  * `closed` - visible to all members of this organization.
     */
    privacy?: 'secret' | 'closed';
    /**
     * The notification setting the team has chosen. Editing teams without specifying this parameter leaves `notification_setting` intact. The options are:
     *  * `notifications_enabled` - team members receive notifications when the team is @mentioned.
     *  * `notifications_disabled` - no one receives notifications.
     */
    notification_setting?: 'notifications_enabled' | 'notifications_disabled';
    /**
     * **Deprecated**. The permission that new repositories will be added to the team with when none is specified.
     * @defaultValue "pull"
     */
    permission?: 'pull' | 'push' | 'admin';
    /**
     * The ID of a team to set as the parent team.
     */
    parent_team_id?: number | null;
  },
  opts?: FetcherData,
): Promise<TeamFull> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamFull]]] } },
    '201': { transforms: { date: [[['ref', $date_TeamFull]]] } },
  });
}
/**
 * Delete a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Delete a team](https://docs.github.com/rest/teams/teams#delete-a-team) endpoint.
 *
 * To
 * delete a team, the authenticated user must be an organization owner or team maintainer.
 *
 * If you are an organization
 * owner, deleting a parent team will delete all of its child teams as well.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#delete-a-team-legacy}
 * Tags: teams
 */
export async function teamsDeleteLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List discussions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`List discussions`](https://docs.github.com/rest/teams/discussions#list-discussions)
 * endpoint.
 *
 * List all discussions on a team's page.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#list-discussions-legacy}
 * Tags: teams
 */
export async function teamsListDiscussionsLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_TeamDiscussion]]] },
    },
  });
}
/**
 * Create a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`Create a
 * discussion`](https://docs.github.com/rest/teams/discussions#create-a-discussion) endpoint.
 *
 * Creates a new discussion
 * post on a team's page.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `write:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#create-a-discussion-legacy}
 * Tags: teams
 */
export async function teamsCreateDiscussionLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
  },
  body: {
    /**
     * The discussion post's title.
     */
    title: string;
    /**
     * The discussion post's body text.
     */
    body: string;
    /**
     * Private posts are only visible to team members, organization owners, and team maintainers. Public posts are visible to all members of the organization. Set to `true` to create a private post.
     */
    private?: boolean;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_TeamDiscussion]]] } },
  });
}
/**
 * Get a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Get a discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion)
 * endpoint.
 *
 * Get a specific discussion on a team's page.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#get-a-discussion-legacy}
 * Tags: teams
 */
export async function teamsGetDiscussionLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussion]]] } },
  });
}
/**
 * Update a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Update a
 * discussion](https://docs.github.com/rest/teams/discussions#update-a-discussion) endpoint.
 *
 * Edits the title and body text
 * of a discussion post. Only the parameters you provide are updated.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `write:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#update-a-discussion-legacy}
 * Tags: teams
 */
export async function teamsUpdateDiscussionLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
  },
  body: {
    /**
     * The discussion post's title.
     */
    title?: string;
    /**
     * The discussion post's body text.
     */
    body?: string;
  },
  opts?: FetcherData,
): Promise<TeamDiscussion> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussion]]] } },
  });
}
/**
 * Delete a discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`Delete a
 * discussion`](https://docs.github.com/rest/teams/discussions#delete-a-discussion) endpoint.
 *
 * Delete a discussion from a
 * team's page.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope to use this
 * endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussions#delete-a-discussion-legacy}
 * Tags: teams
 */
export async function teamsDeleteDiscussionLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List discussion comments (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [List discussion
 * comments](https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments) endpoint.
 *
 * List all comments
 * on a team discussion.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to use
 * this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#list-discussion-comments-legacy}
 * Tags: teams
 */
export async function teamsListDiscussionCommentsLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/comments',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_TeamDiscussionComment]]] },
    },
  });
}
/**
 * Create a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Create a discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment) endpoint.
 *
 * Creates a new
 * comment on a team discussion.
 *
 * This endpoint triggers
 * [notifications](https://docs.github.com/github/managing-subscriptions-and-notifications-on-github/about-notifications).
 * Creating content too quickly using this endpoint may result in secondary rate limiting. For more information, see "[Rate
 * limits for the API](https://docs.github.com/rest/overview/rate-limits-for-the-rest-api#about-secondary-rate-limits)" and
 * "[Best practices for using the REST
 * API](https://docs.github.com/rest/guides/best-practices-for-using-the-rest-api)."
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `write:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#create-a-discussion-comment-legacy}
 * Tags: teams
 */
export async function teamsCreateDiscussionCommentLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
  },
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/comments',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_TeamDiscussionComment]]] } },
  });
}
/**
 * Get a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Get a discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment) endpoint.
 *
 * Get a specific
 * comment on a team discussion.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:discussion` scope to
 * use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment-legacy}
 * Tags: teams
 */
export async function teamsGetDiscussionCommentLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussionComment]]] } },
  });
}
/**
 * Update a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Update a discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment) endpoint.
 *
 * Edits the body
 * text of a discussion comment.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope
 * to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#update-a-discussion-comment-legacy}
 * Tags: teams
 */
export async function teamsUpdateDiscussionCommentLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
  },
  body: {
    /**
     * The discussion comment's body text.
     */
    body: string;
  },
  opts?: FetcherData,
): Promise<TeamDiscussionComment> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamDiscussionComment]]] } },
  });
}
/**
 * Delete a discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Delete a discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment) endpoint.
 *
 * Deletes a
 * comment on a team discussion.
 *
 * OAuth app tokens and personal access tokens (classic) need the `write:discussion` scope
 * to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/discussion-comments#delete-a-discussion-comment-legacy}
 * Tags: teams
 */
export async function teamsDeleteDiscussionCommentLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List reactions for a team discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`List reactions for a team discussion
 * comment`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment) endpoint.
 *
 * List
 * the reactions to a [team discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-comment-legacy}
 * Tags: reactions
 */
export async function reactionsListForTeamDiscussionCommentLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for a team discussion comment (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new "[Create reaction for a team discussion
 * comment](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment)"
 * endpoint.
 *
 * Create a reaction to a [team discussion
 * comment](https://docs.github.com/rest/teams/discussion-comments#get-a-discussion-comment).
 *
 * A response with an HTTP
 * `200` status means that you already added the reaction type to this team discussion comment.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-comment-legacy}
 * Tags: reactions
 */
export async function reactionsCreateForTeamDiscussionCommentLegacy<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
    comment_number: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion comment.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/comments/{comment_number}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * List reactions for a team discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`List reactions for a team
 * discussion`](https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion) endpoint.
 *
 * List the
 * reactions to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `read:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#list-reactions-for-a-team-discussion-legacy}
 * Tags: reactions
 */
export async function reactionsListForTeamDiscussionLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
    content?:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Reaction[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/reactions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['content', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Reaction]]] } },
  });
}
/**
 * Create reaction for a team discussion (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`Create reaction for a team
 * discussion`](https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion) endpoint.
 *
 * Create a
 * reaction to a [team discussion](https://docs.github.com/rest/teams/discussions#get-a-discussion).
 *
 * A response with an
 * HTTP `200` status means that you already added the reaction type to this team discussion.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `write:discussion` scope to use this endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/reactions/reactions#create-reaction-for-a-team-discussion-legacy}
 * Tags: reactions
 */
export async function reactionsCreateForTeamDiscussionLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    discussion_number: number;
  },
  body: {
    /**
     * The [reaction type](https://docs.github.com/rest/reactions/reactions#about-reactions) to add to the team discussion.
     */
    content:
      | '+1'
      | '-1'
      | 'laugh'
      | 'confused'
      | 'heart'
      | 'hooray'
      | 'rocket'
      | 'eyes';
  },
  opts?: FetcherData,
): Promise<Reaction> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/discussions/{discussion_number}/reactions',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Reaction]]] } },
  });
}
/**
 * List pending team invitations (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`List pending team
 * invitations`](https://docs.github.com/rest/teams/members#list-pending-team-invitations) endpoint.
 *
 * The return hash
 * contains a `role` field which refers to the Organization Invitation role and will be one of the following values:
 * `direct_member`, `admin`, `billing_manager`, `hiring_manager`, or `reinstate`. If the invitee is not a GitHub member,
 * the `login` field in the return hash will be `null`.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#list-pending-team-invitations-legacy}
 * Tags: teams
 */
export async function teamsListPendingInvitationsLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<OrganizationInvitation[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/invitations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List team members (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`List team members`](https://docs.github.com/rest/teams/members#list-team-members)
 * endpoint.
 *
 * Team members will include the members of child teams.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#list-team-members-legacy}
 * Tags: teams
 */
export async function teamsListMembersLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    role?: 'member' | 'maintainer' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/members',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['role', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get team member (Legacy)
 * The "Get team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Get team membership for a
 * user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint instead. It allows you to get
 * both active and pending memberships.
 *
 * To list members in a team, the team must be visible to the authenticated user.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#get-team-member-legacy}
 * Tags: teams
 */
export async function teamsGetMemberLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/members/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add team member (Legacy)
 * The "Add team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Add or update team membership
 * for a user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint instead. It
 * allows you to invite new organization members to your teams.
 *
 * Team synchronization is available for organizations using
 * GitHub Enterprise Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * To add someone to a team, the authenticated user must be an organization owner or a team maintainer in
 * the team they're changing. The person being added to the team must be a member of the team's organization.
 *
 * **Note:**
 * When you have team synchronization set up for a team with your organization's identity provider (IdP), you will see an
 * error if you attempt to use the API for making changes to the team's membership. If you have access to manage group
 * membership in your IdP, you can manage GitHub team membership through your identity provider, which automatically adds
 * and removes team members in an organization. For more information, see "[Synchronizing teams between your identity
 * provider and
 * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * Note that
 * you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
 * method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#add-team-member-legacy}
 * Tags: teams
 */
export async function teamsAddMemberLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/members/{username}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove team member (Legacy)
 * The "Remove team member" endpoint (described below) is deprecated.
 *
 * We recommend using the [Remove team membership for a
 * user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint instead. It allows you to
 * remove both active and pending memberships.
 *
 * Team synchronization is available for organizations using GitHub Enterprise
 * Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * To remove a team member, the authenticated user must have 'admin' permissions to the team or be an owner
 * of the org that the team is associated with. Removing a team member does not delete the user, it just removes them from
 * the team.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity provider
 * (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you have
 * access to manage group membership in your IdP, you can manage GitHub team membership through your identity provider,
 * which automatically adds and removes team members in an organization. For more information, see "[Synchronizing teams
 * between your identity provider and
 * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#remove-team-member-legacy}
 * Tags: teams
 */
export async function teamsRemoveMemberLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/members/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Get team membership for a
 * user](https://docs.github.com/rest/teams/members#get-team-membership-for-a-user) endpoint.
 *
 * Team members will include
 * the members of child teams.
 *
 * To get a user's membership with a team, the team must be visible to the authenticated
 * user.
 *
 * **Note:**
 * The response contains the `state` of the membership and the member's `role`.
 *
 * The `role` for
 * organization owners is set to `maintainer`. For more information about `maintainer` roles, see [Create a
 * team](https://docs.github.com/rest/teams/teams#create-a-team).
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#get-team-membership-for-a-user-legacy}
 * Tags: teams
 */
export async function teamsGetMembershipForUserLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<TeamMembership> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/memberships/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add or update team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Add or update team membership for a
 * user](https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user) endpoint.
 *
 * Team
 * synchronization is available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * If the user is already a member of the team's organization, this endpoint will add the user to the team.
 * To add a membership between an organization member and a team, the authenticated user must be an organization owner or a
 * team maintainer.
 *
 * **Note:** When you have team synchronization set up for a team with your organization's identity
 * provider (IdP), you will see an error if you attempt to use the API for making changes to the team's membership. If you
 * have access to manage group membership in your IdP, you can manage GitHub team membership through your identity
 * provider, which automatically adds and removes team members in an organization. For more information, see
 * "[Synchronizing teams between your identity provider and
 * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 *
 * If the user
 * is unaffiliated with the team's organization, this endpoint will send an invitation to the user via email. This
 * newly-created membership will be in the "pending" state until the user accepts the invitation, at which point the
 * membership will transition to the "active" state and the user will be added as a member of the team. To add a membership
 * between an unaffiliated user and a team, the authenticated user must be an organization owner.
 *
 * If the user is already a
 * member of the team, this endpoint will update the role of the team member's role. To update the membership of a team
 * member, the authenticated user must be an organization owner or a team maintainer.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#add-or-update-team-membership-for-a-user-legacy}
 * Tags: teams
 */
export async function teamsAddOrUpdateMembershipForUserLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    username: string;
  },
  body: {
    /**
     * The role that this user should have in the team.
     * @defaultValue "member"
     */
    role?: 'member' | 'maintainer';
  },
  opts?: FetcherData,
): Promise<TeamMembership> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/memberships/{username}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove team membership for a user (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Remove team membership for a
 * user](https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user) endpoint.
 *
 * Team synchronization is
 * available for organizations using GitHub Enterprise Cloud. For more information, see [GitHub's
 * products](https://docs.github.com/github/getting-started-with-github/githubs-products) in the GitHub Help
 * documentation.
 *
 * To remove a membership between a user and a team, the authenticated user must have 'admin' permissions
 * to the team or be an owner of the organization that the team is associated with. Removing team membership does not
 * delete the user, it just removes their membership from the team.
 *
 * **Note:** When you have team synchronization set up
 * for a team with your organization's identity provider (IdP), you will see an error if you attempt to use the API for
 * making changes to the team's membership. If you have access to manage group membership in your IdP, you can manage
 * GitHub team membership through your identity provider, which automatically adds and removes team members in an
 * organization. For more information, see "[Synchronizing teams between your identity provider and
 * GitHub](https://docs.github.com/articles/synchronizing-teams-between-your-identity-provider-and-github/)."
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/members#remove-team-membership-for-a-user-legacy}
 * Tags: teams
 */
export async function teamsRemoveMembershipForUserLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/memberships/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List team projects (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`List team projects`](https://docs.github.com/rest/teams/teams#list-team-projects)
 * endpoint.
 *
 * Lists the organization projects for a team.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-team-projects-legacy}
 * Tags: teams
 */
export async function teamsListProjectsLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<TeamProject[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/projects',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check team permissions for a project (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Check team permissions for a
 * project](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project) endpoint.
 *
 * Checks whether a team
 * has `read`, `write`, or `admin` permissions for an organization project. The response includes projects inherited from a
 * parent team.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-project-legacy}
 * Tags: teams
 */
export async function teamsCheckPermissionsForProjectLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    project_id: number;
  },
  opts?: FetcherData,
): Promise<TeamProject> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/projects/{project_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add or update team project permissions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Add or update team project
 * permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions) endpoint.
 *
 * Adds an
 * organization project to a team. To add a project to a team or update the team's permission on a project, the
 * authenticated user must have `admin` permissions for the project. The project and team must be part of the same
 * organization.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#add-or-update-team-project-permissions-legacy}
 * Tags: teams
 */
export async function teamsAddOrUpdateProjectPermissionsLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    project_id: number;
  },
  body: {
    /**
     * The permission to grant to the team for this project. Default: the team's `permission` attribute will be used to determine what permission to grant the team on this project. Note that, if you choose not to pass any parameters, you'll need to set `Content-Length` to zero when calling this endpoint. For more information, see "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
     */
    permission?: 'read' | 'write' | 'admin';
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/projects/{project_id}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a project from a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Remove a project from a
 * team](https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team) endpoint.
 *
 * Removes an organization project
 * from a team. An organization owner or a team maintainer can remove any project from the team. To remove a project from a
 * team as an organization member, the authenticated user must have `read` access to both the team and project, or `admin`
 * access to the team or project. **Note:** This endpoint removes the project from the team, but does not delete it.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#remove-a-project-from-a-team-legacy}
 * Tags: teams
 */
export async function teamsRemoveProjectLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    project_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/projects/{project_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List team repositories (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [List team
 * repositories](https://docs.github.com/rest/teams/teams#list-team-repositories) endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-team-repositories-legacy}
 * Tags: teams
 */
export async function teamsListReposLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/repos',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * Check team permissions for a repository (Legacy)
 * **Note**: Repositories inherited through a parent team will also be checked.
 *
 * **Deprecation Notice:** This endpoint
 * route is deprecated and will be removed from the Teams API. We recommend migrating your existing code to use the new
 * [Check team permissions for a
 * repository](https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository) endpoint.
 *
 * You can also
 * get information about the specified repository, including what permissions the team grants on it, by passing the
 * following custom [media type](https://docs.github.com/rest/overview/media-types/) via the `Accept` header:
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#check-team-permissions-for-a-repository-legacy}
 * Tags: teams
 */
export async function teamsCheckPermissionsForRepoLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<TeamRepository | any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_TeamRepository]]] } },
  });
}
/**
 * Add or update team repository permissions (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new "[Add or update team repository
 * permissions](https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions)" endpoint.
 *
 * To add a
 * repository to a team or update the team's permission on a repository, the authenticated user must have admin access to
 * the repository, and must be able to see the team. The repository must be owned by the organization, or a direct fork of
 * a repository owned by the organization. You will get a `422 Unprocessable Entity` status if you attempt to add a
 * repository to a team that is not owned by the organization.
 *
 * Note that, if you choose not to pass any parameters, you'll
 * need to set `Content-Length` to zero when calling out to this endpoint. For more information, see "[HTTP
 * method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#add-or-update-team-repository-permissions-legacy}
 * Tags: teams
 */
export async function teamsAddOrUpdateRepoPermissionsLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    owner: string;
    repo: string;
  },
  body: {
    /**
     * The permission to grant the team on this repository. If no permission is specified, the team's `permission` attribute will be used to determine what permission to grant the team on this repository.
     */
    permission?: 'pull' | 'push' | 'admin';
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a repository from a team (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [Remove a repository from a
 * team](https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team) endpoint.
 *
 * If the authenticated user is
 * an organization owner or a team maintainer, they can remove any repositories from the team. To remove a repository from
 * a team as an organization member, the authenticated user must have admin access to the repository and must be able to
 * see the team. NOTE: This does not delete the repository, it just removes it from the team.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#remove-a-repository-from-a-team-legacy}
 * Tags: teams
 */
export async function teamsRemoveRepoLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/repos/{owner}/{repo}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List child teams (Legacy)
 * **Deprecation Notice:** This endpoint route is deprecated and will be removed from the Teams API. We recommend migrating
 * your existing code to use the new [`List child teams`](https://docs.github.com/rest/teams/teams#list-child-teams)
 * endpoint.
 * @deprecated
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-child-teams-legacy}
 * Tags: teams
 */
export async function teamsListChildLegacy<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    team_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Team[]> {
  const req = await ctx.createRequest({
    path: '/teams/{team_id}/teams',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the authenticated user
 * OAuth app tokens and personal access tokens (classic) need the `user` scope in order for the response to include private
 * profile information.
 * Learn more at {@link https://docs.github.com/rest/users/users#get-the-authenticated-user}
 * Tags: users
 */
export async function usersGetAuthenticated<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<(PrivateUser | PublicUser) | any> {
  const req = await ctx.createRequest({
    path: '/user',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            [
              'select',
              [[['ref', $date_PrivateUser]], [['ref', $date_PublicUser]]],
            ],
          ],
        ],
      },
    },
  });
}
/**
 * Update the authenticated user
 * **Note:** If your email is set to private and you send an `email` parameter as part of this request to update your
 * profile, your privacy settings are still enforced: the email address will not be displayed on your public profile or via
 * the API.
 * Learn more at {@link https://docs.github.com/rest/users/users#update-the-authenticated-user}
 * Tags: users
 */
export async function usersUpdateAuthenticated<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * The new name of the user.
     * @example "Omar Jahandar"
     */
    name?: string;
    /**
     * The publicly visible email address of the user.
     * @example "omar@example.com"
     */
    email?: string;
    /**
     * The new blog URL of the user.
     * @example "blog.example.com"
     */
    blog?: string;
    /**
     * The new Twitter username of the user.
     * @example "therealomarj"
     */
    twitter_username?: string | null;
    /**
     * The new company of the user.
     * @example "Acme corporation"
     */
    company?: string;
    /**
     * The new location of the user.
     * @example "Berlin, Germany"
     */
    location?: string;
    /**
     * The new hiring availability of the user.
     */
    hireable?: boolean;
    /**
     * The new short biography of the user.
     */
    bio?: string;
  },
  opts?: FetcherData,
): Promise<PrivateUser | any> {
  const req = await ctx.createRequest({
    path: '/user',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PrivateUser]]] } },
  });
}
/**
 * List users blocked by the authenticated user
 * List the users you've blocked on your personal account.
 * Learn more at {@link https://docs.github.com/rest/users/blocking#list-users-blocked-by-the-authenticated-user}
 * Tags: users
 */
export async function usersListBlockedByAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[] | any> {
  const req = await ctx.createRequest({
    path: '/user/blocks',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if a user is blocked by the authenticated user
 * Returns a 204 if the given user is blocked by the authenticated user. Returns a 404 if the given user is not blocked by
 * the authenticated user, or if the given user account has been identified as spam by GitHub.
 * Learn more at {@link https://docs.github.com/rest/users/blocking#check-if-a-user-is-blocked-by-the-authenticated-user}
 * Tags: users
 */
export async function usersCheckBlocked<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/blocks/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Block a user
 * Blocks the given user and returns a 204. If the authenticated user cannot block the given user a 422 is returned.
 * Learn more at {@link https://docs.github.com/rest/users/blocking#block-a-user}
 * Tags: users
 */
export async function usersBlock<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/blocks/{username}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unblock a user
 * Unblocks the given user and returns a 204.
 * Learn more at {@link https://docs.github.com/rest/users/blocking#unblock-a-user}
 * Tags: users
 */
export async function usersUnblock<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/blocks/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List codespaces for the authenticated user
 * Lists the authenticated user's codespaces.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#list-codespaces-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesListForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
    repository_id?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      codespaces: Codespace[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/user/codespaces',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page', 'repository_id'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['access', 'codespaces'], ['loop'], ['ref', $date_Codespace]]],
      },
    },
  });
}
/**
 * Create a codespace for the authenticated user
 * Creates a new codespace, owned by the authenticated user.
 *
 * This endpoint requires either a `repository_id` OR a
 * `pull_request` but not both.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#create-a-codespace-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesCreateForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body:
    | {
        /**
         * Repository id for this codespace
         */
        repository_id: number;
        /**
         * Git ref (typically a branch name) for this codespace
         */
        ref?: string;
        /**
         * The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
         */
        location?: string;
        /**
         * The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
         */
        geo?: 'EuropeWest' | 'SoutheastAsia' | 'UsEast' | 'UsWest';
        /**
         * IP for location auto-detection when proxying a request
         */
        client_ip?: string;
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Whether to authorize requested permissions from devcontainer.json
         */
        multi_repo_permissions_opt_out?: boolean;
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
        /**
         * Display name for this codespace
         */
        display_name?: string;
        /**
         * Duration in minutes after codespace has gone idle in which it will be deleted. Must be integer minutes between 0 and 43200 (30 days).
         */
        retention_period_minutes?: number;
      }
    | {
        /**
         * Pull request number for this codespace
         */
        pull_request: {
          /**
           * Pull request number
           */
          pull_request_number: number;
          /**
           * Repository id for this codespace
           */
          repository_id: number;
        };
        /**
         * The requested location for a new codespace. Best efforts are made to respect this upon creation. Assigned by IP if not provided.
         */
        location?: string;
        /**
         * The geographic area for this codespace. If not specified, the value is assigned by IP. This property replaces `location`, which is being deprecated.
         */
        geo?: 'EuropeWest' | 'SoutheastAsia' | 'UsEast' | 'UsWest';
        /**
         * Machine type to use for this codespace
         */
        machine?: string;
        /**
         * Path to devcontainer.json config to use for this codespace
         */
        devcontainer_path?: string;
        /**
         * Working directory for this codespace
         */
        working_directory?: string;
        /**
         * Time in minutes before codespace stops from inactivity
         */
        idle_timeout_minutes?: number;
      },
  opts?: FetcherData,
): Promise<Codespace> {
  const req = await ctx.createRequest({
    path: '/user/codespaces',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Codespace]]] } },
    '202': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * List secrets for the authenticated user
 * Lists all development environment secrets available for a user's codespaces without revealing their
 * encrypted
 * values.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#list-secrets-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesListSecretsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  secrets: CodespacesSecret[];
}> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'secrets'], ['loop'], ['ref', $date_CodespacesSecret]],
        ],
      },
    },
  });
}
/**
 * Get public key for the authenticated user
 * Gets your public key, which you need to encrypt secrets. You need to encrypt a secret before you can create or update
 * secrets.
 *
 * The authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesGetPublicKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<CodespacesUserPublicKey> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/public-key',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a secret for the authenticated user
 * Gets a development environment secret available to a user's codespaces without revealing its encrypted value.
 *
 * The
 * authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#get-a-secret-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesGetSecretForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<CodespacesSecret> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CodespacesSecret]]] } },
  });
}
/**
 * Create or update a secret for the authenticated user
 * Creates or updates a development environment secret for a user's codespace with an encrypted value. Encrypt your secret
 * using
 * [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages). For more information, see "[Encrypting
 * secrets for the REST API](https://docs.github.com/rest/guides/encrypting-secrets-for-the-rest-api)."
 *
 * The authenticated
 * user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `codespace` or `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#create-or-update-a-secret-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesCreateOrUpdateSecretForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    secret_name: string;
  },
  body: {
    /**
     * Value for your secret, encrypted with [LibSodium](https://libsodium.gitbook.io/doc/bindings_for_other_languages) using the public key retrieved from the [Get the public key for the authenticated user](https://docs.github.com/rest/codespaces/secrets#get-public-key-for-the-authenticated-user) endpoint.
     */
    encrypted_value?: string;
    /**
     * ID of the key you used to encrypt the secret.
     */
    key_id: string;
    /**
     * An array of repository ids that can access the user secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Set selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
     */
    selected_repository_ids?: (number | string)[];
  },
  opts?: FetcherData,
): Promise<EmptyObject | any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a secret for the authenticated user
 * Deletes a development environment secret from a user's codespaces using the secret name. Deleting the secret will remove
 * access from all codespaces that were allowed to access the secret.
 *
 * The authenticated user must have Codespaces access
 * to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or `codespace:secrets`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#delete-a-secret-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesDeleteSecretForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/{secret_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List selected repositories for a user secret
 * List the repositories that have been granted the ability to use a user's development environment secret.
 *
 * The
 * authenticated user must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `codespace` or `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret}
 * Tags: codespaces
 */
export async function codespacesListRepositoriesForSecretForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    secret_name: string;
  },
  opts?: FetcherData,
): Promise<{
  total_count: number;
  repositories: MinimalRepository[];
}> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            ['access', 'repositories'],
            ['loop'],
            ['ref', $date_MinimalRepository],
          ],
        ],
      },
    },
  });
}
/**
 * Set selected repositories for a user secret
 * Select the repositories that will use a user's development environment secret.
 *
 * The authenticated user must have
 * Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` or
 * `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#set-selected-repositories-for-a-user-secret}
 * Tags: codespaces
 */
export async function codespacesSetRepositoriesForSecretForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    secret_name: string;
  },
  body: {
    /**
     * An array of repository ids for which a codespace can access the secret. You can manage the list of selected repositories using the [List selected repositories for a user secret](https://docs.github.com/rest/codespaces/secrets#list-selected-repositories-for-a-user-secret), [Add a selected repository to a user secret](https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret), and [Remove a selected repository from a user secret](https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret) endpoints.
     */
    selected_repository_ids: number[];
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/{secret_name}/repositories',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add a selected repository to a user secret
 * Adds a repository to the selected repositories for a user's development environment secret.
 *
 * The authenticated user must
 * have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace`
 * or `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#add-a-selected-repository-to-a-user-secret}
 * Tags: codespaces
 */
export async function codespacesAddRepositoryForSecretForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a selected repository from a user secret
 * Removes a repository from the selected repositories for a user's development environment secret.
 *
 * The authenticated user
 * must have Codespaces access to use this endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `codespace` or `codespace:secrets` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/secrets#remove-a-selected-repository-from-a-user-secret}
 * Tags: codespaces
 */
export async function codespacesRemoveRepositoryForSecretForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    secret_name: string;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/secrets/{secret_name}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a codespace for the authenticated user
 * Gets information about a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#get-a-codespace-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesGetForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<Codespace | any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * Update a codespace for the authenticated user
 * Updates a codespace owned by the authenticated user. Currently only the codespace's machine type and recent folders can
 * be modified using this endpoint.
 *
 * If you specify a new machine type it will be applied the next time your codespace is
 * started.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#update-a-codespace-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesUpdateForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  body: {
    /**
     * A valid machine to transition this codespace to.
     */
    machine?: string;
    /**
     * Display name for this codespace
     */
    display_name?: string;
    /**
     * Recently opened folders inside the codespace. It is currently used by the clients to determine the folder path to load the codespace in.
     */
    recent_folders?: string[];
  },
  opts?: FetcherData,
): Promise<Codespace> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * Delete a codespace for the authenticated user
 * Deletes a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#delete-a-codespace-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesDeleteForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Export a codespace for the authenticated user
 * Triggers an export of the specified codespace and returns a URL and ID where the status of the export can be
 * monitored.
 *
 * If changes cannot be pushed to the codespace's repository, they will be pushed to a new or
 * previously-existing fork instead.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to
 * use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#export-a-codespace-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesExportForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<CodespaceExportDetails> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}/exports',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '202': { transforms: { date: [[['ref', $date_CodespaceExportDetails]]] } },
  });
}
/**
 * Get details about a codespace export
 * Gets information about an export of a codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#get-details-about-a-codespace-export}
 * Tags: codespaces
 */
export async function codespacesGetExportDetailsForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
    export_id: string;
  },
  opts?: FetcherData,
): Promise<CodespaceExportDetails> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}/exports/{export_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_CodespaceExportDetails]]] } },
  });
}
/**
 * List machine types for a codespace
 * List the machine types a codespace can transition to use.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/machines#list-machine-types-for-a-codespace}
 * Tags: codespaces
 */
export async function codespacesCodespaceMachinesForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      machines: CodespaceMachine[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}/machines',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a repository from an unpublished codespace
 * Publishes an unpublished codespace, creating a new repository and assigning it to the codespace.
 *
 * The codespace's token
 * is granted write permissions to the repository, allowing the user to push their changes.
 *
 * This will fail for a codespace
 * that is already published, meaning it has an associated repository.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `codespace` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#create-a-repository-from-an-unpublished-codespace}
 * Tags: codespaces
 */
export async function codespacesPublishForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  body: {
    /**
     * A name for the new repository.
     */
    name?: string;
    /**
     * Whether the new repository should be private.
     */
    private?: boolean;
  },
  opts?: FetcherData,
): Promise<CodespaceWithFullRepository> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}/publish',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': {
      transforms: { date: [[['ref', $date_CodespaceWithFullRepository]]] },
    },
  });
}
/**
 * Start a codespace for the authenticated user
 * Starts a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#start-a-codespace-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesStartForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<Codespace | any> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}/start',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * Stop a codespace for the authenticated user
 * Stops a user's codespace.
 *
 * OAuth app tokens and personal access tokens (classic) need the `codespace` scope to use this
 * endpoint.
 * Learn more at {@link https://docs.github.com/rest/codespaces/codespaces#stop-a-codespace-for-the-authenticated-user}
 * Tags: codespaces
 */
export async function codespacesStopForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    codespace_name: string;
  },
  opts?: FetcherData,
): Promise<Codespace> {
  const req = await ctx.createRequest({
    path: '/user/codespaces/{codespace_name}/stop',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Codespace]]] } },
  });
}
/**
 * Get list of conflicting packages during Docker migration for authenticated-user
 * Lists all packages that are owned by the authenticated user within the user's namespace, and that encountered a conflict
 * during a Docker migration.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` scope to use
 * this endpoint.
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-authenticated-user}
 * Tags: packages
 */
export async function packagesListDockerMigrationConflictingPackagesForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<Package[]> {
  const req = await ctx.createRequest({
    path: '/user/docker/conflicts',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Package]]] } },
  });
}
/**
 * Set primary email visibility for the authenticated user
 * Sets the visibility for your primary email addresses.
 * Learn more at {@link https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user}
 * Tags: users
 */
export async function usersSetPrimaryEmailVisibilityForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * Denotes whether an email is publicly visible.
     */
    visibility: 'public' | 'private';
  },
  opts?: FetcherData,
): Promise<Email[] | any> {
  const req = await ctx.createRequest({
    path: '/user/email/visibility',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List email addresses for the authenticated user
 * Lists all of your email addresses, and specifies which one is visible
 * to the public.
 *
 * OAuth app tokens and personal
 * access tokens (classic) need the `user:email` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/emails#list-email-addresses-for-the-authenticated-user}
 * Tags: users
 */
export async function usersListEmailsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Email[] | any> {
  const req = await ctx.createRequest({
    path: '/user/emails',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add an email address for the authenticated user
 * OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/emails#add-an-email-address-for-the-authenticated-user}
 * Tags: users
 */
export async function usersAddEmailForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body:
    | {
        /**
         * Adds one or more email addresses to your GitHub account. Must contain at least one email address. **Note:** Alternatively, you can pass a single email address or an `array` of emails addresses directly, but we recommend that you pass an object using the `emails` key.
         * @example []
         */
        emails: string[];
      }
    | string[]
    | string,
  opts?: FetcherData,
): Promise<Email[] | any> {
  const req = await ctx.createRequest({
    path: '/user/emails',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete an email address for the authenticated user
 * OAuth app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/emails#delete-an-email-address-for-the-authenticated-user}
 * Tags: users
 */
export async function usersDeleteEmailForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body:
    | {
        /**
         * Email addresses associated with the GitHub user account.
         */
        emails: string[];
      }
    | string[]
    | string,
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/emails',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List followers of the authenticated user
 * Lists the people following the authenticated user.
 * Learn more at {@link https://docs.github.com/rest/users/followers#list-followers-of-the-authenticated-user}
 * Tags: users
 */
export async function usersListFollowersForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[] | any> {
  const req = await ctx.createRequest({
    path: '/user/followers',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List the people the authenticated user follows
 * Lists the people who the authenticated user follows.
 * Learn more at {@link https://docs.github.com/rest/users/followers#list-the-people-the-authenticated-user-follows}
 * Tags: users
 */
export async function usersListFollowedByAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[] | any> {
  const req = await ctx.createRequest({
    path: '/user/following',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if a person is followed by the authenticated user
 * Learn more at {@link https://docs.github.com/rest/users/followers#check-if-a-person-is-followed-by-the-authenticated-user}
 * Tags: users
 */
export async function usersCheckPersonIsFollowedByAuthenticated<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/following/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Follow a user
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see
 * "[HTTP verbs](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `user:follow` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/followers#follow-a-user}
 * Tags: users
 */
export async function usersFollow<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/following/{username}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unfollow a user
 * OAuth app tokens and personal access tokens (classic) need the `user:follow` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/followers#unfollow-a-user}
 * Tags: users
 */
export async function usersUnfollow<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/following/{username}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List GPG keys for the authenticated user
 * Lists the current user's GPG keys.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:gpg_key` scope
 * to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/gpg-keys#list-gpg-keys-for-the-authenticated-user}
 * Tags: users
 */
export async function usersListGpgKeysForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<GpgKey[] | any> {
  const req = await ctx.createRequest({
    path: '/user/gpg_keys',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_GpgKey]]] } },
  });
}
/**
 * Create a GPG key for the authenticated user
 * Adds a GPG key to the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens (classic) need
 * the `write:gpg_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/gpg-keys#create-a-gpg-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersCreateGpgKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * A descriptive name for the new key.
     */
    name?: string;
    /**
     * A GPG key in ASCII-armored format.
     */
    armored_public_key: string;
  },
  opts?: FetcherData,
): Promise<GpgKey | any> {
  const req = await ctx.createRequest({
    path: '/user/gpg_keys',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_GpgKey]]] } },
  });
}
/**
 * Get a GPG key for the authenticated user
 * View extended details for a single GPG key.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:gpg_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/gpg-keys#get-a-gpg-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersGetGpgKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gpg_key_id: number;
  },
  opts?: FetcherData,
): Promise<GpgKey | any> {
  const req = await ctx.createRequest({
    path: '/user/gpg_keys/{gpg_key_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_GpgKey]]] } },
  });
}
/**
 * Delete a GPG key for the authenticated user
 * Removes a GPG key from the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `admin:gpg_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/gpg-keys#delete-a-gpg-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersDeleteGpgKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    gpg_key_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/gpg_keys/{gpg_key_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List app installations accessible to the user access token
 * Lists installations of your GitHub App that the authenticated user has explicit permission (`:read`, `:write`, or
 * `:admin`) to access.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where
 * they are a collaborator, and repositories that they can access through an organization membership.
 *
 * You can find the
 * permissions for the installation under the `permissions` key.
 * Learn more at {@link https://docs.github.com/rest/apps/installations#list-app-installations-accessible-to-the-user-access-token}
 * Tags: apps
 */
export async function appsListInstallationsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      installations: Installation[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/user/installations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'installations'], ['loop'], ['ref', $date_Installation]],
        ],
      },
    },
  });
}
/**
 * List repositories accessible to the user access token
 * List repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access for an
 * installation.
 *
 * The authenticated user has explicit permission to access repositories they own, repositories where they
 * are a collaborator, and repositories that they can access through an organization membership.
 *
 * The access the user has
 * to each repository is included in the hash under the `permissions` key.
 * Learn more at {@link https://docs.github.com/rest/apps/installations#list-repositories-accessible-to-the-user-access-token}
 * Tags: apps
 */
export async function appsListInstallationReposForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<
  | {
      total_count: number;
      repository_selection?: string;
      repositories: Repository[];
    }
  | any
> {
  const req = await ctx.createRequest({
    path: '/user/installations/{installation_id}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [['access', 'repositories'], ['loop'], ['ref', $date_Repository]],
        ],
      },
    },
  });
}
/**
 * Add a repository to an app installation
 * Add a single repository to an installation. The authenticated user must have admin access to the repository.
 * Learn more at {@link https://docs.github.com/rest/apps/installations#add-a-repository-to-an-app-installation}
 * Tags: apps
 */
export async function appsAddRepoToInstallationForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/installations/{installation_id}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Remove a repository from an app installation
 * Remove a single repository from an installation. The authenticated user must have admin access to the repository. The
 * installation must have the `repository_selection` of `selected`.
 * Learn more at {@link https://docs.github.com/rest/apps/installations#remove-a-repository-from-an-app-installation}
 * Tags: apps
 */
export async function appsRemoveRepoFromInstallationForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    installation_id: number;
    repository_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/installations/{installation_id}/repositories/{repository_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get interaction restrictions for your public repositories
 * Shows which type of GitHub user can interact with your public repositories and when the restriction expires.
 * Learn more at {@link https://docs.github.com/rest/interactions/user#get-interaction-restrictions-for-your-public-repositories}
 * Tags: interactions
 */
export async function interactionsGetRestrictionsForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<(InteractionLimitResponse | any) | any> {
  const req = await ctx.createRequest({
    path: '/user/interaction-limits',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['select', [[['ref', $date_InteractionLimitResponse]]]]]],
      },
    },
  });
}
/**
 * Set interaction restrictions for your public repositories
 * Temporarily restricts which type of GitHub user can interact with your public repositories. Setting the interaction
 * limit at the user level will overwrite any interaction limits that are set for individual repositories owned by the
 * user.
 * Learn more at {@link https://docs.github.com/rest/interactions/user#set-interaction-restrictions-for-your-public-repositories}
 * Tags: interactions
 */
export async function interactionsSetRestrictionsForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: InteractionLimit,
  opts?: FetcherData,
): Promise<InteractionLimitResponse> {
  const req = await ctx.createRequest({
    path: '/user/interaction-limits',
    params,
    method: r.HttpMethod.PUT,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['ref', $date_InteractionLimitResponse]]] },
    },
  });
}
/**
 * Remove interaction restrictions from your public repositories
 * Removes any interaction restrictions from your public repositories.
 * Learn more at {@link https://docs.github.com/rest/interactions/user#remove-interaction-restrictions-from-your-public-repositories}
 * Tags: interactions
 */
export async function interactionsRemoveRestrictionsForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/interaction-limits',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List user account issues assigned to the authenticated user
 * List issues across owned and member repositories assigned to the authenticated user.
 *
 * **Note**: GitHub's REST API
 * considers every pull request an issue, but not every issue is a pull request. For this
 * reason, "Issues" endpoints may
 * return both issues and pull requests in the response. You can identify pull requests by
 * the `pull_request` key. Be aware
 * that the `id` of a pull request returned from "Issues" endpoints will be an _issue id_. To find out the pull
 * request id,
 * use the "[List pull requests](https://docs.github.com/rest/pulls/pulls#list-pull-requests)" endpoint.
 *
 * This endpoint
 * supports the following custom media types. For more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.raw+json`**: Returns the raw markdown body. Response will include `body`. This is the default
 * if you do not pass any specific media type.
 * - **`application/vnd.github.text+json`**: Returns a text only representation
 * of the markdown body. Response will include `body_text`.
 * - **`application/vnd.github.html+json`**: Returns HTML rendered
 * from the body's markdown. Response will include `body_html`.
 * - **`application/vnd.github.full+json`**: Returns raw,
 * text, and HTML representations. Response will include `body`, `body_text`, and `body_html`.
 * Learn more at {@link https://docs.github.com/rest/issues/issues#list-user-account-issues-assigned-to-the-authenticated-user}
 * Tags: issues
 */
export async function issuesListForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    filter?:
      | 'assigned'
      | 'created'
      | 'mentioned'
      | 'subscribed'
      | 'repos'
      | 'all';
    state?: 'open' | 'closed' | 'all';
    labels?: string;
    sort?: 'created' | 'updated' | 'comments';
    direction?: 'asc' | 'desc';
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Issue[] | any> {
  const req = await ctx.createRequest({
    path: '/user/issues',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'filter',
      'state',
      'labels',
      'sort',
      'direction',
      'since',
      'per_page',
      'page',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Issue]]] } },
  });
}
/**
 * List public SSH keys for the authenticated user
 * Lists the public SSH keys for the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:public_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/keys#list-public-ssh-keys-for-the-authenticated-user}
 * Tags: users
 */
export async function usersListPublicSshKeysForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Key[] | any> {
  const req = await ctx.createRequest({
    path: '/user/keys',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Key]]] } },
  });
}
/**
 * Create a public SSH key for the authenticated user
 * Adds a public SSH key to the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens (classic)
 * need the `write:gpg_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/keys#create-a-public-ssh-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersCreatePublicSshKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * A descriptive name for the new key.
     * @example "Personal MacBook Air"
     */
    title?: string;
    /**
     * The public SSH key to add to your GitHub account.
     */
    key: string;
  },
  opts?: FetcherData,
): Promise<Key | any> {
  const req = await ctx.createRequest({
    path: '/user/keys',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Key]]] } },
  });
}
/**
 * Get a public SSH key for the authenticated user
 * View extended details for a single public SSH key.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:public_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/keys#get-a-public-ssh-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersGetPublicSshKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    key_id: number;
  },
  opts?: FetcherData,
): Promise<Key | any> {
  const req = await ctx.createRequest({
    path: '/user/keys/{key_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Key]]] } },
  });
}
/**
 * Delete a public SSH key for the authenticated user
 * Removes a public SSH key from the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:public_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/keys#delete-a-public-ssh-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersDeletePublicSshKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    key_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/keys/{key_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List subscriptions for the authenticated user
 * Lists the active subscriptions for the authenticated user.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#list-subscriptions-for-the-authenticated-user}
 * Tags: apps
 */
export async function appsListSubscriptionsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<UserMarketplacePurchase[] | any> {
  const req = await ctx.createRequest({
    path: '/user/marketplace_purchases',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_UserMarketplacePurchase]]],
      },
    },
  });
}
/**
 * List subscriptions for the authenticated user (stubbed)
 * Lists the active subscriptions for the authenticated user.
 * Learn more at {@link https://docs.github.com/rest/apps/marketplace#list-subscriptions-for-the-authenticated-user-stubbed}
 * Tags: apps
 */
export async function appsListSubscriptionsForAuthenticatedUserStubbed<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<UserMarketplacePurchase[] | any> {
  const req = await ctx.createRequest({
    path: '/user/marketplace_purchases/stubbed',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [[['loop'], ['ref', $date_UserMarketplacePurchase]]],
      },
    },
  });
}
/**
 * List organization memberships for the authenticated user
 * Lists all of the authenticated user's organization memberships.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#list-organization-memberships-for-the-authenticated-user}
 * Tags: orgs
 */
export async function orgsListMembershipsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    state?: 'active' | 'pending';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<OrgMembership[] | any> {
  const req = await ctx.createRequest({
    path: '/user/memberships/orgs',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['state', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get an organization membership for the authenticated user
 * If the authenticated user is an active or pending member of the organization, this endpoint will return the user's
 * membership. If the authenticated user is not affiliated with the organization, a `404` is returned. This endpoint will
 * return a `403` if the request is made by a GitHub App that is blocked by the organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#get-an-organization-membership-for-the-authenticated-user}
 * Tags: orgs
 */
export async function orgsGetMembershipForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  opts?: FetcherData,
): Promise<OrgMembership> {
  const req = await ctx.createRequest({
    path: '/user/memberships/orgs/{org}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Update an organization membership for the authenticated user
 * Converts the authenticated user to an active member of the organization, if that user has a pending invitation from the
 * organization.
 * Learn more at {@link https://docs.github.com/rest/orgs/members#update-an-organization-membership-for-the-authenticated-user}
 * Tags: orgs
 */
export async function orgsUpdateMembershipForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    org: string;
  },
  body: {
    /**
     * The state that the membership should be in. Only `"active"` will be accepted.
     */
    state: 'active';
  },
  opts?: FetcherData,
): Promise<OrgMembership> {
  const req = await ctx.createRequest({
    path: '/user/memberships/orgs/{org}',
    params,
    method: r.HttpMethod.PATCH,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List user migrations
 * Lists all migrations a user has started.
 * Learn more at {@link https://docs.github.com/rest/migrations/users#list-user-migrations}
 * Tags: migrations
 */
export async function migrationsListForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Migration[] | any> {
  const req = await ctx.createRequest({
    path: '/user/migrations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Migration]]] } },
  });
}
/**
 * Start a user migration
 * Initiates the generation of a user migration archive.
 * Learn more at {@link https://docs.github.com/rest/migrations/users#start-a-user-migration}
 * Tags: migrations
 */
export async function migrationsStartForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * Lock the repositories being migrated at the start of the migration
     * @example true
     */
    lock_repositories?: boolean;
    /**
     * Indicates whether metadata should be excluded and only git source should be included for the migration.
     * @example true
     */
    exclude_metadata?: boolean;
    /**
     * Indicates whether the repository git data should be excluded from the migration.
     * @example true
     */
    exclude_git_data?: boolean;
    /**
     * Do not include attachments in the migration
     * @example true
     */
    exclude_attachments?: boolean;
    /**
     * Do not include releases in the migration
     * @example true
     */
    exclude_releases?: boolean;
    /**
     * Indicates whether projects owned by the organization or users should be excluded.
     * @example true
     */
    exclude_owner_projects?: boolean;
    /**
     * Indicates whether this should only include organization metadata (repositories array should be empty and will ignore other flags).
     * @example true
     */
    org_metadata_only?: boolean;
    /**
     * Exclude attributes from the API response to improve performance
     * @example
     * [
     *   "repositories"
     * ]
     */
    exclude?: 'repositories'[];
    repositories: string[];
  },
  opts?: FetcherData,
): Promise<Migration | any> {
  const req = await ctx.createRequest({
    path: '/user/migrations',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Migration]]] } },
  });
}
/**
 * Get a user migration status
 * Fetches a single user migration. The response includes the `state` of the migration, which can be one of the following
 * values:
 *
 * *   `pending` - the migration hasn't started yet.
 * *   `exporting` - the migration is in progress.
 * *
 * `exported` - the migration finished successfully.
 * *   `failed` - the migration failed.
 *
 * Once the migration has been
 * `exported` you can [download the migration
 * archive](https://docs.github.com/rest/migrations/users#download-a-user-migration-archive).
 * Learn more at {@link https://docs.github.com/rest/migrations/users#get-a-user-migration-status}
 * Tags: migrations
 */
export async function migrationsGetStatusForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    migration_id: number;
    exclude?: string[];
  },
  opts?: FetcherData,
): Promise<Migration | any> {
  const req = await ctx.createRequest({
    path: '/user/migrations/{migration_id}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['exclude'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Migration]]] } },
  });
}
/**
 * Download a user migration archive
 * Fetches the URL to download the migration archive as a `tar.gz` file. Depending on the resources your repository uses,
 * the migration archive can contain JSON files with data for these objects:
 *
 * *   attachments
 * *   bases
 * *
 * commit\_comments
 * *   issue\_comments
 * *   issue\_events
 * *   issues
 * *   milestones
 * *   organizations
 * *   projects
 * *
 * protected\_branches
 * *   pull\_request\_reviews
 * *   pull\_requests
 * *   releases
 * *   repositories
 * *   review\_comments
 * *
 * schema
 * *   users
 *
 * The archive will also contain an `attachments` directory that includes all attachment files uploaded
 * to GitHub.com and a `repositories` directory that contains the repository's Git data.
 * Learn more at {@link https://docs.github.com/rest/migrations/users#download-a-user-migration-archive}
 * Tags: migrations
 */
export async function migrationsGetArchiveForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    migration_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/migrations/{migration_id}/archive',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete a user migration archive
 * Deletes a previous migration archive. Downloadable migration archives are automatically deleted after seven days.
 * Migration metadata, which is returned in the [List user
 * migrations](https://docs.github.com/rest/migrations/users#list-user-migrations) and [Get a user migration
 * status](https://docs.github.com/rest/migrations/users#get-a-user-migration-status) endpoints, will continue to be
 * available even after an archive is deleted.
 * Learn more at {@link https://docs.github.com/rest/migrations/users#delete-a-user-migration-archive}
 * Tags: migrations
 */
export async function migrationsDeleteArchiveForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    migration_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/migrations/{migration_id}/archive',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unlock a user repository
 * Unlocks a repository. You can lock repositories when you [start a user
 * migration](https://docs.github.com/rest/migrations/users#start-a-user-migration). Once the migration is complete you can
 * unlock each repository to begin using it again or [delete the
 * repository](https://docs.github.com/rest/repos/repos#delete-a-repository) if you no longer need the source data. Returns
 * a status of `404 Not Found` if the repository is not locked.
 * Learn more at {@link https://docs.github.com/rest/migrations/users#unlock-a-user-repository}
 * Tags: migrations
 */
export async function migrationsUnlockRepoForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    migration_id: number;
    repo_name: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/migrations/{migration_id}/repos/{repo_name}/lock',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories for a user migration
 * Lists all the repositories for this user migration.
 * Learn more at {@link https://docs.github.com/rest/migrations/users#list-repositories-for-a-user-migration}
 * Tags: migrations
 */
export async function migrationsListReposForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    migration_id: number;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/user/migrations/{migration_id}/repositories',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * List organizations for the authenticated user
 * List organizations for the authenticated user.
 *
 * For OAuth app tokens and personal access tokens (classic), this endpoint
 * only lists organizations that your authorization allows you to operate on in some way (e.g., you can list teams with
 * `read:org` scope, you can publicize your organization membership with `user` scope, etc.). Therefore, this API requires
 * at least `user` or `read:org` scope for OAuth app tokens and personal access tokens (classic). Requests with
 * insufficient scope will receive a `403 Forbidden` response.
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user}
 * Tags: orgs
 */
export async function orgsListForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<OrganizationSimple[] | any> {
  const req = await ctx.createRequest({
    path: '/user/orgs',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List packages for the authenticated user's namespace
 * Lists packages owned by the authenticated user within the user's namespace.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#list-packages-for-the-authenticated-users-namespace}
 * Tags: packages
 */
export async function packagesListPackagesForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    visibility?: 'public' | 'private' | 'internal';
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<Package[]> {
  const req = await ctx.createRequest({
    path: '/user/packages',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['package_type', 'visibility', 'page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Package]]] } },
  });
}
/**
 * Get a package for the authenticated user
 * Gets a specific package for a package owned by the authenticated user.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-a-package-for-the-authenticated-user}
 * Tags: packages
 */
export async function packagesGetPackageForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
  },
  opts?: FetcherData,
): Promise<Package> {
  const req = await ctx.createRequest({
    path: '/user/packages/{package_type}/{package_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Package]]] } },
  });
}
/**
 * Delete a package for the authenticated user
 * Deletes a package owned by the authenticated user. You cannot delete a public package if any version of the package has
 * more than 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this endpoint. If the
 * `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions, `repo` scope is
 * also required. For the list these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#delete-a-package-for-the-authenticated-user}
 * Tags: packages
 */
export async function packagesDeletePackageForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/packages/{package_type}/{package_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Restore a package for the authenticated user
 * Restores a package owned by the authenticated user.
 *
 * You can restore a deleted package under the following conditions:
 * - The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not
 * reused for a new package. If the same package namespace is not available, you will not be able to restore your package.
 * In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's
 * namespace first.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `write:packages`
 * scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports
 * repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About
 * permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#restore-a-package-for-the-authenticated-user}
 * Tags: packages
 */
export async function packagesRestorePackageForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    token?: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/packages/{package_type}/{package_name}/restore',
    params,
    method: r.HttpMethod.POST,
    queryParams: ['token'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List package versions for a package owned by the authenticated user
 * Lists package versions for a package owned by the authenticated user.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-the-authenticated-user}
 * Tags: packages
 */
export async function packagesGetAllPackageVersionsForPackageOwnedByAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    page?: number;
    per_page?: number;
    state?: 'active' | 'deleted';
  },
  opts?: FetcherData,
): Promise<PackageVersion[]> {
  const req = await ctx.createRequest({
    path: '/user/packages/{package_type}/{package_name}/versions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['page', 'per_page', 'state'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_PackageVersion]]] },
    },
  });
}
/**
 * Get a package version for the authenticated user
 * Gets a specific package version for a package owned by the authenticated user.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-a-package-version-for-the-authenticated-user}
 * Tags: packages
 */
export async function packagesGetPackageVersionForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<PackageVersion> {
  const req = await ctx.createRequest({
    path: '/user/packages/{package_type}/{package_name}/versions/{package_version_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PackageVersion]]] } },
  });
}
/**
 * Delete a package version for the authenticated user
 * Deletes a specific package version for a package owned by the authenticated user.  If the package is public and the
 * package version has more than 5,000 downloads, you cannot delete the package version. In this scenario, contact GitHub
 * support for further assistance.
 *
 * The authenticated user must have admin permissions in the organization to use this
 * endpoint.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes
 * to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped
 * permissions, the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#delete-a-package-version-for-the-authenticated-user}
 * Tags: packages
 */
export async function packagesDeletePackageVersionForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/packages/{package_type}/{package_name}/versions/{package_version_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Restore a package version for the authenticated user
 * Restores a package version owned by the authenticated user.
 *
 * You can restore a deleted package version under the
 * following conditions:
 *   - The package was deleted within the last 30 days.
 *   - The same package namespace and version is
 * still available and not reused for a new package. If the same package namespace is not available, you will not be able
 * to restore your package. In this scenario, to restore the deleted package, you must delete the new package that uses the
 * deleted package's namespace first.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages` and
 * `write:packages` scopes to use this endpoint. If the `package_type` belongs to a GitHub Packages registry that only
 * supports repository-scoped permissions, the `repo` scope is also required. For the list of these registries, see "[About
 * permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#restore-a-package-version-for-the-authenticated-user}
 * Tags: packages
 */
export async function packagesRestorePackageVersionForAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/user/packages/{package_type}/{package_name}/versions/{package_version_id}/restore',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Create a user project
 * Creates a user project board. Returns a `410 Gone` status if the user does not have existing classic projects. If you do
 * not have sufficient privileges to perform this action, a `401 Unauthorized` or `410 Gone` status is returned.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#create-a-user-project}
 * Tags: projects
 */
export async function projectsCreateForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * Name of the project
     * @example "Week One Sprint"
     */
    name: string;
    /**
     * Body of the project
     * @example "This project represents the sprint of the first week in January"
     */
    body?: string | null;
  },
  opts?: FetcherData,
): Promise<Project | any> {
  const req = await ctx.createRequest({
    path: '/user/projects',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_Project]]] } },
  });
}
/**
 * List public email addresses for the authenticated user
 * Lists your publicly visible email address, which you can set with the
 * [Set primary email visibility for the
 * authenticated
 * user](https://docs.github.com/rest/users/emails#set-primary-email-visibility-for-the-authenticated-user)
 * endpoint.
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `user:email` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/emails#list-public-email-addresses-for-the-authenticated-user}
 * Tags: users
 */
export async function usersListPublicEmailsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Email[] | any> {
  const req = await ctx.createRequest({
    path: '/user/public_emails',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories for the authenticated user
 * Lists repositories that the authenticated user has explicit permission (`:read`, `:write`, or `:admin`) to access.
 *
 * The
 * authenticated user has explicit permission to access repositories they own, repositories where they are a collaborator,
 * and repositories that they can access through an organization membership.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-repositories-for-the-authenticated-user}
 * Tags: repos
 */
export async function reposListForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    visibility?: 'all' | 'public' | 'private';
    affiliation?: string;
    type?: 'all' | 'owner' | 'public' | 'private' | 'member';
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
    since?: Date;
    before?: Date;
  },
  opts?: FetcherData,
): Promise<Repository[] | any> {
  const req = await ctx.createRequest({
    path: '/user/repos',
    params,
    method: r.HttpMethod.GET,
    queryParams: [
      'visibility',
      'affiliation',
      'type',
      'sort',
      'direction',
      'per_page',
      'page',
      'since',
      'before',
    ],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Repository]]] } },
  });
}
/**
 * Create a repository for the authenticated user
 * Creates a new repository for the authenticated user.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `public_repo` or `repo` scope to create a public repository, and `repo` scope to create a private repository.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#create-a-repository-for-the-authenticated-user}
 * Tags: repos
 */
export async function reposCreateForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * The name of the repository.
     * @example "Team Environment"
     */
    name: string;
    /**
     * A short description of the repository.
     */
    description?: string;
    /**
     * A URL with more information about the repository.
     */
    homepage?: string;
    /**
     * Whether the repository is private.
     */
    private?: boolean;
    /**
     * Whether issues are enabled.
     * @example true
     * @defaultValue true
     */
    has_issues?: boolean;
    /**
     * Whether projects are enabled.
     * @example true
     * @defaultValue true
     */
    has_projects?: boolean;
    /**
     * Whether the wiki is enabled.
     * @example true
     * @defaultValue true
     */
    has_wiki?: boolean;
    /**
     * Whether discussions are enabled.
     * @example true
     */
    has_discussions?: boolean;
    /**
     * The id of the team that will be granted access to this repository. This is only valid when creating a repository in an organization.
     */
    team_id?: number;
    /**
     * Whether the repository is initialized with a minimal README.
     */
    auto_init?: boolean;
    /**
     * The desired language or platform to apply to the .gitignore.
     * @example "Haskell"
     */
    gitignore_template?: string;
    /**
     * The license keyword of the open source license for this repository.
     * @example "mit"
     */
    license_template?: string;
    /**
     * Whether to allow squash merges for pull requests.
     * @example true
     * @defaultValue true
     */
    allow_squash_merge?: boolean;
    /**
     * Whether to allow merge commits for pull requests.
     * @example true
     * @defaultValue true
     */
    allow_merge_commit?: boolean;
    /**
     * Whether to allow rebase merges for pull requests.
     * @example true
     * @defaultValue true
     */
    allow_rebase_merge?: boolean;
    /**
     * Whether to allow Auto-merge to be used on pull requests.
     */
    allow_auto_merge?: boolean;
    /**
     * Whether to delete head branches when pull requests are merged
     */
    delete_branch_on_merge?: boolean;
    /**
     * The default value for a squash merge commit title:
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `COMMIT_OR_PR_TITLE` - default to the commit's title (if only one commit) or the pull request's title (when more than one commit).
     */
    squash_merge_commit_title?: 'PR_TITLE' | 'COMMIT_OR_PR_TITLE';
    /**
     * The default value for a squash merge commit message:
     *
     * - `PR_BODY` - default to the pull request's body.
     * - `COMMIT_MESSAGES` - default to the branch's commit messages.
     * - `BLANK` - default to a blank commit message.
     */
    squash_merge_commit_message?: 'PR_BODY' | 'COMMIT_MESSAGES' | 'BLANK';
    /**
     * The default value for a merge commit title.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `MERGE_MESSAGE` - default to the classic title for a merge message (e.g., Merge pull request #123 from branch-name).
     */
    merge_commit_title?: 'PR_TITLE' | 'MERGE_MESSAGE';
    /**
     * The default value for a merge commit message.
     *
     * - `PR_TITLE` - default to the pull request's title.
     * - `PR_BODY` - default to the pull request's body.
     * - `BLANK` - default to a blank commit message.
     */
    merge_commit_message?: 'PR_BODY' | 'PR_TITLE' | 'BLANK';
    /**
     * Whether downloads are enabled.
     * @example true
     * @defaultValue true
     */
    has_downloads?: boolean;
    /**
     * Whether this repository acts as a template that can be used to generate new repositories.
     * @example true
     */
    is_template?: boolean;
  },
  opts?: FetcherData,
): Promise<FullRepository | any> {
  const req = await ctx.createRequest({
    path: '/user/repos',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_FullRepository]]] } },
  });
}
/**
 * List repository invitations for the authenticated user
 * When authenticating as a user, this endpoint will list all currently open repository invitations for that user.
 * Learn more at {@link https://docs.github.com/rest/collaborators/invitations#list-repository-invitations-for-the-authenticated-user}
 * Tags: repos
 */
export async function reposListInvitationsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<RepositoryInvitation[] | any> {
  const req = await ctx.createRequest({
    path: '/user/repository_invitations',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_RepositoryInvitation]]] },
    },
  });
}
/**
 * Accept a repository invitation
 * Learn more at {@link https://docs.github.com/rest/collaborators/invitations#accept-a-repository-invitation}
 * Tags: repos
 */
export async function reposAcceptInvitationForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invitation_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/repository_invitations/{invitation_id}',
    params,
    method: r.HttpMethod.PATCH,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Decline a repository invitation
 * Learn more at {@link https://docs.github.com/rest/collaborators/invitations#decline-a-repository-invitation}
 * Tags: repos
 */
export async function reposDeclineInvitationForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    invitation_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/repository_invitations/{invitation_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List social accounts for the authenticated user
 * Lists all of your social accounts.
 * Learn more at {@link https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-the-authenticated-user}
 * Tags: users
 */
export async function usersListSocialAccountsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SocialAccount[] | any> {
  const req = await ctx.createRequest({
    path: '/user/social_accounts',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Add social accounts for the authenticated user
 * Add one or more social accounts to the authenticated user's profile.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `user` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/social-accounts#add-social-accounts-for-the-authenticated-user}
 * Tags: users
 */
export async function usersAddSocialAccountForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * Full URLs for the social media profiles to add.
     * @example []
     */
    account_urls: string[];
  },
  opts?: FetcherData,
): Promise<SocialAccount[] | any> {
  const req = await ctx.createRequest({
    path: '/user/social_accounts',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Delete social accounts for the authenticated user
 * Deletes one or more social accounts from the authenticated user's profile.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `user` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/social-accounts#delete-social-accounts-for-the-authenticated-user}
 * Tags: users
 */
export async function usersDeleteSocialAccountForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * Full URLs for the social media profiles to delete.
     * @example []
     */
    account_urls: string[];
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/social_accounts',
    params,
    method: r.HttpMethod.DELETE,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List SSH signing keys for the authenticated user
 * Lists the SSH signing keys for the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:ssh_signing_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-the-authenticated-user}
 * Tags: users
 */
export async function usersListSshSigningKeysForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SshSigningKey[] | any> {
  const req = await ctx.createRequest({
    path: '/user/ssh_signing_keys',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_SshSigningKey]]] } },
  });
}
/**
 * Create a SSH signing key for the authenticated user
 * Creates an SSH signing key for the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `write:ssh_signing_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/ssh-signing-keys#create-a-ssh-signing-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersCreateSshSigningKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  body: {
    /**
     * A descriptive name for the new key.
     * @example "Personal MacBook Air"
     */
    title?: string;
    /**
     * The public SSH key to add to your GitHub account. For more information, see "[Checking for existing SSH keys](https://docs.github.com/authentication/connecting-to-github-with-ssh/checking-for-existing-ssh-keys)."
     */
    key: string;
  },
  opts?: FetcherData,
): Promise<SshSigningKey | any> {
  const req = await ctx.createRequest({
    path: '/user/ssh_signing_keys',
    params,
    method: r.HttpMethod.POST,
    body,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '201': { transforms: { date: [[['ref', $date_SshSigningKey]]] } },
  });
}
/**
 * Get an SSH signing key for the authenticated user
 * Gets extended details for an SSH signing key.
 *
 * OAuth app tokens and personal access tokens (classic) need the
 * `read:ssh_signing_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/ssh-signing-keys#get-an-ssh-signing-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersGetSshSigningKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ssh_signing_key_id: number;
  },
  opts?: FetcherData,
): Promise<SshSigningKey | any> {
  const req = await ctx.createRequest({
    path: '/user/ssh_signing_keys/{ssh_signing_key_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_SshSigningKey]]] } },
  });
}
/**
 * Delete an SSH signing key for the authenticated user
 * Deletes an SSH signing key from the authenticated user's GitHub account.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `admin:ssh_signing_key` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/ssh-signing-keys#delete-an-ssh-signing-key-for-the-authenticated-user}
 * Tags: users
 */
export async function usersDeleteSshSigningKeyForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    ssh_signing_key_id: number;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/ssh_signing_keys/{ssh_signing_key_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories starred by the authenticated user
 * Lists repositories the authenticated user has starred.
 *
 * This endpoint supports the following custom media types. For
 * more information, see "[Media
 * types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
 * Learn more at {@link https://docs.github.com/rest/activity/starring#list-repositories-starred-by-the-authenticated-user}
 * Tags: activity
 */
export async function activityListReposStarredByAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Repository[] | any> {
  const req = await ctx.createRequest({
    path: '/user/starred',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Repository]]] } },
  });
}
/**
 * Check if a repository is starred by the authenticated user
 * Whether the authenticated user has starred the repository.
 * Learn more at {@link https://docs.github.com/rest/activity/starring#check-if-a-repository-is-starred-by-the-authenticated-user}
 * Tags: activity
 */
export async function activityCheckRepoIsStarredByAuthenticatedUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/starred/{owner}/{repo}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Star a repository for the authenticated user
 * Note that you'll need to set `Content-Length` to zero when calling out to this endpoint. For more information, see
 * "[HTTP method](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#http-method)."
 * Learn more at {@link https://docs.github.com/rest/activity/starring#star-a-repository-for-the-authenticated-user}
 * Tags: activity
 */
export async function activityStarRepoForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/starred/{owner}/{repo}',
    params,
    method: r.HttpMethod.PUT,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Unstar a repository for the authenticated user
 * Unstar a repository that the authenticated user has previously starred.
 * Learn more at {@link https://docs.github.com/rest/activity/starring#unstar-a-repository-for-the-authenticated-user}
 * Tags: activity
 */
export async function activityUnstarRepoForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    owner: string;
    repo: string;
  },
  opts?: FetcherData,
): Promise<any | any> {
  const req = await ctx.createRequest({
    path: '/user/starred/{owner}/{repo}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List repositories watched by the authenticated user
 * Lists repositories the authenticated user is watching.
 * Learn more at {@link https://docs.github.com/rest/activity/watching#list-repositories-watched-by-the-authenticated-user}
 * Tags: activity
 */
export async function activityListWatchedReposForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[] | any> {
  const req = await ctx.createRequest({
    path: '/user/subscriptions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * List teams for the authenticated user
 * List all of the teams across all of the organizations to which the authenticated
 * user belongs.
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `user`, `repo`, or `read:org` scope to use this endpoint.
 *
 * When using a
 * fine-grained personal access token, the resource owner of the token must be a single organization, and the response will
 * only include the teams from that organization.
 * Learn more at {@link https://docs.github.com/rest/teams/teams#list-teams-for-the-authenticated-user}
 * Tags: teams
 */
export async function teamsListForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<TeamFull[] | any> {
  const req = await ctx.createRequest({
    path: '/user/teams',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_TeamFull]]] } },
  });
}
/**
 * List users
 * Lists all users, in the order that they signed up on GitHub. This list includes personal user accounts and organization
 * accounts.
 *
 * Note: Pagination is powered exclusively by the `since` parameter. Use the [Link
 * header](https://docs.github.com/rest/guides/using-pagination-in-the-rest-api#using-link-headers) to get the URL for the
 * next page of users.
 * Learn more at {@link https://docs.github.com/rest/users/users#list-users}
 * Tags: users
 */
export async function usersList<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    since?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[] | any> {
  const req = await ctx.createRequest({
    path: '/users',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a user
 * Provides publicly available information about someone with a GitHub account.
 *
 * The `email` key in the following response
 * is the publicly visible email address from your GitHub [profile page](https://github.com/settings/profile). When setting
 * up your profile, you can select a primary email address to be “public” which provides an email entry for this endpoint.
 * If you do not set a public email address for `email`, then it will have a value of `null`. You only see publicly visible
 * email addresses when authenticated with GitHub. For more information, see
 * [Authentication](https://docs.github.com/rest/guides/getting-started-with-the-rest-api#authentication).
 *
 * The Emails API
 * enables you to list all of your email addresses, and toggle a primary email to be visible publicly. For more
 * information, see "[Emails API](https://docs.github.com/rest/users/emails)".
 * Learn more at {@link https://docs.github.com/rest/users/users#get-a-user}
 * Tags: users
 */
export async function usersGetByUsername<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<PrivateUser | PublicUser> {
  const req = await ctx.createRequest({
    path: '/users/{username}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            [
              'select',
              [[['ref', $date_PrivateUser]], [['ref', $date_PublicUser]]],
            ],
          ],
        ],
      },
    },
  });
}
/**
 * Get list of conflicting packages during Docker migration for user
 * Lists all packages that are in a specific user's namespace, that the requesting user has access to, and that encountered
 * a conflict during Docker migration.
 *
 * OAuth app tokens and personal access tokens (classic) need the `read:packages`
 * scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-list-of-conflicting-packages-during-docker-migration-for-user}
 * Tags: packages
 */
export async function packagesListDockerMigrationConflictingPackagesForUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<Package[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/docker/conflicts',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Package]]] } },
  });
}
/**
 * List events for the authenticated user
 * If you are authenticated as the given user, you will see your private events. Otherwise, you'll only see public events.
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-events-for-the-authenticated-user}
 * Tags: activity
 */
export async function activityListEventsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List organization events for the authenticated user
 * This is the user's organization dashboard. You must be authenticated as the user to view this.
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-organization-events-for-the-authenticated-user}
 * Tags: activity
 */
export async function activityListOrgEventsForAuthenticatedUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    org: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/events/orgs/{org}',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List public events for a user
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-public-events-for-a-user}
 * Tags: activity
 */
export async function activityListPublicEventsForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/events/public',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List followers of a user
 * Lists the people following the specified user.
 * Learn more at {@link https://docs.github.com/rest/users/followers#list-followers-of-a-user}
 * Tags: users
 */
export async function usersListFollowersForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/followers',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List the people a user follows
 * Lists the people who the specified user follows.
 * Learn more at {@link https://docs.github.com/rest/users/followers#list-the-people-a-user-follows}
 * Tags: users
 */
export async function usersListFollowingForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SimpleUser[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/following',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Check if a user follows another user
 * Learn more at {@link https://docs.github.com/rest/users/followers#check-if-a-user-follows-another-user}
 * Tags: users
 */
export async function usersCheckFollowingForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    target_user: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/users/{username}/following/{target_user}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List gists for a user
 * Lists public gists for the specified user:
 * Learn more at {@link https://docs.github.com/rest/gists/gists#list-gists-for-a-user}
 * Tags: gists
 */
export async function gistsListForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    since?: Date;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<BaseGist[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/gists',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['since', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_BaseGist]]] } },
  });
}
/**
 * List GPG keys for a user
 * Lists the GPG keys for a user. This information is accessible by anyone.
 * Learn more at {@link https://docs.github.com/rest/users/gpg-keys#list-gpg-keys-for-a-user}
 * Tags: users
 */
export async function usersListGpgKeysForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<GpgKey[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/gpg_keys',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_GpgKey]]] } },
  });
}
/**
 * Get contextual information for a user
 * Provides hovercard information. You can find out more about someone in relation to their pull requests, issues,
 * repositories, and organizations.
 *
 * The `subject_type` and `subject_id` parameters provide context for the person's
 * hovercard, which returns more information than without the parameters. For example, if you wanted to find out more about
 * `octocat` who owns the `Spoon-Knife` repository via cURL, it would look like this:
 *
 * ```shell
 *  curl -u username:token
 * https://api.github.com/users/octocat/hovercard?subject_type=repository&subject_id=1300192
 * ```
 *
 * OAuth app tokens and
 * personal access tokens (classic) need the `repo` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/users/users#get-contextual-information-for-a-user}
 * Tags: users
 */
export async function usersGetContextForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    subject_type?: 'organization' | 'repository' | 'issue' | 'pull_request';
    subject_id?: string;
  },
  opts?: FetcherData,
): Promise<Hovercard> {
  const req = await ctx.createRequest({
    path: '/users/{username}/hovercard',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['subject_type', 'subject_id'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get a user installation for the authenticated app
 * Enables an authenticated GitHub App to find the user’s installation information.
 *
 * You must use a
 * [JWT](https://docs.github.com/apps/building-github-apps/authenticating-with-github-apps/#authenticating-as-a-github-app)
 * to access this endpoint.
 * Learn more at {@link https://docs.github.com/rest/apps/apps#get-a-user-installation-for-the-authenticated-app}
 * Tags: apps
 */
export async function appsGetUserInstallation<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<Installation> {
  const req = await ctx.createRequest({
    path: '/users/{username}/installation',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Installation]]] } },
  });
}
/**
 * List public keys for a user
 * Lists the _verified_ public SSH keys for a user. This is accessible by anyone.
 * Learn more at {@link https://docs.github.com/rest/users/keys#list-public-keys-for-a-user}
 * Tags: users
 */
export async function usersListPublicKeysForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<KeySimple[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/keys',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List organizations for a user
 * List [public organization
 * memberships](https://docs.github.com/articles/publicizing-or-concealing-organization-membership) for the specified
 * user.
 *
 * This method only lists _public_ memberships, regardless of authentication. If you need to fetch all of the
 * organization memberships (public and private) for the authenticated user, use the [List organizations for the
 * authenticated user](https://docs.github.com/rest/orgs/orgs#list-organizations-for-the-authenticated-user) API instead.
 * Learn more at {@link https://docs.github.com/rest/orgs/orgs#list-organizations-for-a-user}
 * Tags: orgs
 */
export async function orgsListForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<OrganizationSimple[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/orgs',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List packages for a user
 * Lists all packages in a user's namespace for which the requesting user has access.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#list-packages-for-a-user}
 * Tags: packages
 */
export async function packagesListPackagesForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    visibility?: 'public' | 'private' | 'internal';
    username: string;
    page?: number;
    per_page?: number;
  },
  opts?: FetcherData,
): Promise<Package[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['package_type', 'visibility', 'page', 'per_page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Package]]] } },
  });
}
/**
 * Get a package for a user
 * Gets a specific package metadata for a public package owned by a user.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-a-package-for-a-user}
 * Tags: packages
 */
export async function packagesGetPackageForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<Package> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages/{package_type}/{package_name}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_Package]]] } },
  });
}
/**
 * Delete a package for a user
 * Deletes an entire package for a user. You cannot delete a public package if any version of the package has more than
 * 5,000 downloads. In this scenario, contact GitHub support for further assistance.
 *
 * If the `package_type` belongs to a
 * GitHub Packages registry that supports granular permissions, the authenticated user must have admin permissions to the
 * package. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#delete-a-package-for-a-user}
 * Tags: packages
 */
export async function packagesDeletePackageForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages/{package_type}/{package_name}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Restore a package for a user
 * Restores an entire package for a user.
 *
 * You can restore a deleted package under the following conditions:
 *   - The
 * package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not
 * reused for a new package. If the same package namespace is not available, you will not be able to restore your package.
 * In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's
 * namespace first.
 *
 * If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the
 * authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions
 * for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#restore-a-package-for-a-user}
 * Tags: packages
 */
export async function packagesRestorePackageForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
    token?: string;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages/{package_type}/{package_name}/restore',
    params,
    method: r.HttpMethod.POST,
    queryParams: ['token'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List package versions for a package owned by a user
 * Lists package versions for a public package owned by a specified user.
 *
 * OAuth app tokens and personal access tokens
 * (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#list-package-versions-for-a-package-owned-by-a-user}
 * Tags: packages
 */
export async function packagesGetAllPackageVersionsForPackageOwnedByUser<
  FetcherData,
>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
  },
  opts?: FetcherData,
): Promise<PackageVersion[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages/{package_type}/{package_name}/versions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_PackageVersion]]] },
    },
  });
}
/**
 * Get a package version for a user
 * Gets a specific package version for a public package owned by a specified user.
 *
 * OAuth app tokens and personal access
 * tokens (classic) need the `read:packages` scope to use this endpoint. If the `package_type` belongs to a GitHub Packages
 * registry that only supports repository-scoped permissions, the `repo` scope is also required. For the list of these
 * registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#get-a-package-version-for-a-user}
 * Tags: packages
 */
export async function packagesGetPackageVersionForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    package_version_id: number;
    username: string;
  },
  opts?: FetcherData,
): Promise<PackageVersion> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['ref', $date_PackageVersion]]] } },
  });
}
/**
 * Delete package version for a user
 * Deletes a specific package version for a user. If the package is public and the package version has more than 5,000
 * downloads, you cannot delete the package version. In this scenario, contact GitHub support for further assistance.
 *
 * If
 * the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the authenticated user must
 * have admin permissions to the package. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `delete:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#delete-package-version-for-a-user}
 * Tags: packages
 */
export async function packagesDeletePackageVersionForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}',
    params,
    method: r.HttpMethod.DELETE,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Restore package version for a user
 * Restores a specific package version for a user.
 *
 * You can restore a deleted package under the following conditions:
 *   -
 * The package was deleted within the last 30 days.
 *   - The same package namespace and version is still available and not
 * reused for a new package. If the same package namespace is not available, you will not be able to restore your package.
 * In this scenario, to restore the deleted package, you must delete the new package that uses the deleted package's
 * namespace first.
 *
 * If the `package_type` belongs to a GitHub Packages registry that supports granular permissions, the
 * authenticated user must have admin permissions to the package. For the list of these registries, see "[About permissions
 * for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#granular-permissions-for-userorganization-scoped-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `read:packages` and `write:packages` scopes to use this
 * endpoint. If the `package_type` belongs to a GitHub Packages registry that only supports repository-scoped permissions,
 * the `repo` scope is also required. For the list of these registries, see "[About permissions for GitHub
 * Packages](https://docs.github.com/packages/learn-github-packages/about-permissions-for-github-packages#permissions-for-repository-scoped-packages)."
 * Learn more at {@link https://docs.github.com/rest/packages/packages#restore-package-version-for-a-user}
 * Tags: packages
 */
export async function packagesRestorePackageVersionForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    package_type:
      | 'npm'
      | 'maven'
      | 'rubygems'
      | 'docker'
      | 'nuget'
      | 'container';
    package_name: string;
    username: string;
    package_version_id: number;
  },
  opts?: FetcherData,
): Promise<any> {
  const req = await ctx.createRequest({
    path: '/users/{username}/packages/{package_type}/{package_name}/versions/{package_version_id}/restore',
    params,
    method: r.HttpMethod.POST,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List user projects
 * Lists projects for a user.
 * Learn more at {@link https://docs.github.com/rest/projects/projects#list-user-projects}
 * Tags: projects
 */
export async function projectsListForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    state?: 'open' | 'closed' | 'all';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Project[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/projects',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['state', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Project]]] } },
  });
}
/**
 * List events received by the authenticated user
 * These are events that you've received by watching repositories and following users. If you are authenticated as the
 * given user, you will see private events. Otherwise, you'll only see public events.
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-events-received-by-the-authenticated-user}
 * Tags: activity
 */
export async function activityListReceivedEventsForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/received_events',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List public events received by a user
 * Learn more at {@link https://docs.github.com/rest/activity/events#list-public-events-received-by-a-user}
 * Tags: activity
 */
export async function activityListReceivedPublicEventsForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<Event[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/received_events/public',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_Event]]] } },
  });
}
/**
 * List repositories for a user
 * Lists public repositories for the specified user.
 * Learn more at {@link https://docs.github.com/rest/repos/repos#list-repositories-for-a-user}
 * Tags: repos
 */
export async function reposListForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    type?: 'all' | 'owner' | 'member';
    sort?: 'created' | 'updated' | 'pushed' | 'full_name';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/repos',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['type', 'sort', 'direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * Get GitHub Actions billing for a user
 * Gets the summary of the free and paid GitHub Actions minutes used.
 *
 * Paid minutes only apply to workflows in private
 * repositories that use GitHub-hosted runners. Minutes used is listed for each GitHub-hosted runner operating system. Any
 * job re-runs are also included in the usage. The usage returned includes any minute multipliers for macOS and Windows
 * runners, and is rounded up to the nearest whole minute. For more information, see "[Managing billing for GitHub
 * Actions](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-actions)".
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/billing/billing#get-github-actions-billing-for-a-user}
 * Tags: billing
 */
export async function billingGetGithubActionsBillingUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<ActionsBillingUsage> {
  const req = await ctx.createRequest({
    path: '/users/{username}/settings/billing/actions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get GitHub Packages billing for a user
 * Gets the free and paid storage used for GitHub Packages in gigabytes.
 *
 * Paid minutes only apply to packages stored for
 * private repositories. For more information, see "[Managing billing for GitHub
 * Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/billing/billing#get-github-packages-billing-for-a-user}
 * Tags: billing
 */
export async function billingGetGithubPackagesBillingUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<PackagesBillingUsage> {
  const req = await ctx.createRequest({
    path: '/users/{username}/settings/billing/packages',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get shared storage billing for a user
 * Gets the estimated paid and estimated total storage used for GitHub Actions and GitHub Packages.
 *
 * Paid minutes only
 * apply to packages stored for private repositories. For more information, see "[Managing billing for GitHub
 * Packages](https://docs.github.com/github/setting-up-and-managing-billing-and-payments-on-github/managing-billing-for-github-packages)."
 *
 * OAuth
 * app tokens and personal access tokens (classic) need the `user` scope to use this endpoint.
 * Learn more at {@link https://docs.github.com/rest/billing/billing#get-shared-storage-billing-for-a-user}
 * Tags: billing
 */
export async function billingGetSharedStorageBillingUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
  },
  opts?: FetcherData,
): Promise<CombinedBillingUsage> {
  const req = await ctx.createRequest({
    path: '/users/{username}/settings/billing/shared-storage',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List social accounts for a user
 * Lists social media accounts for a user. This endpoint is accessible by anyone.
 * Learn more at {@link https://docs.github.com/rest/users/social-accounts#list-social-accounts-for-a-user}
 * Tags: users
 */
export async function usersListSocialAccountsForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SocialAccount[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/social_accounts',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * List SSH signing keys for a user
 * Lists the SSH signing keys for a user. This operation is accessible by anyone.
 * Learn more at {@link https://docs.github.com/rest/users/ssh-signing-keys#list-ssh-signing-keys-for-a-user}
 * Tags: users
 */
export async function usersListSshSigningKeysForUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<SshSigningKey[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/ssh_signing_keys',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': { transforms: { date: [[['loop'], ['ref', $date_SshSigningKey]]] } },
  });
}
/**
 * List repositories starred by a user
 * Lists repositories a user has starred.
 *
 * This endpoint supports the following custom media types. For more information,
 * see "[Media types](https://docs.github.com/rest/using-the-rest-api/getting-started-with-the-rest-api#media-types)."
 *
 * -
 * **`application/vnd.github.star+json`**: Includes a timestamp of when the star was created.
 * Learn more at {@link https://docs.github.com/rest/activity/starring#list-repositories-starred-by-a-user}
 * Tags: activity
 */
export async function activityListReposStarredByUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    sort?: 'created' | 'updated';
    direction?: 'asc' | 'desc';
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<StarredRepository[] | Repository[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/starred',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['sort', 'direction', 'per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: {
        date: [
          [
            [
              'select',
              [
                [['loop'], ['ref', $date_StarredRepository]],
                [['loop'], ['ref', $date_Repository]],
              ],
            ],
          ],
        ],
      },
    },
  });
}
/**
 * List repositories watched by a user
 * Lists repositories a user is watching.
 * Learn more at {@link https://docs.github.com/rest/activity/watching#list-repositories-watched-by-a-user}
 * Tags: activity
 */
export async function activityListReposWatchedByUser<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {
    username: string;
    per_page?: number;
    page?: number;
  },
  opts?: FetcherData,
): Promise<MinimalRepository[]> {
  const req = await ctx.createRequest({
    path: '/users/{username}/subscriptions',
    params,
    method: r.HttpMethod.GET,
    queryParams: ['per_page', 'page'],
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {
    '200': {
      transforms: { date: [[['loop'], ['ref', $date_MinimalRepository]]] },
    },
  });
}
/**
 * Get all API versions
 * Get all supported GitHub API versions.
 * Learn more at {@link https://docs.github.com/rest/meta/meta#get-all-api-versions}
 * Tags: meta
 */
export async function metaGetAllVersions<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<string[]> {
  const req = await ctx.createRequest({
    path: '/versions',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
/**
 * Get the Zen of GitHub
 * Get a random sentence from the Zen of GitHub
 * Learn more at {@link https://docs.github.com/rest/meta/meta#get-the-zen-of-github}
 * Tags: meta
 */
export async function metaGetZen<FetcherData>(
  ctx: r.Context<AuthMethods, FetcherData>,
  params: {},
  opts?: FetcherData,
): Promise<string> {
  const req = await ctx.createRequest({
    path: '/zen',
    params,
    method: r.HttpMethod.GET,
  });
  const res = await ctx.sendRequest(req, opts);
  return ctx.handleResponse(res, {});
}
