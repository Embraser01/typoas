// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create full specs should generate client 1`] = `
"import * as runtime from \\"@typoas/runtime\\";
class PetStoreClient {
    constructor(private server: runtime.BaseServerConfiguration, private http: runtime.HttpLibrary, private resolver: runtime.SchemaRefResolver) { }
    async updatePet(params: {}, body: Pet): Promise<Pet> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet', params, true), runtime.HttpMethod.PUT);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        requestContext.setBody(JSON.stringify(body));
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/Pet\\"}'), this.resolver) as Pet;
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        if (runtime.isCodeInRange(\\"404\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        if (runtime.isCodeInRange(\\"405\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async addPet(params: {}, body: Pet): Promise<Pet> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet', params, true), runtime.HttpMethod.POST);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        requestContext.setBody(JSON.stringify(body));
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/Pet\\"}'), this.resolver) as Pet;
        if (runtime.isCodeInRange(\\"405\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async findPetsByStatus(params: {
        status: string;
    }): Promise<Pet[]> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet/findByStatus', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        if (params.status !== undefined)
            requestContext.setQueryParam(\\"status\\", params.status);
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"type\\":\\"array\\",\\"items\\":{\\"$ref\\":\\"#/components/schemas/Pet\\"}}'), this.resolver) as Pet[];
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async findPetsByTags(params: {
        tags: string[];
    }): Promise<Pet[]> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet/findByTags', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        if (params.tags !== undefined)
            requestContext.setQueryParam(\\"tags\\", params.tags);
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"type\\":\\"array\\",\\"items\\":{\\"$ref\\":\\"#/components/schemas/Pet\\"}}'), this.resolver) as Pet[];
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async getPetById(params: {
        petId: number;
    }): Promise<Pet> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet/{petId}', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/Pet\\"}'), this.resolver) as Pet;
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        if (runtime.isCodeInRange(\\"404\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async updatePetWithForm(params: {
        petId: number;
        name: string;
        status: string;
    }): Promise<any> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet/{petId}', params, true), runtime.HttpMethod.POST);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        if (params.name !== undefined)
            requestContext.setQueryParam(\\"name\\", params.name);
        if (params.status !== undefined)
            requestContext.setQueryParam(\\"status\\", params.status);
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"405\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async deletePet(params: {
        api_key: string;
        petId: number;
    }): Promise<any> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet/{petId}', params, true), runtime.HttpMethod.DELETE);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        if (params.api_key !== undefined)
            requestContext.setHeaderParam(\\"api_key\\", params.api_key);
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async uploadFile(params: {
        petId: number;
        additionalMetadata: string;
    }, body: any): Promise<ApiResponse> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/pet/{petId}/uploadImage', params, true), runtime.HttpMethod.POST);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        if (params.additionalMetadata !== undefined)
            requestContext.setQueryParam(\\"additionalMetadata\\", params.additionalMetadata);
        requestContext.setBody(JSON.stringify(body));
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/ApiResponse\\"}'), this.resolver) as ApiResponse;
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async getInventory(params: {}): Promise<any & {
        [key: string]: number;
    }> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/store/inventory', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"type\\":\\"object\\",\\"additionalProperties\\":{\\"type\\":\\"integer\\",\\"format\\":\\"int32\\"}}'), this.resolver) as any & {
                [key: string]: number;
            };
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async placeOrder(params: {}, body: Order): Promise<Order> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/store/order', params, true), runtime.HttpMethod.POST);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        requestContext.setBody(JSON.stringify(body));
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/Order\\"}'), this.resolver) as Order;
        if (runtime.isCodeInRange(\\"405\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async getOrderById(params: {
        orderId: number;
    }): Promise<Order> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/store/order/{orderId}', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/Order\\"}'), this.resolver) as Order;
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        if (runtime.isCodeInRange(\\"404\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async deleteOrder(params: {
        orderId: number;
    }): Promise<any> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/store/order/{orderId}', params, true), runtime.HttpMethod.DELETE);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        if (runtime.isCodeInRange(\\"404\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async createUser(params: {}, body: User): Promise<User> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/user', params, true), runtime.HttpMethod.POST);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        requestContext.setBody(JSON.stringify(body));
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"default\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/User\\"}'), this.resolver) as User;
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async createUsersWithListInput(params: {}, body: User[]): Promise<User> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/user/createWithList', params, true), runtime.HttpMethod.POST);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        requestContext.setBody(JSON.stringify(body));
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/User\\"}'), this.resolver) as User;
        if (runtime.isCodeInRange(\\"default\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async loginUser(params: {
        username: string;
        password: string;
    }): Promise<string> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/user/login', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        if (params.username !== undefined)
            requestContext.setQueryParam(\\"username\\", params.username);
        if (params.password !== undefined)
            requestContext.setQueryParam(\\"password\\", params.password);
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"type\\":\\"string\\"}'), this.resolver) as string;
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async logoutUser(params: {}): Promise<any> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/user/logout', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"default\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any;
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async getUserByName(params: {
        username: string;
    }): Promise<User> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/user/{username}', params, true), runtime.HttpMethod.GET);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"200\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('{\\"$ref\\":\\"#/components/schemas/User\\"}'), this.resolver) as User;
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        if (runtime.isCodeInRange(\\"404\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async updateUser(params: {
        username: string;
    }, body: User): Promise<any> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/user/{username}', params, true), runtime.HttpMethod.PUT);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        requestContext.setBody(JSON.stringify(body));
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"default\\", response.httpStatusCode))
            return runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any;
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
    async deleteUser(params: {
        username: string;
    }): Promise<any> {
        const requestContext = this.server.makeRequestContext(runtime.applyTemplating('/user/{username}', params, true), runtime.HttpMethod.DELETE);
        requestContext.setHeaderParam('Accept', 'application/json, */*;q=0.8');
        const response = await this.http.send(requestContext);
        if (runtime.isCodeInRange(\\"400\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        if (runtime.isCodeInRange(\\"404\\", response.httpStatusCode))
            throw new runtime.ApiException<any>(response.httpStatusCode, runtime.applyTransforms(await response.body.json(), JSON.parse('\\"\\"'), this.resolver) as any);
        throw new runtime.ApiException<string>(response.httpStatusCode, 'Unknown API Status Code!');
    }
}
"
`;
