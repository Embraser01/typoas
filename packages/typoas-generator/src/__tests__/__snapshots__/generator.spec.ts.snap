// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create full specs should generate client 1`] = `
"import * as r from '@typoas/runtime';
export type Order = {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: Date;
    status?: 'placed' | 'approved' | 'delivered';
    complete?: boolean;
};
export type Customer = {
    id?: number;
    username?: string;
    address?: Address[];
};
export type Address = {
    street?: string;
    city?: string;
    state?: string;
    zip?: string;
};
export type Category = {
    id?: number;
    name?: string;
};
export type User = {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    userStatus?: number;
};
export type Tag = {
    id?: number;
    name?: string;
};
export type Pet = {
    id?: number;
    name: string;
    category?: Category;
    photoUrls: string[];
    tags?: Tag[];
    status?: 'available' | 'pending' | 'sold';
};
export type ApiResponse = {
    code?: number;
    type?: string;
    message?: string;
};
export type AuthMethods = {
    petstore_auth?: r.OAuth2SecurityAuthentication;
    api_key?: r.ApiKeySecurityAuthentication;
};
export function configureAuth(params?: r.CreateContextParams<AuthMethods>[\\"authProviders\\"]): AuthMethods {
    return { petstore_auth: params?.petstore_auth && new r.OAuth2SecurityAuthentication({}, params.petstore_auth), api_key: params?.api_key && new r.ApiKeySecurityAuthentication({ name: 'api_key', in: 'header' }, params.api_key) };
}
export function createContext(params?: r.CreateContextParams<AuthMethods>): r.Context<AuthMethods> { return new r.Context<AuthMethods>({
    resolver: new r.RefResolver({
        Order: {
            date: [[[r.TransformType.ACCESS, \\"shipDate\\"], [r.TransformType.THIS]]]
        }
    }),
    serverConfiguration: new r.ServerConfiguration('/api/v3', {}),
    authMethods: configureAuth(params?.authProviders),
    ...params
}); }
export async function updatePet(ctx: r.Context<AuthMethods>, params: {}, body: Pet): Promise<Pet> {
    const req = await ctx.createRequest({
        path: '/pet',
        params,
        method: r.HttpMethod.PUT,
        body,
        auth: [\\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"Pet\\"]]] } },
        '400': {},
        '404': {},
        '405': {}
    });
}
export async function addPet(ctx: r.Context<AuthMethods>, params: {}, body: Pet): Promise<Pet> {
    const req = await ctx.createRequest({
        path: '/pet',
        params,
        method: r.HttpMethod.POST,
        body,
        auth: [\\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"Pet\\"]]] } },
        '405': {}
    });
}
export async function findPetsByStatus(ctx: r.Context<AuthMethods>, params: {
    status?: 'available' | 'pending' | 'sold';
}): Promise<Pet[]> {
    const req = await ctx.createRequest({
        path: '/pet/findByStatus',
        params,
        method: r.HttpMethod.GET,
        queryParams: [
            \\"status\\"
        ],
        auth: [\\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.LOOP], [r.TransformType.REF, \\"Pet\\"]]] } },
        '400': {}
    });
}
export async function findPetsByTags(ctx: r.Context<AuthMethods>, params: {
    tags?: string[];
}): Promise<Pet[]> {
    const req = await ctx.createRequest({
        path: '/pet/findByTags',
        params,
        method: r.HttpMethod.GET,
        queryParams: [
            \\"tags\\"
        ],
        auth: [\\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.LOOP], [r.TransformType.REF, \\"Pet\\"]]] } },
        '400': {}
    });
}
export async function getPetById(ctx: r.Context<AuthMethods>, params: {
    petId: number;
}): Promise<Pet> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}',
        params,
        method: r.HttpMethod.GET,
        auth: [\\"api_key\\", \\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"Pet\\"]]] } },
        '400': {},
        '404': {}
    });
}
export async function updatePetWithForm(ctx: r.Context<AuthMethods>, params: {
    petId: number;
    name?: string;
    status?: string;
}): Promise<unknown> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}',
        params,
        method: r.HttpMethod.POST,
        queryParams: [
            \\"name\\",
            \\"status\\"
        ],
        auth: [\\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '405': {}
    });
}
export async function deletePet(ctx: r.Context<AuthMethods>, params: {
    api_key?: string;
    petId: number;
}): Promise<unknown> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}',
        params,
        method: r.HttpMethod.DELETE,
        auth: [\\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '400': {}
    });
}
export async function uploadFile(ctx: r.Context<AuthMethods>, params: {
    petId: number;
    additionalMetadata?: string;
}, body: any): Promise<ApiResponse> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}/uploadImage',
        params,
        method: r.HttpMethod.POST,
        body,
        queryParams: [
            \\"additionalMetadata\\"
        ],
        auth: [\\"petstore_auth\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"ApiResponse\\"]]] } }
    });
}
export async function getInventory(ctx: r.Context<AuthMethods>, params: {}): Promise<{
    [key: string]: number;
}> {
    const req = await ctx.createRequest({
        path: '/store/inventory',
        params,
        method: r.HttpMethod.GET,
        auth: [\\"api_key\\"]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {});
}
export async function placeOrder(ctx: r.Context<AuthMethods>, params: {}, body: Order): Promise<Order> {
    const req = await ctx.createRequest({
        path: '/store/order',
        params,
        method: r.HttpMethod.POST,
        body
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"Order\\"]]] } },
        '405': {}
    });
}
export async function getOrderById(ctx: r.Context<AuthMethods>, params: {
    orderId: number;
}): Promise<Order> {
    const req = await ctx.createRequest({
        path: '/store/order/{orderId}',
        params,
        method: r.HttpMethod.GET
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"Order\\"]]] } },
        '400': {},
        '404': {}
    });
}
export async function deleteOrder(ctx: r.Context<AuthMethods>, params: {
    orderId: number;
}): Promise<unknown> {
    const req = await ctx.createRequest({
        path: '/store/order/{orderId}',
        params,
        method: r.HttpMethod.DELETE
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '400': {},
        '404': {}
    });
}
export async function createUser(ctx: r.Context<AuthMethods>, params: {}, body: User): Promise<User> {
    const req = await ctx.createRequest({
        path: '/user',
        params,
        method: r.HttpMethod.POST,
        body
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        'default': { transforms: { date: [[[r.TransformType.REF, \\"User\\"]]] } }
    });
}
export async function createUsersWithListInput(ctx: r.Context<AuthMethods>, params: {}, body: User[]): Promise<User> {
    const req = await ctx.createRequest({
        path: '/user/createWithList',
        params,
        method: r.HttpMethod.POST,
        body
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"User\\"]]] } },
        'default': {}
    });
}
export async function loginUser(ctx: r.Context<AuthMethods>, params: {
    username?: string;
    password?: string;
}): Promise<string> {
    const req = await ctx.createRequest({
        path: '/user/login',
        params,
        method: r.HttpMethod.GET,
        queryParams: [
            \\"username\\",
            \\"password\\"
        ]
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '400': {}
    });
}
export async function logoutUser(ctx: r.Context<AuthMethods>, params: {}): Promise<any> {
    const req = await ctx.createRequest({
        path: '/user/logout',
        params,
        method: r.HttpMethod.GET
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        'default': {}
    });
}
export async function getUserByName(ctx: r.Context<AuthMethods>, params: {
    username: string;
}): Promise<User> {
    const req = await ctx.createRequest({
        path: '/user/{username}',
        params,
        method: r.HttpMethod.GET
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[[r.TransformType.REF, \\"User\\"]]] } },
        '400': {},
        '404': {}
    });
}
export async function updateUser(ctx: r.Context<AuthMethods>, params: {
    username: string;
}, body: User): Promise<any> {
    const req = await ctx.createRequest({
        path: '/user/{username}',
        params,
        method: r.HttpMethod.PUT,
        body
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        'default': {}
    });
}
export async function deleteUser(ctx: r.Context<AuthMethods>, params: {
    username: string;
}): Promise<unknown> {
    const req = await ctx.createRequest({
        path: '/user/{username}',
        params,
        method: r.HttpMethod.DELETE
    });
    const res = await ctx.sendRequest(req);
    return ctx.handleResponse(res, {
        '400': {},
        '404': {}
    });
}
"
`;

exports[`create full specs should generate enums if possible 1`] = `
"import * as r from '@typoas/runtime';
export type Order = {
    id?: number;
    petId?: number;
    shipDate?: Date;
    status?: 'placed' | 'approved' | 'delivered';
    complete?: boolean;
};
export enum PetStatus {
    AVAILABLE = 'available',
    PENDING = 'pending',
    SOLD = 'sold'
}
export type Pet = {
    id?: number;
    name: string;
    photoUrls: string[];
    status?: PetStatus;
};
export type AuthMethods = {};
export function createContext(params?: r.CreateContextParams<AuthMethods>): r.Context<AuthMethods> { return new r.Context<AuthMethods>({
    resolver: new r.RefResolver({
        Order: {
            date: [[[r.TransformType.ACCESS, \\"shipDate\\"], [r.TransformType.THIS]]]
        }
    }),
    serverConfiguration: new r.ServerConfiguration('/api/v3', {}),
    authMethods: {},
    ...params
}); }
"
`;
