// Jest Snapshot v1, https://goo.gl/fbAQLP

exports[`create full specs should generate client 1`] = `
"import * as r from '@typoas/runtime';
export type Order = {
    id?: number;
    petId?: number;
    quantity?: number;
    shipDate?: Date;
    status?: 'placed' | 'approved' | 'delivered';
    complete?: boolean;
};
export type Customer = {
    id?: number;
    username?: string;
    address?: Address[];
};
export type Address = {
    street?: string;
    city?: string;
    state?: string;
    zip?: string;
};
export type Category = {
    id?: number;
    name?: string;
};
export type User = {
    id?: number;
    username?: string;
    firstName?: string;
    lastName?: string;
    email?: string;
    password?: string;
    phone?: string;
    userStatus?: number;
};
export type Tag = {
    id?: number;
    name?: string;
};
export type Pet = {
    id?: number;
    name: string;
    category?: Category;
    photoUrls: string[];
    tags?: Tag[];
    status?: 'available' | 'pending' | 'sold';
};
export type ApiResponse = {
    code?: number;
    type?: string;
    message?: string;
};
const $date_Order = (): r.TransformField[] => [[['access', 'shipDate'], ['this']]];
export type AuthMethods = {
    petstore_auth?: r.OAuth2SecurityAuthentication;
    api_key?: r.ApiKeySecurityAuthentication;
};
export function configureAuth(params?: r.CreateContextParams<AuthMethods>['authProviders']): AuthMethods {
    return { petstore_auth: params?.petstore_auth && new r.OAuth2SecurityAuthentication({}, params.petstore_auth), api_key: params?.api_key && new r.ApiKeySecurityAuthentication({ name: 'api_key', in: 'header' }, params.api_key) };
}
export function createContext<FetcherData>(params?: r.CreateContextParams<AuthMethods, FetcherData>): r.Context<AuthMethods, FetcherData> { return new r.Context<AuthMethods, FetcherData>({
    serverConfiguration: new r.ServerConfiguration('/api/v3', {}),
    authMethods: configureAuth(params?.authProviders),
    ...params
}); }
export async function updatePet<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {}, body: Pet, opts?: FetcherData): Promise<r.StatusResponse<200, Pet> | r.StatusResponse<400, unknown> | r.StatusResponse<404, unknown> | r.StatusResponse<405, unknown>> {
    const req = await ctx.createRequest({
        path: '/pet',
        params,
        method: r.HttpMethod.PUT,
        body,
        auth: ['petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function addPet<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {}, body: Pet, opts?: FetcherData): Promise<r.StatusResponse<200, Pet> | r.StatusResponse<405, unknown>> {
    const req = await ctx.createRequest({
        path: '/pet',
        params,
        method: r.HttpMethod.POST,
        body,
        auth: ['petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function findPetsByStatus<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    status?: 'available' | 'pending' | 'sold';
}, opts?: FetcherData): Promise<r.StatusResponse<200, Pet[]> | r.StatusResponse<400, unknown>> {
    const req = await ctx.createRequest({
        path: '/pet/findByStatus',
        params,
        method: r.HttpMethod.GET,
        queryParams: [
            'status'
        ],
        auth: ['petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function findPetsByTags<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    tags?: string[];
}, opts?: FetcherData): Promise<r.StatusResponse<200, Pet[]> | r.StatusResponse<400, unknown>> {
    const req = await ctx.createRequest({
        path: '/pet/findByTags',
        params,
        method: r.HttpMethod.GET,
        queryParams: [
            'tags'
        ],
        auth: ['petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function getPetById<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    petId: number;
}, opts?: FetcherData): Promise<r.StatusResponse<200, Pet> | r.StatusResponse<400, unknown> | r.StatusResponse<404, unknown>> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}',
        params,
        method: r.HttpMethod.GET,
        auth: ['api_key', 'petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function updatePetWithForm<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    petId: number;
    name?: string;
    status?: string;
}, opts?: FetcherData): Promise<r.StatusResponse<405, unknown>> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}',
        params,
        method: r.HttpMethod.POST,
        queryParams: [
            'name',
            'status'
        ],
        auth: ['petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function deletePet<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    api_key?: string;
    petId: number;
}, opts?: FetcherData): Promise<r.StatusResponse<400, unknown>> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}',
        params,
        method: r.HttpMethod.DELETE,
        auth: ['petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function uploadFile<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    petId: number;
    additionalMetadata?: string;
}, body: Blob, opts?: FetcherData): Promise<r.StatusResponse<200, ApiResponse>> {
    const req = await ctx.createRequest({
        path: '/pet/{petId}/uploadImage',
        params,
        method: r.HttpMethod.POST,
        body,
        queryParams: [
            'additionalMetadata'
        ],
        auth: ['petstore_auth']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function getInventory<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {}, opts?: FetcherData): Promise<r.StatusResponse<200, {
    [key: string]: number;
}>> {
    const req = await ctx.createRequest({
        path: '/store/inventory',
        params,
        method: r.HttpMethod.GET,
        auth: ['api_key']
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function placeOrder<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {}, body: Order, opts?: FetcherData): Promise<r.StatusResponse<200, Order> | r.StatusResponse<405, unknown>> {
    const req = await ctx.createRequest({
        path: '/store/order',
        params,
        method: r.HttpMethod.POST,
        body
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[['ref', $date_Order]]] } }
    }, true);
}
export async function getOrderById<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    orderId: number;
}, opts?: FetcherData): Promise<r.StatusResponse<200, Order> | r.StatusResponse<400, unknown> | r.StatusResponse<404, unknown>> {
    const req = await ctx.createRequest({
        path: '/store/order/{orderId}',
        params,
        method: r.HttpMethod.GET
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {
        '200': { transforms: { date: [[['ref', $date_Order]]] } }
    }, true);
}
export async function deleteOrder<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    orderId: number;
}, opts?: FetcherData): Promise<r.StatusResponse<400, unknown> | r.StatusResponse<404, unknown>> {
    const req = await ctx.createRequest({
        path: '/store/order/{orderId}',
        params,
        method: r.HttpMethod.DELETE
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function createUser<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {}, body: User, opts?: FetcherData): Promise<r.StatusResponse<'default', User>> {
    const req = await ctx.createRequest({
        path: '/user',
        params,
        method: r.HttpMethod.POST,
        body
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function createUsersWithListInput<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {}, body: User[], opts?: FetcherData): Promise<r.StatusResponse<200, User> | r.StatusResponse<'default', unknown>> {
    const req = await ctx.createRequest({
        path: '/user/createWithList',
        params,
        method: r.HttpMethod.POST,
        body
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function loginUser<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    username?: string;
    password?: string;
}, opts?: FetcherData): Promise<r.StatusResponse<200, string> | r.StatusResponse<400, unknown>> {
    const req = await ctx.createRequest({
        path: '/user/login',
        params,
        method: r.HttpMethod.GET,
        queryParams: [
            'username',
            'password'
        ]
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function logoutUser<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {}, opts?: FetcherData): Promise<r.StatusResponse<'default', unknown>> {
    const req = await ctx.createRequest({
        path: '/user/logout',
        params,
        method: r.HttpMethod.GET
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function getUserByName<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    username: string;
}, opts?: FetcherData): Promise<r.StatusResponse<200, User> | r.StatusResponse<400, unknown> | r.StatusResponse<404, unknown>> {
    const req = await ctx.createRequest({
        path: '/user/{username}',
        params,
        method: r.HttpMethod.GET
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function updateUser<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    username: string;
}, body: User, opts?: FetcherData): Promise<r.StatusResponse<'default', unknown>> {
    const req = await ctx.createRequest({
        path: '/user/{username}',
        params,
        method: r.HttpMethod.PUT,
        body
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
export async function deleteUser<FetcherData>(ctx: r.Context<AuthMethods, FetcherData>, params: {
    username: string;
}, opts?: FetcherData): Promise<r.StatusResponse<400, unknown> | r.StatusResponse<404, unknown>> {
    const req = await ctx.createRequest({
        path: '/user/{username}',
        params,
        method: r.HttpMethod.DELETE
    });
    const res = await ctx.sendRequest(req, opts);
    return ctx.handleResponse(res, {}, true);
}
"
`;

exports[`create full specs should generate enums if possible 1`] = `
"import * as r from '@typoas/runtime';
export type Order = {
    id?: number;
    petId?: number;
    shipDate?: Date;
    status?: 'placed' | 'approved' | 'delivered';
    complete?: boolean;
};
export enum PetStatus {
    AVAILABLE = 'available',
    PENDING = 'pending',
    SOLD = 'sold'
}
export type Pet = {
    id?: number;
    name: string;
    photoUrls: string[];
    status?: PetStatus;
};
const $date_Order = (): r.TransformField[] => [[['access', 'shipDate'], ['this']]];
export type AuthMethods = {};
export function createContext<FetcherData>(params?: r.CreateContextParams<AuthMethods, FetcherData>): r.Context<AuthMethods, FetcherData> { return new r.Context<AuthMethods, FetcherData>({
    serverConfiguration: new r.ServerConfiguration('/api/v3', {}),
    authMethods: {},
    ...params
}); }
"
`;
