/**
 * Based on https://gist.github.com/mathiasbynens/6334847 by @mathias
 */
import { writeFile } from 'node:fs/promises';
import regenerate from 'regenerate';

// Which Unicode version should be used
const version = '9.0.0';

// Set up a shorthand function to import Unicode data.
async function get(what: string): Promise<number[]> {
  const { default: codePoints } = (await import(
    `@unicode/unicode-${version}/${what}/code-points.js`
  )) as { default: number[] };
  return codePoints;
}

async function main() {
  // Get the Unicode properties needed to construct the ES6 regex.
  const ID_Start = await get('Binary_Property/ID_Start');
  const ID_Continue = await get('Binary_Property/ID_Continue');
  const Other_ID_Start = await get('Binary_Property/Other_ID_Start');

  // http://ecma-international.org/ecma-262/6.0/#sec-identifier-names-static-semantics-early-errors
  // http://unicode.org/reports/tr31/#Default_Identifier_Syntax
  // https://bugs.ecmascript.org/show_bug.cgi?id=2717#c0
  const identifierStart = regenerate(ID_Start)
    // Note: this already includes `Other_ID_Start`. http://git.io/wRCAfQ
    .add('$', '_');
  const identifierPart = regenerate(ID_Continue)
    // Note: `ID_Continue` already includes `Other_ID_Continue`. http://git.io/wRCAfQ
    .add(Other_ID_Start)
    .add('$', '_', '\u200C', '\u200D');

  const fileContent = `/* eslint-disable no-misleading-character-class,no-useless-escape */
// This file is generated by scripts/generate-identifier-regexp.ts
// Do not edit it manually.

export const identifierStartRegexp = 
  /${identifierStart.toString()}/;
export const identifierPartRegexp = 
  /${identifierPart.toString()}/;

export const es6IdentifierRegexp = 
  /^(?:${identifierStart.toString()})(?:${identifierPart.toString()})*$/;
`;

  await writeFile('./src/generator/utils/identifier-regexps.ts', fileContent);
}

void main();
